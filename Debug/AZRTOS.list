
AZRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dc08  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f74  0801deb8  0801deb8  0002deb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08021e2c  08021e2c  00031e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08021fd4  08021fd4  00031fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000c  08021fec  08021fec  00031fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000014  08021ff8  08021ff8  00031ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0802200c  0802200c  0003200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  24000000  08022014  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 TouchGFX_Framebuffer 000bf400  240000e0  080220f4  000400e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004b08  240bf4e0  080e14f4  000ff4e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240c3fe8  080e14f4  00103fe8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000ff4e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0008d234  00000000  00000000  000ff50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001110f  00000000  00000000  0018c742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f20  00000000  00000000  0019d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002908  00000000  00000000  001a0778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ef9d  00000000  00000000  001a3080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fc4b  00000000  00000000  001e201d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00166265  00000000  00000000  00221c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  00387ecd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c2d0  00000000  00000000  00387f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240bf4e0 	.word	0x240bf4e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801dea0 	.word	0x0801dea0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240bf4e4 	.word	0x240bf4e4
 80002ec:	0801dea0 	.word	0x0801dea0

080002f0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002f0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002f2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002f6:	4919      	ldr	r1, [pc, #100]	; (800035c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002f8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002fc:	4818      	ldr	r0, [pc, #96]	; (8000360 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002fe:	4917      	ldr	r1, [pc, #92]	; (800035c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000300:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000302:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000304:	4817      	ldr	r0, [pc, #92]	; (8000364 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000306:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000308:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800030c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800030e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000312:	4915      	ldr	r1, [pc, #84]	; (8000368 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000314:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000316:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800031a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800031c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000320:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000324:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000328:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800032c:	490f      	ldr	r1, [pc, #60]	; (800036c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800032e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000332:	4770      	bx	lr

08000334 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000334:	f7ff bffe 	b.w	8000334 <__tx_BadHandler>

08000338 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000338:	f7ff bffe 	b.w	8000338 <__tx_HardfaultHandler>

0800033c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800033c:	f7ff bffe 	b.w	800033c <__tx_SVCallHandler>

08000340 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000340:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000342:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000346:	4770      	bx	lr

08000348 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000348:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800034a:	f000 f891 	bl	8000470 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800034e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000352:	4770      	bx	lr

08000354 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_NMIHandler>

08000358 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800035c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000360:	240c0794 	.word	0x240c0794
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000364:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000368:	002ab97f 	.word	0x002ab97f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800036c:	40ff0000 	.word	0x40ff0000

08000370 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000370:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000374:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000376:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000378:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800037c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000380:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000384:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000386:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800038a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800038e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000392:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000396:	f3bf 8f6f 	isb	sy

0800039a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800039a:	e7fe      	b.n	800039a <__tx_wait_here>

0800039c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800039c:	4821      	ldr	r0, [pc, #132]	; (8000424 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800039e:	4a22      	ldr	r2, [pc, #136]	; (8000428 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003a0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003a4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003a6:	b191      	cbz	r1, 80003ce <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003a8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003aa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ae:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003b6:	d101      	bne.n	80003bc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003b8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003bc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003bc:	4c1b      	ldr	r4, [pc, #108]	; (800042c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003be:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003c2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003c4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003c8:	b10d      	cbz	r5, 80003ce <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ca:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003cc:	6023      	str	r3, [r4, #0]

080003ce <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80003ce:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003d0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003d2:	b1b1      	cbz	r1, 8000402 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003d4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i

080003d8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003d8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003da:	4c14      	ldr	r4, [pc, #80]	; (800042c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003dc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003de:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003e2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003e4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003ea:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003f2:	d101      	bne.n	80003f8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003f4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003f8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003f8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003fc:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000400:	4770      	bx	lr

08000402 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000402:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000404:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000406:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000408:	b909      	cbnz	r1, 800040e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800040c:	e7f9      	b.n	8000402 <__tx_ts_wait>

0800040e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800040e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000412:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000416:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800041a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800041c:	e7dc      	b.n	80003d8 <__tx_ts_restore>

0800041e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800041e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000420:	240c0830 	.word	0x240c0830
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000424:	240c0798 	.word	0x240c0798
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000428:	240c079c 	.word	0x240c079c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800042c:	240c0d9c 	.word	0x240c0d9c

08000430 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000430:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000432:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000436:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800043a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800043e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000440:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000444:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000446:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000448:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800044a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800044c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800044e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000450:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000452:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000454:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000456:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000458:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800045c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000462:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000464:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800046a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800046c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800046e:	4770      	bx	lr

08000470 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000470:	4922      	ldr	r1, [pc, #136]	; (80004fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000472:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000474:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000478:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800047c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800047e:	b13a      	cbz	r2, 8000490 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000480:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000484:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000486:	b91a      	cbnz	r2, 8000490 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800048a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800048e:	6018      	str	r0, [r3, #0]

08000490 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	491d      	ldr	r1, [pc, #116]	; (8000508 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000492:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000494:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000496:	b122      	cbz	r2, 80004a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800049a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800049e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004a0:	e008      	b.n	80004b4 <__tx_timer_done>

080004a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004ac:	d101      	bne.n	80004b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ae:	4b19      	ldr	r3, [pc, #100]	; (8000514 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004b0:	6818      	ldr	r0, [r3, #0]

080004b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004b2:	6008      	str	r0, [r1, #0]

080004b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004b8:	b912      	cbnz	r2, 80004c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004ba:	4914      	ldr	r1, [pc, #80]	; (800050c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004be:	b1d0      	cbz	r0, 80004f6 <__tx_timer_nothing_expired>

080004c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004c4:	4911      	ldr	r1, [pc, #68]	; (800050c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004c8:	b108      	cbz	r0, 80004ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ca:	f007 fcb3 	bl	8007e34 <_tx_timer_expiration_process>

080004ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004d2:	b172      	cbz	r2, 80004f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004d4:	f007 fc20 	bl	8007d18 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004d8:	480f      	ldr	r0, [pc, #60]	; (8000518 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004dc:	b949      	cbnz	r1, 80004f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004e6:	480f      	ldr	r0, [pc, #60]	; (8000524 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004ee:	d000      	beq.n	80004f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004f0:	6002      	str	r2, [r0, #0]

080004f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004fc:	240c083c 	.word	0x240c083c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000500:	240c0d9c 	.word	0x240c0d9c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000504:	240c0840 	.word	0x240c0840
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000508:	240c08cc 	.word	0x240c08cc
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800050c:	240c08d0 	.word	0x240c08d0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000510:	240c08c8 	.word	0x240c08c8
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000514:	240c08c4 	.word	0x240c08c4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000518:	240c0830 	.word	0x240c0830
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800051c:	240c0798 	.word	0x240c0798
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000520:	240c079c 	.word	0x240c079c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000524:	e000ed04 	.word	0xe000ed04
	...

08000530 <memchr>:
 8000530:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000534:	2a10      	cmp	r2, #16
 8000536:	db2b      	blt.n	8000590 <memchr+0x60>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	d008      	beq.n	8000550 <memchr+0x20>
 800053e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000542:	3a01      	subs	r2, #1
 8000544:	428b      	cmp	r3, r1
 8000546:	d02d      	beq.n	80005a4 <memchr+0x74>
 8000548:	f010 0f07 	tst.w	r0, #7
 800054c:	b342      	cbz	r2, 80005a0 <memchr+0x70>
 800054e:	d1f6      	bne.n	800053e <memchr+0xe>
 8000550:	b4f0      	push	{r4, r5, r6, r7}
 8000552:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000556:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800055a:	f022 0407 	bic.w	r4, r2, #7
 800055e:	f07f 0700 	mvns.w	r7, #0
 8000562:	2300      	movs	r3, #0
 8000564:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000568:	3c08      	subs	r4, #8
 800056a:	ea85 0501 	eor.w	r5, r5, r1
 800056e:	ea86 0601 	eor.w	r6, r6, r1
 8000572:	fa85 f547 	uadd8	r5, r5, r7
 8000576:	faa3 f587 	sel	r5, r3, r7
 800057a:	fa86 f647 	uadd8	r6, r6, r7
 800057e:	faa5 f687 	sel	r6, r5, r7
 8000582:	b98e      	cbnz	r6, 80005a8 <memchr+0x78>
 8000584:	d1ee      	bne.n	8000564 <memchr+0x34>
 8000586:	bcf0      	pop	{r4, r5, r6, r7}
 8000588:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800058c:	f002 0207 	and.w	r2, r2, #7
 8000590:	b132      	cbz	r2, 80005a0 <memchr+0x70>
 8000592:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000596:	3a01      	subs	r2, #1
 8000598:	ea83 0301 	eor.w	r3, r3, r1
 800059c:	b113      	cbz	r3, 80005a4 <memchr+0x74>
 800059e:	d1f8      	bne.n	8000592 <memchr+0x62>
 80005a0:	2000      	movs	r0, #0
 80005a2:	4770      	bx	lr
 80005a4:	3801      	subs	r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	bf06      	itte	eq
 80005ac:	4635      	moveq	r5, r6
 80005ae:	3803      	subeq	r0, #3
 80005b0:	3807      	subne	r0, #7
 80005b2:	f015 0f01 	tst.w	r5, #1
 80005b6:	d107      	bne.n	80005c8 <memchr+0x98>
 80005b8:	3001      	adds	r0, #1
 80005ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005be:	bf02      	ittt	eq
 80005c0:	3001      	addeq	r0, #1
 80005c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005c6:	3001      	addeq	r0, #1
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	3801      	subs	r0, #1
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80005dc:	2334      	movs	r3, #52	; 0x34
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <tx_application_define+0x40>)
 80005e6:	490b      	ldr	r1, [pc, #44]	; (8000614 <tx_application_define+0x44>)
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <tx_application_define+0x48>)
 80005ea:	f007 fecd 	bl	8008388 <_txe_byte_pool_create>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d109      	bne.n	8000608 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <tx_application_define+0x48>)
 80005f6:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80005f8:	68b8      	ldr	r0, [r7, #8]
 80005fa:	f000 f80f 	bl	800061c <App_ThreadX_Init>
 80005fe:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d000      	beq.n	8000608 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000606:	e7fe      	b.n	8000606 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	240bf4fc 	.word	0x240bf4fc
 8000614:	0801deb8 	.word	0x0801deb8
 8000618:	240c04fc 	.word	0x240c04fc

0800061c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  MX_TouchGFX_Init(memory_ptr);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f008 fa7f 	bl	8008b30 <MX_TouchGFX_Init>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000640:	f006 f9cc 	bl	80069dc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 f936 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f812 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fa18 	bl	8000a88 <MX_GPIO_Init>
  MX_I2C4_Init();
 8000658:	f000 f8f2 	bl	8000840 <MX_I2C4_Init>
  MX_LTDC_Init();
 800065c:	f000 f930 	bl	80008c0 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000660:	f000 f9b0 	bl	80009c4 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 8000664:	f000 f890 	bl	8000788 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000668:	f000 f8b0 	bl	80007cc <MX_DMA2D_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800066c:	f008 fa58 	bl	8008b20 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000670:	f7ff ffe4 	bl	800063c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x2c>
	...

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	; 0x70
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000682:	224c      	movs	r2, #76	; 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f01c fbe6 	bl	801ce58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f01c fbe0 	bl	801ce58 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemClock_Config+0x108>)
 800069a:	f04f 32ff 	mov.w	r2, #4294967295
 800069e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006a2:	2004      	movs	r0, #4
 80006a4:	f003 faa6 	bl	8003bf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <SystemClock_Config+0x10c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a34      	ldr	r2, [pc, #208]	; (8000784 <SystemClock_Config+0x10c>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <SystemClock_Config+0x10c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c4:	bf00      	nop
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemClock_Config+0x10c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d2:	d1f8      	bne.n	80006c6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <SystemClock_Config+0x108>)
 80006d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d8:	f023 0303 	bic.w	r3, r3, #3
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <SystemClock_Config+0x108>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006e4:	2303      	movs	r3, #3
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006fe:	230c      	movs	r3, #12
 8000700:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000702:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000706:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800070c:	2303      	movs	r3, #3
 800070e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000714:	2304      	movs	r3, #4
 8000716:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000718:	2300      	movs	r3, #0
 800071a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	4618      	mov	r0, r3
 8000726:	f003 fabf 	bl	8003ca8 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000730:	f000 fbe6 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	233f      	movs	r3, #63	; 0x3f
 8000736:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2303      	movs	r3, #3
 800073a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000740:	2308      	movs	r3, #8
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000748:	2340      	movs	r3, #64	; 0x40
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800074c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2103      	movs	r1, #3
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fea8 	bl	80044b0 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000766:	f000 fbcb 	bl	8000f00 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800076a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f004 f853 	bl	800481c <HAL_RCC_MCOConfig>
}
 8000776:	bf00      	nop
 8000778:	3770      	adds	r7, #112	; 0x70
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	58024400 	.word	0x58024400
 8000784:	58024800 	.word	0x58024800

08000788 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_CRC_Init+0x3c>)
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <MX_CRC_Init+0x40>)
 8000790:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_CRC_Init+0x3c>)
 8000794:	2200      	movs	r2, #0
 8000796:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_CRC_Init+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007b2:	f001 f9bf 	bl	8001b34 <HAL_CRC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007bc:	f000 fba0 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	240c0530 	.word	0x240c0530
 80007c8:	40023000 	.word	0x40023000

080007cc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007d2:	4a1a      	ldr	r2, [pc, #104]	; (800083c <MX_DMA2D_Init+0x70>)
 80007d4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007de:	2202      	movs	r2, #2
 80007e0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_DMA2D_Init+0x6c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_DMA2D_Init+0x6c>)
 8000802:	2200      	movs	r2, #0
 8000804:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_DMA2D_Init+0x6c>)
 8000808:	2200      	movs	r2, #0
 800080a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_DMA2D_Init+0x6c>)
 800080e:	2200      	movs	r2, #0
 8000810:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_DMA2D_Init+0x6c>)
 8000814:	f001 fa78 	bl	8001d08 <HAL_DMA2D_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800081e:	f000 fb6f 	bl	8000f00 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000822:	2101      	movs	r1, #1
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_DMA2D_Init+0x6c>)
 8000826:	f001 fbe3 	bl	8001ff0 <HAL_DMA2D_ConfigLayer>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000830:	f000 fb66 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	240c0554 	.word	0x240c0554
 800083c:	52001000 	.word	0x52001000

08000840 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_I2C4_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_I2C4_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <MX_I2C4_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_I2C4_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C4_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_I2C4_Init+0x74>)
 800087c:	f001 fe54 	bl	8002528 <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 fb3b 	bl	8000f00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_I2C4_Init+0x74>)
 800088e:	f001 fedb 	bl	8002648 <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 fb32 	bl	8000f00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2C4_Init+0x74>)
 80008a0:	f001 ff1d 	bl	80026de <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fb29 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	240c05bc 	.word	0x240c05bc
 80008b8:	58001c00 	.word	0x58001c00
 80008bc:	c010151e 	.word	0xc010151e

080008c0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2234      	movs	r2, #52	; 0x34
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f01c fac3 	bl	801ce58 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008d4:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <MX_LTDC_Init+0x100>)
 80008d6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008d8:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008f2:	2228      	movs	r2, #40	; 0x28
 80008f4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008f8:	2209      	movs	r2, #9
 80008fa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_LTDC_Init+0xfc>)
 80008fe:	222a      	movs	r2, #42	; 0x2a
 8000900:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MX_LTDC_Init+0xfc>)
 8000904:	220b      	movs	r2, #11
 8000906:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_LTDC_Init+0xfc>)
 800090a:	f240 220a 	movw	r2, #522	; 0x20a
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_LTDC_Init+0xfc>)
 8000912:	f240 121b 	movw	r2, #283	; 0x11b
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_LTDC_Init+0xfc>)
 800091a:	f240 222a 	movw	r2, #554	; 0x22a
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_LTDC_Init+0xfc>)
 8000922:	f240 121d 	movw	r2, #285	; 0x11d
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_LTDC_Init+0xfc>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_LTDC_Init+0xfc>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_LTDC_Init+0xfc>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000940:	481e      	ldr	r0, [pc, #120]	; (80009bc <MX_LTDC_Init+0xfc>)
 8000942:	f001 ff19 	bl	8002778 <HAL_LTDC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800094c:	f000 fad8 	bl	8000f00 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000954:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000958:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800095e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000962:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000964:	2301      	movs	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000974:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000976:	2305      	movs	r3, #5
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800097e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000984:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 800098a:	23ff      	movs	r3, #255	; 0xff
 800098c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_LTDC_Init+0xfc>)
 80009a4:	f002 f870 	bl	8002a88 <HAL_LTDC_ConfigLayer>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80009ae:	f000 faa7 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3738      	adds	r7, #56	; 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	240c0608 	.word	0x240c0608
 80009c0:	50001000 	.word	0x50001000

080009c4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 80009dc:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <MX_OCTOSPI1_Init+0xbc>)
 80009de:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 80009ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009f2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 80009f6:	2220      	movs	r2, #32
 80009f8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a3e:	f002 fa33 	bl	8002ea8 <HAL_OSPI_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000a48:	f000 fa5a 	bl	8000f00 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_OCTOSPI1_Init+0xc0>)
 8000a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_OCTOSPI1_Init+0xb8>)
 8000a66:	f002 faeb 	bl	8003040 <HAL_OSPIM_Config>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 8000a70:	f000 fa46 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240c06b0 	.word	0x240c06b0
 8000a80:	52005000 	.word	0x52005000
 8000a84:	01000001 	.word	0x01000001

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b090      	sub	sp, #64	; 0x40
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a9e:	4bc0      	ldr	r3, [pc, #768]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000aa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa4:	4abe      	ldr	r2, [pc, #760]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aaa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aae:	4bbc      	ldr	r3, [pc, #752]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abc:	4bb8      	ldr	r3, [pc, #736]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000abe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac2:	4ab7      	ldr	r2, [pc, #732]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000acc:	4bb4      	ldr	r3, [pc, #720]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ada:	4bb1      	ldr	r3, [pc, #708]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000adc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae0:	4aaf      	ldr	r2, [pc, #700]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aea:	4bad      	ldr	r3, [pc, #692]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af8:	4ba9      	ldr	r3, [pc, #676]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000afa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afe:	4aa8      	ldr	r2, [pc, #672]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b08:	4ba5      	ldr	r3, [pc, #660]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4ba2      	ldr	r3, [pc, #648]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1c:	4aa0      	ldr	r2, [pc, #640]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b26:	4b9e      	ldr	r3, [pc, #632]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b34:	4b9a      	ldr	r3, [pc, #616]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3a:	4a99      	ldr	r2, [pc, #612]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b44:	4b96      	ldr	r3, [pc, #600]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b93      	ldr	r3, [pc, #588]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b58:	4a91      	ldr	r2, [pc, #580]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b62:	4b8f      	ldr	r3, [pc, #572]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b70:	4b8b      	ldr	r3, [pc, #556]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b76:	4a8a      	ldr	r2, [pc, #552]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b80:	4b87      	ldr	r3, [pc, #540]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b84      	ldr	r3, [pc, #528]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b94:	4a82      	ldr	r2, [pc, #520]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9e:	4b80      	ldr	r3, [pc, #512]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000ba0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bac:	4b7c      	ldr	r3, [pc, #496]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb2:	4a7b      	ldr	r2, [pc, #492]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000bb4:	f043 0320 	orr.w	r3, r3, #32
 8000bb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bbc:	4b78      	ldr	r3, [pc, #480]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000bbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b75      	ldr	r3, [pc, #468]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd0:	4a73      	ldr	r2, [pc, #460]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bda:	4b71      	ldr	r3, [pc, #452]	; (8000da0 <MX_GPIO_Init+0x318>)
 8000bdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	210e      	movs	r1, #14
 8000bec:	486d      	ldr	r0, [pc, #436]	; (8000da4 <MX_GPIO_Init+0x31c>)
 8000bee:	f001 fc5d 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f640 0104 	movw	r1, #2052	; 0x804
 8000bf8:	486b      	ldr	r0, [pc, #428]	; (8000da8 <MX_GPIO_Init+0x320>)
 8000bfa:	f001 fc57 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c04:	4869      	ldr	r0, [pc, #420]	; (8000dac <MX_GPIO_Init+0x324>)
 8000c06:	f001 fc51 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	4866      	ldr	r0, [pc, #408]	; (8000da8 <MX_GPIO_Init+0x320>)
 8000c10:	f001 fc4c 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2106      	movs	r1, #6
 8000c18:	4864      	ldr	r0, [pc, #400]	; (8000dac <MX_GPIO_Init+0x324>)
 8000c1a:	f001 fc47 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000c1e:	2330      	movs	r3, #48	; 0x30
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c30:	4619      	mov	r1, r3
 8000c32:	485c      	ldr	r0, [pc, #368]	; (8000da4 <MX_GPIO_Init+0x31c>)
 8000c34:	f001 fa8a 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000c38:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	4619      	mov	r1, r3
 8000c54:	4854      	ldr	r0, [pc, #336]	; (8000da8 <MX_GPIO_Init+0x320>)
 8000c56:	f001 fa79 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000c5a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	484c      	ldr	r0, [pc, #304]	; (8000da8 <MX_GPIO_Init+0x320>)
 8000c78:	f001 fa68 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000c7c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4845      	ldr	r0, [pc, #276]	; (8000db0 <MX_GPIO_Init+0x328>)
 8000c9a:	f001 fa57 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000c9e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	483e      	ldr	r0, [pc, #248]	; (8000db4 <MX_GPIO_Init+0x32c>)
 8000cbc:	f001 fa46 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000cc0:	230e      	movs	r3, #14
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4833      	ldr	r0, [pc, #204]	; (8000da4 <MX_GPIO_Init+0x31c>)
 8000cd8:	f001 fa38 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000cdc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482f      	ldr	r0, [pc, #188]	; (8000db8 <MX_GPIO_Init+0x330>)
 8000cfa:	f001 fa27 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000cfe:	f640 030c 	movw	r3, #2060	; 0x80c
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	4824      	ldr	r0, [pc, #144]	; (8000da8 <MX_GPIO_Init+0x320>)
 8000d18:	f001 fa18 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	481e      	ldr	r0, [pc, #120]	; (8000db0 <MX_GPIO_Init+0x328>)
 8000d38:	f001 fa08 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_GPIO_Init+0x31c>)
 8000d54:	f001 f9fa 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_GPIO_Init+0x324>)
 8000d76:	f001 f9e9 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000d7a:	f640 0306 	movw	r3, #2054	; 0x806
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_GPIO_Init+0x324>)
 8000d94:	f001 f9da 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8000d98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d9c:	e00e      	b.n	8000dbc <MX_GPIO_Init+0x334>
 8000d9e:	bf00      	nop
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58022000 	.word	0x58022000
 8000da8:	58021800 	.word	0x58021800
 8000dac:	58020000 	.word	0x58020000
 8000db0:	58020c00 	.word	0x58020c00
 8000db4:	58020800 	.word	0x58020800
 8000db8:	58021000 	.word	0x58021000
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	483d      	ldr	r0, [pc, #244]	; (8000ecc <MX_GPIO_Init+0x444>)
 8000dd6:	f001 f9b9 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4837      	ldr	r0, [pc, #220]	; (8000ed0 <MX_GPIO_Init+0x448>)
 8000df2:	f001 f9ab 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000df6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	4830      	ldr	r0, [pc, #192]	; (8000ed4 <MX_GPIO_Init+0x44c>)
 8000e14:	f001 f99a 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	4825      	ldr	r0, [pc, #148]	; (8000ecc <MX_GPIO_Init+0x444>)
 8000e36:	f001 f989 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0x448>)
 8000e56:	f001 f979 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <MX_GPIO_Init+0x450>)
 8000e70:	f001 f96c 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000e74:	23e0      	movs	r3, #224	; 0xe0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e84:	230c      	movs	r3, #12
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <MX_GPIO_Init+0x450>)
 8000e90:	f001 f95c 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_WS_Pin I2S6_MCK_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000e94:	2309      	movs	r3, #9
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_GPIO_Init+0x444>)
 8000eb0:	f001 f94c 	bl	800214c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2008      	movs	r0, #8
 8000eba:	f000 fe13 	bl	8001ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ebe:	2008      	movs	r0, #8
 8000ec0:	f000 fe2a 	bl	8001b18 <HAL_NVIC_EnableIRQ>

}
 8000ec4:	bf00      	nop
 8000ec6:	3740      	adds	r7, #64	; 0x40
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	58020800 	.word	0x58020800
 8000ed4:	58021400 	.word	0x58021400
 8000ed8:	58021c00 	.word	0x58021c00

08000edc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eee:	f000 fd21 	bl	8001934 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40001000 	.word	0x40001000

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_MspInit+0x30>)
 8000f14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x30>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x30>)
 8000f24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_CRC_MspInit+0x3c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10e      	bne.n	8000f70 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f64:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023000 	.word	0x40023000
 8000f80:	58024400 	.word	0x58024400

08000f84 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_DMA2D_MspInit+0x48>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d116      	bne.n	8000fc4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_DMA2D_MspInit+0x4c>)
 8000f98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <HAL_DMA2D_MspInit+0x4c>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_DMA2D_MspInit+0x4c>)
 8000fa8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	205a      	movs	r0, #90	; 0x5a
 8000fba:	f000 fd93 	bl	8001ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fbe:	205a      	movs	r0, #90	; 0x5a
 8000fc0:	f000 fdaa 	bl	8001b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	52001000 	.word	0x52001000
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0b8      	sub	sp, #224	; 0xe0
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	22b8      	movs	r2, #184	; 0xb8
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f01b ff2f 	bl	801ce58 <memset>
  if(hi2c->Instance==I2C4)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_I2C_MspInit+0xc0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d142      	bne.n	800108a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001004:	2310      	movs	r3, #16
 8001006:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fe6e 	bl	8004cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800101e:	f7ff ff6f 	bl	8000f00 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_I2C_MspInit+0xc4>)
 8001024:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_I2C_MspInit+0xc4>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_I2C_MspInit+0xc4>)
 8001034:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001040:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	2312      	movs	r3, #18
 800104a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800105a:	2304      	movs	r3, #4
 800105c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001060:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <HAL_I2C_MspInit+0xc8>)
 8001068:	f001 f870 	bl	800214c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_I2C_MspInit+0xc4>)
 800106e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_I2C_MspInit+0xc4>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_I2C_MspInit+0xc4>)
 800107e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	37e0      	adds	r7, #224	; 0xe0
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	58001c00 	.word	0x58001c00
 8001098:	58024400 	.word	0x58024400
 800109c:	58020c00 	.word	0x58020c00

080010a0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	; 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	22b8      	movs	r2, #184	; 0xb8
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f01b fec9 	bl	801ce58 <memset>
  if(hltdc->Instance==LTDC)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a56      	ldr	r2, [pc, #344]	; (8001224 <HAL_LTDC_MspInit+0x184>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	f040 80a4 	bne.w	800121a <HAL_LTDC_MspInit+0x17a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 11;
 80010dc:	230b      	movs	r3, #11
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80010e0:	2311      	movs	r3, #17
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 80010e8:	2315      	movs	r3, #21
 80010ea:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010f0:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462.0;
 80010f6:	f241 5356 	movw	r3, #5462	; 0x1556
 80010fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4618      	mov	r0, r3
 8001102:	f003 fdf7 	bl	8004cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 800110c:	f7ff fef8 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001110:	4b45      	ldr	r3, [pc, #276]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001112:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001116:	4a44      	ldr	r2, [pc, #272]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001122:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001130:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001134:	4a3c      	ldr	r2, [pc, #240]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001140:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 800114e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001152:	4a35      	ldr	r2, [pc, #212]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001158:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 800115e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 800116c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001170:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_LTDC_MspInit+0x188>)
 800117c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a0:	230e      	movs	r3, #14
 80011a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80011a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011aa:	4619      	mov	r1, r3
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <HAL_LTDC_MspInit+0x18c>)
 80011ae:	f000 ffcd 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80011b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011cc:	230e      	movs	r3, #14
 80011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <HAL_LTDC_MspInit+0x190>)
 80011da:	f000 ffb7 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80011de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f8:	230e      	movs	r3, #14
 80011fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001202:	4619      	mov	r1, r3
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_LTDC_MspInit+0x194>)
 8001206:	f000 ffa1 	bl	800214c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2058      	movs	r0, #88	; 0x58
 8001210:	f000 fc68 	bl	8001ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001214:	2058      	movs	r0, #88	; 0x58
 8001216:	f000 fc7f 	bl	8001b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	37e8      	adds	r7, #232	; 0xe8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	50001000 	.word	0x50001000
 8001228:	58024400 	.word	0x58024400
 800122c:	58022800 	.word	0x58022800
 8001230:	58022400 	.word	0x58022400
 8001234:	58022000 	.word	0x58022000

08001238 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0bc      	sub	sp, #240	; 0xf0
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	22b8      	movs	r2, #184	; 0xb8
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f01b fdfd 	bl	801ce58 <memset>
  if(hospi->Instance==OCTOSPI1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a87      	ldr	r2, [pc, #540]	; (8001480 <HAL_OSPI_MspInit+0x248>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 8107 	bne.w	8001478 <HAL_OSPI_MspInit+0x240>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800126a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8001270:	230c      	movs	r3, #12
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8001274:	23c8      	movs	r3, #200	; 0xc8
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 4;
 8001280:	2304      	movs	r3, #4
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001284:	2340      	movs	r3, #64	; 0x40
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001288:	2300      	movs	r3, #0
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8001290:	2320      	movs	r3, #32
 8001292:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fd2b 	bl	8004cf4 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_OSPI_MspInit+0x70>
    {
      Error_Handler();
 80012a4:	f7ff fe2c 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80012a8:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	623b      	str	r3, [r7, #32]
 80012c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80012c6:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012cc:	4a6d      	ldr	r2, [pc, #436]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80012d6:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e4:	4b67      	ldr	r3, [pc, #412]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ea:	4a66      	ldr	r2, [pc, #408]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f4:	4b63      	ldr	r3, [pc, #396]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 80012f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b60      	ldr	r3, [pc, #384]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001304:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001308:	4a5e      	ldr	r2, [pc, #376]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001312:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001314:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001322:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001326:	4a57      	ldr	r2, [pc, #348]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001330:	4b54      	ldr	r3, [pc, #336]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001332:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001340:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800134e:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 800135e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001362:	4a48      	ldr	r2, [pc, #288]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <HAL_OSPI_MspInit+0x24c>)
 800136e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> OCTOSPIM_P1_IO4
    PH3     ------> OCTOSPIM_P1_IO5
    PC5     ------> OCTOSPIM_P1_DQS
    PB2     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800137a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001394:	2309      	movs	r3, #9
 8001396:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800139e:	4619      	mov	r1, r3
 80013a0:	4839      	ldr	r0, [pc, #228]	; (8001488 <HAL_OSPI_MspInit+0x250>)
 80013a2:	f000 fed3 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013be:	230a      	movs	r3, #10
 80013c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c8:	4619      	mov	r1, r3
 80013ca:	4830      	ldr	r0, [pc, #192]	; (800148c <HAL_OSPI_MspInit+0x254>)
 80013cc:	f000 febe 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013e8:	230a      	movs	r3, #10
 80013ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f2:	4619      	mov	r1, r3
 80013f4:	4824      	ldr	r0, [pc, #144]	; (8001488 <HAL_OSPI_MspInit+0x250>)
 80013f6:	f000 fea9 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80013fa:	2322      	movs	r3, #34	; 0x22
 80013fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001412:	230a      	movs	r3, #10
 8001414:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800141c:	4619      	mov	r1, r3
 800141e:	481c      	ldr	r0, [pc, #112]	; (8001490 <HAL_OSPI_MspInit+0x258>)
 8001420:	f000 fe94 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8001424:	2308      	movs	r3, #8
 8001426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800143c:	2309      	movs	r3, #9
 800143e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001446:	4619      	mov	r1, r3
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <HAL_OSPI_MspInit+0x25c>)
 800144a:	f000 fe7f 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800144e:	2304      	movs	r3, #4
 8001450:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001466:	2309      	movs	r3, #9
 8001468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001470:	4619      	mov	r1, r3
 8001472:	4809      	ldr	r0, [pc, #36]	; (8001498 <HAL_OSPI_MspInit+0x260>)
 8001474:	f000 fe6a 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	37f0      	adds	r7, #240	; 0xf0
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	52005000 	.word	0x52005000
 8001484:	58024400 	.word	0x58024400
 8001488:	58021800 	.word	0x58021800
 800148c:	58020c00 	.word	0x58020c00
 8001490:	58020800 	.word	0x58020800
 8001494:	58021c00 	.word	0x58021c00
 8001498:	58020400 	.word	0x58020400

0800149c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b090      	sub	sp, #64	; 0x40
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	d827      	bhi.n	80014fa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014aa:	2200      	movs	r2, #0
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	2036      	movs	r0, #54	; 0x36
 80014b0:	f000 fb18 	bl	8001ae4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014b4:	2036      	movs	r0, #54	; 0x36
 80014b6:	f000 fb2f 	bl	8001b18 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014ba:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_InitTick+0xc4>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_InitTick+0xc8>)
 80014c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_InitTick+0xc8>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_InitTick+0xc8>)
 80014d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014de:	f107 0210 	add.w	r2, r7, #16
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fbc1 	bl	8004c70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d106      	bne.n	8001506 <HAL_InitTick+0x6a>
 80014f8:	e001      	b.n	80014fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e02b      	b.n	8001556 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014fe:	f003 fba1 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8001502:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001504:	e004      	b.n	8001510 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001506:	f003 fb9d 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 800150a:	4603      	mov	r3, r0
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_InitTick+0xcc>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9b      	lsrs	r3, r3, #18
 800151a:	3b01      	subs	r3, #1
 800151c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_InitTick+0xd0>)
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <HAL_InitTick+0xd4>)
 8001522:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_InitTick+0xd0>)
 8001526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_InitTick+0xd0>)
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_InitTick+0xd0>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_InitTick+0xd0>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <HAL_InitTick+0xd0>)
 8001540:	f004 fc48 	bl	8005dd4 <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <HAL_InitTick+0xd0>)
 800154c:	f004 fca4 	bl	8005e98 <HAL_TIM_Base_Start_IT>
 8001550:	4603      	mov	r3, r0
 8001552:	e000      	b.n	8001556 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	3740      	adds	r7, #64	; 0x40
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2400000c 	.word	0x2400000c
 8001564:	58024400 	.word	0x58024400
 8001568:	431bde83 	.word	0x431bde83
 800156c:	240c070c 	.word	0x240c070c
 8001570:	40001000 	.word	0x40001000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80015a4:	2004      	movs	r0, #4
 80015a6:	f000 ff9a 	bl	80024de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM6_DAC_IRQHandler+0x10>)
 80015b6:	f004 fce7 	bl	8005f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	240c070c 	.word	0x240c070c

080015c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <LTDC_IRQHandler+0x10>)
 80015ca:	f001 f9a5 	bl	8002918 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	240c0608 	.word	0x240c0608

080015d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA2D_IRQHandler+0x10>)
 80015de:	f000 fbf7 	bl	8001dd0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	240c0554 	.word	0x240c0554

080015ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_kill>:

int _kill(int pid, int sig)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001606:	f01b fbdb 	bl	801cdc0 <__errno>
 800160a:	4603      	mov	r3, r0
 800160c:	2216      	movs	r2, #22
 800160e:	601a      	str	r2, [r3, #0]
	return -1;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_exit>:

void _exit (int status)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffe7 	bl	80015fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800162e:	e7fe      	b.n	800162e <_exit+0x12>

08001630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e00a      	b.n	8001658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001642:	f3af 8000 	nop.w
 8001646:	4601      	mov	r1, r0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbf0      	blt.n	8001642 <_read+0x12>
	}

return len;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e009      	b.n	8001690 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf1      	blt.n	800167c <_write+0x12>
	}
	return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_close>:

int _close(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ca:	605a      	str	r2, [r3, #4]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_isatty>:

int _isatty(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f01b fb40 	bl	801cdc0 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	24100000 	.word	0x24100000
 800176c:	00000400 	.word	0x00000400
 8001770:	240c0758 	.word	0x240c0758
 8001774:	240c3fe8 	.word	0x240c3fe8

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <SystemInit+0xd0>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a31      	ldr	r2, [pc, #196]	; (8001848 <SystemInit+0xd0>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <SystemInit+0xd4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	2b02      	cmp	r3, #2
 8001796:	d807      	bhi.n	80017a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001798:	4b2c      	ldr	r3, [pc, #176]	; (800184c <SystemInit+0xd4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 030f 	bic.w	r3, r3, #15
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <SystemInit+0xd4>)
 80017a2:	f043 0303 	orr.w	r3, r3, #3
 80017a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <SystemInit+0xd8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <SystemInit+0xd8>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <SystemInit+0xd8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <SystemInit+0xd8>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4924      	ldr	r1, [pc, #144]	; (8001850 <SystemInit+0xd8>)
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <SystemInit+0xdc>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <SystemInit+0xd4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <SystemInit+0xd4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 030f 	bic.w	r3, r3, #15
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <SystemInit+0xd4>)
 80017dc:	f043 0303 	orr.w	r3, r3, #3
 80017e0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <SystemInit+0xd8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <SystemInit+0xd8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <SystemInit+0xd8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <SystemInit+0xd8>)
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <SystemInit+0xe0>)
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <SystemInit+0xd8>)
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <SystemInit+0xe4>)
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <SystemInit+0xd8>)
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <SystemInit+0xe8>)
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <SystemInit+0xd8>)
 8001808:	2200      	movs	r2, #0
 800180a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <SystemInit+0xd8>)
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <SystemInit+0xe8>)
 8001810:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <SystemInit+0xd8>)
 8001814:	2200      	movs	r2, #0
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <SystemInit+0xd8>)
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <SystemInit+0xe8>)
 800181c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <SystemInit+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <SystemInit+0xd8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a09      	ldr	r2, [pc, #36]	; (8001850 <SystemInit+0xd8>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <SystemInit+0xd8>)
 8001832:	2200      	movs	r2, #0
 8001834:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <SystemInit+0xec>)
 8001838:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800183c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00
 800184c:	52002000 	.word	0x52002000
 8001850:	58024400 	.word	0x58024400
 8001854:	eaf6ed7f 	.word	0xeaf6ed7f
 8001858:	02020200 	.word	0x02020200
 800185c:	01ff0000 	.word	0x01ff0000
 8001860:	01010280 	.word	0x01010280
 8001864:	52004000 	.word	0x52004000

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800186c:	f7ff ff84 	bl	8001778 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001896:	f01b faab 	bl	801cdf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7fe fed5 	bl	8000648 <main>
  bx  lr
 800189e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80018a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018a8:	240000e0 	.word	0x240000e0
  ldr r2, =_sidata
 80018ac:	08022014 	.word	0x08022014
  ldr r2, =_sbss
 80018b0:	240bf4e0 	.word	0x240bf4e0
  ldr r4, =_ebss
 80018b4:	240c3fe8 	.word	0x240c3fe8

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c2:	2003      	movs	r0, #3
 80018c4:	f000 f903 	bl	8001ace <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018c8:	f003 f812 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_Init+0x68>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	4913      	ldr	r1, [pc, #76]	; (8001928 <HAL_Init+0x6c>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_Init+0x68>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_Init+0x6c>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_Init+0x70>)
 80018fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_Init+0x74>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001906:	200f      	movs	r0, #15
 8001908:	f7ff fdc8 	bl	800149c <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e002      	b.n	800191c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001916:	f7ff faf9 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	58024400 	.word	0x58024400
 8001928:	0801ebec 	.word	0x0801ebec
 800192c:	24000008 	.word	0x24000008
 8001930:	24000004 	.word	0x24000004

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	24000010 	.word	0x24000010
 8001958:	240c075c 	.word	0x240c075c

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	240c075c 	.word	0x240c075c

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x40>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00
 80019b8:	05fa0000 	.word	0x05fa0000

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	; (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff4c 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af2:	f7ff ff63 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001af6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	f7ff ffb3 	bl	8001a68 <NVIC_EncodePriority>
 8001b02:	4602      	mov	r2, r0
 8001b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff82 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff56 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e054      	b.n	8001bf0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7f5b      	ldrb	r3, [r3, #29]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff f9f2 	bl	8000f40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_CRC_Init+0xc4>)
 8001b70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0218 	bic.w	r2, r2, #24
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	e00c      	b.n	8001b9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f834 	bl	8001bfc <HAL_CRCEx_Polynomial_Set>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e028      	b.n	8001bf0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	795b      	ldrb	r3, [r3, #5]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f04f 32ff 	mov.w	r2, #4294967295
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	e004      	b.n	8001bbc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6912      	ldr	r2, [r2, #16]
 8001bba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	04c11db7 	.word	0x04c11db7

08001bfc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001c0c:	231f      	movs	r3, #31
 8001c0e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001c10:	bf00      	nop
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	613a      	str	r2, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <HAL_CRCEx_Polynomial_Set+0x34>
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b18      	cmp	r3, #24
 8001c34:	d846      	bhi.n	8001cc4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001ccb 	.word	0x08001ccb
 8001c40:	08001cc5 	.word	0x08001cc5
 8001c44:	08001cc5 	.word	0x08001cc5
 8001c48:	08001cc5 	.word	0x08001cc5
 8001c4c:	08001cc5 	.word	0x08001cc5
 8001c50:	08001cc5 	.word	0x08001cc5
 8001c54:	08001cc5 	.word	0x08001cc5
 8001c58:	08001cc5 	.word	0x08001cc5
 8001c5c:	08001cb9 	.word	0x08001cb9
 8001c60:	08001cc5 	.word	0x08001cc5
 8001c64:	08001cc5 	.word	0x08001cc5
 8001c68:	08001cc5 	.word	0x08001cc5
 8001c6c:	08001cc5 	.word	0x08001cc5
 8001c70:	08001cc5 	.word	0x08001cc5
 8001c74:	08001cc5 	.word	0x08001cc5
 8001c78:	08001cc5 	.word	0x08001cc5
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001cc5 	.word	0x08001cc5
 8001c84:	08001cc5 	.word	0x08001cc5
 8001c88:	08001cc5 	.word	0x08001cc5
 8001c8c:	08001cc5 	.word	0x08001cc5
 8001c90:	08001cc5 	.word	0x08001cc5
 8001c94:	08001cc5 	.word	0x08001cc5
 8001c98:	08001cc5 	.word	0x08001cc5
 8001c9c:	08001ca1 	.word	0x08001ca1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d913      	bls.n	8001cce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001caa:	e010      	b.n	8001cce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	d90f      	bls.n	8001cd2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001cb6:	e00c      	b.n	8001cd2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	d90b      	bls.n	8001cd6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001cc2:	e008      	b.n	8001cd6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001cc8:	e006      	b.n	8001cd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001cca:	bf00      	nop
 8001ccc:	e004      	b.n	8001cd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e002      	b.n	8001cd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e000      	b.n	8001cd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001cd6:	bf00      	nop
  }
  if (status == HAL_OK)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10d      	bne.n	8001cfa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 0118 	bic.w	r1, r3, #24
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e04f      	b.n	8001dba <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff f928 	bl	8000f84 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_DMA2D_Init+0xbc>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6851      	ldr	r1, [r2, #4]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	69d2      	ldr	r2, [r2, #28]
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_DMA2D_Init+0xc0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6891      	ldr	r1, [r2, #8]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6992      	ldr	r2, [r2, #24]
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_DMA2D_Init+0xc4>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68d1      	ldr	r1, [r2, #12]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	051a      	lsls	r2, r3, #20
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	fff8ffbf 	.word	0xfff8ffbf
 8001dc8:	fffffef8 	.word	0xfffffef8
 8001dcc:	ffff0000 	.word	0xffff0000

08001dd0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d026      	beq.n	8001e40 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d021      	beq.n	8001e40 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2204      	movs	r2, #4
 8001e24:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d026      	beq.n	8001e98 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d021      	beq.n	8001e98 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e62:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e70:	f043 0202 	orr.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d026      	beq.n	8001ef0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d021      	beq.n	8001ef0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d013      	beq.n	8001f22 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00e      	beq.n	8001f22 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f853 	bl	8001fc8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d024      	beq.n	8001f76 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01f      	beq.n	8001f76 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01f      	beq.n	8001fc0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f98:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f80e 	bl	8001fdc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_DMA2D_ConfigLayer+0x24>
 8002010:	2302      	movs	r3, #2
 8002012:	e092      	b.n	800213a <HAL_DMA2D_ConfigLayer+0x14a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002048:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002054:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_DMA2D_ConfigLayer+0x158>)
 8002056:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b0a      	cmp	r3, #10
 800205e:	d003      	beq.n	8002068 <HAL_DMA2D_ConfigLayer+0x78>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d107      	bne.n	8002078 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e005      	b.n	8002084 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d120      	bne.n	80020cc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	43db      	mvns	r3, r3
 8002094:	ea02 0103 	and.w	r1, r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	430a      	orrs	r2, r1
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b0a      	cmp	r3, #10
 80020b2:	d003      	beq.n	80020bc <HAL_DMA2D_ConfigLayer+0xcc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d135      	bne.n	8002128 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
 80020ca:	e02d      	b.n	8002128 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b0b      	cmp	r3, #11
 80020d2:	d109      	bne.n	80020e8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	049b      	lsls	r3, r3, #18
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80020e6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	ea02 0103 	and.w	r1, r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d003      	beq.n	800211a <HAL_DMA2D_ConfigLayer+0x12a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b09      	cmp	r3, #9
 8002118:	d106      	bne.n	8002128 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002126:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	ff33000f 	.word	0xff33000f

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_GPIO_Init+0x234>)
 800215c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800215e:	e194      	b.n	800248a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8186 	beq.w	8002484 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d005      	beq.n	8002190 <HAL_GPIO_Init+0x44>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d130      	bne.n	80021f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021c6:	2201      	movs	r2, #1
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 0201 	and.w	r2, r3, #1
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d017      	beq.n	800222e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d123      	bne.n	8002282 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	69b9      	ldr	r1, [r7, #24]
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0203 	and.w	r2, r3, #3
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80e0 	beq.w	8002484 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_GPIO_Init+0x238>)
 80022c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022ca:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_GPIO_Init+0x238>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_GPIO_Init+0x238>)
 80022d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e2:	4a29      	ldr	r2, [pc, #164]	; (8002388 <HAL_GPIO_Init+0x23c>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_GPIO_Init+0x240>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d052      	beq.n	80023b4 <HAL_GPIO_Init+0x268>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_GPIO_Init+0x244>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d031      	beq.n	800237a <HAL_GPIO_Init+0x22e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_GPIO_Init+0x248>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02b      	beq.n	8002376 <HAL_GPIO_Init+0x22a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_GPIO_Init+0x24c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d025      	beq.n	8002372 <HAL_GPIO_Init+0x226>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1c      	ldr	r2, [pc, #112]	; (800239c <HAL_GPIO_Init+0x250>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <HAL_GPIO_Init+0x222>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <HAL_GPIO_Init+0x254>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x21e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a1a      	ldr	r2, [pc, #104]	; (80023a4 <HAL_GPIO_Init+0x258>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x21a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_GPIO_Init+0x25c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x216>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_GPIO_Init+0x260>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x212>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_GPIO_Init+0x264>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x20e>
 8002356:	2309      	movs	r3, #9
 8002358:	e02d      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 800235a:	230a      	movs	r3, #10
 800235c:	e02b      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 800235e:	2308      	movs	r3, #8
 8002360:	e029      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 8002362:	2307      	movs	r3, #7
 8002364:	e027      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 8002366:	2306      	movs	r3, #6
 8002368:	e025      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 800236a:	2305      	movs	r3, #5
 800236c:	e023      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 800236e:	2304      	movs	r3, #4
 8002370:	e021      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 8002372:	2303      	movs	r3, #3
 8002374:	e01f      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 8002376:	2302      	movs	r3, #2
 8002378:	e01d      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 800237a:	2301      	movs	r3, #1
 800237c:	e01b      	b.n	80023b6 <HAL_GPIO_Init+0x26a>
 800237e:	bf00      	nop
 8002380:	58000080 	.word	0x58000080
 8002384:	58024400 	.word	0x58024400
 8002388:	58000400 	.word	0x58000400
 800238c:	58020000 	.word	0x58020000
 8002390:	58020400 	.word	0x58020400
 8002394:	58020800 	.word	0x58020800
 8002398:	58020c00 	.word	0x58020c00
 800239c:	58021000 	.word	0x58021000
 80023a0:	58021400 	.word	0x58021400
 80023a4:	58021800 	.word	0x58021800
 80023a8:	58021c00 	.word	0x58021c00
 80023ac:	58022000 	.word	0x58022000
 80023b0:	58022400 	.word	0x58022400
 80023b4:	2300      	movs	r3, #0
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	f002 0203 	and.w	r2, r2, #3
 80023bc:	0092      	lsls	r2, r2, #2
 80023be:	4093      	lsls	r3, r2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c6:	4938      	ldr	r1, [pc, #224]	; (80024a8 <HAL_GPIO_Init+0x35c>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3301      	adds	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f ae63 	bne.w	8002160 <HAL_GPIO_Init+0x14>
  }
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	3724      	adds	r7, #36	; 0x24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	58000400 	.word	0x58000400

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f804 	bl	8002512 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fd40 	bl	8000fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	e006      	b.n	80025b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d104      	bne.n	80025c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_I2C_Init+0x11c>)
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69d9      	ldr	r1, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	02008000 	.word	0x02008000

08002648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d138      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e032      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800269a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d139      	bne.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fe:	2302      	movs	r3, #2
 8002700:	e033      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2224      	movs	r2, #36	; 0x24
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0bf      	b.n	800290a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fc7e 	bl	80010a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80027ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6999      	ldr	r1, [r3, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_LTDC_Init+0x19c>)
 80027ec:	400b      	ands	r3, r1
 80027ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68d9      	ldr	r1, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_LTDC_Init+0x19c>)
 800281a:	400b      	ands	r3, r1
 800281c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68d9      	ldr	r1, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6919      	ldr	r1, [r3, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_LTDC_Init+0x19c>)
 8002848:	400b      	ands	r3, r1
 800284a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6919      	ldr	r1, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_LTDC_Init+0x19c>)
 8002876:	400b      	ands	r3, r1
 8002878:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6959      	ldr	r1, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0206 	orr.w	r2, r2, #6
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	f000f800 	.word	0xf000f800

08002918 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d023      	beq.n	8002982 <HAL_LTDC_IRQHandler+0x6a>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01e      	beq.n	8002982 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2204      	movs	r2, #4
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f86f 	bl	8002a60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_LTDC_IRQHandler+0xbc>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01e      	beq.n	80029d4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0202 	bic.w	r2, r2, #2
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2202      	movs	r2, #2
 80029ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029b4:	f043 0202 	orr.w	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2204      	movs	r2, #4
 80029c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f846 	bl	8002a60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01b      	beq.n	8002a16 <HAL_LTDC_IRQHandler+0xfe>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2201      	movs	r2, #1
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f00a fc85 	bl	800d320 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_LTDC_IRQHandler+0x140>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f80e 	bl	8002a74 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_LTDC_ConfigLayer+0x1a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e02c      	b.n	8002afc <HAL_LTDC_ConfigLayer+0x74>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2134      	movs	r1, #52	; 0x34
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f849 	bl	8002b74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}

08002b04 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_LTDC_ProgramLineEvent+0x18>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e023      	b.n	8002b64 <HAL_LTDC_ProgramLineEvent+0x60>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	50001000 	.word	0x50001000

08002b74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	4413      	add	r3, r2
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3384      	adds	r3, #132	; 0x84
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4611      	mov	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	01d2      	lsls	r2, r2, #7
 8002bb0:	440a      	add	r2, r1
 8002bb2:	3284      	adds	r2, #132	; 0x84
 8002bb4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002bb8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002bca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002bcc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	01db      	lsls	r3, r3, #7
 8002bd8:	440b      	add	r3, r1
 8002bda:	3384      	adds	r3, #132	; 0x84
 8002bdc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002be2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf2:	4413      	add	r3, r2
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	01db      	lsls	r3, r3, #7
 8002c02:	4413      	add	r3, r2
 8002c04:	3384      	adds	r3, #132	; 0x84
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	01d2      	lsls	r2, r2, #7
 8002c12:	440a      	add	r2, r1
 8002c14:	3284      	adds	r2, #132	; 0x84
 8002c16:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002c1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c2a:	4413      	add	r3, r2
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	01db      	lsls	r3, r3, #7
 8002c38:	440b      	add	r3, r1
 8002c3a:	3384      	adds	r3, #132	; 0x84
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	01db      	lsls	r3, r3, #7
 8002c4e:	4413      	add	r3, r2
 8002c50:	3384      	adds	r3, #132	; 0x84
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	01d2      	lsls	r2, r2, #7
 8002c5e:	440a      	add	r2, r1
 8002c60:	3284      	adds	r2, #132	; 0x84
 8002c62:	f023 0307 	bic.w	r3, r3, #7
 8002c66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	01db      	lsls	r3, r3, #7
 8002c72:	4413      	add	r3, r2
 8002c74:	3384      	adds	r3, #132	; 0x84
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	061b      	lsls	r3, r3, #24
 8002c98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	01db      	lsls	r3, r3, #7
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3384      	adds	r3, #132	; 0x84
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	01db      	lsls	r3, r3, #7
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3384      	adds	r3, #132	; 0x84
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	01db      	lsls	r3, r3, #7
 8002cd8:	440b      	add	r3, r1
 8002cda:	3384      	adds	r3, #132	; 0x84
 8002cdc:	4619      	mov	r1, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	01db      	lsls	r3, r3, #7
 8002cee:	4413      	add	r3, r2
 8002cf0:	3384      	adds	r3, #132	; 0x84
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	01d2      	lsls	r2, r2, #7
 8002cfe:	440a      	add	r2, r1
 8002d00:	3284      	adds	r2, #132	; 0x84
 8002d02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	01db      	lsls	r3, r3, #7
 8002d12:	4413      	add	r3, r2
 8002d14:	3384      	adds	r3, #132	; 0x84
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	01db      	lsls	r3, r3, #7
 8002d28:	4413      	add	r3, r2
 8002d2a:	3384      	adds	r3, #132	; 0x84
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4619      	mov	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	01db      	lsls	r3, r3, #7
 8002d38:	440b      	add	r3, r1
 8002d3a:	3384      	adds	r3, #132	; 0x84
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <LTDC_SetConfig+0x32c>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	6809      	ldr	r1, [r1, #0]
 8002d50:	4608      	mov	r0, r1
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	01c9      	lsls	r1, r1, #7
 8002d56:	4401      	add	r1, r0
 8002d58:	3184      	adds	r1, #132	; 0x84
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	01db      	lsls	r3, r3, #7
 8002d68:	4413      	add	r3, r2
 8002d6a:	3384      	adds	r3, #132	; 0x84
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	01db      	lsls	r3, r3, #7
 8002d78:	4413      	add	r3, r2
 8002d7a:	3384      	adds	r3, #132	; 0x84
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2300      	movs	r3, #0
 8002d80:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	01db      	lsls	r3, r3, #7
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3384      	adds	r3, #132	; 0x84
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002da0:	2304      	movs	r3, #4
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	e01b      	b.n	8002dde <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002dae:	2303      	movs	r3, #3
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	e014      	b.n	8002dde <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d00b      	beq.n	8002dd4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d007      	beq.n	8002dd4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d003      	beq.n	8002dd4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	d102      	bne.n	8002dda <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	e001      	b.n	8002dde <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	01db      	lsls	r3, r3, #7
 8002de8:	4413      	add	r3, r2
 8002dea:	3384      	adds	r3, #132	; 0x84
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	4611      	mov	r1, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	01d2      	lsls	r2, r2, #7
 8002df8:	440a      	add	r2, r1
 8002dfa:	3284      	adds	r2, #132	; 0x84
 8002dfc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002e00:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1acb      	subs	r3, r1, r3
 8002e18:	69f9      	ldr	r1, [r7, #28]
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	3307      	adds	r3, #7
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	6809      	ldr	r1, [r1, #0]
 8002e24:	4608      	mov	r0, r1
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	01c9      	lsls	r1, r1, #7
 8002e2a:	4401      	add	r1, r0
 8002e2c:	3184      	adds	r1, #132	; 0x84
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	01db      	lsls	r3, r3, #7
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3384      	adds	r3, #132	; 0x84
 8002e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	01db      	lsls	r3, r3, #7
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3384      	adds	r3, #132	; 0x84
 8002e50:	4619      	mov	r1, r3
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <LTDC_SetConfig+0x330>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	01db      	lsls	r3, r3, #7
 8002e62:	4413      	add	r3, r2
 8002e64:	3384      	adds	r3, #132	; 0x84
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	01db      	lsls	r3, r3, #7
 8002e78:	4413      	add	r3, r2
 8002e7a:	3384      	adds	r3, #132	; 0x84
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4611      	mov	r1, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	01d2      	lsls	r2, r2, #7
 8002e88:	440a      	add	r2, r1
 8002e8a:	3284      	adds	r2, #132	; 0x84
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	fffff8f8 	.word	0xfffff8f8
 8002ea4:	fffff800 	.word	0xfffff800

08002ea8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7fe fd52 	bl	800195c <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e0a5      	b.n	8003012 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 809e 	bne.w	8003012 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe f9ae 	bl	8001238 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002edc:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f89d 	bl	8003020 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	4b4b      	ldr	r3, [pc, #300]	; (800301c <HAL_OSPI_Init+0x174>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68d1      	ldr	r1, [r2, #12]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6912      	ldr	r2, [r2, #16]
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0412      	lsls	r2, r2, #16
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6952      	ldr	r2, [r2, #20]
 8002f02:	3a01      	subs	r2, #1
 8002f04:	0212      	lsls	r2, r2, #8
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f0c:	4311      	orrs	r1, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	69d2      	ldr	r2, [r2, #28]
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f4c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	021a      	lsls	r2, r3, #8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2120      	movs	r1, #32
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fd4b 	bl	8003a10 <OSPI_WaitFlagStateUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d146      	bne.n	8003012 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fba:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d107      	bne.n	8002ffa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0202 	orr.w	r2, r2, #2
 8002ff8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003002:	d103      	bne.n	800300c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	651a      	str	r2, [r3, #80]	; 0x50
 800300a:	e002      	b.n	8003012 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	f8e0f8f4 	.word	0xf8e0f8f4

08003020 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b094      	sub	sp, #80	; 0x50
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a9d      	ldr	r2, [pc, #628]	; (80032d4 <HAL_OSPIM_Config+0x294>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d105      	bne.n	800306e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800306c:	e004      	b.n	8003078 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800306e:	2301      	movs	r3, #1
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800307e:	e01d      	b.n	80030bc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003084:	3301      	adds	r3, #1
 8003086:	b2d8      	uxtb	r0, r3
 8003088:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800308c:	f107 0114 	add.w	r1, r7, #20
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	4619      	mov	r1, r3
 800309c:	f000 fcf0 	bl	8003a80 <OSPIM_GetConfig>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2208      	movs	r2, #8
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80030b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030b6:	3301      	adds	r3, #1
 80030b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80030bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d9dd      	bls.n	8003080 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80030c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f040 8495 	bne.w	80039f8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80030ce:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <HAL_OSPIM_Config+0x294>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80030da:	4b7e      	ldr	r3, [pc, #504]	; (80032d4 <HAL_OSPIM_Config+0x294>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7d      	ldr	r2, [pc, #500]	; (80032d4 <HAL_OSPIM_Config+0x294>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80030e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80030f2:	4b79      	ldr	r3, [pc, #484]	; (80032d8 <HAL_OSPIM_Config+0x298>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <HAL_OSPIM_Config+0x298>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	; (80032d8 <HAL_OSPIM_Config+0x298>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800310a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003116:	4971      	ldr	r1, [pc, #452]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	3350      	adds	r3, #80	; 0x50
 8003124:	443b      	add	r3, r7
 8003126:	3b34      	subs	r3, #52	; 0x34
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3b01      	subs	r3, #1
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	486a      	ldr	r0, [pc, #424]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	3350      	adds	r3, #80	; 0x50
 8003140:	443b      	add	r3, r7
 8003142:	3b34      	subs	r3, #52	; 0x34
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3b01      	subs	r3, #1
 8003148:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4403      	add	r3, r0
 8003150:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003152:	4b62      	ldr	r3, [pc, #392]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80c0 	beq.w	80032e0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003160:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800316c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8162 	bne.w	800343a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8003176:	4959      	ldr	r1, [pc, #356]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003178:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	3350      	adds	r3, #80	; 0x50
 8003186:	443b      	add	r3, r7
 8003188:	3b3c      	subs	r3, #60	; 0x3c
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	4851      	ldr	r0, [pc, #324]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003196:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	3350      	adds	r3, #80	; 0x50
 80031a4:	443b      	add	r3, r7
 80031a6:	3b3c      	subs	r3, #60	; 0x3c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	f041 0202 	orr.w	r2, r1, #2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4403      	add	r3, r0
 80031b4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80031b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	3350      	adds	r3, #80	; 0x50
 80031c4:	443b      	add	r3, r7
 80031c6:	3b38      	subs	r3, #56	; 0x38
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01f      	beq.n	800320e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 80031ce:	4943      	ldr	r1, [pc, #268]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 80031d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	3350      	adds	r3, #80	; 0x50
 80031de:	443b      	add	r3, r7
 80031e0:	3b38      	subs	r3, #56	; 0x38
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	483b      	ldr	r0, [pc, #236]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 80031ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	3350      	adds	r3, #80	; 0x50
 80031fc:	443b      	add	r3, r7
 80031fe:	3b38      	subs	r3, #56	; 0x38
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3b01      	subs	r3, #1
 8003204:	f041 0220 	orr.w	r2, r1, #32
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4403      	add	r3, r0
 800320c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800320e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	3350      	adds	r3, #80	; 0x50
 800321c:	443b      	add	r3, r7
 800321e:	3b30      	subs	r3, #48	; 0x30
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d023      	beq.n	800326e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8003226:	492d      	ldr	r1, [pc, #180]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 8003228:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3350      	adds	r3, #80	; 0x50
 8003236:	443b      	add	r3, r7
 8003238:	3b30      	subs	r3, #48	; 0x30
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	4824      	ldr	r0, [pc, #144]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 800324a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	3350      	adds	r3, #80	; 0x50
 8003258:	443b      	add	r3, r7
 800325a:	3b30      	subs	r3, #48	; 0x30
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3b01      	subs	r3, #1
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4403      	add	r3, r0
 800326c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800326e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	3350      	adds	r3, #80	; 0x50
 800327c:	443b      	add	r3, r7
 800327e:	3b2c      	subs	r3, #44	; 0x2c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80d9 	beq.w	800343a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8003288:	4914      	ldr	r1, [pc, #80]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 800328a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	3350      	adds	r3, #80	; 0x50
 8003298:	443b      	add	r3, r7
 800329a:	3b2c      	subs	r3, #44	; 0x2c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3b01      	subs	r3, #1
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	480c      	ldr	r0, [pc, #48]	; (80032dc <HAL_OSPIM_Config+0x29c>)
 80032ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	3350      	adds	r3, #80	; 0x50
 80032ba:	443b      	add	r3, r7
 80032bc:	3b2c      	subs	r3, #44	; 0x2c
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	e0b3      	b.n	800343a <HAL_OSPIM_Config+0x3fa>
 80032d2:	bf00      	nop
 80032d4:	52005000 	.word	0x52005000
 80032d8:	5200a000 	.word	0x5200a000
 80032dc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80032e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	3350      	adds	r3, #80	; 0x50
 80032ec:	443b      	add	r3, r7
 80032ee:	3b3c      	subs	r3, #60	; 0x3c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a1 	beq.w	800343a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80032f8:	4993      	ldr	r1, [pc, #588]	; (8003548 <HAL_OSPIM_Config+0x508>)
 80032fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	3350      	adds	r3, #80	; 0x50
 8003306:	443b      	add	r3, r7
 8003308:	3b3c      	subs	r3, #60	; 0x3c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	488c      	ldr	r0, [pc, #560]	; (8003548 <HAL_OSPIM_Config+0x508>)
 8003316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	3350      	adds	r3, #80	; 0x50
 8003322:	443b      	add	r3, r7
 8003324:	3b3c      	subs	r3, #60	; 0x3c
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3b01      	subs	r3, #1
 800332a:	f021 0201 	bic.w	r2, r1, #1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	3350      	adds	r3, #80	; 0x50
 8003340:	443b      	add	r3, r7
 8003342:	3b38      	subs	r3, #56	; 0x38
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01d      	beq.n	8003386 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800334a:	497f      	ldr	r1, [pc, #508]	; (8003548 <HAL_OSPIM_Config+0x508>)
 800334c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	3350      	adds	r3, #80	; 0x50
 8003358:	443b      	add	r3, r7
 800335a:	3b38      	subs	r3, #56	; 0x38
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	4878      	ldr	r0, [pc, #480]	; (8003548 <HAL_OSPIM_Config+0x508>)
 8003368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	3350      	adds	r3, #80	; 0x50
 8003374:	443b      	add	r3, r7
 8003376:	3b38      	subs	r3, #56	; 0x38
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	f021 0210 	bic.w	r2, r1, #16
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4403      	add	r3, r0
 8003384:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	3350      	adds	r3, #80	; 0x50
 8003392:	443b      	add	r3, r7
 8003394:	3b30      	subs	r3, #48	; 0x30
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d021      	beq.n	80033e0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800339c:	496a      	ldr	r1, [pc, #424]	; (8003548 <HAL_OSPIM_Config+0x508>)
 800339e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	3350      	adds	r3, #80	; 0x50
 80033aa:	443b      	add	r3, r7
 80033ac:	3b30      	subs	r3, #48	; 0x30
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	4862      	ldr	r0, [pc, #392]	; (8003548 <HAL_OSPIM_Config+0x508>)
 80033be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	3350      	adds	r3, #80	; 0x50
 80033ca:	443b      	add	r3, r7
 80033cc:	3b30      	subs	r3, #48	; 0x30
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4403      	add	r3, r0
 80033de:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80033e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	3350      	adds	r3, #80	; 0x50
 80033ec:	443b      	add	r3, r7
 80033ee:	3b2c      	subs	r3, #44	; 0x2c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d021      	beq.n	800343a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80033f6:	4954      	ldr	r1, [pc, #336]	; (8003548 <HAL_OSPIM_Config+0x508>)
 80033f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	3350      	adds	r3, #80	; 0x50
 8003404:	443b      	add	r3, r7
 8003406:	3b2c      	subs	r3, #44	; 0x2c
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	484c      	ldr	r0, [pc, #304]	; (8003548 <HAL_OSPIM_Config+0x508>)
 8003418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	3350      	adds	r3, #80	; 0x50
 8003424:	443b      	add	r3, r7
 8003426:	3b2c      	subs	r3, #44	; 0x2c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3b01      	subs	r3, #1
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4403      	add	r3, r0
 8003438:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	3350      	adds	r3, #80	; 0x50
 800344c:	443b      	add	r3, r7
 800344e:	3b3c      	subs	r3, #60	; 0x3c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4299      	cmp	r1, r3
 8003454:	d038      	beq.n	80034c8 <HAL_OSPIM_Config+0x488>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	3350      	adds	r3, #80	; 0x50
 8003468:	443b      	add	r3, r7
 800346a:	3b38      	subs	r3, #56	; 0x38
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4299      	cmp	r1, r3
 8003470:	d02a      	beq.n	80034c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6899      	ldr	r1, [r3, #8]
 8003476:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	3350      	adds	r3, #80	; 0x50
 8003484:	443b      	add	r3, r7
 8003486:	3b34      	subs	r3, #52	; 0x34
 8003488:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800348a:	4299      	cmp	r1, r3
 800348c:	d01c      	beq.n	80034c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	3350      	adds	r3, #80	; 0x50
 80034a0:	443b      	add	r3, r7
 80034a2:	3b30      	subs	r3, #48	; 0x30
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4299      	cmp	r1, r3
 80034a8:	d00e      	beq.n	80034c8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6919      	ldr	r1, [r3, #16]
 80034ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	3350      	adds	r3, #80	; 0x50
 80034bc:	443b      	add	r3, r7
 80034be:	3b2c      	subs	r3, #44	; 0x2c
 80034c0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80034c2:	4299      	cmp	r1, r3
 80034c4:	f040 810e 	bne.w	80036e4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	3350      	adds	r3, #80	; 0x50
 80034da:	443b      	add	r3, r7
 80034dc:	3b3c      	subs	r3, #60	; 0x3c
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4299      	cmp	r1, r3
 80034e2:	d133      	bne.n	800354c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	3350      	adds	r3, #80	; 0x50
 80034f6:	443b      	add	r3, r7
 80034f8:	3b38      	subs	r3, #56	; 0x38
 80034fa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80034fc:	4299      	cmp	r1, r3
 80034fe:	d125      	bne.n	800354c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	68d9      	ldr	r1, [r3, #12]
 8003504:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	3350      	adds	r3, #80	; 0x50
 8003512:	443b      	add	r3, r7
 8003514:	3b30      	subs	r3, #48	; 0x30
 8003516:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003518:	4299      	cmp	r1, r3
 800351a:	d117      	bne.n	800354c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6919      	ldr	r1, [r3, #16]
 8003520:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	3350      	adds	r3, #80	; 0x50
 800352e:	443b      	add	r3, r7
 8003530:	3b2c      	subs	r3, #44	; 0x2c
 8003532:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003534:	4299      	cmp	r1, r3
 8003536:	d109      	bne.n	800354c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_OSPIM_Config+0x508>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a02      	ldr	r2, [pc, #8]	; (8003548 <HAL_OSPIM_Config+0x508>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e0ce      	b.n	80036e4 <HAL_OSPIM_Config+0x6a4>
 8003546:	bf00      	nop
 8003548:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800354c:	49bb      	ldr	r1, [pc, #748]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 800354e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	3350      	adds	r3, #80	; 0x50
 800355c:	443b      	add	r3, r7
 800355e:	3b3c      	subs	r3, #60	; 0x3c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3b01      	subs	r3, #1
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	48b4      	ldr	r0, [pc, #720]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 800356c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	443b      	add	r3, r7
 800357c:	3b3c      	subs	r3, #60	; 0x3c
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	f021 0201 	bic.w	r2, r1, #1
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800358c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3350      	adds	r3, #80	; 0x50
 800359a:	443b      	add	r3, r7
 800359c:	3b38      	subs	r3, #56	; 0x38
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01f      	beq.n	80035e4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80035a4:	49a5      	ldr	r1, [pc, #660]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80035a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	3350      	adds	r3, #80	; 0x50
 80035b4:	443b      	add	r3, r7
 80035b6:	3b38      	subs	r3, #56	; 0x38
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	489e      	ldr	r0, [pc, #632]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80035c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	3350      	adds	r3, #80	; 0x50
 80035d2:	443b      	add	r3, r7
 80035d4:	3b38      	subs	r3, #56	; 0x38
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	f021 0210 	bic.w	r2, r1, #16
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80035e4:	4995      	ldr	r1, [pc, #596]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80035e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	3350      	adds	r3, #80	; 0x50
 80035f4:	443b      	add	r3, r7
 80035f6:	3b34      	subs	r3, #52	; 0x34
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	488e      	ldr	r0, [pc, #568]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003604:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3350      	adds	r3, #80	; 0x50
 8003612:	443b      	add	r3, r7
 8003614:	3b34      	subs	r3, #52	; 0x34
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4403      	add	r3, r0
 8003622:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003624:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	443b      	add	r3, r7
 8003634:	3b30      	subs	r3, #48	; 0x30
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800363c:	497f      	ldr	r1, [pc, #508]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 800363e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	443b      	add	r3, r7
 800364e:	3b30      	subs	r3, #48	; 0x30
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3b01      	subs	r3, #1
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	4877      	ldr	r0, [pc, #476]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003660:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	3350      	adds	r3, #80	; 0x50
 800366e:	443b      	add	r3, r7
 8003670:	3b30      	subs	r3, #48	; 0x30
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3b01      	subs	r3, #1
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003684:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	3350      	adds	r3, #80	; 0x50
 8003692:	443b      	add	r3, r7
 8003694:	3b2c      	subs	r3, #44	; 0x2c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d023      	beq.n	80036e4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800369c:	4967      	ldr	r1, [pc, #412]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 800369e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	3350      	adds	r3, #80	; 0x50
 80036ac:	443b      	add	r3, r7
 80036ae:	3b2c      	subs	r3, #44	; 0x2c
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	485f      	ldr	r0, [pc, #380]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80036c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	3350      	adds	r3, #80	; 0x50
 80036ce:	443b      	add	r3, r7
 80036d0:	3b2c      	subs	r3, #44	; 0x2c
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4403      	add	r3, r0
 80036e2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80036e4:	4a55      	ldr	r2, [pc, #340]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f8:	025b      	lsls	r3, r3, #9
 80036fa:	431a      	orrs	r2, r3
 80036fc:	494f      	ldr	r1, [pc, #316]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	3b01      	subs	r3, #1
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	4b49      	ldr	r3, [pc, #292]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	429a      	cmp	r2, r3
 800371e:	d90a      	bls.n	8003736 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003720:	4b46      	ldr	r3, [pc, #280]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	3b01      	subs	r3, #1
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	4942      	ldr	r1, [pc, #264]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 809a 	beq.w	8003878 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003744:	4a3d      	ldr	r2, [pc, #244]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3b01      	subs	r3, #1
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	4939      	ldr	r1, [pc, #228]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3b01      	subs	r3, #1
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d011      	beq.n	8003794 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003770:	4a32      	ldr	r2, [pc, #200]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	3b01      	subs	r3, #1
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003782:	492e      	ldr	r1, [pc, #184]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	3b01      	subs	r3, #1
 800378a:	f042 0210 	orr.w	r2, r2, #16
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037b6:	4921      	ldr	r1, [pc, #132]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	3b01      	subs	r3, #1
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	e019      	b.n	8003802 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d015      	beq.n	8003802 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	3b01      	subs	r3, #1
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037ec:	4913      	ldr	r1, [pc, #76]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800380e:	4a0b      	ldr	r2, [pc, #44]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	3b01      	subs	r3, #1
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003824:	4905      	ldr	r1, [pc, #20]	; (800383c <HAL_OSPIM_Config+0x7fc>)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	3b01      	subs	r3, #1
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	e0c5      	b.n	80039c8 <HAL_OSPIM_Config+0x988>
 800383c:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80bf 	beq.w	80039c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800384a:	4a6e      	ldr	r2, [pc, #440]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	3b01      	subs	r3, #1
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003860:	4968      	ldr	r1, [pc, #416]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	3b01      	subs	r3, #1
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	e0a7      	b.n	80039c8 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003878:	4a62      	ldr	r2, [pc, #392]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3b01      	subs	r3, #1
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	431a      	orrs	r2, r3
 8003890:	495c      	ldr	r1, [pc, #368]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80038aa:	4a56      	ldr	r2, [pc, #344]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	015b      	lsls	r3, r3, #5
 80038c0:	431a      	orrs	r2, r3
 80038c2:	4950      	ldr	r1, [pc, #320]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	f042 0210 	orr.w	r2, r2, #16
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d019      	beq.n	8003914 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80038e0:	4a48      	ldr	r2, [pc, #288]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f8:	049b      	lsls	r3, r3, #18
 80038fa:	431a      	orrs	r2, r3
 80038fc:	4941      	ldr	r1, [pc, #260]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	3b01      	subs	r3, #1
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	e01c      	b.n	800394e <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d018      	beq.n	800394e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800391c:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	3b01      	subs	r3, #1
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003934:	069b      	lsls	r3, r3, #26
 8003936:	431a      	orrs	r2, r3
 8003938:	4932      	ldr	r1, [pc, #200]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	3b01      	subs	r3, #1
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	3b01      	subs	r3, #1
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003972:	049b      	lsls	r3, r3, #18
 8003974:	431a      	orrs	r2, r3
 8003976:	4923      	ldr	r1, [pc, #140]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	3b01      	subs	r3, #1
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	e01c      	b.n	80039c8 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d018      	beq.n	80039c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003996:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	3b01      	subs	r3, #1
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ae:	069b      	lsls	r3, r3, #26
 80039b0:	431a      	orrs	r2, r3
 80039b2:	4914      	ldr	r1, [pc, #80]	; (8003a04 <HAL_OSPIM_Config+0x9c4>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80039c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_OSPIM_Config+0x9c8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0b      	ldr	r2, [pc, #44]	; (8003a08 <HAL_OSPIM_Config+0x9c8>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80039e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_OSPIM_Config+0x9cc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_OSPIM_Config+0x9cc>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80039f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3750      	adds	r7, #80	; 0x50
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	5200b400 	.word	0x5200b400
 8003a08:	52005000 	.word	0x52005000
 8003a0c:	5200a000 	.word	0x5200a000

08003a10 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a20:	e01a      	b.n	8003a58 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d016      	beq.n	8003a58 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2a:	f7fd ff97 	bl	800195c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a46:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e00e      	b.n	8003a76 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a1a      	ldr	r2, [r3, #32]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d1d6      	bne.n	8003a22 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <OSPIM_GetConfig+0x26>
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d802      	bhi.n	8003aa6 <OSPIM_GetConfig+0x26>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
 8003aaa:	e098      	b.n	8003bde <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d10b      	bne.n	8003ae8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <OSPIM_GetConfig+0x16c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003adc:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <OSPIM_GetConfig+0x170>)
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e002      	b.n	8003ae8 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e074      	b.n	8003bd8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003aee:	4a3f      	ldr	r2, [pc, #252]	; (8003bec <OSPIM_GetConfig+0x16c>)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4053      	eors	r3, r2
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4053      	eors	r3, r2
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4053      	eors	r3, r2
 8003b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d018      	beq.n	8003b96 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4053      	eors	r3, r2
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d111      	bne.n	8003b96 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e005      	b.n	8003b96 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4053      	eors	r3, r2
 8003ba6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d111      	bne.n	8003bd2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	611a      	str	r2, [r3, #16]
 8003bc4:	e005      	b.n	8003bd2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d987      	bls.n	8003aee <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	5200b400 	.word	0x5200b400
 8003bf0:	04040222 	.word	0x04040222

08003bf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003bfc:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d00a      	beq.n	8003c1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c08:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e040      	b.n	8003c9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e03e      	b.n	8003c9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c1e:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003c26:	491f      	ldr	r1, [pc, #124]	; (8003ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c2e:	f7fd fe95 	bl	800195c <HAL_GetTick>
 8003c32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c34:	e009      	b.n	8003c4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c36:	f7fd fe91 	bl	800195c <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c44:	d901      	bls.n	8003c4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e028      	b.n	8003c9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	d1ee      	bne.n	8003c36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b1e      	cmp	r3, #30
 8003c5c:	d008      	beq.n	8003c70 <HAL_PWREx_ConfigSupply+0x7c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b2e      	cmp	r3, #46	; 0x2e
 8003c62:	d005      	beq.n	8003c70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b1d      	cmp	r3, #29
 8003c68:	d002      	beq.n	8003c70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b2d      	cmp	r3, #45	; 0x2d
 8003c6e:	d114      	bne.n	8003c9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003c70:	f7fd fe74 	bl	800195c <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c76:	e009      	b.n	8003c8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c78:	f7fd fe70 	bl	800195c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c86:	d901      	bls.n	8003c8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e007      	b.n	8003c9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c98:	d1ee      	bne.n	8003c78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	58024800 	.word	0x58024800

08003ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e3f4      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80b3 	beq.w	8003e2e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc8:	4b95      	ldr	r3, [pc, #596]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cd2:	4b93      	ldr	r3, [pc, #588]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d007      	beq.n	8003cee <HAL_RCC_OscConfig+0x46>
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b18      	cmp	r3, #24
 8003ce2:	d112      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62>
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d10d      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cee:	4b8c      	ldr	r3, [pc, #560]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8098 	beq.w	8003e2c <HAL_RCC_OscConfig+0x184>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 8093 	bne.w	8003e2c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e3cc      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x7a>
 8003d14:	4b82      	ldr	r3, [pc, #520]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a81      	ldr	r2, [pc, #516]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e058      	b.n	8003dd4 <HAL_RCC_OscConfig+0x12c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0xa8>
 8003d2a:	4b7d      	ldr	r3, [pc, #500]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7c      	ldr	r2, [pc, #496]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b7a      	ldr	r3, [pc, #488]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a79      	ldr	r2, [pc, #484]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b77      	ldr	r3, [pc, #476]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a76      	ldr	r2, [pc, #472]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e041      	b.n	8003dd4 <HAL_RCC_OscConfig+0x12c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0xd8>
 8003d5a:	4b71      	ldr	r3, [pc, #452]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a70      	ldr	r2, [pc, #448]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6e      	ldr	r3, [pc, #440]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6d      	ldr	r2, [pc, #436]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6a      	ldr	r2, [pc, #424]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e029      	b.n	8003dd4 <HAL_RCC_OscConfig+0x12c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003d88:	d112      	bne.n	8003db0 <HAL_RCC_OscConfig+0x108>
 8003d8a:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a64      	ldr	r2, [pc, #400]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b62      	ldr	r3, [pc, #392]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a61      	ldr	r2, [pc, #388]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b5f      	ldr	r3, [pc, #380]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a5e      	ldr	r2, [pc, #376]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e011      	b.n	8003dd4 <HAL_RCC_OscConfig+0x12c>
 8003db0:	4b5b      	ldr	r3, [pc, #364]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5a      	ldr	r2, [pc, #360]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a57      	ldr	r2, [pc, #348]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a54      	ldr	r2, [pc, #336]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003dce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fdbe 	bl	800195c <HAL_GetTick>
 8003de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fdba 	bl	800195c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e356      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003df6:	4b4a      	ldr	r3, [pc, #296]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x13c>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fdaa 	bl	800195c <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fda6 	bl	800195c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e342      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e1e:	4b40      	ldr	r3, [pc, #256]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x164>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 808d 	beq.w	8003f56 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3c:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1ba>
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	2b18      	cmp	r3, #24
 8003e56:	d137      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x220>
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d132      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e62:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e314      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 0219 	bic.w	r2, r3, #25
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4926      	ldr	r1, [pc, #152]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e8c:	f7fd fd66 	bl	800195c <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fd fd62 	bl	800195c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e2fe      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	4917      	ldr	r1, [pc, #92]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec6:	e046      	b.n	8003f56 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d029      	beq.n	8003f24 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 0219 	bic.w	r2, r3, #25
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4910      	ldr	r1, [pc, #64]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fd3b 	bl	800195c <HAL_GetTick>
 8003ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eea:	f7fd fd37 	bl	800195c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e2d3      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	4902      	ldr	r1, [pc, #8]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	e01b      	b.n	8003f56 <HAL_RCC_OscConfig+0x2ae>
 8003f1e:	bf00      	nop
 8003f20:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f24:	4b97      	ldr	r3, [pc, #604]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a96      	ldr	r2, [pc, #600]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fd14 	bl	800195c <HAL_GetTick>
 8003f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f38:	f7fd fd10 	bl	800195c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e2ac      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f4a:	4b8e      	ldr	r3, [pc, #568]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d06a      	beq.n	8004038 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f6c:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d007      	beq.n	8003f88 <HAL_RCC_OscConfig+0x2e0>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b18      	cmp	r3, #24
 8003f7c:	d11b      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x30e>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d116      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f88:	4b7e      	ldr	r3, [pc, #504]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e281      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fa0:	4b78      	ldr	r3, [pc, #480]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	4975      	ldr	r1, [pc, #468]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fb4:	e040      	b.n	8004038 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d023      	beq.n	8004006 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003fbe:	4b71      	ldr	r3, [pc, #452]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a70      	ldr	r2, [pc, #448]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fd fcc7 	bl	800195c <HAL_GetTick>
 8003fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fcc3 	bl	800195c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e25f      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fe4:	4b67      	ldr	r3, [pc, #412]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ff0:	4b64      	ldr	r3, [pc, #400]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	4961      	ldr	r1, [pc, #388]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
 8004004:	e018      	b.n	8004038 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004006:	4b5f      	ldr	r3, [pc, #380]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5e      	ldr	r2, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 800400c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fd fca3 	bl	800195c <HAL_GetTick>
 8004016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800401a:	f7fd fc9f 	bl	800195c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e23b      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800402c:	4b55      	ldr	r3, [pc, #340]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d036      	beq.n	80040b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d019      	beq.n	8004080 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404c:	4b4d      	ldr	r3, [pc, #308]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	4a4c      	ldr	r2, [pc, #304]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fc80 	bl	800195c <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fd fc7c 	bl	800195c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e218      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004072:	4b44      	ldr	r3, [pc, #272]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x3b8>
 800407e:	e018      	b.n	80040b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004084:	4a3f      	ldr	r2, [pc, #252]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd fc66 	bl	800195c <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004094:	f7fd fc62 	bl	800195c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1fe      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040a6:	4b37      	ldr	r3, [pc, #220]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 80040a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d036      	beq.n	800412c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040c6:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2e      	ldr	r2, [pc, #184]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 80040cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040d2:	f7fd fc43 	bl	800195c <HAL_GetTick>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040da:	f7fd fc3f 	bl	800195c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1db      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x432>
 80040f8:	e018      	b.n	800412c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004104:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004106:	f7fd fc29 	bl	800195c <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800410e:	f7fd fc25 	bl	800195c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e1c1      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004120:	4b18      	ldr	r3, [pc, #96]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f0      	bne.n	800410e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80af 	beq.w	8004298 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_RCC_OscConfig+0x4e0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <HAL_RCC_OscConfig+0x4e0>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004146:	f7fd fc09 	bl	800195c <HAL_GetTick>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fd fc05 	bl	800195c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b64      	cmp	r3, #100	; 0x64
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1a1      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_OscConfig+0x4e0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10b      	bne.n	800418c <HAL_RCC_OscConfig+0x4e4>
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCC_OscConfig+0x4dc>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
 8004180:	e05b      	b.n	800423a <HAL_RCC_OscConfig+0x592>
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
 8004188:	58024800 	.word	0x58024800
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d112      	bne.n	80041ba <HAL_RCC_OscConfig+0x512>
 8004194:	4b9d      	ldr	r3, [pc, #628]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4a9c      	ldr	r2, [pc, #624]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	6713      	str	r3, [r2, #112]	; 0x70
 80041a0:	4b9a      	ldr	r3, [pc, #616]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a99      	ldr	r2, [pc, #612]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
 80041ac:	4b97      	ldr	r3, [pc, #604]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a96      	ldr	r2, [pc, #600]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041b2:	f023 0304 	bic.w	r3, r3, #4
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	e03f      	b.n	800423a <HAL_RCC_OscConfig+0x592>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d112      	bne.n	80041e8 <HAL_RCC_OscConfig+0x540>
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a91      	ldr	r2, [pc, #580]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
 80041ce:	4b8f      	ldr	r3, [pc, #572]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a8e      	ldr	r2, [pc, #568]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	4b8c      	ldr	r3, [pc, #560]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a8b      	ldr	r2, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
 80041e6:	e028      	b.n	800423a <HAL_RCC_OscConfig+0x592>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b85      	cmp	r3, #133	; 0x85
 80041ee:	d112      	bne.n	8004216 <HAL_RCC_OscConfig+0x56e>
 80041f0:	4b86      	ldr	r3, [pc, #536]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a85      	ldr	r2, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041f6:	f043 0304 	orr.w	r3, r3, #4
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	4b83      	ldr	r3, [pc, #524]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a82      	ldr	r2, [pc, #520]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
 8004208:	4b80      	ldr	r3, [pc, #512]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	4a7f      	ldr	r2, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6713      	str	r3, [r2, #112]	; 0x70
 8004214:	e011      	b.n	800423a <HAL_RCC_OscConfig+0x592>
 8004216:	4b7d      	ldr	r3, [pc, #500]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a7c      	ldr	r2, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	6713      	str	r3, [r2, #112]	; 0x70
 8004222:	4b7a      	ldr	r3, [pc, #488]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4a79      	ldr	r2, [pc, #484]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	6713      	str	r3, [r2, #112]	; 0x70
 800422e:	4b77      	ldr	r3, [pc, #476]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a76      	ldr	r2, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d015      	beq.n	800426e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd fb8b 	bl	800195c <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fd fb87 	bl	800195c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e121      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004260:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ee      	beq.n	800424a <HAL_RCC_OscConfig+0x5a2>
 800426c:	e014      	b.n	8004298 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426e:	f7fd fb75 	bl	800195c <HAL_GetTick>
 8004272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004274:	e00a      	b.n	800428c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fd fb71 	bl	800195c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e10b      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800428c:	4b5f      	ldr	r3, [pc, #380]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ee      	bne.n	8004276 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8100 	beq.w	80044a2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042a2:	4b5a      	ldr	r3, [pc, #360]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042aa:	2b18      	cmp	r3, #24
 80042ac:	f000 80bb 	beq.w	8004426 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	f040 8095 	bne.w	80043e4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b54      	ldr	r3, [pc, #336]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a53      	ldr	r2, [pc, #332]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80042c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fb49 	bl	800195c <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fd fb45 	bl	800195c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0e1      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042e0:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ec:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80042ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f0:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_OscConfig+0x768>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042fc:	0112      	lsls	r2, r2, #4
 80042fe:	430a      	orrs	r2, r1
 8004300:	4942      	ldr	r1, [pc, #264]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004302:	4313      	orrs	r3, r2
 8004304:	628b      	str	r3, [r1, #40]	; 0x28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	3b01      	subs	r3, #1
 800430c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	3b01      	subs	r3, #1
 8004316:	025b      	lsls	r3, r3, #9
 8004318:	b29b      	uxth	r3, r3
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	3b01      	subs	r3, #1
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	3b01      	subs	r3, #1
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004336:	4935      	ldr	r1, [pc, #212]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004338:	4313      	orrs	r3, r2
 800433a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4a32      	ldr	r2, [pc, #200]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800434a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_OscConfig+0x76c>)
 800434e:	4013      	ands	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004354:	00d2      	lsls	r2, r2, #3
 8004356:	492d      	ldr	r1, [pc, #180]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004358:	4313      	orrs	r3, r2
 800435a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	f023 020c 	bic.w	r2, r3, #12
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	4928      	ldr	r1, [pc, #160]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800436a:	4313      	orrs	r3, r2
 800436c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800436e:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f023 0202 	bic.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	4924      	ldr	r1, [pc, #144]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a21      	ldr	r2, [pc, #132]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_RCC_OscConfig+0x764>)
 8004392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004398:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x764>)
 800439e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd face 	bl	800195c <HAL_GetTick>
 80043c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd faca 	bl	800195c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e066      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x71c>
 80043e2:	e05e      	b.n	80044a2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <HAL_RCC_OscConfig+0x764>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fab4 	bl	800195c <HAL_GetTick>
 80043f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043f6:	e00f      	b.n	8004418 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd fab0 	bl	800195c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d908      	bls.n	8004418 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04c      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
 800440a:	bf00      	nop
 800440c:	58024400 	.word	0x58024400
 8004410:	fffffc0c 	.word	0xfffffc0c
 8004414:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCC_OscConfig+0x804>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e9      	bne.n	80043f8 <HAL_RCC_OscConfig+0x750>
 8004424:	e03d      	b.n	80044a2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCC_OscConfig+0x804>)
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <HAL_RCC_OscConfig+0x804>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b01      	cmp	r3, #1
 8004438:	d031      	beq.n	800449e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d12a      	bne.n	800449e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d122      	bne.n	800449e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d11a      	bne.n	800449e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	0a5b      	lsrs	r3, r3, #9
 800446c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d111      	bne.n	800449e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d108      	bne.n	800449e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	0e1b      	lsrs	r3, r3, #24
 8004490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3730      	adds	r7, #48	; 0x30
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	58024400 	.word	0x58024400

080044b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e19c      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b8a      	ldr	r3, [pc, #552]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d910      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b87      	ldr	r3, [pc, #540]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 020f 	bic.w	r2, r3, #15
 80044da:	4985      	ldr	r1, [pc, #532]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b83      	ldr	r3, [pc, #524]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e184      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	4b7b      	ldr	r3, [pc, #492]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800450c:	429a      	cmp	r2, r3
 800450e:	d908      	bls.n	8004522 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004510:	4b78      	ldr	r3, [pc, #480]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	4975      	ldr	r1, [pc, #468]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800451e:	4313      	orrs	r3, r2
 8004520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d010      	beq.n	8004550 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	4b70      	ldr	r3, [pc, #448]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800453a:	429a      	cmp	r2, r3
 800453c:	d908      	bls.n	8004550 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800453e:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	496a      	ldr	r1, [pc, #424]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800454c:	4313      	orrs	r3, r2
 800454e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	4b64      	ldr	r3, [pc, #400]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004568:	429a      	cmp	r2, r3
 800456a:	d908      	bls.n	800457e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800456c:	4b61      	ldr	r3, [pc, #388]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	495e      	ldr	r1, [pc, #376]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800457a:	4313      	orrs	r3, r2
 800457c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004596:	429a      	cmp	r2, r3
 8004598:	d908      	bls.n	80045ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800459a:	4b56      	ldr	r3, [pc, #344]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4953      	ldr	r1, [pc, #332]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	4b4d      	ldr	r3, [pc, #308]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d908      	bls.n	80045da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c8:	4b4a      	ldr	r3, [pc, #296]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f023 020f 	bic.w	r2, r3, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4947      	ldr	r1, [pc, #284]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d055      	beq.n	8004692 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80045e6:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4940      	ldr	r1, [pc, #256]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004600:	4b3c      	ldr	r3, [pc, #240]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d121      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0f6      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d107      	bne.n	8004628 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004618:	4b36      	ldr	r3, [pc, #216]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d115      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0ea      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d107      	bne.n	8004640 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004630:	4b30      	ldr	r3, [pc, #192]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0de      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004640:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0d6      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f023 0207 	bic.w	r2, r3, #7
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4925      	ldr	r1, [pc, #148]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800465e:	4313      	orrs	r3, r2
 8004660:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fd f97b 	bl	800195c <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004668:	e00a      	b.n	8004680 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466a:	f7fd f977 	bl	800195c <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	; 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e0be      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	429a      	cmp	r2, r3
 8004690:	d1eb      	bne.n	800466a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d208      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f023 020f 	bic.w	r2, r3, #15
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d214      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 020f 	bic.w	r2, r3, #15
 80046d6:	4906      	ldr	r1, [pc, #24]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e086      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
 80046f0:	52002000 	.word	0x52002000
 80046f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d010      	beq.n	8004726 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004710:	429a      	cmp	r2, r3
 8004712:	d208      	bcs.n	8004726 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004714:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	4939      	ldr	r1, [pc, #228]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004722:	4313      	orrs	r3, r2
 8004724:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	4b34      	ldr	r3, [pc, #208]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800473e:	429a      	cmp	r2, r3
 8004740:	d208      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	492e      	ldr	r1, [pc, #184]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d010      	beq.n	8004782 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800476c:	429a      	cmp	r2, r3
 800476e:	d208      	bcs.n	8004782 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	4922      	ldr	r1, [pc, #136]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 800477e:	4313      	orrs	r3, r2
 8004780:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800479a:	429a      	cmp	r2, r3
 800479c:	d208      	bcs.n	80047b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800479e:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4917      	ldr	r1, [pc, #92]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80047b0:	f000 f89e 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	4912      	ldr	r1, [pc, #72]	; (800480c <HAL_RCC_ClockConfig+0x35c>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	4a0d      	ldr	r2, [pc, #52]	; (800480c <HAL_RCC_ClockConfig+0x35c>)
 80047d8:	5cd3      	ldrb	r3, [r2, r3]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
 80047e4:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <HAL_RCC_ClockConfig+0x360>)
 80047e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047e8:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <HAL_RCC_ClockConfig+0x364>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_RCC_ClockConfig+0x368>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fc fe52 	bl	800149c <HAL_InitTick>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
 800480c:	0801ebec 	.word	0x0801ebec
 8004810:	24000008 	.word	0x24000008
 8004814:	24000004 	.word	0x24000004
 8004818:	2400000c 	.word	0x2400000c

0800481c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d12a      	bne.n	8004884 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800482e:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 8004830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800483e:	4b29      	ldr	r3, [pc, #164]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 8004840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800484c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004852:	2302      	movs	r3, #2
 8004854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004856:	2303      	movs	r3, #3
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800485e:	2300      	movs	r3, #0
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004862:	f107 031c 	add.w	r3, r7, #28
 8004866:	4619      	mov	r1, r3
 8004868:	481f      	ldr	r0, [pc, #124]	; (80048e8 <HAL_RCC_MCOConfig+0xcc>)
 800486a:	f7fd fc6f 	bl	800214c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	430b      	orrs	r3, r1
 800487c:	4919      	ldr	r1, [pc, #100]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004882:	e02a      	b.n	80048da <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004884:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 8004886:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800488a:	4a16      	ldr	r2, [pc, #88]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 800488c:	f043 0304 	orr.w	r3, r3, #4
 8004890:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 8004896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80048a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a8:	2302      	movs	r3, #2
 80048aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ac:	2303      	movs	r3, #3
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80048b8:	f107 031c 	add.w	r3, r7, #28
 80048bc:	4619      	mov	r1, r3
 80048be:	480b      	ldr	r0, [pc, #44]	; (80048ec <HAL_RCC_MCOConfig+0xd0>)
 80048c0:	f7fd fc44 	bl	800214c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	01d9      	lsls	r1, r3, #7
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	430b      	orrs	r3, r1
 80048d4:	4903      	ldr	r1, [pc, #12]	; (80048e4 <HAL_RCC_MCOConfig+0xc8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	610b      	str	r3, [r1, #16]
}
 80048da:	bf00      	nop
 80048dc:	3730      	adds	r7, #48	; 0x30
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	58020000 	.word	0x58020000
 80048ec:	58020800 	.word	0x58020800

080048f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	; 0x24
 80048f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f6:	4bb3      	ldr	r3, [pc, #716]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048fe:	2b18      	cmp	r3, #24
 8004900:	f200 8155 	bhi.w	8004bae <HAL_RCC_GetSysClockFreq+0x2be>
 8004904:	a201      	add	r2, pc, #4	; (adr r2, 800490c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004971 	.word	0x08004971
 8004910:	08004baf 	.word	0x08004baf
 8004914:	08004baf 	.word	0x08004baf
 8004918:	08004baf 	.word	0x08004baf
 800491c:	08004baf 	.word	0x08004baf
 8004920:	08004baf 	.word	0x08004baf
 8004924:	08004baf 	.word	0x08004baf
 8004928:	08004baf 	.word	0x08004baf
 800492c:	08004997 	.word	0x08004997
 8004930:	08004baf 	.word	0x08004baf
 8004934:	08004baf 	.word	0x08004baf
 8004938:	08004baf 	.word	0x08004baf
 800493c:	08004baf 	.word	0x08004baf
 8004940:	08004baf 	.word	0x08004baf
 8004944:	08004baf 	.word	0x08004baf
 8004948:	08004baf 	.word	0x08004baf
 800494c:	0800499d 	.word	0x0800499d
 8004950:	08004baf 	.word	0x08004baf
 8004954:	08004baf 	.word	0x08004baf
 8004958:	08004baf 	.word	0x08004baf
 800495c:	08004baf 	.word	0x08004baf
 8004960:	08004baf 	.word	0x08004baf
 8004964:	08004baf 	.word	0x08004baf
 8004968:	08004baf 	.word	0x08004baf
 800496c:	080049a3 	.word	0x080049a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004970:	4b94      	ldr	r3, [pc, #592]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800497c:	4b91      	ldr	r3, [pc, #580]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	4a90      	ldr	r2, [pc, #576]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800498e:	e111      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004990:	4b8d      	ldr	r3, [pc, #564]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004992:	61bb      	str	r3, [r7, #24]
    break;
 8004994:	e10e      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004996:	4b8d      	ldr	r3, [pc, #564]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004998:	61bb      	str	r3, [r7, #24]
    break;
 800499a:	e10b      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800499c:	4b8c      	ldr	r3, [pc, #560]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800499e:	61bb      	str	r3, [r7, #24]
    break;
 80049a0:	e108      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049a2:	4b88      	ldr	r3, [pc, #544]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049ac:	4b85      	ldr	r3, [pc, #532]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049b8:	4b82      	ldr	r3, [pc, #520]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049c2:	4b80      	ldr	r3, [pc, #512]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80e1 	beq.w	8004ba8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	f000 8083 	beq.w	8004af4 <HAL_RCC_GetSysClockFreq+0x204>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	f200 80a1 	bhi.w	8004b38 <HAL_RCC_GetSysClockFreq+0x248>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x114>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d056      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a02:	e099      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a04:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02d      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a10:	4b6c      	ldr	r3, [pc, #432]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	08db      	lsrs	r3, r3, #3
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	4a6b      	ldr	r2, [pc, #428]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3a:	4b62      	ldr	r3, [pc, #392]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a6a:	e087      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004bd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aae:	e065      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b40      	ldr	r3, [pc, #256]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af2:	e043      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004be0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b36:	e021      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b7c:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	0a5b      	lsrs	r3, r3, #9
 8004b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b86:	3301      	adds	r3, #1
 8004b88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba0:	ee17 3a90 	vmov	r3, s15
 8004ba4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004ba6:	e005      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    break;
 8004bac:	e002      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bb0:	61bb      	str	r3, [r7, #24]
    break;
 8004bb2:	bf00      	nop
  }

  return sysclockfreq;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3724      	adds	r7, #36	; 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	03d09000 	.word	0x03d09000
 8004bcc:	003d0900 	.word	0x003d0900
 8004bd0:	016e3600 	.word	0x016e3600
 8004bd4:	46000000 	.word	0x46000000
 8004bd8:	4c742400 	.word	0x4c742400
 8004bdc:	4a742400 	.word	0x4a742400
 8004be0:	4bb71b00 	.word	0x4bb71b00

08004be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004bea:	f7ff fe81 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	490f      	ldr	r1, [pc, #60]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x54>)
 8004bfc:	5ccb      	ldrb	r3, [r1, r3]
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x58>)
 8004c20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c22:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x58>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	58024400 	.word	0x58024400
 8004c38:	0801ebec 	.word	0x0801ebec
 8004c3c:	24000008 	.word	0x24000008
 8004c40:	24000004 	.word	0x24000004

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004c48:	f7ff ffcc 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4904      	ldr	r1, [pc, #16]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	0801ebec 	.word	0x0801ebec

08004c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	223f      	movs	r2, #63	; 0x3f
 8004c7e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <HAL_RCC_GetClockConfig+0x7c>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f003 0207 	and.w	r2, r3, #7
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8004c8c:	4b17      	ldr	r3, [pc, #92]	; (8004cec <HAL_RCC_GetClockConfig+0x7c>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8004c98:	4b14      	ldr	r3, [pc, #80]	; (8004cec <HAL_RCC_GetClockConfig+0x7c>)
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f003 020f 	and.w	r2, r3, #15
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8004ca4:	4b11      	ldr	r3, [pc, #68]	; (8004cec <HAL_RCC_GetClockConfig+0x7c>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <HAL_RCC_GetClockConfig+0x7c>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_GetClockConfig+0x7c>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8004cc8:	4b08      	ldr	r3, [pc, #32]	; (8004cec <HAL_RCC_GetClockConfig+0x7c>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_GetClockConfig+0x80>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	601a      	str	r2, [r3, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	52002000 	.word	0x52002000

08004cf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d00:	2300      	movs	r3, #0
 8004d02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d03f      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d18:	d02a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d1e:	d824      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d24:	d018      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d2a:	d81e      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d34:	d007      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d36:	e018      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d38:	4b9f      	ldr	r3, [pc, #636]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4a9e      	ldr	r2, [pc, #632]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d44:	e015      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fedd 	bl	8005b0c <RCCEx_PLL2_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d56:	e00c      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3324      	adds	r3, #36	; 0x24
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 ff86 	bl	8005c70 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d68:	e003      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6e:	e000      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d78:	4b8f      	ldr	r3, [pc, #572]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d84:	498c      	ldr	r1, [pc, #560]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	650b      	str	r3, [r1, #80]	; 0x50
 8004d8a:	e001      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
 8004d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d826      	bhi.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dc1 	.word	0x08004dc1
 8004db0:	08004dcf 	.word	0x08004dcf
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	08004df9 	.word	0x08004df9
 8004dbc:	08004df9 	.word	0x08004df9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc0:	4b7d      	ldr	r3, [pc, #500]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a7c      	ldr	r2, [pc, #496]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dcc:	e015      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fe99 	bl	8005b0c <RCCEx_PLL2_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dde:	e00c      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3324      	adds	r3, #36	; 0x24
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 ff42 	bl	8005c70 <RCCEx_PLL3_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004df0:	e003      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
      break;
 8004df6:	e000      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e00:	4b6d      	ldr	r3, [pc, #436]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	f023 0207 	bic.w	r2, r3, #7
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	496a      	ldr	r1, [pc, #424]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	650b      	str	r3, [r1, #80]	; 0x50
 8004e12:	e001      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d04a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e2c:	d031      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004e2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e32:	d82b      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e38:	d02d      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3e:	d825      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e40:	2bc0      	cmp	r3, #192	; 0xc0
 8004e42:	d02a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e44:	2bc0      	cmp	r3, #192	; 0xc0
 8004e46:	d821      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d016      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d81d      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d007      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004e58:	e018      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e5a:	4b57      	ldr	r3, [pc, #348]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4a56      	ldr	r2, [pc, #344]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e66:	e019      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fe4c 	bl	8005b0c <RCCEx_PLL2_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e78:	e010      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3324      	adds	r3, #36	; 0x24
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fef5 	bl	8005c70 <RCCEx_PLL3_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e8a:	e007      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e90:	e004      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e92:	bf00      	nop
 8004e94:	e002      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e96:	bf00      	nop
 8004e98:	e000      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004ea2:	4b45      	ldr	r3, [pc, #276]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	4942      	ldr	r1, [pc, #264]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	650b      	str	r3, [r1, #80]	; 0x50
 8004eb4:	e001      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
 8004eb8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d04f      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004ece:	d036      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004ed0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004ed4:	d830      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eda:	d032      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee0:	d82a      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004ee2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ee6:	d02e      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004ee8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004eec:	d824      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d018      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d81e      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f02:	d007      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004f04:	e018      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f06:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004f12:	e019      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fdf6 	bl	8005b0c <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004f24:	e010      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3324      	adds	r3, #36	; 0x24
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fe9f 	bl	8005c70 <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004f36:	e007      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3c:	e004      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e002      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5a:	4917      	ldr	r1, [pc, #92]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	650b      	str	r3, [r1, #80]	; 0x50
 8004f60:	e001      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d034      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f76:	2b30      	cmp	r3, #48	; 0x30
 8004f78:	d01c      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004f7a:	2b30      	cmp	r3, #48	; 0x30
 8004f7c:	d817      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d00c      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d813      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d018      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d10f      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f9a:	e010      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fdb2 	bl	8005b0c <RCCEx_PLL2_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004fac:	e007      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb2:	e004      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004fb4:	bf00      	nop
 8004fb6:	e002      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004fb8:	58024400 	.word	0x58024400
      break;
 8004fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fc4:	4b9b      	ldr	r3, [pc, #620]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd0:	4998      	ldr	r1, [pc, #608]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fd6:	e001      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d047      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff0:	d030      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff6:	d82a      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004ff8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ffc:	d02c      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004ffe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005002:	d824      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005008:	d018      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	d81e      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005018:	d007      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800501a:	e018      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4b85      	ldr	r3, [pc, #532]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a84      	ldr	r2, [pc, #528]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005028:	e017      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fd6b 	bl	8005b0c <RCCEx_PLL2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800503a:	e00e      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fe14 	bl	8005c70 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800504c:	e005      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
      break;
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005060:	4b74      	ldr	r3, [pc, #464]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	4971      	ldr	r1, [pc, #452]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800506e:	4313      	orrs	r3, r2
 8005070:	650b      	str	r3, [r1, #80]	; 0x50
 8005072:	e001      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d049      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508c:	d02e      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800508e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005092:	d828      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005098:	d02a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800509a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800509e:	d822      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80050a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050a4:	d026      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80050a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050aa:	d81c      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80050ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b0:	d010      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80050b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b6:	d816      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01d      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d111      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2101      	movs	r1, #1
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd1f 	bl	8005b0c <RCCEx_PLL2_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050d2:	e012      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	2101      	movs	r1, #1
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fdc8 	bl	8005c70 <RCCEx_PLL3_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050e4:	e009      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ea:	e006      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050ec:	bf00      	nop
 80050ee:	e004      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005100:	4b4c      	ldr	r3, [pc, #304]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510c:	4949      	ldr	r1, [pc, #292]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800510e:	4313      	orrs	r3, r2
 8005110:	650b      	str	r3, [r1, #80]	; 0x50
 8005112:	e001      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d053      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800512a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800512e:	d034      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005130:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005134:	d82e      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800513a:	d030      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800513c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005140:	d828      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d02c      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d822      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800514e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005152:	d028      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005158:	d81c      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800515a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515e:	d010      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005164:	d816      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01f      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800516a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800516e:	d111      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fcc8 	bl	8005b0c <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005180:	e014      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3324      	adds	r3, #36	; 0x24
 8005186:	2101      	movs	r1, #1
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fd71 	bl	8005c70 <RCCEx_PLL3_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005192:	e00b      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
      break;
 8005198:	e008      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800519a:	bf00      	nop
 800519c:	e006      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800519e:	bf00      	nop
 80051a0:	e004      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80051a2:	bf00      	nop
 80051a4:	e002      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80051a6:	bf00      	nop
 80051a8:	e000      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80051aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051b2:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051c0:	491c      	ldr	r1, [pc, #112]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	658b      	str	r3, [r1, #88]	; 0x58
 80051c6:	e001      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d031      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e0:	d00e      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80051e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e6:	d814      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d015      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80051ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051f0:	d10f      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	4a0f      	ldr	r2, [pc, #60]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051fe:	e00c      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	2101      	movs	r1, #1
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fc80 	bl	8005b0c <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
      break;
 8005216:	e000      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005224:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522c:	4901      	ldr	r1, [pc, #4]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800522e:	4313      	orrs	r3, r2
 8005230:	650b      	str	r3, [r1, #80]	; 0x50
 8005232:	e003      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d032      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	2b03      	cmp	r3, #3
 800524e:	d81b      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	0800528f 	.word	0x0800528f
 800525c:	08005269 	.word	0x08005269
 8005260:	08005277 	.word	0x08005277
 8005264:	0800528f 	.word	0x0800528f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005268:	4bb2      	ldr	r3, [pc, #712]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4ab1      	ldr	r2, [pc, #708]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800526e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005272:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005274:	e00c      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	2102      	movs	r1, #2
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fc45 	bl	8005b0c <RCCEx_PLL2_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005286:	e003      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	e000      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800528e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005296:	4ba7      	ldr	r3, [pc, #668]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529a:	f023 0203 	bic.w	r2, r3, #3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	49a4      	ldr	r1, [pc, #656]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052a8:	e001      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8086 	beq.w	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052bc:	4b9e      	ldr	r3, [pc, #632]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a9d      	ldr	r2, [pc, #628]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80052c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052c8:	f7fc fb48 	bl	800195c <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ce:	e009      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d0:	f7fc fb44 	bl	800195c <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	; 0x64
 80052dc:	d902      	bls.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	75fb      	strb	r3, [r7, #23]
        break;
 80052e2:	e005      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052e4:	4b94      	ldr	r3, [pc, #592]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ef      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d166      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052f6:	4b8f      	ldr	r3, [pc, #572]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005300:	4053      	eors	r3, r2
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d013      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800530a:	4b8a      	ldr	r3, [pc, #552]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005314:	4b87      	ldr	r3, [pc, #540]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4a86      	ldr	r2, [pc, #536]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800531a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005320:	4b84      	ldr	r3, [pc, #528]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	4a83      	ldr	r2, [pc, #524]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800532c:	4a81      	ldr	r2, [pc, #516]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533c:	d115      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fc fb0d 	bl	800195c <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005344:	e00b      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005346:	f7fc fb09 	bl	800195c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d902      	bls.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	75fb      	strb	r3, [r7, #23]
            break;
 800535c:	e005      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800535e:	4b75      	ldr	r3, [pc, #468]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0ed      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d126      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800537e:	d10d      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005380:	4b6c      	ldr	r3, [pc, #432]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800538e:	0919      	lsrs	r1, r3, #4
 8005390:	4b6a      	ldr	r3, [pc, #424]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005392:	400b      	ands	r3, r1
 8005394:	4967      	ldr	r1, [pc, #412]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005396:	4313      	orrs	r3, r2
 8005398:	610b      	str	r3, [r1, #16]
 800539a:	e005      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800539c:	4b65      	ldr	r3, [pc, #404]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	4a64      	ldr	r2, [pc, #400]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053a6:	6113      	str	r3, [r2, #16]
 80053a8:	4b62      	ldr	r3, [pc, #392]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b6:	495f      	ldr	r1, [pc, #380]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	670b      	str	r3, [r1, #112]	; 0x70
 80053bc:	e004      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	75bb      	strb	r3, [r7, #22]
 80053c2:	e001      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d07f      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053da:	2b28      	cmp	r3, #40	; 0x28
 80053dc:	d866      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080054b3 	.word	0x080054b3
 80053e8:	080054ad 	.word	0x080054ad
 80053ec:	080054ad 	.word	0x080054ad
 80053f0:	080054ad 	.word	0x080054ad
 80053f4:	080054ad 	.word	0x080054ad
 80053f8:	080054ad 	.word	0x080054ad
 80053fc:	080054ad 	.word	0x080054ad
 8005400:	080054ad 	.word	0x080054ad
 8005404:	08005489 	.word	0x08005489
 8005408:	080054ad 	.word	0x080054ad
 800540c:	080054ad 	.word	0x080054ad
 8005410:	080054ad 	.word	0x080054ad
 8005414:	080054ad 	.word	0x080054ad
 8005418:	080054ad 	.word	0x080054ad
 800541c:	080054ad 	.word	0x080054ad
 8005420:	080054ad 	.word	0x080054ad
 8005424:	0800549b 	.word	0x0800549b
 8005428:	080054ad 	.word	0x080054ad
 800542c:	080054ad 	.word	0x080054ad
 8005430:	080054ad 	.word	0x080054ad
 8005434:	080054ad 	.word	0x080054ad
 8005438:	080054ad 	.word	0x080054ad
 800543c:	080054ad 	.word	0x080054ad
 8005440:	080054ad 	.word	0x080054ad
 8005444:	080054b3 	.word	0x080054b3
 8005448:	080054ad 	.word	0x080054ad
 800544c:	080054ad 	.word	0x080054ad
 8005450:	080054ad 	.word	0x080054ad
 8005454:	080054ad 	.word	0x080054ad
 8005458:	080054ad 	.word	0x080054ad
 800545c:	080054ad 	.word	0x080054ad
 8005460:	080054ad 	.word	0x080054ad
 8005464:	080054b3 	.word	0x080054b3
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054ad 	.word	0x080054ad
 8005470:	080054ad 	.word	0x080054ad
 8005474:	080054ad 	.word	0x080054ad
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054ad 	.word	0x080054ad
 8005480:	080054ad 	.word	0x080054ad
 8005484:	080054b3 	.word	0x080054b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	2101      	movs	r1, #1
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fb3c 	bl	8005b0c <RCCEx_PLL2_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005498:	e00c      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3324      	adds	r3, #36	; 0x24
 800549e:	2101      	movs	r1, #1
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fbe5 	bl	8005c70 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80054aa:	e003      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
      break;
 80054b0:	e000      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80054b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054ba:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c8:	491a      	ldr	r1, [pc, #104]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	654b      	str	r3, [r1, #84]	; 0x54
 80054ce:	e001      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d03f      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d821      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005541 	.word	0x08005541
 80054f4:	08005509 	.word	0x08005509
 80054f8:	0800551b 	.word	0x0800551b
 80054fc:	08005541 	.word	0x08005541
 8005500:	08005541 	.word	0x08005541
 8005504:	08005541 	.word	0x08005541
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	2101      	movs	r1, #1
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fafc 	bl	8005b0c <RCCEx_PLL2_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005518:	e013      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3324      	adds	r3, #36	; 0x24
 800551e:	2101      	movs	r1, #1
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fba5 	bl	8005c70 <RCCEx_PLL3_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800552a:	e00a      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	e007      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005532:	bf00      	nop
 8005534:	58024400 	.word	0x58024400
 8005538:	58024800 	.word	0x58024800
 800553c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005548:	4b9f      	ldr	r3, [pc, #636]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	f023 0207 	bic.w	r2, r3, #7
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005554:	499c      	ldr	r1, [pc, #624]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	654b      	str	r3, [r1, #84]	; 0x54
 800555a:	e001      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d039      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005572:	2b05      	cmp	r3, #5
 8005574:	d820      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005576:	a201      	add	r2, pc, #4	; (adr r2, 800557c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	080055bf 	.word	0x080055bf
 8005580:	08005595 	.word	0x08005595
 8005584:	080055a7 	.word	0x080055a7
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055bf 	.word	0x080055bf
 8005590:	080055bf 	.word	0x080055bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3304      	adds	r3, #4
 8005598:	2101      	movs	r1, #1
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fab6 	bl	8005b0c <RCCEx_PLL2_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80055a4:	e00c      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3324      	adds	r3, #36	; 0x24
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fb5f 	bl	8005c70 <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80055b6:	e003      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80055be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10a      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055c6:	4b80      	ldr	r3, [pc, #512]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055d4:	497c      	ldr	r1, [pc, #496]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	658b      	str	r3, [r1, #88]	; 0x58
 80055da:	e001      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
 80055de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d04b      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055f6:	d02e      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80055f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055fc:	d828      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d02a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005608:	d822      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800560a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800560e:	d026      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005610:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005614:	d81c      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561a:	d010      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800561c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005620:	d816      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01d      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d111      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fa6a 	bl	8005b0c <RCCEx_PLL2_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800563c:	e012      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3324      	adds	r3, #36	; 0x24
 8005642:	2102      	movs	r1, #2
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fb13 	bl	8005c70 <RCCEx_PLL3_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800564e:	e009      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	75fb      	strb	r3, [r7, #23]
      break;
 8005654:	e006      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005656:	bf00      	nop
 8005658:	e004      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800565a:	bf00      	nop
 800565c:	e002      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800565e:	bf00      	nop
 8005660:	e000      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800566a:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005678:	4953      	ldr	r1, [pc, #332]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	654b      	str	r3, [r1, #84]	; 0x54
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d04b      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005696:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800569a:	d02e      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800569c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056a0:	d828      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	d02a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80056a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ac:	d822      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80056ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056b2:	d026      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80056b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056b8:	d81c      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	d010      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c4:	d816      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01d      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80056ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ce:	d111      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fa18 	bl	8005b0c <RCCEx_PLL2_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056e0:	e012      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3324      	adds	r3, #36	; 0x24
 80056e6:	2102      	movs	r1, #2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fac1 	bl	8005c70 <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056f2:	e009      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
      break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800571c:	492a      	ldr	r1, [pc, #168]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	658b      	str	r3, [r1, #88]	; 0x58
 8005722:	e001      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005730:	2b00      	cmp	r3, #0
 8005732:	d04d      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800573a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800573e:	d02e      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005740:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005744:	d828      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	d02a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005750:	d822      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005752:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005756:	d026      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005758:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800575c:	d81c      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800575e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005762:	d010      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005768:	d816      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01d      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	d111      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f9c6 	bl	8005b0c <RCCEx_PLL2_Config>
 8005780:	4603      	mov	r3, r0
 8005782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005784:	e012      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3324      	adds	r3, #36	; 0x24
 800578a:	2102      	movs	r1, #2
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fa6f 	bl	8005c70 <RCCEx_PLL3_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005796:	e009      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
      break;
 800579c:	e006      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800579e:	bf00      	nop
 80057a0:	e004      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80057aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057c0:	4901      	ldr	r1, [pc, #4]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	658b      	str	r3, [r1, #88]	; 0x58
 80057c6:	e003      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80057c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3324      	adds	r3, #36	; 0x24
 80057ec:	2102      	movs	r1, #2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fa3e 	bl	8005c70 <RCCEx_PLL3_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057fe:	4b8c      	ldr	r3, [pc, #560]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	4988      	ldr	r1, [pc, #544]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800580e:	4313      	orrs	r3, r2
 8005810:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005828:	d10a      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3324      	adds	r3, #36	; 0x24
 800582e:	2102      	movs	r1, #2
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fa1d 	bl	8005c70 <RCCEx_PLL3_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005840:	4b7b      	ldr	r3, [pc, #492]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800584e:	4978      	ldr	r1, [pc, #480]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005850:	4313      	orrs	r3, r2
 8005852:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d034      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800586a:	d01d      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800586c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005870:	d817      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587a:	d009      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800587c:	e011      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3304      	adds	r3, #4
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f941 	bl	8005b0c <RCCEx_PLL2_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800588e:	e00c      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	2102      	movs	r1, #2
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f9ea 	bl	8005c70 <RCCEx_PLL3_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80058a0:	e003      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	75fb      	strb	r3, [r7, #23]
      break;
 80058a6:	e000      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80058a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058b0:	4b5f      	ldr	r3, [pc, #380]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058be:	495c      	ldr	r1, [pc, #368]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	658b      	str	r3, [r1, #88]	; 0x58
 80058c4:	e001      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d033      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058e0:	d01c      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80058e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058e6:	d816      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80058e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ec:	d003      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80058ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f2:	d007      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80058f4:	e00f      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f6:	4b4e      	ldr	r3, [pc, #312]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	4a4d      	ldr	r2, [pc, #308]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005902:	e00c      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3324      	adds	r3, #36	; 0x24
 8005908:	2101      	movs	r1, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f9b0 	bl	8005c70 <RCCEx_PLL3_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005914:	e003      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
      break;
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800591c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005924:	4b42      	ldr	r3, [pc, #264]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005928:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005932:	493f      	ldr	r1, [pc, #252]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	654b      	str	r3, [r1, #84]	; 0x54
 8005938:	e001      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d029      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005956:	d007      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005958:	e00f      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595a:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	4a34      	ldr	r2, [pc, #208]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005966:	e00b      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	2102      	movs	r1, #2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f8cc 	bl	8005b0c <RCCEx_PLL2_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	75fb      	strb	r3, [r7, #23]
      break;
 800597e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	4927      	ldr	r1, [pc, #156]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005998:	e001      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	; 0x24
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 f95d 	bl	8005c70 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d035      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d6:	d017      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80059d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059dc:	d811      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80059de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e2:	d013      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e8:	d80b      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d010      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d106      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f4:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a0d      	ldr	r2, [pc, #52]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005a00:	e007      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
      break;
 8005a06:	e004      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005a08:	bf00      	nop
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005a0c:	bf00      	nop
 8005a0e:	e000      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	4902      	ldr	r1, [pc, #8]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	654b      	str	r3, [r1, #84]	; 0x54
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a44:	4b30      	ldr	r3, [pc, #192]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a50:	492d      	ldr	r1, [pc, #180]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6e:	4926      	ldr	r1, [pc, #152]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005a80:	4b21      	ldr	r3, [pc, #132]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	491e      	ldr	r1, [pc, #120]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005aa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aa8:	6113      	str	r3, [r2, #16]
 8005aaa:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ab4:	4914      	ldr	r1, [pc, #80]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da08      	bge.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	490e      	ldr	r1, [pc, #56]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	4906      	ldr	r1, [pc, #24]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005af4:	7dbb      	ldrb	r3, [r7, #22]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58024400 	.word	0x58024400

08005b0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b1a:	4b53      	ldr	r3, [pc, #332]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d101      	bne.n	8005b2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e099      	b.n	8005c5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b2a:	4b4f      	ldr	r3, [pc, #316]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4e      	ldr	r2, [pc, #312]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005b30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b36:	f7fb ff11 	bl	800195c <HAL_GetTick>
 8005b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b3c:	e008      	b.n	8005b50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b3e:	f7fb ff0d 	bl	800195c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e086      	b.n	8005c5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b50:	4b45      	ldr	r3, [pc, #276]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f0      	bne.n	8005b3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b5c:	4b42      	ldr	r3, [pc, #264]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	493f      	ldr	r1, [pc, #252]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	025b      	lsls	r3, r3, #9
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	061b      	lsls	r3, r3, #24
 8005b9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ba0:	4931      	ldr	r1, [pc, #196]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ba6:	4b30      	ldr	r3, [pc, #192]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	492d      	ldr	r1, [pc, #180]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005bb8:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	f023 0220 	bic.w	r2, r3, #32
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4928      	ldr	r1, [pc, #160]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005bca:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bd0:	f023 0310 	bic.w	r3, r3, #16
 8005bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005bd6:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <RCCEx_PLL2_Config+0x160>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	69d2      	ldr	r2, [r2, #28]
 8005be2:	00d2      	lsls	r2, r2, #3
 8005be4:	4920      	ldr	r1, [pc, #128]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bea:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bf0:	f043 0310 	orr.w	r3, r3, #16
 8005bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c08:	e00f      	b.n	8005c2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d106      	bne.n	8005c1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c10:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c1c:	e005      	b.n	8005c2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c1e:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	4a11      	ldr	r2, [pc, #68]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a0e      	ldr	r2, [pc, #56]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c36:	f7fb fe91 	bl	800195c <HAL_GetTick>
 8005c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c3c:	e008      	b.n	8005c50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c3e:	f7fb fe8d 	bl	800195c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e006      	b.n	8005c5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <RCCEx_PLL2_Config+0x15c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	58024400 	.word	0x58024400
 8005c6c:	ffff0007 	.word	0xffff0007

08005c70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c7e:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d101      	bne.n	8005c8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e099      	b.n	8005dc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c8e:	4b4f      	ldr	r3, [pc, #316]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a4e      	ldr	r2, [pc, #312]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9a:	f7fb fe5f 	bl	800195c <HAL_GetTick>
 8005c9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ca0:	e008      	b.n	8005cb4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ca2:	f7fb fe5b 	bl	800195c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e086      	b.n	8005dc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005cb4:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005cc0:	4b42      	ldr	r3, [pc, #264]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	051b      	lsls	r3, r3, #20
 8005cce:	493f      	ldr	r1, [pc, #252]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	628b      	str	r3, [r1, #40]	; 0x28
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	025b      	lsls	r3, r3, #9
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	061b      	lsls	r3, r3, #24
 8005d00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d04:	4931      	ldr	r1, [pc, #196]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d0a:	4b30      	ldr	r3, [pc, #192]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	492d      	ldr	r1, [pc, #180]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	4928      	ldr	r1, [pc, #160]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d2e:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d3a:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <RCCEx_PLL3_Config+0x160>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	69d2      	ldr	r2, [r2, #28]
 8005d46:	00d2      	lsls	r2, r2, #3
 8005d48:	4920      	ldr	r1, [pc, #128]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d4e:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	4a1e      	ldr	r2, [pc, #120]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	4a19      	ldr	r2, [pc, #100]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d6c:	e00f      	b.n	8005d8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d106      	bne.n	8005d82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d74:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d80:	e005      	b.n	8005d8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a0e      	ldr	r2, [pc, #56]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9a:	f7fb fddf 	bl	800195c <HAL_GetTick>
 8005d9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005da0:	e008      	b.n	8005db4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005da2:	f7fb fddb 	bl	800195c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e006      	b.n	8005dc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <RCCEx_PLL3_Config+0x15c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	58024400 	.word	0x58024400
 8005dd0:	ffff0007 	.word	0xffff0007

08005dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e049      	b.n	8005e7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f841 	bl	8005e82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f000 fa00 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e054      	b.n	8005f5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a26      	ldr	r2, [pc, #152]	; (8005f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d01d      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_TIM_Base_Start_IT+0xe4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d115      	bne.n	8005f44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <HAL_TIM_Base_Start_IT+0xec>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d015      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0xbe>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	d011      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	e008      	b.n	8005f56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e000      	b.n	8005f58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800
 8005f74:	40000c00 	.word	0x40000c00
 8005f78:	40010400 	.word	0x40010400
 8005f7c:	40001800 	.word	0x40001800
 8005f80:	40014000 	.word	0x40014000
 8005f84:	00010007 	.word	0x00010007

08005f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d122      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d11b      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0202 	mvn.w	r2, #2
 8005fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f905 	bl	80061da <HAL_TIM_IC_CaptureCallback>
 8005fd0:	e005      	b.n	8005fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8f7 	bl	80061c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f908 	bl	80061ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d122      	bne.n	8006038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d11b      	bne.n	8006038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0204 	mvn.w	r2, #4
 8006008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2202      	movs	r2, #2
 800600e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8db 	bl	80061da <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8cd 	bl	80061c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8de 	bl	80061ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b08      	cmp	r3, #8
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0208 	mvn.w	r2, #8
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2204      	movs	r2, #4
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8b1 	bl	80061da <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8a3 	bl	80061c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f8b4 	bl	80061ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b10      	cmp	r3, #16
 8006098:	d122      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d11b      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0210 	mvn.w	r2, #16
 80060b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2208      	movs	r2, #8
 80060b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f887 	bl	80061da <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f879 	bl	80061c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f88a 	bl	80061ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d10e      	bne.n	800610c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0201 	mvn.w	r2, #1
 8006104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fa fee8 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b80      	cmp	r3, #128	; 0x80
 8006118:	d10e      	bne.n	8006138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d107      	bne.n	8006138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f914 	bl	8006360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006146:	d10e      	bne.n	8006166 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d107      	bne.n	8006166 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800615e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f907 	bl	8006374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d10e      	bne.n	8006192 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d107      	bne.n	8006192 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800618a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f838 	bl	8006202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b20      	cmp	r3, #32
 800619e:	d10e      	bne.n	80061be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d107      	bne.n	80061be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f06f 0220 	mvn.w	r2, #32
 80061b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f8c7 	bl	800634c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a40      	ldr	r2, [pc, #256]	; (800632c <TIM_Base_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d013      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3d      	ldr	r2, [pc, #244]	; (8006330 <TIM_Base_SetConfig+0x118>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3c      	ldr	r2, [pc, #240]	; (8006334 <TIM_Base_SetConfig+0x11c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3b      	ldr	r2, [pc, #236]	; (8006338 <TIM_Base_SetConfig+0x120>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3a      	ldr	r2, [pc, #232]	; (800633c <TIM_Base_SetConfig+0x124>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d108      	bne.n	800626a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2f      	ldr	r2, [pc, #188]	; (800632c <TIM_Base_SetConfig+0x114>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01f      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d01b      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2c      	ldr	r2, [pc, #176]	; (8006330 <TIM_Base_SetConfig+0x118>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d017      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2b      	ldr	r2, [pc, #172]	; (8006334 <TIM_Base_SetConfig+0x11c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <TIM_Base_SetConfig+0x120>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00f      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a29      	ldr	r2, [pc, #164]	; (800633c <TIM_Base_SetConfig+0x124>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00b      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a28      	ldr	r2, [pc, #160]	; (8006340 <TIM_Base_SetConfig+0x128>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a27      	ldr	r2, [pc, #156]	; (8006344 <TIM_Base_SetConfig+0x12c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_Base_SetConfig+0x9a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <TIM_Base_SetConfig+0x130>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a10      	ldr	r2, [pc, #64]	; (800632c <TIM_Base_SetConfig+0x114>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00f      	beq.n	8006310 <TIM_Base_SetConfig+0xf8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a12      	ldr	r2, [pc, #72]	; (800633c <TIM_Base_SetConfig+0x124>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00b      	beq.n	8006310 <TIM_Base_SetConfig+0xf8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <TIM_Base_SetConfig+0x128>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d007      	beq.n	8006310 <TIM_Base_SetConfig+0xf8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a10      	ldr	r2, [pc, #64]	; (8006344 <TIM_Base_SetConfig+0x12c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0xf8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a0f      	ldr	r2, [pc, #60]	; (8006348 <TIM_Base_SetConfig+0x130>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d103      	bne.n	8006318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]
}
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40010000 	.word	0x40010000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40010400 	.word	0x40010400
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800

0800634c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b096      	sub	sp, #88	; 0x58
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3303      	adds	r3, #3
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80063a0:	f3ef 8310 	mrs	r3, PRIMASK
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80063aa:	b672      	cpsid	i
#endif
    return(int_posture);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80063ae:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80063b0:	4b55      	ldr	r3, [pc, #340]	; (8006508 <_tx_byte_allocate+0x180>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063be:	621a      	str	r2, [r3, #32]
 80063c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	f383 8810 	msr	PRIMASK, r3
}
 80063ca:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f9b2 	bl	8006738 <_tx_byte_pool_search>
 80063d4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80063d6:	f3ef 8310 	mrs	r3, PRIMASK
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80063e0:	b672      	cpsid	i
    return(int_posture);
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80063e4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80063e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f0:	e006      	b.n	8006400 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d101      	bne.n	8006400 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8006400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0d9      	beq.n	80063ba <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800640a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800640c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <_tx_byte_allocate+0x9c>
 8006412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006414:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f383 8810 	msr	PRIMASK, r3
}
 800641c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800641e:	2300      	movs	r3, #0
 8006420:	653b      	str	r3, [r7, #80]	; 0x50
 8006422:	e06c      	b.n	80064fe <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d061      	beq.n	80064ee <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800642a:	4b38      	ldr	r3, [pc, #224]	; (800650c <_tx_byte_allocate+0x184>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8006432:	2310      	movs	r3, #16
 8006434:	653b      	str	r3, [r7, #80]	; 0x50
 8006436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006438:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f383 8810 	msr	PRIMASK, r3
}
 8006440:	e05d      	b.n	80064fe <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8006442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006444:	4a32      	ldr	r2, [pc, #200]	; (8006510 <_tx_byte_allocate+0x188>)
 8006446:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8006448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800644e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006464:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8006478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006482:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006488:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800648a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800648c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800648e:	675a      	str	r2, [r3, #116]	; 0x74
 8006490:	e011      	b.n	80064b6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8006498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800649c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80064a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064a8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ae:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80064b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80064b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b8:	2209      	movs	r2, #9
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80064bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064be:	2201      	movs	r2, #1
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80064c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80064c8:	4b10      	ldr	r3, [pc, #64]	; (800650c <_tx_byte_allocate+0x184>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	4a0f      	ldr	r2, [pc, #60]	; (800650c <_tx_byte_allocate+0x184>)
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f383 8810 	msr	PRIMASK, r3
}
 80064dc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80064de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80064e0:	f001 fb02 	bl	8007ae8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80064e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ea:	653b      	str	r3, [r7, #80]	; 0x50
 80064ec:	e007      	b.n	80064fe <_tx_byte_allocate+0x176>
 80064ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f383 8810 	msr	PRIMASK, r3
}
 80064f8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80064fa:	2310      	movs	r3, #16
 80064fc:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80064fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8006500:	4618      	mov	r0, r3
 8006502:	3758      	adds	r7, #88	; 0x58
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	240c0798 	.word	0x240c0798
 800650c:	240c0830 	.word	0x240c0830
 8006510:	08006515 	.word	0x08006515

08006514 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	623b      	str	r3, [r7, #32]
    return(posture);
 8006524:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006526:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006528:	b672      	cpsid	i
    return(int_posture);
 800652a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800652c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006532:	4a33      	ldr	r2, [pc, #204]	; (8006600 <_tx_byte_pool_cleanup+0xec>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d158      	bne.n	80065ea <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d152      	bne.n	80065ea <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006548:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d04c      	beq.n	80065ea <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2b      	ldr	r2, [pc, #172]	; (8006604 <_tx_byte_pool_cleanup+0xf0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d147      	bne.n	80065ea <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d043      	beq.n	80065ea <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	1e5a      	subs	r2, r3, #1
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	2200      	movs	r2, #0
 8006582:	625a      	str	r2, [r3, #36]	; 0x24
 8006584:	e013      	b.n	80065ae <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006596:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d102      	bne.n	80065ae <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ac:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	2b09      	cmp	r3, #9
 80065b4:	d119      	bne.n	80065ea <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2210      	movs	r2, #16
 80065ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <_tx_byte_pool_cleanup+0xf4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a10      	ldr	r2, [pc, #64]	; (8006608 <_tx_byte_pool_cleanup+0xf4>)
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f383 8810 	msr	PRIMASK, r3
}
 80065d2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 f987 	bl	80078e8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80065da:	f3ef 8310 	mrs	r3, PRIMASK
 80065de:	61bb      	str	r3, [r7, #24]
    return(posture);
 80065e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80065e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80065e4:	b672      	cpsid	i
    return(int_posture);
 80065e6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f383 8810 	msr	PRIMASK, r3
}
 80065f4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80065f6:	bf00      	nop
 80065f8:	3738      	adds	r7, #56	; 0x38
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	08006515 	.word	0x08006515
 8006604:	42595445 	.word	0x42595445
 8006608:	240c0830 	.word	0x240c0830

0800660c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08e      	sub	sp, #56	; 0x38
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800661a:	2234      	movs	r2, #52	; 0x34
 800661c:	2100      	movs	r1, #0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f016 fc1a 	bl	801ce58 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	f1a3 0208 	sub.w	r2, r3, #8
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2202      	movs	r2, #2
 8006658:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800665e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	4413      	add	r3, r2
 8006664:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	3b04      	subs	r3, #4
 800666a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006678:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	3b04      	subs	r3, #4
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006696:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	3304      	adds	r3, #4
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <_tx_byte_pool_create+0x11c>)
 80066aa:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80066b2:	f3ef 8310 	mrs	r3, PRIMASK
 80066b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80066b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80066ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80066bc:	b672      	cpsid	i
    return(int_posture);
 80066be:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a19      	ldr	r2, [pc, #100]	; (800672c <_tx_byte_pool_create+0x120>)
 80066c6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80066c8:	4b19      	ldr	r3, [pc, #100]	; (8006730 <_tx_byte_pool_create+0x124>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80066d0:	4a18      	ldr	r2, [pc, #96]	; (8006734 <_tx_byte_pool_create+0x128>)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30
 80066e2:	e011      	b.n	8006708 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80066e4:	4b13      	ldr	r3, [pc, #76]	; (8006734 <_tx_byte_pool_create+0x128>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a3a      	ldr	r2, [r7, #32]
 8006706:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <_tx_byte_pool_create+0x124>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <_tx_byte_pool_create+0x124>)
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f383 8810 	msr	PRIMASK, r3
}
 800671c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3738      	adds	r7, #56	; 0x38
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	ffffeeee 	.word	0xffffeeee
 800672c:	42595445 	.word	0x42595445
 8006730:	240c078c 	.word	0x240c078c
 8006734:	240c0788 	.word	0x240c0788

08006738 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8006738:	b480      	push	{r7}
 800673a:	b097      	sub	sp, #92	; 0x5c
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006746:	f3ef 8310 	mrs	r3, PRIMASK
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800674e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006750:	b672      	cpsid	i
    return(int_posture);
 8006752:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8006754:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	3b02      	subs	r3, #2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4413      	add	r3, r2
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676a:	429a      	cmp	r2, r3
 800676c:	d308      	bcc.n	8006780 <_tx_byte_pool_search+0x48>
 800676e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006770:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f383 8810 	msr	PRIMASK, r3
}
 8006778:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	653b      	str	r3, [r7, #80]	; 0x50
 800677e:	e0dd      	b.n	800693c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006780:	4b72      	ldr	r3, [pc, #456]	; (800694c <_tx_byte_pool_search+0x214>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800678a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800679a:	2300      	movs	r3, #0
 800679c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800679e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a0:	3304      	adds	r3, #4
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a68      	ldr	r2, [pc, #416]	; (8006950 <_tx_byte_pool_search+0x218>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d143      	bne.n	800683a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80067b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067bc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80067c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c4:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80067cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	3b08      	subs	r3, #8
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80067da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d257      	bcs.n	8006892 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80067e2:	2300      	movs	r3, #0
 80067e4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	3304      	adds	r3, #4
 80067ea:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a56      	ldr	r2, [pc, #344]	; (8006950 <_tx_byte_pool_search+0x218>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d113      	bne.n	8006822 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006816:	429a      	cmp	r2, r3
 8006818:	d114      	bne.n	8006844 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800681e:	615a      	str	r2, [r3, #20]
 8006820:	e010      	b.n	8006844 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800682c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8006832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006834:	3b01      	subs	r3, #1
 8006836:	64bb      	str	r3, [r7, #72]	; 0x48
 8006838:	e004      	b.n	8006844 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800683a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8006844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800684a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684c:	3b01      	subs	r3, #1
 800684e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006852:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f383 8810 	msr	PRIMASK, r3
}
 800685a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800685c:	f3ef 8310 	mrs	r3, PRIMASK
 8006860:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006862:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006864:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006866:	b672      	cpsid	i
    return(int_posture);
 8006868:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800686a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006872:	429a      	cmp	r2, r3
 8006874:	d009      	beq.n	800688a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006888:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800688a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688c:	2b00      	cmp	r3, #0
 800688e:	d186      	bne.n	800679e <_tx_byte_pool_search+0x66>
 8006890:	e000      	b.n	8006894 <_tx_byte_pool_search+0x15c>
                    break;
 8006892:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8006894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d048      	beq.n	800692c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800689a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b13      	cmp	r3, #19
 80068a2:	d91e      	bls.n	80068e2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068aa:	4413      	add	r3, r2
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80068b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	3304      	adds	r3, #4
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	4a21      	ldr	r2, [pc, #132]	; (8006950 <_tx_byte_pool_search+0x218>)
 80068cc:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068dc:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	3304      	adds	r3, #4
 80068e6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f1a3 0208 	sub.w	r2, r3, #8
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006908:	429a      	cmp	r2, r3
 800690a:	d105      	bne.n	8006918 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800690c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	615a      	str	r2, [r3, #20]
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f383 8810 	msr	PRIMASK, r3
}
 8006922:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006926:	3308      	adds	r3, #8
 8006928:	653b      	str	r3, [r7, #80]	; 0x50
 800692a:	e007      	b.n	800693c <_tx_byte_pool_search+0x204>
 800692c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800692e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8006938:	2300      	movs	r3, #0
 800693a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800693c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800693e:	4618      	mov	r0, r3
 8006940:	375c      	adds	r7, #92	; 0x5c
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	240c0798 	.word	0x240c0798
 8006950:	ffffeeee 	.word	0xffffeeee

08006954 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8006958:	f000 ff04 	bl	8007764 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800695c:	f001 fa8c 	bl	8007e78 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8006960:	4b12      	ldr	r3, [pc, #72]	; (80069ac <_tx_initialize_high_level+0x58>)
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <_tx_initialize_high_level+0x5c>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <_tx_initialize_high_level+0x60>)
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <_tx_initialize_high_level+0x64>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8006978:	4b10      	ldr	r3, [pc, #64]	; (80069bc <_tx_initialize_high_level+0x68>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <_tx_initialize_high_level+0x6c>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <_tx_initialize_high_level+0x70>)
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <_tx_initialize_high_level+0x74>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <_tx_initialize_high_level+0x78>)
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <_tx_initialize_high_level+0x7c>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800699c:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <_tx_initialize_high_level+0x80>)
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	4b0d      	ldr	r3, [pc, #52]	; (80069d8 <_tx_initialize_high_level+0x84>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
#endif
}
 80069a8:	bf00      	nop
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	240c0760 	.word	0x240c0760
 80069b0:	240c0764 	.word	0x240c0764
 80069b4:	240c0768 	.word	0x240c0768
 80069b8:	240c076c 	.word	0x240c076c
 80069bc:	240c0770 	.word	0x240c0770
 80069c0:	240c0774 	.word	0x240c0774
 80069c4:	240c0780 	.word	0x240c0780
 80069c8:	240c0784 	.word	0x240c0784
 80069cc:	240c0788 	.word	0x240c0788
 80069d0:	240c078c 	.word	0x240c078c
 80069d4:	240c0778 	.word	0x240c0778
 80069d8:	240c077c 	.word	0x240c077c

080069dc <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <_tx_initialize_kernel_enter+0x48>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80069e8:	d00c      	beq.n	8006a04 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <_tx_initialize_kernel_enter+0x48>)
 80069ec:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80069f0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80069f2:	f7f9 fc7d 	bl	80002f0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80069f6:	f7ff ffad 	bl	8006954 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <_tx_initialize_kernel_enter+0x4c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <_tx_initialize_kernel_enter+0x4c>)
 8006a02:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <_tx_initialize_kernel_enter+0x48>)
 8006a06:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006a0a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006a0c:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <_tx_initialize_kernel_enter+0x50>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7f9 fddd 	bl	80005d0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8006a16:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <_tx_initialize_kernel_enter+0x48>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006a1c:	f7f9 fca8 	bl	8000370 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006a20:	bf00      	nop
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	24000014 	.word	0x24000014
 8006a28:	240c0830 	.word	0x240c0830
 8006a2c:	240c0790 	.word	0x240c0790

08006a30 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08e      	sub	sp, #56	; 0x38
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3e:	623b      	str	r3, [r7, #32]
    return(posture);
 8006a40:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006a42:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a44:	b672      	cpsid	i
    return(int_posture);
 8006a46:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a4e:	4a37      	ldr	r2, [pc, #220]	; (8006b2c <_tx_queue_cleanup+0xfc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d161      	bne.n	8006b18 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d15b      	bne.n	8006b18 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d055      	beq.n	8006b18 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a2f      	ldr	r2, [pc, #188]	; (8006b30 <_tx_queue_cleanup+0x100>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d150      	bne.n	8006b18 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d04c      	beq.n	8006b18 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	1e5a      	subs	r2, r3, #1
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa0:	e013      	b.n	8006aca <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d102      	bne.n	8006aca <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac8:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d122      	bne.n	8006b18 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	220b      	movs	r2, #11
 8006ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006ae2:	e003      	b.n	8006aec <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	220a      	movs	r2, #10
 8006ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006aec:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <_tx_queue_cleanup+0x104>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a10      	ldr	r2, [pc, #64]	; (8006b34 <_tx_queue_cleanup+0x104>)
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f383 8810 	msr	PRIMASK, r3
}
 8006b00:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fef0 	bl	80078e8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b08:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006b0e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006b10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b12:	b672      	cpsid	i
    return(int_posture);
 8006b14:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f383 8810 	msr	PRIMASK, r3
}
 8006b22:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006b24:	bf00      	nop
 8006b26:	3738      	adds	r7, #56	; 0x38
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	08006a31 	.word	0x08006a31
 8006b30:	51554555 	.word	0x51554555
 8006b34:	240c0830 	.word	0x240c0830

08006b38 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08c      	sub	sp, #48	; 0x30
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8006b46:	2238      	movs	r2, #56	; 0x38
 8006b48:	2100      	movs	r1, #0
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f016 f984 	bl	801ce58 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	fb02 f303 	mul.w	r3, r2, r3
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b96:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b9c:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006ba4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006ba6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ba8:	b672      	cpsid	i
    return(int_posture);
 8006baa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <_tx_queue_create+0xdc>)
 8006bb2:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8006bb4:	4b18      	ldr	r3, [pc, #96]	; (8006c18 <_tx_queue_create+0xe0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8006bbc:	4a17      	ldr	r2, [pc, #92]	; (8006c1c <_tx_queue_create+0xe4>)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8006bce:	e011      	b.n	8006bf4 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8006bd0:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <_tx_queue_create+0xe4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8006bf4:	4b08      	ldr	r3, [pc, #32]	; (8006c18 <_tx_queue_create+0xe0>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	4a07      	ldr	r2, [pc, #28]	; (8006c18 <_tx_queue_create+0xe0>)
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f383 8810 	msr	PRIMASK, r3
}
 8006c08:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3730      	adds	r7, #48	; 0x30
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	51554555 	.word	0x51554555
 8006c18:	240c076c 	.word	0x240c076c
 8006c1c:	240c0768 	.word	0x240c0768

08006c20 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b096      	sub	sp, #88	; 0x58
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006c30:	f3ef 8310 	mrs	r3, PRIMASK
 8006c34:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006c3a:	b672      	cpsid	i
    return(int_posture);
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8006c3e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 8136 	beq.w	8006ebc <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8006c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d13c      	bne.n	8006cd0 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8006c66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c68:	1d13      	adds	r3, r2, #4
 8006c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6e:	1d19      	adds	r1, r3, #4
 8006c70:	6539      	str	r1, [r7, #80]	; 0x50
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d90e      	bls.n	8006c9a <_tx_queue_receive+0x7a>
 8006c7c:	e007      	b.n	8006c8e <_tx_queue_receive+0x6e>
 8006c7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c80:	1d13      	adds	r3, r2, #4
 8006c82:	657b      	str	r3, [r7, #84]	; 0x54
 8006c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c86:	1d19      	adds	r1, r3, #4
 8006c88:	6539      	str	r1, [r7, #80]	; 0x50
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c90:	3b01      	subs	r3, #1
 8006c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f1      	bne.n	8006c7e <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d102      	bne.n	8006caa <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cae:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	1e5a      	subs	r2, r3, #1
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	611a      	str	r2, [r3, #16]
 8006cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	f383 8810 	msr	PRIMASK, r3
}
 8006cce:	e163      	b.n	8006f98 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d153      	bne.n	8006d88 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce4:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8006cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cf2:	1d13      	adds	r3, r2, #4
 8006cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf8:	1d19      	adds	r1, r3, #4
 8006cfa:	6539      	str	r1, [r7, #80]	; 0x50
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d90e      	bls.n	8006d24 <_tx_queue_receive+0x104>
 8006d06:	e007      	b.n	8006d18 <_tx_queue_receive+0xf8>
 8006d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d0a:	1d13      	adds	r3, r2, #4
 8006d0c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d10:	1d19      	adds	r1, r3, #4
 8006d12:	6539      	str	r1, [r7, #80]	; 0x50
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f1      	bne.n	8006d08 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8006d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d26:	3b01      	subs	r3, #1
 8006d28:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	629a      	str	r2, [r3, #40]	; 0x28
 8006d36:	e00e      	b.n	8006d56 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8006d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d4e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d54:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5e:	2200      	movs	r2, #0
 8006d60:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8006d6a:	4b8e      	ldr	r3, [pc, #568]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	4a8c      	ldr	r2, [pc, #560]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	f383 8810 	msr	PRIMASK, r3
}
 8006d7e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8006d80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d82:	f000 fdb1 	bl	80078e8 <_tx_thread_system_resume>
 8006d86:	e107      	b.n	8006f98 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8006d98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d9a:	1d13      	adds	r3, r2, #4
 8006d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da0:	1d19      	adds	r1, r3, #4
 8006da2:	6539      	str	r1, [r7, #80]	; 0x50
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d90e      	bls.n	8006dcc <_tx_queue_receive+0x1ac>
 8006dae:	e007      	b.n	8006dc0 <_tx_queue_receive+0x1a0>
 8006db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006db2:	1d13      	adds	r3, r2, #4
 8006db4:	657b      	str	r3, [r7, #84]	; 0x54
 8006db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db8:	1d19      	adds	r1, r3, #4
 8006dba:	6539      	str	r1, [r7, #80]	; 0x50
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f1      	bne.n	8006db0 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d102      	bne.n	8006ddc <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006de0:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8006de2:	4b70      	ldr	r3, [pc, #448]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	4a6e      	ldr	r2, [pc, #440]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006dea:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8006dec:	4b6d      	ldr	r3, [pc, #436]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	4a6c      	ldr	r2, [pc, #432]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006df4:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8006df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dfa:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8006e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e0a:	1d13      	adds	r3, r2, #4
 8006e0c:	657b      	str	r3, [r7, #84]	; 0x54
 8006e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	6539      	str	r1, [r7, #80]	; 0x50
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d90e      	bls.n	8006e3c <_tx_queue_receive+0x21c>
 8006e1e:	e007      	b.n	8006e30 <_tx_queue_receive+0x210>
 8006e20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e22:	1d13      	adds	r3, r2, #4
 8006e24:	657b      	str	r3, [r7, #84]	; 0x54
 8006e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e28:	1d19      	adds	r1, r3, #4
 8006e2a:	6539      	str	r1, [r7, #80]	; 0x50
 8006e2c:	6812      	ldr	r2, [r2, #0]
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	3b01      	subs	r3, #1
 8006e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f1      	bne.n	8006e20 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d102      	bne.n	8006e4c <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8006e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8006e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d103      	bne.n	8006e6c <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	629a      	str	r2, [r3, #40]	; 0x28
 8006e6a:	e00e      	b.n	8006e8a <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8006e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e82:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e88:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	2200      	movs	r2, #0
 8006e94:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8006e9e:	4b41      	ldr	r3, [pc, #260]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	4a3f      	ldr	r2, [pc, #252]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eaa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	f383 8810 	msr	PRIMASK, r3
}
 8006eb2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8006eb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006eb6:	f000 fd17 	bl	80078e8 <_tx_thread_system_resume>
 8006eba:	e06d      	b.n	8006f98 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d062      	beq.n	8006f88 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006ec2:	4b38      	ldr	r3, [pc, #224]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <_tx_queue_receive+0x2bc>
 8006eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ecc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	f383 8810 	msr	PRIMASK, r3
}
 8006ed4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8006ed6:	230a      	movs	r3, #10
 8006ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eda:	e05d      	b.n	8006f98 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006edc:	4b32      	ldr	r3, [pc, #200]	; (8006fa8 <_tx_queue_receive+0x388>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee4:	4a31      	ldr	r2, [pc, #196]	; (8006fac <_tx_queue_receive+0x38c>)
 8006ee6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8006eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8006efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f14:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8006f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f1a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f20:	675a      	str	r2, [r3, #116]	; 0x74
 8006f22:	e011      	b.n	8006f48 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f2e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f3a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f40:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f46:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8006f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8006f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f52:	2205      	movs	r2, #5
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f58:	2201      	movs	r2, #1
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006f62:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3301      	adds	r3, #1
 8006f68:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <_tx_queue_receive+0x384>)
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	f383 8810 	msr	PRIMASK, r3
}
 8006f76:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006f78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f7a:	f000 fdb5 	bl	8007ae8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f86:	e007      	b.n	8006f98 <_tx_queue_receive+0x378>
 8006f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f383 8810 	msr	PRIMASK, r3
}
 8006f92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8006f94:	230a      	movs	r3, #10
 8006f96:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8006f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3758      	adds	r7, #88	; 0x58
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	240c0830 	.word	0x240c0830
 8006fa8:	240c0798 	.word	0x240c0798
 8006fac:	08006a31 	.word	0x08006a31

08006fb0 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b094      	sub	sp, #80	; 0x50
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8006fca:	b672      	cpsid	i
    return(int_posture);
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 809b 	beq.w	8007116 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d13c      	bne.n	8007060 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	1e5a      	subs	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800700a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800700c:	1d13      	adds	r3, r2, #4
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007012:	1d19      	adds	r1, r3, #4
 8007014:	64b9      	str	r1, [r7, #72]	; 0x48
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701c:	2b01      	cmp	r3, #1
 800701e:	d90e      	bls.n	800703e <_tx_queue_send+0x8e>
 8007020:	e007      	b.n	8007032 <_tx_queue_send+0x82>
 8007022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007024:	1d13      	adds	r3, r2, #4
 8007026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702a:	1d19      	adds	r1, r3, #4
 800702c:	64b9      	str	r1, [r7, #72]	; 0x48
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007034:	3b01      	subs	r3, #1
 8007036:	647b      	str	r3, [r7, #68]	; 0x44
 8007038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f1      	bne.n	8007022 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007044:	429a      	cmp	r2, r3
 8007046:	d102      	bne.n	800704e <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007052:	625a      	str	r2, [r3, #36]	; 0x24
 8007054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007056:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f383 8810 	msr	PRIMASK, r3
}
 800705e:	e0c8      	b.n	80071f2 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	3b01      	subs	r3, #1
 800706a:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	629a      	str	r2, [r3, #40]	; 0x28
 8007078:	e012      	b.n	80070a0 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8007082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708c:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007098:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80070a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a8:	2200      	movs	r2, #0
 80070aa:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b4:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80070bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070be:	1d13      	adds	r3, r2, #4
 80070c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c4:	1d19      	adds	r1, r3, #4
 80070c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d90e      	bls.n	80070f0 <_tx_queue_send+0x140>
 80070d2:	e007      	b.n	80070e4 <_tx_queue_send+0x134>
 80070d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070d6:	1d13      	adds	r3, r2, #4
 80070d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	64b9      	str	r1, [r7, #72]	; 0x48
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e6:	3b01      	subs	r3, #1
 80070e8:	647b      	str	r3, [r7, #68]	; 0x44
 80070ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f1      	bne.n	80070d4 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80070f8:	4b40      	ldr	r3, [pc, #256]	; (80071fc <_tx_queue_send+0x24c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	4a3f      	ldr	r2, [pc, #252]	; (80071fc <_tx_queue_send+0x24c>)
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007104:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f383 8810 	msr	PRIMASK, r3
}
 800710c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800710e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007110:	f000 fbea 	bl	80078e8 <_tx_thread_system_resume>
 8007114:	e06d      	b.n	80071f2 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d062      	beq.n	80071e2 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800711c:	4b37      	ldr	r3, [pc, #220]	; (80071fc <_tx_queue_send+0x24c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <_tx_queue_send+0x186>
 8007124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007126:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	f383 8810 	msr	PRIMASK, r3
}
 800712e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8007130:	230b      	movs	r3, #11
 8007132:	643b      	str	r3, [r7, #64]	; 0x40
 8007134:	e05d      	b.n	80071f2 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007136:	4b32      	ldr	r3, [pc, #200]	; (8007200 <_tx_queue_send+0x250>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	4a31      	ldr	r2, [pc, #196]	; (8007204 <_tx_queue_send+0x254>)
 8007140:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8007148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	2200      	movs	r2, #0
 8007152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800716e:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007174:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800717a:	675a      	str	r2, [r3, #116]	; 0x74
 800717c:	e011      	b.n	80071a2 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007188:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007194:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800719a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a0:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	2205      	movs	r2, #5
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	2201      	movs	r2, #1
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <_tx_queue_send+0x24c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	4a0e      	ldr	r2, [pc, #56]	; (80071fc <_tx_queue_send+0x24c>)
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f383 8810 	msr	PRIMASK, r3
}
 80071d0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80071d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071d4:	f000 fc88 	bl	8007ae8 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071de:	643b      	str	r3, [r7, #64]	; 0x40
 80071e0:	e007      	b.n	80071f2 <_tx_queue_send+0x242>
 80071e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f383 8810 	msr	PRIMASK, r3
}
 80071ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 80071ee:	230b      	movs	r3, #11
 80071f0:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 80071f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3750      	adds	r7, #80	; 0x50
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	240c0830 	.word	0x240c0830
 8007200:	240c0798 	.word	0x240c0798
 8007204:	08006a31 	.word	0x08006a31

08007208 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08e      	sub	sp, #56	; 0x38
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007212:	f3ef 8310 	mrs	r3, PRIMASK
 8007216:	623b      	str	r3, [r7, #32]
    return(posture);
 8007218:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800721a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800721c:	b672      	cpsid	i
    return(int_posture);
 800721e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8007220:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007226:	4a33      	ldr	r2, [pc, #204]	; (80072f4 <_tx_semaphore_cleanup+0xec>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d158      	bne.n	80072de <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d152      	bne.n	80072de <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800723c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	2b00      	cmp	r3, #0
 8007242:	d04c      	beq.n	80072de <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2b      	ldr	r2, [pc, #172]	; (80072f8 <_tx_semaphore_cleanup+0xf0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d147      	bne.n	80072de <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d043      	beq.n	80072de <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	1e5a      	subs	r2, r3, #1
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d103      	bne.n	800727a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	2200      	movs	r2, #0
 8007276:	60da      	str	r2, [r3, #12]
 8007278:	e013      	b.n	80072a2 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007290:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d102      	bne.n	80072a2 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	2b06      	cmp	r3, #6
 80072a8:	d119      	bne.n	80072de <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220d      	movs	r2, #13
 80072ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80072b2:	4b12      	ldr	r3, [pc, #72]	; (80072fc <_tx_semaphore_cleanup+0xf4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	4a10      	ldr	r2, [pc, #64]	; (80072fc <_tx_semaphore_cleanup+0xf4>)
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f383 8810 	msr	PRIMASK, r3
}
 80072c6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fb0d 	bl	80078e8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80072ce:	f3ef 8310 	mrs	r3, PRIMASK
 80072d2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80072d4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80072d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80072d8:	b672      	cpsid	i
    return(int_posture);
 80072da:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f383 8810 	msr	PRIMASK, r3
}
 80072e8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80072ea:	bf00      	nop
 80072ec:	3738      	adds	r7, #56	; 0x38
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	08007209 	.word	0x08007209
 80072f8:	53454d41 	.word	0x53454d41
 80072fc:	240c0830 	.word	0x240c0830

08007300 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800730c:	221c      	movs	r2, #28
 800730e:	2100      	movs	r1, #0
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f015 fda1 	bl	801ce58 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007322:	f3ef 8310 	mrs	r3, PRIMASK
 8007326:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007328:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800732a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800732c:	b672      	cpsid	i
    return(int_posture);
 800732e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8007330:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a18      	ldr	r2, [pc, #96]	; (8007398 <_tx_semaphore_create+0x98>)
 8007336:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8007338:	4b18      	ldr	r3, [pc, #96]	; (800739c <_tx_semaphore_create+0x9c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d109      	bne.n	8007354 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8007340:	4a17      	ldr	r2, [pc, #92]	; (80073a0 <_tx_semaphore_create+0xa0>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	619a      	str	r2, [r3, #24]
 8007352:	e011      	b.n	8007378 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8007354:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <_tx_semaphore_create+0xa0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <_tx_semaphore_create+0x9c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3301      	adds	r3, #1
 800737e:	4a07      	ldr	r2, [pc, #28]	; (800739c <_tx_semaphore_create+0x9c>)
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f383 8810 	msr	PRIMASK, r3
}
 800738c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3728      	adds	r7, #40	; 0x28
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	53454d41 	.word	0x53454d41
 800739c:	240c0764 	.word	0x240c0764
 80073a0:	240c0760 	.word	0x240c0760

080073a4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08e      	sub	sp, #56	; 0x38
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80073ae:	2300      	movs	r3, #0
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073b2:	f3ef 8310 	mrs	r3, PRIMASK
 80073b6:	623b      	str	r3, [r7, #32]
    return(posture);
 80073b8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80073ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80073bc:	b672      	cpsid	i
    return(int_posture);
 80073be:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80073c0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	1e5a      	subs	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	609a      	str	r2, [r3, #8]
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f383 8810 	msr	PRIMASK, r3
}
 80073de:	e068      	b.n	80074b2 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d05d      	beq.n	80074a2 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80073e6:	4b35      	ldr	r3, [pc, #212]	; (80074bc <_tx_semaphore_get+0x118>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <_tx_semaphore_get+0x5c>
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f383 8810 	msr	PRIMASK, r3
}
 80073f8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80073fa:	230d      	movs	r3, #13
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	e058      	b.n	80074b2 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007400:	4b2f      	ldr	r3, [pc, #188]	; (80074c0 <_tx_semaphore_get+0x11c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	4a2e      	ldr	r2, [pc, #184]	; (80074c4 <_tx_semaphore_get+0x120>)
 800740a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007432:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007438:	675a      	str	r2, [r3, #116]	; 0x74
 800743a:	e011      	b.n	8007460 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007446:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007458:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	2206      	movs	r2, #6
 800746e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2201      	movs	r2, #1
 8007474:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <_tx_semaphore_get+0x118>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	4a0e      	ldr	r2, [pc, #56]	; (80074bc <_tx_semaphore_get+0x118>)
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f383 8810 	msr	PRIMASK, r3
}
 8007490:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8007492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007494:	f000 fb28 	bl	8007ae8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
 80074a0:	e007      	b.n	80074b2 <_tx_semaphore_get+0x10e>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f383 8810 	msr	PRIMASK, r3
}
 80074ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80074ae:	230d      	movs	r3, #13
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3738      	adds	r7, #56	; 0x38
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	240c0830 	.word	0x240c0830
 80074c0:	240c0798 	.word	0x240c0798
 80074c4:	08007209 	.word	0x08007209

080074c8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08c      	sub	sp, #48	; 0x30
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074d0:	f3ef 8310 	mrs	r3, PRIMASK
 80074d4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80074d6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80074d8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80074da:	b672      	cpsid	i
    return(int_posture);
 80074dc:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	609a      	str	r2, [r3, #8]
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f383 8810 	msr	PRIMASK, r3
}
 8007500:	e033      	b.n	800756a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	3b01      	subs	r3, #1
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	60da      	str	r2, [r3, #12]
 800751a:	e00e      	b.n	800753a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007520:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a3a      	ldr	r2, [r7, #32]
 8007526:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	6a3a      	ldr	r2, [r7, #32]
 8007538:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	2200      	movs	r2, #0
 8007544:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	2200      	movs	r2, #0
 800754a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800754e:	4b09      	ldr	r3, [pc, #36]	; (8007574 <_tx_semaphore_put+0xac>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	4a07      	ldr	r2, [pc, #28]	; (8007574 <_tx_semaphore_put+0xac>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f383 8810 	msr	PRIMASK, r3
}
 8007562:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007566:	f000 f9bf 	bl	80078e8 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3730      	adds	r7, #48	; 0x30
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	240c0830 	.word	0x240c0830

08007578 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b092      	sub	sp, #72	; 0x48
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8007586:	2300      	movs	r3, #0
 8007588:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800758a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800758c:	21ef      	movs	r1, #239	; 0xef
 800758e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007590:	f015 fc62 	bl	801ce58 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8007594:	22b0      	movs	r2, #176	; 0xb0
 8007596:	2100      	movs	r1, #0
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f015 fc5d 	bl	801ce58 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075b4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075ba:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075c0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075ce:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075d4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80075de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80075e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e4:	3b01      	subs	r3, #1
 80075e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075e8:	4413      	add	r3, r2
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075f0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80075f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d007      	beq.n	800760a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007608:	e006      	b.n	8007618 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800760e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007614:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2203      	movs	r2, #3
 800761c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a48      	ldr	r2, [pc, #288]	; (8007744 <_tx_thread_create+0x1cc>)
 8007622:	655a      	str	r2, [r3, #84]	; 0x54
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800762a:	4947      	ldr	r1, [pc, #284]	; (8007748 <_tx_thread_create+0x1d0>)
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7f8 feff 	bl	8000430 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007632:	f3ef 8310 	mrs	r3, PRIMASK
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800763a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800763c:	b672      	cpsid	i
    return(int_posture);
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007640:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a41      	ldr	r2, [pc, #260]	; (800774c <_tx_thread_create+0x1d4>)
 8007646:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007648:	4b41      	ldr	r3, [pc, #260]	; (8007750 <_tx_thread_create+0x1d8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007650:	4a40      	ldr	r2, [pc, #256]	; (8007754 <_tx_thread_create+0x1dc>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007666:	e016      	b.n	8007696 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007668:	4b3a      	ldr	r3, [pc, #232]	; (8007754 <_tx_thread_create+0x1dc>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007674:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8007696:	4b2e      	ldr	r3, [pc, #184]	; (8007750 <_tx_thread_create+0x1d8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	4a2c      	ldr	r2, [pc, #176]	; (8007750 <_tx_thread_create+0x1d8>)
 800769e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80076a0:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <_tx_thread_create+0x1e0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3301      	adds	r3, #1
 80076a6:	4a2c      	ldr	r2, [pc, #176]	; (8007758 <_tx_thread_create+0x1e0>)
 80076a8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80076aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d129      	bne.n	8007704 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80076b0:	f3ef 8305 	mrs	r3, IPSR
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80076b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80076b8:	4b28      	ldr	r3, [pc, #160]	; (800775c <_tx_thread_create+0x1e4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4313      	orrs	r3, r2
 80076be:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80076c2:	d30d      	bcc.n	80076e0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80076c4:	4b26      	ldr	r3, [pc, #152]	; (8007760 <_tx_thread_create+0x1e8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80076ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d009      	beq.n	80076e4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80076d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d4:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80076d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80076de:	e001      	b.n	80076e4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	647b      	str	r3, [r7, #68]	; 0x44
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	f383 8810 	msr	PRIMASK, r3
}
 80076ee:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f8f9 	bl	80078e8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80076f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01e      	beq.n	800773a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80076fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007700:	63da      	str	r2, [r3, #60]	; 0x3c
 8007702:	e01a      	b.n	800773a <_tx_thread_create+0x1c2>
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f383 8810 	msr	PRIMASK, r3
}
 800770e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007710:	f3ef 8310 	mrs	r3, PRIMASK
 8007714:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007716:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007718:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800771a:	b672      	cpsid	i
    return(int_posture);
 800771c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8007720:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <_tx_thread_create+0x1e0>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3b01      	subs	r3, #1
 8007726:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <_tx_thread_create+0x1e0>)
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	f383 8810 	msr	PRIMASK, r3
}
 8007734:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007736:	f000 f89d 	bl	8007874 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3748      	adds	r7, #72	; 0x48
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	08007dbd 	.word	0x08007dbd
 8007748:	080077dd 	.word	0x080077dd
 800774c:	54485244 	.word	0x54485244
 8007750:	240c07a4 	.word	0x240c07a4
 8007754:	240c07a0 	.word	0x240c07a0
 8007758:	240c0830 	.word	0x240c0830
 800775c:	24000014 	.word	0x24000014
 8007760:	240c079c 	.word	0x240c079c

08007764 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8007768:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <_tx_thread_initialize+0x50>)
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <_tx_thread_initialize+0x54>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	4b11      	ldr	r3, [pc, #68]	; (80077bc <_tx_thread_initialize+0x58>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800777a:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <_tx_thread_initialize+0x5c>)
 800777c:	2220      	movs	r2, #32
 800777e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8007780:	2280      	movs	r2, #128	; 0x80
 8007782:	2100      	movs	r1, #0
 8007784:	480f      	ldr	r0, [pc, #60]	; (80077c4 <_tx_thread_initialize+0x60>)
 8007786:	f015 fb67 	bl	801ce58 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <_tx_thread_initialize+0x64>)
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <_tx_thread_initialize+0x68>)
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <_tx_thread_initialize+0x6c>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <_tx_thread_initialize+0x70>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80077a2:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <_tx_thread_initialize+0x74>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80077aa:	4a0b      	ldr	r2, [pc, #44]	; (80077d8 <_tx_thread_initialize+0x74>)
 80077ac:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80077ae:	bf00      	nop
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	240c0798 	.word	0x240c0798
 80077b8:	240c079c 	.word	0x240c079c
 80077bc:	240c07a8 	.word	0x240c07a8
 80077c0:	240c07ac 	.word	0x240c07ac
 80077c4:	240c07b0 	.word	0x240c07b0
 80077c8:	240c07a0 	.word	0x240c07a0
 80077cc:	240c07a4 	.word	0x240c07a4
 80077d0:	240c0830 	.word	0x240c0830
 80077d4:	240c0834 	.word	0x240c0834
 80077d8:	240c0838 	.word	0x240c0838

080077dc <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80077e2:	4b21      	ldr	r3, [pc, #132]	; (8007868 <_tx_thread_shell_entry+0x8c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80077f4:	4b1d      	ldr	r3, [pc, #116]	; (800786c <_tx_thread_shell_entry+0x90>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <_tx_thread_shell_entry+0x90>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69f8      	ldr	r0, [r7, #28]
 8007802:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007804:	f3ef 8310 	mrs	r3, PRIMASK
 8007808:	607b      	str	r3, [r7, #4]
    return(posture);
 800780a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800780c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800780e:	b672      	cpsid	i
    return(int_posture);
 8007810:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8007812:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	2201      	movs	r2, #1
 8007818:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	2201      	movs	r2, #1
 800781e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	2200      	movs	r2, #0
 8007824:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007826:	4b12      	ldr	r3, [pc, #72]	; (8007870 <_tx_thread_shell_entry+0x94>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3301      	adds	r3, #1
 800782c:	4a10      	ldr	r2, [pc, #64]	; (8007870 <_tx_thread_shell_entry+0x94>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f383 8810 	msr	PRIMASK, r3
}
 800783a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800783c:	f3ef 8314 	mrs	r3, CONTROL
 8007840:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8007842:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 0304 	bic.w	r3, r3, #4
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f383 8814 	msr	CONTROL, r3
}
 8007858:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800785a:	69f8      	ldr	r0, [r7, #28]
 800785c:	f000 f944 	bl	8007ae8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007860:	bf00      	nop
 8007862:	3720      	adds	r7, #32
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	240c0798 	.word	0x240c0798
 800786c:	240c0834 	.word	0x240c0834
 8007870:	240c0830 	.word	0x240c0830

08007874 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8007874:	b480      	push	{r7}
 8007876:	b089      	sub	sp, #36	; 0x24
 8007878:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800787a:	4b17      	ldr	r3, [pc, #92]	; (80078d8 <_tx_thread_system_preempt_check+0x64>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d121      	bne.n	80078ca <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8007886:	4b15      	ldr	r3, [pc, #84]	; (80078dc <_tx_thread_system_preempt_check+0x68>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800788c:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <_tx_thread_system_preempt_check+0x6c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	429a      	cmp	r2, r3
 8007898:	d017      	beq.n	80078ca <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800789a:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <_tx_thread_system_preempt_check+0x70>)
 800789c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80078a2:	f3ef 8305 	mrs	r3, IPSR
 80078a6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80078a8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10c      	bne.n	80078c8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078ae:	f3ef 8310 	mrs	r3, PRIMASK
 80078b2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80078b4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80078b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80078b8:	b662      	cpsie	i
}
 80078ba:	bf00      	nop
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f383 8810 	msr	PRIMASK, r3
}
 80078c6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80078c8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80078ca:	bf00      	nop
 80078cc:	3724      	adds	r7, #36	; 0x24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	240c0830 	.word	0x240c0830
 80078dc:	240c0798 	.word	0x240c0798
 80078e0:	240c079c 	.word	0x240c079c
 80078e4:	e000ed04 	.word	0xe000ed04

080078e8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b096      	sub	sp, #88	; 0x58
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078f0:	f3ef 8310 	mrs	r3, PRIMASK
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80078fa:	b672      	cpsid	i
    return(int_posture);
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80078fe:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	334c      	adds	r3, #76	; 0x4c
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fb91 	bl	8008034 <_tx_timer_system_deactivate>
 8007912:	e002      	b.n	800791a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800791a:	4b6c      	ldr	r3, [pc, #432]	; (8007acc <_tx_thread_system_resume+0x1e4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3b01      	subs	r3, #1
 8007920:	4a6a      	ldr	r2, [pc, #424]	; (8007acc <_tx_thread_system_resume+0x1e4>)
 8007922:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	f040 8083 	bne.w	8007a34 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8097 	beq.w	8007a66 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793c:	2b00      	cmp	r3, #0
 800793e:	d172      	bne.n	8007a26 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800794c:	4a60      	ldr	r2, [pc, #384]	; (8007ad0 <_tx_thread_system_resume+0x1e8>)
 800794e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007954:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8007956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d154      	bne.n	8007a06 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800795c:	495c      	ldr	r1, [pc, #368]	; (8007ad0 <_tx_thread_system_resume+0x1e8>)
 800795e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8007972:	2201      	movs	r2, #1
 8007974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800797c:	4b55      	ldr	r3, [pc, #340]	; (8007ad4 <_tx_thread_system_resume+0x1ec>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007982:	4313      	orrs	r3, r2
 8007984:	4a53      	ldr	r2, [pc, #332]	; (8007ad4 <_tx_thread_system_resume+0x1ec>)
 8007986:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8007988:	4b53      	ldr	r3, [pc, #332]	; (8007ad8 <_tx_thread_system_resume+0x1f0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800798e:	429a      	cmp	r2, r3
 8007990:	d269      	bcs.n	8007a66 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8007992:	4a51      	ldr	r2, [pc, #324]	; (8007ad8 <_tx_thread_system_resume+0x1f0>)
 8007994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007996:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8007998:	4b50      	ldr	r3, [pc, #320]	; (8007adc <_tx_thread_system_resume+0x1f4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800799e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80079a4:	4a4d      	ldr	r2, [pc, #308]	; (8007adc <_tx_thread_system_resume+0x1f4>)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e05c      	b.n	8007a66 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80079ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d257      	bcs.n	8007a66 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80079b6:	4a49      	ldr	r2, [pc, #292]	; (8007adc <_tx_thread_system_resume+0x1f4>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	f383 8810 	msr	PRIMASK, r3
}
 80079c6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80079c8:	4b40      	ldr	r3, [pc, #256]	; (8007acc <_tx_thread_system_resume+0x1e4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80079ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d174      	bne.n	8007abe <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80079d4:	4b42      	ldr	r3, [pc, #264]	; (8007ae0 <_tx_thread_system_resume+0x1f8>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80079dc:	f3ef 8305 	mrs	r3, IPSR
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10c      	bne.n	8007a02 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80079e8:	f3ef 8310 	mrs	r3, PRIMASK
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80079f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80079f2:	b662      	cpsie	i
}
 80079f4:	bf00      	nop
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f383 8810 	msr	PRIMASK, r3
}
 8007a00:	bf00      	nop
}
 8007a02:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8007a04:	e05b      	b.n	8007abe <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8007a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8007a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8007a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a22:	621a      	str	r2, [r3, #32]
 8007a24:	e01f      	b.n	8007a66 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2203      	movs	r2, #3
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30
 8007a32:	e018      	b.n	8007a66 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d014      	beq.n	8007a66 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d010      	beq.n	8007a66 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d106      	bne.n	8007a5a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30
 8007a58:	e005      	b.n	8007a66 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2203      	movs	r2, #3
 8007a64:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8007a66:	4b1f      	ldr	r3, [pc, #124]	; (8007ae4 <_tx_thread_system_resume+0x1fc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a6e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f383 8810 	msr	PRIMASK, r3
}
 8007a76:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007a78:	4b18      	ldr	r3, [pc, #96]	; (8007adc <_tx_thread_system_resume+0x1f4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d020      	beq.n	8007ac4 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007a82:	4b12      	ldr	r3, [pc, #72]	; (8007acc <_tx_thread_system_resume+0x1e4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8007a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d11a      	bne.n	8007ac4 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <_tx_thread_system_resume+0x1f8>)
 8007a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a94:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007a96:	f3ef 8305 	mrs	r3, IPSR
 8007a9a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007a9c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10f      	bne.n	8007ac2 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa6:	613b      	str	r3, [r7, #16]
    return(posture);
 8007aa8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8007aaa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007aac:	b662      	cpsie	i
}
 8007aae:	bf00      	nop
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f383 8810 	msr	PRIMASK, r3
}
 8007aba:	bf00      	nop
}
 8007abc:	e001      	b.n	8007ac2 <_tx_thread_system_resume+0x1da>
                                return;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <_tx_thread_system_resume+0x1dc>
 8007ac2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8007ac4:	3758      	adds	r7, #88	; 0x58
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	240c0830 	.word	0x240c0830
 8007ad0:	240c07b0 	.word	0x240c07b0
 8007ad4:	240c07a8 	.word	0x240c07a8
 8007ad8:	240c07ac 	.word	0x240c07ac
 8007adc:	240c079c 	.word	0x240c079c
 8007ae0:	e000ed04 	.word	0xe000ed04
 8007ae4:	240c0798 	.word	0x240c0798

08007ae8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b09e      	sub	sp, #120	; 0x78
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8007af0:	4b81      	ldr	r3, [pc, #516]	; (8007cf8 <_tx_thread_system_suspend+0x210>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007af6:	f3ef 8310 	mrs	r3, PRIMASK
 8007afa:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8007afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8007afe:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b00:	b672      	cpsid	i
    return(int_posture);
 8007b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8007b04:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d112      	bne.n	8007b34 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8007b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d008      	beq.n	8007b2c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8007b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d004      	beq.n	8007b2c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	334c      	adds	r3, #76	; 0x4c
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fa22 	bl	8007f70 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	4a72      	ldr	r2, [pc, #456]	; (8007cfc <_tx_thread_system_suspend+0x214>)
 8007b32:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8007b34:	4b72      	ldr	r3, [pc, #456]	; (8007d00 <_tx_thread_system_suspend+0x218>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	4a71      	ldr	r2, [pc, #452]	; (8007d00 <_tx_thread_system_suspend+0x218>)
 8007b3c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	f040 80a6 	bne.w	8007c94 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8007b5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d015      	beq.n	8007b8e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8007b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8007b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b72:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8007b74:	4a63      	ldr	r2, [pc, #396]	; (8007d04 <_tx_thread_system_suspend+0x21c>)
 8007b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d157      	bne.n	8007c32 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8007b82:	4960      	ldr	r1, [pc, #384]	; (8007d04 <_tx_thread_system_suspend+0x21c>)
 8007b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007b8c:	e051      	b.n	8007c32 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8007b8e:	4a5d      	ldr	r2, [pc, #372]	; (8007d04 <_tx_thread_system_suspend+0x21c>)
 8007b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b92:	2100      	movs	r1, #0
 8007b94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8007ba2:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <_tx_thread_system_suspend+0x220>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	4013      	ands	r3, r2
 8007bac:	4a56      	ldr	r2, [pc, #344]	; (8007d08 <_tx_thread_system_suspend+0x220>)
 8007bae:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8007bb4:	4b54      	ldr	r3, [pc, #336]	; (8007d08 <_tx_thread_system_suspend+0x220>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8007bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d12b      	bne.n	8007c18 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007bc0:	4b52      	ldr	r3, [pc, #328]	; (8007d0c <_tx_thread_system_suspend+0x224>)
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8007bc6:	4b52      	ldr	r3, [pc, #328]	; (8007d10 <_tx_thread_system_suspend+0x228>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bce:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd2:	f383 8810 	msr	PRIMASK, r3
}
 8007bd6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007bd8:	4b49      	ldr	r3, [pc, #292]	; (8007d00 <_tx_thread_system_suspend+0x218>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8007bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 8081 	bne.w	8007ce8 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007be6:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <_tx_thread_system_suspend+0x22c>)
 8007be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007bee:	f3ef 8305 	mrs	r3, IPSR
 8007bf2:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10c      	bne.n	8007c14 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8007bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8007c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007c04:	b662      	cpsie	i
}
 8007c06:	bf00      	nop
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0e:	f383 8810 	msr	PRIMASK, r3
}
 8007c12:	bf00      	nop
}
 8007c14:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8007c16:	e067      	b.n	8007ce8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8007c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c1a:	fa93 f3a3 	rbit	r3, r3
 8007c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c22:	fab3 f383 	clz	r3, r3
 8007c26:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8007c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c2c:	4413      	add	r3, r2
 8007c2e:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <_tx_thread_system_suspend+0x224>)
 8007c30:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8007c32:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <_tx_thread_system_suspend+0x228>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d12b      	bne.n	8007c94 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007c3c:	4b33      	ldr	r3, [pc, #204]	; (8007d0c <_tx_thread_system_suspend+0x224>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a30      	ldr	r2, [pc, #192]	; (8007d04 <_tx_thread_system_suspend+0x21c>)
 8007c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c46:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <_tx_thread_system_suspend+0x228>)
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c4c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	f383 8810 	msr	PRIMASK, r3
}
 8007c54:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007c56:	4b2a      	ldr	r3, [pc, #168]	; (8007d00 <_tx_thread_system_suspend+0x218>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8007c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d144      	bne.n	8007cec <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007c62:	4b2c      	ldr	r3, [pc, #176]	; (8007d14 <_tx_thread_system_suspend+0x22c>)
 8007c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c68:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007c6a:	f3ef 8305 	mrs	r3, IPSR
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c76:	f3ef 8310 	mrs	r3, PRIMASK
 8007c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007c80:	b662      	cpsie	i
}
 8007c82:	bf00      	nop
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	f383 8810 	msr	PRIMASK, r3
}
 8007c8e:	bf00      	nop
}
 8007c90:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8007c92:	e02b      	b.n	8007cec <_tx_thread_system_suspend+0x204>
 8007c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c96:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f383 8810 	msr	PRIMASK, r3
}
 8007c9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <_tx_thread_system_suspend+0x228>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d022      	beq.n	8007cf0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <_tx_thread_system_suspend+0x218>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8007cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d11c      	bne.n	8007cf0 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007cb6:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <_tx_thread_system_suspend+0x22c>)
 8007cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cbc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007cbe:	f3ef 8305 	mrs	r3, IPSR
 8007cc2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007cc4:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10c      	bne.n	8007ce4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007cca:	f3ef 8310 	mrs	r3, PRIMASK
 8007cce:	617b      	str	r3, [r7, #20]
    return(posture);
 8007cd0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8007cd2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007cd4:	b662      	cpsie	i
}
 8007cd6:	bf00      	nop
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f383 8810 	msr	PRIMASK, r3
}
 8007ce2:	bf00      	nop
}
 8007ce4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8007ce6:	e003      	b.n	8007cf0 <_tx_thread_system_suspend+0x208>
                return;
 8007ce8:	bf00      	nop
 8007cea:	e002      	b.n	8007cf2 <_tx_thread_system_suspend+0x20a>
            return;
 8007cec:	bf00      	nop
 8007cee:	e000      	b.n	8007cf2 <_tx_thread_system_suspend+0x20a>
    return;
 8007cf0:	bf00      	nop
}
 8007cf2:	3778      	adds	r7, #120	; 0x78
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	240c0798 	.word	0x240c0798
 8007cfc:	240c0d9c 	.word	0x240c0d9c
 8007d00:	240c0830 	.word	0x240c0830
 8007d04:	240c07b0 	.word	0x240c07b0
 8007d08:	240c07a8 	.word	0x240c07a8
 8007d0c:	240c07ac 	.word	0x240c07ac
 8007d10:	240c079c 	.word	0x240c079c
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007d1e:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <_tx_thread_time_slice+0x8c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d24:	f3ef 8310 	mrs	r3, PRIMASK
 8007d28:	60fb      	str	r3, [r7, #12]
    return(posture);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8007d2c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007d2e:	b672      	cpsid	i
    return(int_posture);
 8007d30:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8007d32:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007d34:	4b1c      	ldr	r3, [pc, #112]	; (8007da8 <_tx_thread_time_slice+0x90>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d024      	beq.n	8007d8a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d120      	bne.n	8007d8a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <_tx_thread_time_slice+0x94>)
 8007d56:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d013      	beq.n	8007d8a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d10d      	bne.n	8007d8a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	6a12      	ldr	r2, [r2, #32]
 8007d76:	490e      	ldr	r1, [pc, #56]	; (8007db0 <_tx_thread_time_slice+0x98>)
 8007d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <_tx_thread_time_slice+0x9c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0b      	ldr	r2, [pc, #44]	; (8007db0 <_tx_thread_time_slice+0x98>)
 8007d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d86:	4a0c      	ldr	r2, [pc, #48]	; (8007db8 <_tx_thread_time_slice+0xa0>)
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f383 8810 	msr	PRIMASK, r3
}
 8007d94:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	240c0798 	.word	0x240c0798
 8007da8:	240c0840 	.word	0x240c0840
 8007dac:	240c0d9c 	.word	0x240c0d9c
 8007db0:	240c07b0 	.word	0x240c07b0
 8007db4:	240c07ac 	.word	0x240c07ac
 8007db8:	240c079c 	.word	0x240c079c

08007dbc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007dcc:	617b      	str	r3, [r7, #20]
    return(posture);
 8007dce:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007dd0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007dd2:	b672      	cpsid	i
    return(int_posture);
 8007dd4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8007dd6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d10e      	bne.n	8007dfe <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8007de0:	4b13      	ldr	r3, [pc, #76]	; (8007e30 <_tx_thread_timeout+0x74>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a12      	ldr	r2, [pc, #72]	; (8007e30 <_tx_thread_timeout+0x74>)
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f383 8810 	msr	PRIMASK, r3
}
 8007df4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007df6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007df8:	f7ff fd76 	bl	80078e8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007dfc:	e013      	b.n	8007e26 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e02:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e0a:	61bb      	str	r3, [r7, #24]
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f383 8810 	msr	PRIMASK, r3
}
 8007e16:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	69b9      	ldr	r1, [r7, #24]
 8007e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e24:	4798      	blx	r3
}
 8007e26:	bf00      	nop
 8007e28:	3728      	adds	r7, #40	; 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	240c0830 	.word	0x240c0830

08007e34 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3e:	607b      	str	r3, [r7, #4]
    return(posture);
 8007e40:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8007e42:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e44:	b672      	cpsid	i
    return(int_posture);
 8007e46:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8007e48:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <_tx_timer_expiration_process+0x3c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	4a07      	ldr	r2, [pc, #28]	; (8007e70 <_tx_timer_expiration_process+0x3c>)
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f383 8810 	msr	PRIMASK, r3
}
 8007e5e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8007e60:	4804      	ldr	r0, [pc, #16]	; (8007e74 <_tx_timer_expiration_process+0x40>)
 8007e62:	f7ff fd41 	bl	80078e8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	240c0830 	.word	0x240c0830
 8007e74:	240c08e0 	.word	0x240c08e0

08007e78 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b089      	sub	sp, #36	; 0x24
 8007e7c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007e7e:	4b28      	ldr	r3, [pc, #160]	; (8007f20 <_tx_timer_initialize+0xa8>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8007e84:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <_tx_timer_initialize+0xac>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007e8a:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <_tx_timer_initialize+0xb0>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007e90:	4b26      	ldr	r3, [pc, #152]	; (8007f2c <_tx_timer_initialize+0xb4>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8007e96:	4b26      	ldr	r3, [pc, #152]	; (8007f30 <_tx_timer_initialize+0xb8>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007e9c:	2280      	movs	r2, #128	; 0x80
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4824      	ldr	r0, [pc, #144]	; (8007f34 <_tx_timer_initialize+0xbc>)
 8007ea2:	f014 ffd9 	bl	801ce58 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8007ea6:	4b24      	ldr	r3, [pc, #144]	; (8007f38 <_tx_timer_initialize+0xc0>)
 8007ea8:	4a22      	ldr	r2, [pc, #136]	; (8007f34 <_tx_timer_initialize+0xbc>)
 8007eaa:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007eac:	4b23      	ldr	r3, [pc, #140]	; (8007f3c <_tx_timer_initialize+0xc4>)
 8007eae:	4a21      	ldr	r2, [pc, #132]	; (8007f34 <_tx_timer_initialize+0xbc>)
 8007eb0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8007eb2:	4b23      	ldr	r3, [pc, #140]	; (8007f40 <_tx_timer_initialize+0xc8>)
 8007eb4:	4a23      	ldr	r2, [pc, #140]	; (8007f44 <_tx_timer_initialize+0xcc>)
 8007eb6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007eb8:	4b21      	ldr	r3, [pc, #132]	; (8007f40 <_tx_timer_initialize+0xc8>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4a20      	ldr	r2, [pc, #128]	; (8007f40 <_tx_timer_initialize+0xc8>)
 8007ec0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8007ec2:	4b21      	ldr	r3, [pc, #132]	; (8007f48 <_tx_timer_initialize+0xd0>)
 8007ec4:	4a21      	ldr	r2, [pc, #132]	; (8007f4c <_tx_timer_initialize+0xd4>)
 8007ec6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007ec8:	4b21      	ldr	r3, [pc, #132]	; (8007f50 <_tx_timer_initialize+0xd8>)
 8007eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ece:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007ed0:	4b20      	ldr	r3, [pc, #128]	; (8007f54 <_tx_timer_initialize+0xdc>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <_tx_timer_initialize+0xd0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1d      	ldr	r2, [pc, #116]	; (8007f50 <_tx_timer_initialize+0xd8>)
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	491d      	ldr	r1, [pc, #116]	; (8007f54 <_tx_timer_initialize+0xdc>)
 8007ee0:	6809      	ldr	r1, [r1, #0]
 8007ee2:	481c      	ldr	r0, [pc, #112]	; (8007f54 <_tx_timer_initialize+0xdc>)
 8007ee4:	6800      	ldr	r0, [r0, #0]
 8007ee6:	2400      	movs	r4, #0
 8007ee8:	9405      	str	r4, [sp, #20]
 8007eea:	2400      	movs	r4, #0
 8007eec:	9404      	str	r4, [sp, #16]
 8007eee:	9003      	str	r0, [sp, #12]
 8007ef0:	9102      	str	r1, [sp, #8]
 8007ef2:	9201      	str	r2, [sp, #4]
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	4b18      	ldr	r3, [pc, #96]	; (8007f58 <_tx_timer_initialize+0xe0>)
 8007ef8:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <_tx_timer_initialize+0xe4>)
 8007efa:	4919      	ldr	r1, [pc, #100]	; (8007f60 <_tx_timer_initialize+0xe8>)
 8007efc:	4819      	ldr	r0, [pc, #100]	; (8007f64 <_tx_timer_initialize+0xec>)
 8007efe:	f7ff fb3b 	bl	8007578 <_tx_thread_create>
 8007f02:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e5      	bne.n	8007ed6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8007f0a:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <_tx_timer_initialize+0xf0>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8007f10:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <_tx_timer_initialize+0xf4>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd90      	pop	{r4, r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	240c083c 	.word	0x240c083c
 8007f24:	240c0d9c 	.word	0x240c0d9c
 8007f28:	240c0840 	.word	0x240c0840
 8007f2c:	240c08d0 	.word	0x240c08d0
 8007f30:	240c08dc 	.word	0x240c08dc
 8007f34:	240c0844 	.word	0x240c0844
 8007f38:	240c08c4 	.word	0x240c08c4
 8007f3c:	240c08cc 	.word	0x240c08cc
 8007f40:	240c08c8 	.word	0x240c08c8
 8007f44:	240c08c0 	.word	0x240c08c0
 8007f48:	240c0990 	.word	0x240c0990
 8007f4c:	240c099c 	.word	0x240c099c
 8007f50:	240c0994 	.word	0x240c0994
 8007f54:	240c0998 	.word	0x240c0998
 8007f58:	4154494d 	.word	0x4154494d
 8007f5c:	080080a5 	.word	0x080080a5
 8007f60:	0801decc 	.word	0x0801decc
 8007f64:	240c08e0 	.word	0x240c08e0
 8007f68:	240c08d4 	.word	0x240c08d4
 8007f6c:	240c08d8 	.word	0x240c08d8

08007f70 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b089      	sub	sp, #36	; 0x24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d04a      	beq.n	800801a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8a:	d046      	beq.n	800801a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d142      	bne.n	800801a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d902      	bls.n	8007fa0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8007f9a:	231f      	movs	r3, #31
 8007f9c:	61bb      	str	r3, [r7, #24]
 8007f9e:	e002      	b.n	8007fa6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8007fa6:	4b20      	ldr	r3, [pc, #128]	; (8008028 <_tx_timer_system_activate+0xb8>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8007fb2:	4b1e      	ldr	r3, [pc, #120]	; (800802c <_tx_timer_system_activate+0xbc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d30b      	bcc.n	8007fd4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007fbc:	4b1b      	ldr	r3, [pc, #108]	; (800802c <_tx_timer_system_activate+0xbc>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	109b      	asrs	r3, r3, #2
 8007fc6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8007fc8:	4b19      	ldr	r3, [pc, #100]	; (8008030 <_tx_timer_system_activate+0xc0>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e011      	b.n	8008014 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800801a:	bf00      	nop
 800801c:	3724      	adds	r7, #36	; 0x24
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	240c08cc 	.word	0x240c08cc
 800802c:	240c08c8 	.word	0x240c08c8
 8008030:	240c08c4 	.word	0x240c08c4

08008034 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d026      	beq.n	8008096 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	429a      	cmp	r2, r3
 8008054:	d108      	bne.n	8008068 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d117      	bne.n	8008090 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	e013      	b.n	8008090 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d105      	bne.n	8008090 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	619a      	str	r2, [r3, #24]
    }
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
	...

080080a4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b098      	sub	sp, #96	; 0x60
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80080ac:	2300      	movs	r3, #0
 80080ae:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a73      	ldr	r2, [pc, #460]	; (8008280 <_tx_timer_thread_entry+0x1dc>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	f040 80de 	bne.w	8008276 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080ba:	f3ef 8310 	mrs	r3, PRIMASK
 80080be:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80080c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80080c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80080c4:	b672      	cpsid	i
    return(int_posture);
 80080c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80080c8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80080ca:	4b6e      	ldr	r3, [pc, #440]	; (8008284 <_tx_timer_thread_entry+0x1e0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f107 020c 	add.w	r2, r7, #12
 80080de:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80080e0:	4b68      	ldr	r3, [pc, #416]	; (8008284 <_tx_timer_thread_entry+0x1e0>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80080e8:	4b66      	ldr	r3, [pc, #408]	; (8008284 <_tx_timer_thread_entry+0x1e0>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4a65      	ldr	r2, [pc, #404]	; (8008284 <_tx_timer_thread_entry+0x1e0>)
 80080f0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80080f2:	4b64      	ldr	r3, [pc, #400]	; (8008284 <_tx_timer_thread_entry+0x1e0>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b64      	ldr	r3, [pc, #400]	; (8008288 <_tx_timer_thread_entry+0x1e4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d103      	bne.n	8008106 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80080fe:	4b63      	ldr	r3, [pc, #396]	; (800828c <_tx_timer_thread_entry+0x1e8>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a60      	ldr	r2, [pc, #384]	; (8008284 <_tx_timer_thread_entry+0x1e0>)
 8008104:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8008106:	4b62      	ldr	r3, [pc, #392]	; (8008290 <_tx_timer_thread_entry+0x1ec>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800810e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	f383 8810 	msr	PRIMASK, r3
}
 8008116:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008118:	f3ef 8310 	mrs	r3, PRIMASK
 800811c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8008122:	b672      	cpsid	i
    return(int_posture);
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8008126:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8008128:	e07f      	b.n	800822a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8008134:	2300      	movs	r3, #0
 8008136:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8008138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800813a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813c:	429a      	cmp	r2, r3
 800813e:	d102      	bne.n	8008146 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	e00e      	b.n	8008164 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8008146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800814c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800814e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008150:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008156:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8008158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800815a:	f107 020c 	add.w	r2, r7, #12
 800815e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8008160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008162:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8008164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b20      	cmp	r3, #32
 800816a:	d911      	bls.n	8008190 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800816c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8008174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008176:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8008178:	2300      	movs	r3, #0
 800817a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800817c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817e:	f107 0208 	add.w	r2, r7, #8
 8008182:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8008184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008188:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800818a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818c:	60bb      	str	r3, [r7, #8]
 800818e:	e01a      	b.n	80081c6 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8008190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8008196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800819c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80081a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d009      	beq.n	80081c0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80081ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ae:	f107 0208 	add.w	r2, r7, #8
 80081b2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081b8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80081ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	e002      	b.n	80081c6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80081c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c2:	2200      	movs	r2, #0
 80081c4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80081c6:	4a33      	ldr	r2, [pc, #204]	; (8008294 <_tx_timer_thread_entry+0x1f0>)
 80081c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	f383 8810 	msr	PRIMASK, r3
}
 80081d6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80081d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80081de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80081e2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081e4:	f3ef 8310 	mrs	r3, PRIMASK
 80081e8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80081ee:	b672      	cpsid	i
    return(int_posture);
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80081f2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80081f4:	4b27      	ldr	r3, [pc, #156]	; (8008294 <_tx_timer_thread_entry+0x1f0>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081fe:	429a      	cmp	r2, r3
 8008200:	d105      	bne.n	800820e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8008202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008204:	2200      	movs	r2, #0
 8008206:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8008208:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800820a:	f7ff feb1 	bl	8007f70 <_tx_timer_system_activate>
 800820e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008210:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	f383 8810 	msr	PRIMASK, r3
}
 8008218:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800821a:	f3ef 8310 	mrs	r3, PRIMASK
 800821e:	623b      	str	r3, [r7, #32]
    return(posture);
 8008220:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008222:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008224:	b672      	cpsid	i
    return(int_posture);
 8008226:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008228:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f47f af7c 	bne.w	800812a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8008232:	4b17      	ldr	r3, [pc, #92]	; (8008290 <_tx_timer_thread_entry+0x1ec>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d116      	bne.n	8008268 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800823a:	4b17      	ldr	r3, [pc, #92]	; (8008298 <_tx_timer_thread_entry+0x1f4>)
 800823c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800823e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008240:	2203      	movs	r2, #3
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008246:	2201      	movs	r2, #1
 8008248:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800824a:	4b14      	ldr	r3, [pc, #80]	; (800829c <_tx_timer_thread_entry+0x1f8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3301      	adds	r3, #1
 8008250:	4a12      	ldr	r2, [pc, #72]	; (800829c <_tx_timer_thread_entry+0x1f8>)
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008256:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f383 8810 	msr	PRIMASK, r3
}
 800825e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008260:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008262:	f7ff fc41 	bl	8007ae8 <_tx_thread_system_suspend>
 8008266:	e728      	b.n	80080ba <_tx_timer_thread_entry+0x16>
 8008268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800826a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f383 8810 	msr	PRIMASK, r3
}
 8008272:	bf00      	nop
            TX_DISABLE
 8008274:	e721      	b.n	80080ba <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8008276:	bf00      	nop
 8008278:	3760      	adds	r7, #96	; 0x60
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	4154494d 	.word	0x4154494d
 8008284:	240c08cc 	.word	0x240c08cc
 8008288:	240c08c8 	.word	0x240c08c8
 800828c:	240c08c4 	.word	0x240c08c4
 8008290:	240c08d0 	.word	0x240c08d0
 8008294:	240c08dc 	.word	0x240c08dc
 8008298:	240c08e0 	.word	0x240c08e0
 800829c:	240c0830 	.word	0x240c0830

080082a0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80082ae:	2300      	movs	r3, #0
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d102      	bne.n	80082be <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80082b8:	2302      	movs	r3, #2
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
 80082bc:	e029      	b.n	8008312 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a2d      	ldr	r2, [pc, #180]	; (8008378 <_txe_byte_allocate+0xd8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d002      	beq.n	80082ce <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80082c8:	2302      	movs	r3, #2
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
 80082cc:	e021      	b.n	8008312 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80082d4:	2303      	movs	r3, #3
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
 80082d8:	e01b      	b.n	8008312 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80082e0:	2305      	movs	r3, #5
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
 80082e4:	e015      	b.n	8008312 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d902      	bls.n	80082f6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80082f0:	2305      	movs	r3, #5
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
 80082f4:	e00d      	b.n	8008312 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80082fc:	f3ef 8305 	mrs	r3, IPSR
 8008300:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8008302:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008304:	4b1d      	ldr	r3, [pc, #116]	; (800837c <_txe_byte_allocate+0xdc>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4313      	orrs	r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800830e:	2304      	movs	r3, #4
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d108      	bne.n	800832a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008318:	4b19      	ldr	r3, [pc, #100]	; (8008380 <_txe_byte_allocate+0xe0>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	4a18      	ldr	r2, [pc, #96]	; (8008384 <_txe_byte_allocate+0xe4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d101      	bne.n	800832a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008326:	2313      	movs	r3, #19
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d114      	bne.n	800835a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008330:	f3ef 8305 	mrs	r3, IPSR
 8008334:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008336:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008338:	4b10      	ldr	r3, [pc, #64]	; (800837c <_txe_byte_allocate+0xdc>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4313      	orrs	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008342:	f3ef 8305 	mrs	r3, IPSR
 8008346:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008348:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <_txe_byte_allocate+0xdc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4313      	orrs	r3, r2
 8008350:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008354:	d201      	bcs.n	800835a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008356:	2313      	movs	r3, #19
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7fe f80e 	bl	8006388 <_tx_byte_allocate>
 800836c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008370:	4618      	mov	r0, r3
 8008372:	3728      	adds	r7, #40	; 0x28
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	42595445 	.word	0x42595445
 800837c:	24000014 	.word	0x24000014
 8008380:	240c0798 	.word	0x240c0798
 8008384:	240c08e0 	.word	0x240c08e0

08008388 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b092      	sub	sp, #72	; 0x48
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008396:	2300      	movs	r3, #0
 8008398:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80083a0:	2302      	movs	r3, #2
 80083a2:	647b      	str	r3, [r7, #68]	; 0x44
 80083a4:	e075      	b.n	8008492 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80083a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a8:	2b34      	cmp	r3, #52	; 0x34
 80083aa:	d002      	beq.n	80083b2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80083ac:	2302      	movs	r3, #2
 80083ae:	647b      	str	r3, [r7, #68]	; 0x44
 80083b0:	e06f      	b.n	8008492 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083b2:	f3ef 8310 	mrs	r3, PRIMASK
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80083bc:	b672      	cpsid	i
    return(int_posture);
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80083c0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80083c2:	4b3b      	ldr	r3, [pc, #236]	; (80084b0 <_txe_byte_pool_create+0x128>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	4a39      	ldr	r2, [pc, #228]	; (80084b0 <_txe_byte_pool_create+0x128>)
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	f383 8810 	msr	PRIMASK, r3
}
 80083d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80083d8:	4b36      	ldr	r3, [pc, #216]	; (80084b4 <_txe_byte_pool_create+0x12c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80083de:	2300      	movs	r3, #0
 80083e0:	643b      	str	r3, [r7, #64]	; 0x40
 80083e2:	e009      	b.n	80083f8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d00b      	beq.n	8008404 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80083ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80083f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f4:	3301      	adds	r3, #1
 80083f6:	643b      	str	r3, [r7, #64]	; 0x40
 80083f8:	4b2f      	ldr	r3, [pc, #188]	; (80084b8 <_txe_byte_pool_create+0x130>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083fe:	429a      	cmp	r2, r3
 8008400:	d3f0      	bcc.n	80083e4 <_txe_byte_pool_create+0x5c>
 8008402:	e000      	b.n	8008406 <_txe_byte_pool_create+0x7e>
                break;
 8008404:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008406:	f3ef 8310 	mrs	r3, PRIMASK
 800840a:	623b      	str	r3, [r7, #32]
    return(posture);
 800840c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800840e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008410:	b672      	cpsid	i
    return(int_posture);
 8008412:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008414:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <_txe_byte_pool_create+0x128>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a24      	ldr	r2, [pc, #144]	; (80084b0 <_txe_byte_pool_create+0x128>)
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	f383 8810 	msr	PRIMASK, r3
}
 800842a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800842c:	f7ff fa22 	bl	8007874 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008434:	429a      	cmp	r2, r3
 8008436:	d102      	bne.n	800843e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8008438:	2302      	movs	r3, #2
 800843a:	647b      	str	r3, [r7, #68]	; 0x44
 800843c:	e029      	b.n	8008492 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8008444:	2303      	movs	r3, #3
 8008446:	647b      	str	r3, [r7, #68]	; 0x44
 8008448:	e023      	b.n	8008492 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b63      	cmp	r3, #99	; 0x63
 800844e:	d802      	bhi.n	8008456 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8008450:	2305      	movs	r3, #5
 8008452:	647b      	str	r3, [r7, #68]	; 0x44
 8008454:	e01d      	b.n	8008492 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008456:	4b19      	ldr	r3, [pc, #100]	; (80084bc <_txe_byte_pool_create+0x134>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845e:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <_txe_byte_pool_create+0x138>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d101      	bne.n	8008468 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008464:	2313      	movs	r3, #19
 8008466:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008468:	f3ef 8305 	mrs	r3, IPSR
 800846c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800846e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <_txe_byte_pool_create+0x13c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4313      	orrs	r3, r2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800847a:	f3ef 8305 	mrs	r3, IPSR
 800847e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008480:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008482:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <_txe_byte_pool_create+0x13c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4313      	orrs	r3, r2
 8008488:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800848c:	d201      	bcs.n	8008492 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800848e:	2313      	movs	r3, #19
 8008490:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7fe f8b4 	bl	800660c <_tx_byte_pool_create>
 80084a4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80084a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3748      	adds	r7, #72	; 0x48
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	240c0830 	.word	0x240c0830
 80084b4:	240c0788 	.word	0x240c0788
 80084b8:	240c078c 	.word	0x240c078c
 80084bc:	240c0798 	.word	0x240c0798
 80084c0:	240c08e0 	.word	0x240c08e0
 80084c4:	24000014 	.word	0x24000014

080084c8 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b094      	sub	sp, #80	; 0x50
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80084d6:	2300      	movs	r3, #0
 80084d8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80084e0:	2309      	movs	r3, #9
 80084e2:	647b      	str	r3, [r7, #68]	; 0x44
 80084e4:	e083      	b.n	80085ee <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80084e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084e8:	2b38      	cmp	r3, #56	; 0x38
 80084ea:	d002      	beq.n	80084f2 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80084ec:	2309      	movs	r3, #9
 80084ee:	647b      	str	r3, [r7, #68]	; 0x44
 80084f0:	e07d      	b.n	80085ee <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80084f2:	f3ef 8310 	mrs	r3, PRIMASK
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80084fc:	b672      	cpsid	i
    return(int_posture);
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008500:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008502:	4b43      	ldr	r3, [pc, #268]	; (8008610 <_txe_queue_create+0x148>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3301      	adds	r3, #1
 8008508:	4a41      	ldr	r2, [pc, #260]	; (8008610 <_txe_queue_create+0x148>)
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	f383 8810 	msr	PRIMASK, r3
}
 8008516:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8008518:	4b3e      	ldr	r3, [pc, #248]	; (8008614 <_txe_queue_create+0x14c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800851e:	2300      	movs	r3, #0
 8008520:	643b      	str	r3, [r7, #64]	; 0x40
 8008522:	e009      	b.n	8008538 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008528:	429a      	cmp	r2, r3
 800852a:	d00b      	beq.n	8008544 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8008532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008534:	3301      	adds	r3, #1
 8008536:	643b      	str	r3, [r7, #64]	; 0x40
 8008538:	4b37      	ldr	r3, [pc, #220]	; (8008618 <_txe_queue_create+0x150>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800853e:	429a      	cmp	r2, r3
 8008540:	d3f0      	bcc.n	8008524 <_txe_queue_create+0x5c>
 8008542:	e000      	b.n	8008546 <_txe_queue_create+0x7e>
                break;
 8008544:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008546:	f3ef 8310 	mrs	r3, PRIMASK
 800854a:	623b      	str	r3, [r7, #32]
    return(posture);
 800854c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800854e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008550:	b672      	cpsid	i
    return(int_posture);
 8008552:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008554:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008556:	4b2e      	ldr	r3, [pc, #184]	; (8008610 <_txe_queue_create+0x148>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3b01      	subs	r3, #1
 800855c:	4a2c      	ldr	r2, [pc, #176]	; (8008610 <_txe_queue_create+0x148>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	f383 8810 	msr	PRIMASK, r3
}
 800856a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800856c:	f7ff f982 	bl	8007874 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	429a      	cmp	r2, r3
 8008576:	d102      	bne.n	800857e <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8008578:	2309      	movs	r3, #9
 800857a:	647b      	str	r3, [r7, #68]	; 0x44
 800857c:	e037      	b.n	80085ee <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d102      	bne.n	800858a <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8008584:	2303      	movs	r3, #3
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
 8008588:	e031      	b.n	80085ee <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8008590:	2305      	movs	r3, #5
 8008592:	647b      	str	r3, [r7, #68]	; 0x44
 8008594:	e02b      	b.n	80085ee <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b10      	cmp	r3, #16
 800859a:	d902      	bls.n	80085a2 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800859c:	2305      	movs	r3, #5
 800859e:	647b      	str	r3, [r7, #68]	; 0x44
 80085a0:	e025      	b.n	80085ee <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80085a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a4:	089b      	lsrs	r3, r3, #2
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d902      	bls.n	80085b2 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80085ac:	2305      	movs	r3, #5
 80085ae:	647b      	str	r3, [r7, #68]	; 0x44
 80085b0:	e01d      	b.n	80085ee <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80085b2:	4b1a      	ldr	r3, [pc, #104]	; (800861c <_txe_queue_create+0x154>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	4a19      	ldr	r2, [pc, #100]	; (8008620 <_txe_queue_create+0x158>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d101      	bne.n	80085c4 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80085c0:	2313      	movs	r3, #19
 80085c2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80085c4:	f3ef 8305 	mrs	r3, IPSR
 80085c8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80085ca:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80085cc:	4b15      	ldr	r3, [pc, #84]	; (8008624 <_txe_queue_create+0x15c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80085d6:	f3ef 8305 	mrs	r3, IPSR
 80085da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80085dc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80085de:	4b11      	ldr	r3, [pc, #68]	; (8008624 <_txe_queue_create+0x15c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80085e8:	d201      	bcs.n	80085ee <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80085ea:	2313      	movs	r3, #19
 80085ec:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80085ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d108      	bne.n	8008606 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80085f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7fe fa9a 	bl	8006b38 <_tx_queue_create>
 8008604:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8008606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008608:	4618      	mov	r0, r3
 800860a:	3748      	adds	r7, #72	; 0x48
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	240c0830 	.word	0x240c0830
 8008614:	240c0768 	.word	0x240c0768
 8008618:	240c076c 	.word	0x240c076c
 800861c:	240c0798 	.word	0x240c0798
 8008620:	240c08e0 	.word	0x240c08e0
 8008624:	24000014 	.word	0x24000014

08008628 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008634:	2300      	movs	r3, #0
 8008636:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d102      	bne.n	8008644 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800863e:	2309      	movs	r3, #9
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	e025      	b.n	8008690 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a18      	ldr	r2, [pc, #96]	; (80086ac <_txe_queue_receive+0x84>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d002      	beq.n	8008654 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800864e:	2309      	movs	r3, #9
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	e01d      	b.n	8008690 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800865a:	2303      	movs	r3, #3
 800865c:	61fb      	str	r3, [r7, #28]
 800865e:	e017      	b.n	8008690 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d014      	beq.n	8008690 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008666:	f3ef 8305 	mrs	r3, IPSR
 800866a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800866c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800866e:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <_txe_queue_receive+0x88>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4313      	orrs	r3, r2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008678:	2304      	movs	r3, #4
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	e008      	b.n	8008690 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800867e:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <_txe_queue_receive+0x8c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <_txe_queue_receive+0x90>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d101      	bne.n	8008690 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800868c:	2304      	movs	r3, #4
 800868e:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7fe fac0 	bl	8006c20 <_tx_queue_receive>
 80086a0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80086a2:	69fb      	ldr	r3, [r7, #28]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	51554555 	.word	0x51554555
 80086b0:	24000014 	.word	0x24000014
 80086b4:	240c0798 	.word	0x240c0798
 80086b8:	240c08e0 	.word	0x240c08e0

080086bc <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80086d2:	2309      	movs	r3, #9
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	e025      	b.n	8008724 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a18      	ldr	r2, [pc, #96]	; (8008740 <_txe_queue_send+0x84>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d002      	beq.n	80086e8 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80086e2:	2309      	movs	r3, #9
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	e01d      	b.n	8008724 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80086ee:	2303      	movs	r3, #3
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	e017      	b.n	8008724 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d014      	beq.n	8008724 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80086fa:	f3ef 8305 	mrs	r3, IPSR
 80086fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008700:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <_txe_queue_send+0x88>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4313      	orrs	r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800870c:	2304      	movs	r3, #4
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	e008      	b.n	8008724 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <_txe_queue_send+0x8c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	4a0c      	ldr	r2, [pc, #48]	; (800874c <_txe_queue_send+0x90>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d101      	bne.n	8008724 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8008720:	2304      	movs	r3, #4
 8008722:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7fe fc3e 	bl	8006fb0 <_tx_queue_send>
 8008734:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8008736:	69fb      	ldr	r3, [r7, #28]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3720      	adds	r7, #32
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	51554555 	.word	0x51554555
 8008744:	24000014 	.word	0x24000014
 8008748:	240c0798 	.word	0x240c0798
 800874c:	240c08e0 	.word	0x240c08e0

08008750 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b092      	sub	sp, #72	; 0x48
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800875e:	2300      	movs	r3, #0
 8008760:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008768:	230c      	movs	r3, #12
 800876a:	647b      	str	r3, [r7, #68]	; 0x44
 800876c:	e054      	b.n	8008818 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b1c      	cmp	r3, #28
 8008772:	d002      	beq.n	800877a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008774:	230c      	movs	r3, #12
 8008776:	647b      	str	r3, [r7, #68]	; 0x44
 8008778:	e04e      	b.n	8008818 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800877a:	f3ef 8310 	mrs	r3, PRIMASK
 800877e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008784:	b672      	cpsid	i
    return(int_posture);
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008788:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800878a:	4b36      	ldr	r3, [pc, #216]	; (8008864 <_txe_semaphore_create+0x114>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	4a34      	ldr	r2, [pc, #208]	; (8008864 <_txe_semaphore_create+0x114>)
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	f383 8810 	msr	PRIMASK, r3
}
 800879e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80087a0:	4b31      	ldr	r3, [pc, #196]	; (8008868 <_txe_semaphore_create+0x118>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80087a6:	2300      	movs	r3, #0
 80087a8:	643b      	str	r3, [r7, #64]	; 0x40
 80087aa:	e009      	b.n	80087c0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d00b      	beq.n	80087cc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80087b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80087ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087bc:	3301      	adds	r3, #1
 80087be:	643b      	str	r3, [r7, #64]	; 0x40
 80087c0:	4b2a      	ldr	r3, [pc, #168]	; (800886c <_txe_semaphore_create+0x11c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d3f0      	bcc.n	80087ac <_txe_semaphore_create+0x5c>
 80087ca:	e000      	b.n	80087ce <_txe_semaphore_create+0x7e>
                break;
 80087cc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087ce:	f3ef 8310 	mrs	r3, PRIMASK
 80087d2:	623b      	str	r3, [r7, #32]
    return(posture);
 80087d4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80087d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80087d8:	b672      	cpsid	i
    return(int_posture);
 80087da:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80087dc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80087de:	4b21      	ldr	r3, [pc, #132]	; (8008864 <_txe_semaphore_create+0x114>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	4a1f      	ldr	r2, [pc, #124]	; (8008864 <_txe_semaphore_create+0x114>)
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	f383 8810 	msr	PRIMASK, r3
}
 80087f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80087f4:	f7ff f83e 	bl	8007874 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d102      	bne.n	8008806 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8008800:	230c      	movs	r3, #12
 8008802:	647b      	str	r3, [r7, #68]	; 0x44
 8008804:	e008      	b.n	8008818 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008806:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <_txe_semaphore_create+0x120>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800880c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880e:	4a19      	ldr	r2, [pc, #100]	; (8008874 <_txe_semaphore_create+0x124>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d101      	bne.n	8008818 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008814:	2313      	movs	r3, #19
 8008816:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800881a:	2b00      	cmp	r3, #0
 800881c:	d114      	bne.n	8008848 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800881e:	f3ef 8305 	mrs	r3, IPSR
 8008822:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008824:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <_txe_semaphore_create+0x128>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4313      	orrs	r3, r2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008830:	f3ef 8305 	mrs	r3, IPSR
 8008834:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008836:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <_txe_semaphore_create+0x128>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4313      	orrs	r3, r2
 800883e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008842:	d201      	bcs.n	8008848 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008844:	2313      	movs	r3, #19
 8008846:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7fe fd54 	bl	8007300 <_tx_semaphore_create>
 8008858:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800885a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800885c:	4618      	mov	r0, r3
 800885e:	3748      	adds	r7, #72	; 0x48
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	240c0830 	.word	0x240c0830
 8008868:	240c0760 	.word	0x240c0760
 800886c:	240c0764 	.word	0x240c0764
 8008870:	240c0798 	.word	0x240c0798
 8008874:	240c08e0 	.word	0x240c08e0
 8008878:	24000014 	.word	0x24000014

0800887c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008890:	230c      	movs	r3, #12
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	e01f      	b.n	80088d6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <_txe_semaphore_get+0x74>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d002      	beq.n	80088a6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80088a0:	230c      	movs	r3, #12
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e017      	b.n	80088d6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d014      	beq.n	80088d6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80088ac:	f3ef 8305 	mrs	r3, IPSR
 80088b0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80088b2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80088b4:	4b0f      	ldr	r3, [pc, #60]	; (80088f4 <_txe_semaphore_get+0x78>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80088be:	2304      	movs	r3, #4
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	e008      	b.n	80088d6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <_txe_semaphore_get+0x7c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	4a0b      	ldr	r2, [pc, #44]	; (80088fc <_txe_semaphore_get+0x80>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d101      	bne.n	80088d6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80088d2:	2304      	movs	r3, #4
 80088d4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d104      	bne.n	80088e6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7fe fd60 	bl	80073a4 <_tx_semaphore_get>
 80088e4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80088e6:	697b      	ldr	r3, [r7, #20]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	53454d41 	.word	0x53454d41
 80088f4:	24000014 	.word	0x24000014
 80088f8:	240c0798 	.word	0x240c0798
 80088fc:	240c08e0 	.word	0x240c08e0

08008900 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d102      	bne.n	8008914 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800890e:	230c      	movs	r3, #12
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	e00b      	b.n	800892c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a07      	ldr	r2, [pc, #28]	; (8008938 <_txe_semaphore_put+0x38>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d002      	beq.n	8008924 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800891e:	230c      	movs	r3, #12
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	e003      	b.n	800892c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fe fdcf 	bl	80074c8 <_tx_semaphore_put>
 800892a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800892c:	68fb      	ldr	r3, [r7, #12]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	53454d41 	.word	0x53454d41

0800893c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b09a      	sub	sp, #104	; 0x68
 8008940:	af06      	add	r7, sp, #24
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800894a:	2300      	movs	r3, #0
 800894c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008954:	230e      	movs	r3, #14
 8008956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008958:	e0bb      	b.n	8008ad2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800895a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800895c:	2bb0      	cmp	r3, #176	; 0xb0
 800895e:	d002      	beq.n	8008966 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008960:	230e      	movs	r3, #14
 8008962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008964:	e0b5      	b.n	8008ad2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008966:	f3ef 8310 	mrs	r3, PRIMASK
 800896a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008970:	b672      	cpsid	i
    return(int_posture);
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008976:	4b64      	ldr	r3, [pc, #400]	; (8008b08 <_txe_thread_create+0x1cc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	4a62      	ldr	r2, [pc, #392]	; (8008b08 <_txe_thread_create+0x1cc>)
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008982:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	f383 8810 	msr	PRIMASK, r3
}
 800898a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8008990:	4b5e      	ldr	r3, [pc, #376]	; (8008b0c <_txe_thread_create+0x1d0>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8008996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008998:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800899a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899c:	3b01      	subs	r3, #1
 800899e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089a0:	4413      	add	r3, r2
 80089a2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	647b      	str	r3, [r7, #68]	; 0x44
 80089ac:	e02b      	b.n	8008a06 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d101      	bne.n	80089ba <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80089b6:	2301      	movs	r3, #1
 80089b8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80089ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d028      	beq.n	8008a12 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80089c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d308      	bcc.n	80089dc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80089ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d203      	bcs.n	80089dc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80089d8:	2301      	movs	r3, #1
 80089da:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80089dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d308      	bcc.n	80089f8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80089e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d203      	bcs.n	80089f8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80089f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fe:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a02:	3301      	adds	r3, #1
 8008a04:	647b      	str	r3, [r7, #68]	; 0x44
 8008a06:	4b42      	ldr	r3, [pc, #264]	; (8008b10 <_txe_thread_create+0x1d4>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d3ce      	bcc.n	80089ae <_txe_thread_create+0x72>
 8008a10:	e000      	b.n	8008a14 <_txe_thread_create+0xd8>
                break;
 8008a12:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a14:	f3ef 8310 	mrs	r3, PRIMASK
 8008a18:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008a1a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008a1c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a1e:	b672      	cpsid	i
    return(int_posture);
 8008a20:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008a24:	4b38      	ldr	r3, [pc, #224]	; (8008b08 <_txe_thread_create+0x1cc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	4a37      	ldr	r2, [pc, #220]	; (8008b08 <_txe_thread_create+0x1cc>)
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a30:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	f383 8810 	msr	PRIMASK, r3
}
 8008a38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008a3a:	f7fe ff1b 	bl	8007874 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d102      	bne.n	8008a4c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8008a46:	230e      	movs	r3, #14
 8008a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a4a:	e042      	b.n	8008ad2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8008a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8008a52:	2303      	movs	r3, #3
 8008a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a56:	e03c      	b.n	8008ad2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a62:	e036      	b.n	8008ad2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8008a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a66:	2bc7      	cmp	r3, #199	; 0xc7
 8008a68:	d802      	bhi.n	8008a70 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8008a6a:	2305      	movs	r3, #5
 8008a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a6e:	e030      	b.n	8008ad2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8008a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a72:	2b1f      	cmp	r3, #31
 8008a74:	d902      	bls.n	8008a7c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8008a76:	230f      	movs	r3, #15
 8008a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a7a:	e02a      	b.n	8008ad2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8008a7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d902      	bls.n	8008a8a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8008a84:	2318      	movs	r3, #24
 8008a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a88:	e023      	b.n	8008ad2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8008a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d902      	bls.n	8008a96 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8008a90:	2310      	movs	r3, #16
 8008a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a94:	e01d      	b.n	8008ad2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8008a96:	4b1f      	ldr	r3, [pc, #124]	; (8008b14 <_txe_thread_create+0x1d8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	4a1e      	ldr	r2, [pc, #120]	; (8008b18 <_txe_thread_create+0x1dc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d101      	bne.n	8008aa8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008aa4:	2313      	movs	r3, #19
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008aa8:	f3ef 8305 	mrs	r3, IPSR
 8008aac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008aae:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008ab0:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <_txe_thread_create+0x1e0>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00b      	beq.n	8008ad2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008aba:	f3ef 8305 	mrs	r3, IPSR
 8008abe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008ac0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008ac2:	4b16      	ldr	r3, [pc, #88]	; (8008b1c <_txe_thread_create+0x1e0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008acc:	d201      	bcs.n	8008ad2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008ace:	2313      	movs	r3, #19
 8008ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d112      	bne.n	8008afe <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8008ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ade:	9304      	str	r3, [sp, #16]
 8008ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ae2:	9303      	str	r3, [sp, #12]
 8008ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ae6:	9302      	str	r3, [sp, #8]
 8008ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7fe fd3e 	bl	8007578 <_tx_thread_create>
 8008afc:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8008afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3750      	adds	r7, #80	; 0x50
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	240c0830 	.word	0x240c0830
 8008b0c:	240c07a0 	.word	0x240c07a0
 8008b10:	240c07a4 	.word	0x240c07a4
 8008b14:	240c0798 	.word	0x240c0798
 8008b18:	240c08e0 	.word	0x240c08e0
 8008b1c:	24000014 	.word	0x24000014

08008b20 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8008b24:	f003 ffb2 	bl	800ca8c <touchgfx_components_init>
  touchgfx_init();
 8008b28:	f003 ff86 	bl	800ca38 <touchgfx_init>
}
 8008b2c:	bf00      	nop
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08c      	sub	sp, #48	; 0x30
 8008b34:	af08      	add	r7, sp, #32
 8008b36:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 8008b40:	f107 0108 	add.w	r1, r7, #8
 8008b44:	2300      	movs	r3, #0
 8008b46:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff fba8 	bl	80082a0 <_txe_byte_allocate>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 8008b56:	2302      	movs	r3, #2
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e019      	b.n	8008b90 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	22b0      	movs	r2, #176	; 0xb0
 8008b60:	9206      	str	r2, [sp, #24]
 8008b62:	2201      	movs	r2, #1
 8008b64:	9205      	str	r2, [sp, #20]
 8008b66:	2200      	movs	r2, #0
 8008b68:	9204      	str	r2, [sp, #16]
 8008b6a:	2205      	movs	r2, #5
 8008b6c:	9203      	str	r2, [sp, #12]
 8008b6e:	2205      	movs	r2, #5
 8008b70:	9202      	str	r2, [sp, #8]
 8008b72:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008b76:	9201      	str	r2, [sp, #4]
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4a07      	ldr	r2, [pc, #28]	; (8008b9c <MX_TouchGFX_Init+0x6c>)
 8008b7e:	4908      	ldr	r1, [pc, #32]	; (8008ba0 <MX_TouchGFX_Init+0x70>)
 8008b80:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <MX_TouchGFX_Init+0x74>)
 8008b82:	f7ff fedb 	bl	800893c <_txe_thread_create>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 8008b8c:	230e      	movs	r3, #14
 8008b8e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008b90:	68fb      	ldr	r3, [r7, #12]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	08008ba9 	.word	0x08008ba9
 8008ba0:	0801dee0 	.word	0x0801dee0
 8008ba4:	240c0da0 	.word	0x240c0da0

08008ba8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8008bb0:	f003 ff74 	bl	800ca9c <touchgfx_taskEntry>
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
    {
 8008bc4:	4a04      	ldr	r2, [pc, #16]	; (8008bd8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	601a      	str	r2, [r3, #0]
    }
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	0801ec18 	.word	0x0801ec18

08008bdc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
    }
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ffe9 	bl	8008bbc <_ZN8touchgfx12FontProviderD1Ev>
 8008bea:	2104      	movs	r1, #4
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f014 f886 	bl	801ccfe <_ZdlPvj>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8008c08:	887b      	ldrh	r3, [r7, #2]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d010      	beq.n	8008c30 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	dc13      	bgt.n	8008c3a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d005      	beq.n	8008c26 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8008c1a:	e00e      	b.n	8008c3a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8008c1c:	f002 fa20 	bl	800b060 <_ZN17TypedTextDatabase8getFontsEv>
 8008c20:	4603      	mov	r3, r0
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	e00a      	b.n	8008c3c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8008c26:	f002 fa1b 	bl	800b060 <_ZN17TypedTextDatabase8getFontsEv>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	e005      	b.n	8008c3c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8008c30:	f002 fa16 	bl	800b060 <_ZN17TypedTextDatabase8getFontsEv>
 8008c34:	4603      	mov	r3, r0
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	e000      	b.n	8008c3c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8008c3a:	2300      	movs	r3, #0
    }
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	4a05      	ldr	r2, [pc, #20]	; (8008c64 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff ffb1 	bl	8008bbc <_ZN8touchgfx12FontProviderD1Ev>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	0801ec04 	.word	0x0801ec04

08008c68 <_ZN23ApplicationFontProviderD0Ev>:
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff ffe7 	bl	8008c44 <_ZN23ApplicationFontProviderD1Ev>
 8008c76:	2104      	movs	r1, #4
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f014 f840 	bl	801ccfe <_ZdlPvj>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
    {
 8008c90:	4a04      	ldr	r2, [pc, #16]	; (8008ca4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
    }
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	0801ef50 	.word	0x0801ef50

08008ca8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
    }
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff ffe9 	bl	8008c88 <_ZN8touchgfx4FontD1Ev>
 8008cb6:	2110      	movs	r1, #16
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f014 f820 	bl	801ccfe <_ZdlPvj>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8008cc8:	b590      	push	{r4, r7, lr}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8008cd4:	887b      	ldrh	r3, [r7, #2]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e010      	b.n	8008d00 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	681c      	ldr	r4, [r3, #0]
 8008cee:	f107 030f 	add.w	r3, r7, #15
 8008cf2:	f107 0210 	add.w	r2, r7, #16
 8008cf6:	8879      	ldrh	r1, [r7, #2]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	47a0      	blx	r4
 8008cfc:	6178      	str	r0, [r7, #20]
        return glyph;
 8008cfe:	697b      	ldr	r3, [r7, #20]
    }
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}

08008d08 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	895b      	ldrh	r3, [r3, #10]
    }
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	899b      	ldrh	r3, [r3, #12]
    }
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	889b      	ldrh	r3, [r3, #4]
    }
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	889a      	ldrh	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	799b      	ldrb	r3, [r3, #6]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	4413      	add	r3, r2
 8008d64:	b29b      	uxth	r3, r3
    }
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	79db      	ldrb	r3, [r3, #7]
 8008d7e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008d82:	b2db      	uxtb	r3, r3
    }
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	79db      	ldrb	r3, [r3, #7]
 8008d9c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008da0:	b2db      	uxtb	r3, r3
    }
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
	...

08008db0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	4a05      	ldr	r2, [pc, #20]	; (8008dd0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff ff61 	bl	8008c88 <_ZN8touchgfx4FontD1Ev>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	080207b8 	.word	0x080207b8

08008dd4 <_ZN8touchgfx9ConstFontD0Ev>:
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ffe7 	bl	8008db0 <_ZN8touchgfx9ConstFontD1Ev>
 8008de2:	2118      	movs	r1, #24
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f013 ff8a 	bl	801ccfe <_ZdlPvj>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	4a05      	ldr	r2, [pc, #20]	; (8008e14 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff ffd3 	bl	8008db0 <_ZN8touchgfx9ConstFontD1Ev>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	0801ec2c 	.word	0x0801ec2c

08008e18 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff ffe7 	bl	8008df4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008e26:	2128      	movs	r1, #40	; 0x28
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f013 ff68 	bl	801ccfe <_ZdlPvj>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
    }
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08c      	sub	sp, #48	; 0x30
 8008e6c:	af08      	add	r7, sp, #32
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4611      	mov	r1, r2
 8008e74:	461a      	mov	r2, r3
 8008e76:	460b      	mov	r3, r1
 8008e78:	80fb      	strh	r3, [r7, #6]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	88b9      	ldrh	r1, [r7, #4]
 8008e82:	88fa      	ldrh	r2, [r7, #6]
 8008e84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e86:	9306      	str	r3, [sp, #24]
 8008e88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008e8a:	9305      	str	r3, [sp, #20]
 8008e8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e96:	9303      	str	r3, [sp, #12]
 8008e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e9c:	9302      	str	r3, [sp, #8]
 8008e9e:	7f3b      	ldrb	r3, [r7, #28]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	7e3b      	ldrb	r3, [r7, #24]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	f008 fb15 	bl	80114d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8008eae:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb8:	619a      	str	r2, [r3, #24]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ebe:	61da      	str	r2, [r3, #28]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ec4:	621a      	str	r2, [r3, #32]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eca:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	0801ec2c 	.word	0x0801ec2c

08008edc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	889b      	ldrh	r3, [r3, #4]
 8008ef0:	0adb      	lsrs	r3, r3, #11
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	4413      	add	r3, r2
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4413      	add	r3, r2
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b089      	sub	sp, #36	; 0x24
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	460b      	mov	r3, r1
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	7b1b      	ldrb	r3, [r3, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e030      	b.n	8008f90 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	69da      	ldr	r2, [r3, #28]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	7b5b      	ldrb	r3, [r3, #13]
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	b21b      	sxth	r3, r3
 8008f3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f42:	b219      	sxth	r1, r3
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	7adb      	ldrb	r3, [r3, #11]
 8008f48:	b21b      	sxth	r3, r3
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	b21b      	sxth	r3, r3
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7b1b      	ldrb	r3, [r3, #12]
 8008f5a:	837b      	strh	r3, [r7, #26]
 8008f5c:	8b7b      	ldrh	r3, [r7, #26]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d015      	beq.n	8008f8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	897a      	ldrh	r2, [r7, #10]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d103      	bne.n	8008f74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008f72:	e00d      	b.n	8008f90 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	897a      	ldrh	r2, [r7, #10]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d306      	bcc.n	8008f8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008f7e:	8b7b      	ldrh	r3, [r7, #26]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	837b      	strh	r3, [r7, #26]
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	3304      	adds	r3, #4
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	e7e7      	b.n	8008f5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8008f8c:	bf00      	nop
        }
    }
    return 0;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3724      	adds	r7, #36	; 0x24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__tcf_0+0xc>)
 8008fa2:	f7ff ff27 	bl	8008df4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	240c0e50 	.word	0x240c0e50

08008fac <_Z23getFont_verdana_10_4bppv>:
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08c      	sub	sp, #48	; 0x30
 8008fb0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008fb2:	4b1f      	ldr	r3, [pc, #124]	; (8009030 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	f3bf 8f5b 	dmb	ish
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bf0c      	ite	eq
 8008fc4:	2301      	moveq	r3, #1
 8008fc6:	2300      	movne	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d02c      	beq.n	8009028 <_Z23getFont_verdana_10_4bppv+0x7c>
 8008fce:	4818      	ldr	r0, [pc, #96]	; (8009030 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008fd0:	f013 fe97 	bl	801cd02 <__cxa_guard_acquire>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf14      	ite	ne
 8008fda:	2301      	movne	r3, #1
 8008fdc:	2300      	moveq	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d021      	beq.n	8009028 <_Z23getFont_verdana_10_4bppv+0x7c>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9309      	str	r3, [sp, #36]	; 0x24
 8008fec:	2300      	movs	r3, #0
 8008fee:	9308      	str	r3, [sp, #32]
 8008ff0:	233f      	movs	r3, #63	; 0x3f
 8008ff2:	9307      	str	r3, [sp, #28]
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <_Z23getFont_verdana_10_4bppv+0x88>)
 8008ff6:	9306      	str	r3, [sp, #24]
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9304      	str	r3, [sp, #16]
 8009000:	2300      	movs	r3, #0
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	2301      	movs	r3, #1
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	2304      	movs	r3, #4
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	2300      	movs	r3, #0
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	230a      	movs	r3, #10
 8009012:	2201      	movs	r2, #1
 8009014:	4909      	ldr	r1, [pc, #36]	; (800903c <_Z23getFont_verdana_10_4bppv+0x90>)
 8009016:	480a      	ldr	r0, [pc, #40]	; (8009040 <_Z23getFont_verdana_10_4bppv+0x94>)
 8009018:	f7ff ff26 	bl	8008e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800901c:	4809      	ldr	r0, [pc, #36]	; (8009044 <_Z23getFont_verdana_10_4bppv+0x98>)
 800901e:	f013 febb 	bl	801cd98 <atexit>
 8009022:	4803      	ldr	r0, [pc, #12]	; (8009030 <_Z23getFont_verdana_10_4bppv+0x84>)
 8009024:	f013 fe79 	bl	801cd1a <__cxa_guard_release>
    return verdana_10_4bpp;
 8009028:	4b05      	ldr	r3, [pc, #20]	; (8009040 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800902a:	4618      	mov	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	240c0e78 	.word	0x240c0e78
 8009034:	08021fd4 	.word	0x08021fd4
 8009038:	08021fe0 	.word	0x08021fe0
 800903c:	08021fa4 	.word	0x08021fa4
 8009040:	240c0e50 	.word	0x240c0e50
 8009044:	08008f9d 	.word	0x08008f9d

08009048 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__tcf_0+0xc>)
 800904e:	f7ff fed1 	bl	8008df4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009052:	bd80      	pop	{r7, pc}
 8009054:	240c0e7c 	.word	0x240c0e7c

08009058 <_Z23getFont_verdana_20_4bppv>:
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08c      	sub	sp, #48	; 0x30
 800905c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800905e:	4b1f      	ldr	r3, [pc, #124]	; (80090dc <_Z23getFont_verdana_20_4bppv+0x84>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f3bf 8f5b 	dmb	ish
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	bf0c      	ite	eq
 8009070:	2301      	moveq	r3, #1
 8009072:	2300      	movne	r3, #0
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d02c      	beq.n	80090d4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800907a:	4818      	ldr	r0, [pc, #96]	; (80090dc <_Z23getFont_verdana_20_4bppv+0x84>)
 800907c:	f013 fe41 	bl	801cd02 <__cxa_guard_acquire>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	bf14      	ite	ne
 8009086:	2301      	movne	r3, #1
 8009088:	2300      	moveq	r3, #0
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d021      	beq.n	80090d4 <_Z23getFont_verdana_20_4bppv+0x7c>
 8009090:	2300      	movs	r3, #0
 8009092:	930a      	str	r3, [sp, #40]	; 0x28
 8009094:	2300      	movs	r3, #0
 8009096:	9309      	str	r3, [sp, #36]	; 0x24
 8009098:	2300      	movs	r3, #0
 800909a:	9308      	str	r3, [sp, #32]
 800909c:	233f      	movs	r3, #63	; 0x3f
 800909e:	9307      	str	r3, [sp, #28]
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <_Z23getFont_verdana_20_4bppv+0x88>)
 80090a2:	9306      	str	r3, [sp, #24]
 80090a4:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	2300      	movs	r3, #0
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	2300      	movs	r3, #0
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	2301      	movs	r3, #1
 80090b2:	9302      	str	r3, [sp, #8]
 80090b4:	2304      	movs	r3, #4
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	2300      	movs	r3, #0
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2314      	movs	r3, #20
 80090be:	2201      	movs	r2, #1
 80090c0:	4909      	ldr	r1, [pc, #36]	; (80090e8 <_Z23getFont_verdana_20_4bppv+0x90>)
 80090c2:	480a      	ldr	r0, [pc, #40]	; (80090ec <_Z23getFont_verdana_20_4bppv+0x94>)
 80090c4:	f7ff fed0 	bl	8008e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80090c8:	4809      	ldr	r0, [pc, #36]	; (80090f0 <_Z23getFont_verdana_20_4bppv+0x98>)
 80090ca:	f013 fe65 	bl	801cd98 <atexit>
 80090ce:	4803      	ldr	r0, [pc, #12]	; (80090dc <_Z23getFont_verdana_20_4bppv+0x84>)
 80090d0:	f013 fe23 	bl	801cd1a <__cxa_guard_release>
    return verdana_20_4bpp;
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <_Z23getFont_verdana_20_4bppv+0x94>)
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	240c0ea4 	.word	0x240c0ea4
 80090e0:	08021fd8 	.word	0x08021fd8
 80090e4:	08021fe4 	.word	0x08021fe4
 80090e8:	08021fb4 	.word	0x08021fb4
 80090ec:	240c0e7c 	.word	0x240c0e7c
 80090f0:	08009049 	.word	0x08009049

080090f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	4801      	ldr	r0, [pc, #4]	; (8009100 <__tcf_0+0xc>)
 80090fa:	f7ff fe7b 	bl	8008df4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	240c0ea8 	.word	0x240c0ea8

08009104 <_Z23getFont_verdana_40_4bppv>:
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08c      	sub	sp, #48	; 0x30
 8009108:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800910a:	4b1f      	ldr	r3, [pc, #124]	; (8009188 <_Z23getFont_verdana_40_4bppv+0x84>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f3bf 8f5b 	dmb	ish
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf0c      	ite	eq
 800911c:	2301      	moveq	r3, #1
 800911e:	2300      	movne	r3, #0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d02c      	beq.n	8009180 <_Z23getFont_verdana_40_4bppv+0x7c>
 8009126:	4818      	ldr	r0, [pc, #96]	; (8009188 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009128:	f013 fdeb 	bl	801cd02 <__cxa_guard_acquire>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf14      	ite	ne
 8009132:	2301      	movne	r3, #1
 8009134:	2300      	moveq	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d021      	beq.n	8009180 <_Z23getFont_verdana_40_4bppv+0x7c>
 800913c:	2300      	movs	r3, #0
 800913e:	930a      	str	r3, [sp, #40]	; 0x28
 8009140:	2300      	movs	r3, #0
 8009142:	9309      	str	r3, [sp, #36]	; 0x24
 8009144:	2300      	movs	r3, #0
 8009146:	9308      	str	r3, [sp, #32]
 8009148:	233f      	movs	r3, #63	; 0x3f
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	4b0f      	ldr	r3, [pc, #60]	; (800918c <_Z23getFont_verdana_40_4bppv+0x88>)
 800914e:	9306      	str	r3, [sp, #24]
 8009150:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	2300      	movs	r3, #0
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	2300      	movs	r3, #0
 800915a:	9303      	str	r3, [sp, #12]
 800915c:	2301      	movs	r3, #1
 800915e:	9302      	str	r3, [sp, #8]
 8009160:	2304      	movs	r3, #4
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	2300      	movs	r3, #0
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	2328      	movs	r3, #40	; 0x28
 800916a:	2201      	movs	r2, #1
 800916c:	4909      	ldr	r1, [pc, #36]	; (8009194 <_Z23getFont_verdana_40_4bppv+0x90>)
 800916e:	480a      	ldr	r0, [pc, #40]	; (8009198 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009170:	f7ff fe7a 	bl	8008e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009174:	4809      	ldr	r0, [pc, #36]	; (800919c <_Z23getFont_verdana_40_4bppv+0x98>)
 8009176:	f013 fe0f 	bl	801cd98 <atexit>
 800917a:	4803      	ldr	r0, [pc, #12]	; (8009188 <_Z23getFont_verdana_40_4bppv+0x84>)
 800917c:	f013 fdcd 	bl	801cd1a <__cxa_guard_release>
    return verdana_40_4bpp;
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009182:	4618      	mov	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	240c0ed0 	.word	0x240c0ed0
 800918c:	08021fdc 	.word	0x08021fdc
 8009190:	08021fe8 	.word	0x08021fe8
 8009194:	08021fc4 	.word	0x08021fc4
 8009198:	240c0ea8 	.word	0x240c0ea8
 800919c:	080090f5 	.word	0x080090f5

080091a0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
    {
    }
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
    {
    }
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
    {
    }
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
    {
    }
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
    {
    }
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
	...

0800923c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    {
 8009244:	4a04      	ldr	r2, [pc, #16]	; (8009258 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	601a      	str	r2, [r3, #0]
    }
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	0801ed94 	.word	0x0801ed94

0800925c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
    }
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff ffe9 	bl	800923c <_ZN8touchgfx15UIEventListenerD1Ev>
 800926a:	2104      	movs	r1, #4
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f013 fd46 	bl	801ccfe <_ZdlPvj>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
    {
    }
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80092ba:	6810      	ldr	r0, [r2, #0]
 80092bc:	6851      	ldr	r1, [r2, #4]
 80092be:	c303      	stmia	r3!, {r0, r1}
    }
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    {
 80092d4:	4a04      	ldr	r2, [pc, #16]	; (80092e8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	601a      	str	r2, [r3, #0]
    }
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	0801ed7c 	.word	0x0801ed7c

080092ec <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
    }
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ffe9 	bl	80092cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80092fa:	2104      	movs	r1, #4
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f013 fcfe 	bl	801ccfe <_ZdlPvj>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
    {
        return instance;
 8009310:	4b03      	ldr	r3, [pc, #12]	; (8009320 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8009312:	681b      	ldr	r3, [r3, #0]
    }
 8009314:	4618      	mov	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	240c3d44 	.word	0x240c3d44

08009324 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8009324:	b480      	push	{r7}
 8009326:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8009328:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8009330:	2b00      	cmp	r3, #0
 8009332:	d008      	beq.n	8009346 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8009334:	4b08      	ldr	r3, [pc, #32]	; (8009358 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800933e:	4b06      	ldr	r3, [pc, #24]	; (8009358 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009344:	e002      	b.n	800934c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8009346:	4b04      	ldr	r3, [pc, #16]	; (8009358 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
    }
 800934c:	4618      	mov	r0, r3
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	240c3d44 	.word	0x240c3d44

0800935c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8009364:	4a07      	ldr	r2, [pc, #28]	; (8009384 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	605a      	str	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	721a      	strb	r2, [r3, #8]
    {
    }
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	0801ed58 	.word	0x0801ed58

08009388 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
    {
 8009390:	4a04      	ldr	r2, [pc, #16]	; (80093a4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	601a      	str	r2, [r3, #0]
    }
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	0801ed58 	.word	0x0801ed58

080093a8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
    }
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ffe9 	bl	8009388 <_ZN8touchgfx10TransitionD1Ev>
 80093b6:	210c      	movs	r1, #12
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f013 fca0 	bl	801ccfe <_ZdlPvj>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4618      	mov	r0, r3
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
    {
    }
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
    {
    }
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
    {
    }
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800940c:	f007 f828 	bl	8010460 <_ZN8touchgfx11Application11getInstanceEv>
 8009410:	4603      	mov	r3, r0
 8009412:	4618      	mov	r0, r3
 8009414:	f007 fbec 	bl	8010bf0 <_ZN8touchgfx11Application10invalidateEv>
    }
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	605a      	str	r2, [r3, #4]
    }
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	4a05      	ldr	r2, [pc, #20]	; (800945c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4618      	mov	r0, r3
 800944e:	f7ff fef5 	bl	800923c <_ZN8touchgfx15UIEventListenerD1Ev>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	08020530 	.word	0x08020530

08009460 <_ZN8touchgfx11ApplicationD0Ev>:
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ffe7 	bl	800943c <_ZN8touchgfx11ApplicationD1Ev>
 800946e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f013 fc43 	bl	801ccfe <_ZdlPvj>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4618      	mov	r0, r3
 8009490:	f007 f808 	bl	80104a4 <_ZN8touchgfx11ApplicationC1Ev>
 8009494:	4a09      	ldr	r2, [pc, #36]	; (80094bc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a04      	ldr	r2, [pc, #16]	; (80094c0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80094ae:	6013      	str	r3, [r2, #0]
    }
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	0801ed0c 	.word	0x0801ed0c
 80094c0:	240c3db0 	.word	0x240c3db0

080094c4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f804 	bl	80094da <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00f      	beq.n	800950c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	330c      	adds	r3, #12
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4610      	mov	r0, r2
 8009500:	4798      	blx	r3
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009508:	2301      	movs	r3, #1
 800950a:	e000      	b.n	800950e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800950c:	2300      	movs	r3, #0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00e      	beq.n	8009530 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3308      	adds	r3, #8
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4610      	mov	r0, r2
 8009526:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	601a      	str	r2, [r3, #0]
    }
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	4a05      	ldr	r2, [pc, #20]	; (8009574 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff ff69 	bl	800943c <_ZN8touchgfx11ApplicationD1Ev>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4618      	mov	r0, r3
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	0801ed0c 	.word	0x0801ed0c

08009578 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff ffe7 	bl	8009554 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009586:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f013 fbb7 	bl	801ccfe <_ZdlPvj>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fac9 	bl	8009b48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff ffcb 	bl	8009554 <_ZN8touchgfx14MVPApplicationD1Ev>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	0801eca8 	.word	0x0801eca8

080095cc <_ZN23FrontendApplicationBaseD0Ev>:
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff ffe1 	bl	800959c <_ZN23FrontendApplicationBaseD1Ev>
 80095da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f013 fb8d 	bl	801ccfe <_ZdlPvj>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f87a 	bl	80096f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	721a      	strb	r2, [r3, #8]
    }
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	605a      	str	r2, [r3, #4]
    }
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff ff1a 	bl	8009484 <_ZN8touchgfx14MVPApplicationC1Ev>
 8009650:	4a12      	ldr	r2, [pc, #72]	; (800969c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f89d 	bl	800979c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8009672:	f7ff fe4b 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 8009676:	4603      	mov	r3, r0
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	3208      	adds	r2, #8
 800967c:	6812      	ldr	r2, [r2, #0]
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8009684:	f7ff fe4e 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 8009688:	4603      	mov	r3, r0
 800968a:	4618      	mov	r0, r3
 800968c:	f00c ff73 	bl	8016576 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	0801eca8 	.word	0x0801eca8

080096a0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	4611      	mov	r1, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff ffe9 	bl	80096a0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	605a      	str	r2, [r3, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	3308      	adds	r3, #8
 80096dc:	3208      	adds	r2, #8
 80096de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b089      	sub	sp, #36	; 0x24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80096fe:	4b10      	ldr	r3, [pc, #64]	; (8009740 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8009700:	61bb      	str	r3, [r7, #24]
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]
 8009706:	f107 0008 	add.w	r0, r7, #8
 800970a:	f107 0318 	add.w	r3, r7, #24
 800970e:	cb0c      	ldmia	r3, {r2, r3}
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	f000 f85f 	bl	80097d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8009716:	f107 0308 	add.w	r3, r7, #8
 800971a:	4619      	mov	r1, r3
 800971c:	4620      	mov	r0, r4
 800971e:	f7ff ffcb 	bl	80096b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009722:	f107 0308 	add.w	r3, r7, #8
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fa0e 	bl	8009b48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8009738:	bf00      	nop
 800973a:	3724      	adds	r7, #36	; 0x24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd90      	pop	{r4, r7, pc}
 8009740:	08009745 	.word	0x08009745

08009744 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af02      	add	r7, sp, #8
 800974a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8009758:	461a      	mov	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	4b04      	ldr	r3, [pc, #16]	; (8009774 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8009764:	4804      	ldr	r0, [pc, #16]	; (8009778 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8009766:	f000 f867 	bl	8009838 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800976a:	bf00      	nop
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	240c3da4 	.word	0x240c3da4
 8009778:	240c3da0 	.word	0x240c3da0

0800977c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	4a04      	ldr	r2, [pc, #16]	; (8009798 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	0801ed7c 	.word	0x0801ed7c

0800979c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff ffe8 	bl	800977c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80097ac:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	605a      	str	r2, [r3, #4]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	609a      	str	r2, [r3, #8]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	60da      	str	r2, [r3, #12]
    {
    }
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	0801ecf4 	.word	0x0801ecf4

080097d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	4639      	mov	r1, r7
 80097e0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff ffc8 	bl	800977c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80097ec:	4a08      	ldr	r2, [pc, #32]	; (8009810 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	605a      	str	r2, [r3, #4]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	3308      	adds	r3, #8
 80097fc:	463a      	mov	r2, r7
 80097fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009802:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	0801ecf4 	.word	0x0801ecf4

08009814 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fd9c 	bl	800935c <_ZN8touchgfx10TransitionC1Ev>
 8009824:	4a03      	ldr	r2, [pc, #12]	; (8009834 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	0801ec84 	.word	0x0801ec84

08009838 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b08f      	sub	sp, #60	; 0x3c
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689a      	ldr	r2, [r3, #8]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3320      	adds	r3, #32
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	4603      	mov	r3, r0
 800985a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 800985e:	4293      	cmp	r3, r2
 8009860:	d805      	bhi.n	800986e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8009862:	4b7f      	ldr	r3, [pc, #508]	; (8009a60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8009864:	4a7f      	ldr	r2, [pc, #508]	; (8009a64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8009866:	21a3      	movs	r1, #163	; 0xa3
 8009868:	487f      	ldr	r0, [pc, #508]	; (8009a68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800986a:	f013 fa77 	bl	801cd5c <__assert_func>
 800986e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3320      	adds	r3, #32
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4610      	mov	r0, r2
 8009880:	4798      	blx	r3
 8009882:	4603      	mov	r3, r0
 8009884:	2b0f      	cmp	r3, #15
 8009886:	d805      	bhi.n	8009894 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8009888:	4b78      	ldr	r3, [pc, #480]	; (8009a6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800988a:	4a76      	ldr	r2, [pc, #472]	; (8009a64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800988c:	21a4      	movs	r1, #164	; 0xa4
 800988e:	4876      	ldr	r0, [pc, #472]	; (8009a68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8009890:	f013 fa64 	bl	801cd5c <__assert_func>
 8009894:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68da      	ldr	r2, [r3, #12]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3320      	adds	r3, #32
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b0b      	cmp	r3, #11
 80098ac:	d805      	bhi.n	80098ba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80098ae:	4b70      	ldr	r3, [pc, #448]	; (8009a70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 80098b0:	4a6c      	ldr	r2, [pc, #432]	; (8009a64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80098b2:	21a5      	movs	r1, #165	; 0xa5
 80098b4:	486c      	ldr	r0, [pc, #432]	; (8009a68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80098b6:	f013 fa51 	bl	801cd5c <__assert_func>
 80098ba:	bf00      	nop
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80098c8:	f006 fdca 	bl	8010460 <_ZN8touchgfx11Application11getInstanceEv>
 80098cc:	4603      	mov	r3, r0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f006 fdcc 	bl	801046c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d008      	beq.n	80098ee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	330c      	adds	r3, #12
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4610      	mov	r0, r2
 80098ec:	4798      	blx	r3
    if (*currentTrans)
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d007      	beq.n	8009906 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4610      	mov	r0, r2
 8009904:	4798      	blx	r3
    if (*currentScreen)
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d008      	beq.n	8009920 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3314      	adds	r3, #20
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
    if (*currentPresenter)
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d008      	beq.n	800993a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3304      	adds	r3, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4610      	mov	r0, r2
 8009938:	4798      	blx	r3
    if (*currentScreen)
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d007      	beq.n	8009952 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4610      	mov	r0, r2
 8009950:	4798      	blx	r3
    if (*currentPresenter)
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
}
 800996c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	2100      	movs	r1, #0
 8009974:	4618      	mov	r0, r3
 8009976:	f000 f87d 	bl	8009a74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800997a:	4603      	mov	r3, r0
 800997c:	4619      	mov	r1, r3
 800997e:	200c      	movs	r0, #12
 8009980:	f7ff fc0e 	bl	80091a0 <_ZnwjPv>
 8009984:	4604      	mov	r4, r0
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff ff44 	bl	8009814 <_ZN8touchgfx12NoTransitionC1Ev>
 800998c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2100      	movs	r1, #0
 8009994:	4618      	mov	r0, r3
 8009996:	f000 f880 	bl	8009a9a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800999a:	4603      	mov	r3, r0
 800999c:	4619      	mov	r1, r3
 800999e:	f641 5030 	movw	r0, #7472	; 0x1d30
 80099a2:	f7ff fbfd 	bl	80091a0 <_ZnwjPv>
 80099a6:	4604      	mov	r4, r0
 80099a8:	4620      	mov	r0, r4
 80099aa:	f001 fcf5 	bl	800b398 <_ZN11Screen1ViewC1Ev>
 80099ae:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 f882 	bl	8009ac0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80099bc:	4603      	mov	r3, r0
 80099be:	4619      	mov	r1, r3
 80099c0:	2010      	movs	r0, #16
 80099c2:	f7ff fbed 	bl	80091a0 <_ZnwjPv>
 80099c6:	4604      	mov	r4, r0
 80099c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099ca:	4620      	mov	r0, r4
 80099cc:	f001 fc8c 	bl	800b2e8 <_ZN16Screen1PresenterC1ER11Screen1View>
 80099d0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099dc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	3304      	adds	r3, #4
 80099ee:	e000      	b.n	80099f2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80099f0:	2300      	movs	r3, #0
 80099f2:	4619      	mov	r1, r3
 80099f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80099f6:	f7ff fd9f 	bl	8009538 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	3304      	adds	r3, #4
 80099fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff fe0c 	bl	800961e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 f86b 	bl	8009ae6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	61fb      	str	r3, [r7, #28]
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	61bb      	str	r3, [r7, #24]
 8009a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	330c      	adds	r3, #12
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69f8      	ldr	r0, [r7, #28]
 8009a26:	4798      	blx	r3
    newPresenter->activate();
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69b8      	ldr	r0, [r7, #24]
 8009a30:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8009a32:	6979      	ldr	r1, [r7, #20]
 8009a34:	69f8      	ldr	r0, [r7, #28]
 8009a36:	f008 f977 	bl	8011d28 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3310      	adds	r3, #16
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6978      	ldr	r0, [r7, #20]
 8009a44:	4798      	blx	r3
    newTransition->invalidate();
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3314      	adds	r3, #20
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6978      	ldr	r0, [r7, #20]
 8009a50:	4798      	blx	r3
}
 8009a52:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	373c      	adds	r7, #60	; 0x3c
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd90      	pop	{r4, r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	0801deec 	.word	0x0801deec
 8009a64:	0801df7c 	.word	0x0801df7c
 8009a68:	0801e080 	.word	0x0801e080
 8009a6c:	0801e0c4 	.word	0x0801e0c4
 8009a70:	0801e168 	.word	0x0801e168

08009a74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	887a      	ldrh	r2, [r7, #2]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	4798      	blx	r3
 8009a90:	4603      	mov	r3, r0
    }
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3324      	adds	r3, #36	; 0x24
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	887a      	ldrh	r2, [r7, #2]
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
 8009ab6:	4603      	mov	r3, r0
    }
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	887a      	ldrh	r2, [r7, #2]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	4798      	blx	r3
 8009adc:	4603      	mov	r3, r0
    }
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
	...

08009b04 <_ZN8touchgfx12NoTransitionD1Ev>:
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	4a05      	ldr	r2, [pc, #20]	; (8009b24 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fc37 	bl	8009388 <_ZN8touchgfx10TransitionD1Ev>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	0801ec84 	.word	0x0801ec84

08009b28 <_ZN8touchgfx12NoTransitionD0Ev>:
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7ff ffe7 	bl	8009b04 <_ZN8touchgfx12NoTransitionD1Ev>
 8009b36:	210c      	movs	r1, #12
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f013 f8e0 	bl	801ccfe <_ZdlPvj>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff fbb7 	bl	80092cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	0801ecf4 	.word	0x0801ecf4

08009b6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff ffe7 	bl	8009b48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8009b7a:	2110      	movs	r1, #16
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f013 f8be 	bl	801ccfe <_ZdlPvj>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	68d2      	ldr	r2, [r2, #12]
 8009b9c:	1052      	asrs	r2, r2, #1
 8009b9e:	1899      	adds	r1, r3, r2
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	e00a      	b.n	8009bc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	68d2      	ldr	r2, [r2, #12]
 8009bba:	1052      	asrs	r2, r2, #1
 8009bbc:	4413      	add	r3, r2
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6892      	ldr	r2, [r2, #8]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4608      	mov	r0, r1
 8009bca:	4798      	blx	r3
    }
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d010      	beq.n	8009c06 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d107      	bne.n	8009bfc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e000      	b.n	8009bfe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d001      	beq.n	8009c06 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8009c06:	2300      	movs	r3, #0
    }
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
        : color(col)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
    {
    }
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
    {
        return color;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
    }
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	801a      	strh	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	805a      	strh	r2, [r3, #2]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	809a      	strh	r2, [r3, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	80da      	strh	r2, [r3, #6]
    {
    }
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8009c80:	4a14      	ldr	r2, [pc, #80]	; (8009cd4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff ffdd 	bl	8009c4a <_ZN8touchgfx4RectC1Ev>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	330c      	adds	r3, #12
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff ffd8 	bl	8009c4a <_ZN8touchgfx4RectC1Ev>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	615a      	str	r2, [r3, #20]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	619a      	str	r2, [r3, #24]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	61da      	str	r2, [r3, #28]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	841a      	strh	r2, [r3, #32]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	845a      	strh	r2, [r3, #34]	; 0x22
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	08020750 	.word	0x08020750

08009cd8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
    {
 8009ce0:	4a04      	ldr	r2, [pc, #16]	; (8009cf4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	601a      	str	r2, [r3, #0]
    }
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	08020750 	.word	0x08020750

08009cf8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
    }
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff ffe9 	bl	8009cd8 <_ZN8touchgfx8DrawableD1Ev>
 8009d06:	2128      	movs	r1, #40	; 0x28
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f012 fff8 	bl	801ccfe <_ZdlPvj>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d005      	beq.n	8009d36 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3314      	adds	r3, #20
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	4798      	blx	r3
        }
    }
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009d46:	2300      	movs	r3, #0
    }
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	4611      	mov	r1, r2
 8009d60:	461a      	mov	r2, r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	817b      	strh	r3, [r7, #10]
 8009d66:	460b      	mov	r3, r1
 8009d68:	813b      	strh	r3, [r7, #8]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8009d6e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009d72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009d76:	4619      	mov	r1, r3
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f82a 	bl	8009dd2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8009d7e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d86:	4619      	mov	r1, r3
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f87e 	bl	8009e8a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	887a      	ldrh	r2, [r7, #2]
 8009da6:	809a      	strh	r2, [r3, #4]
    }
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	887a      	ldrh	r2, [r7, #2]
 8009dc4:	80da      	strh	r2, [r3, #6]
    }
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	807b      	strh	r3, [r7, #2]
 8009dde:	4613      	mov	r3, r2
 8009de0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3330      	adds	r3, #48	; 0x30
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009dee:	4611      	mov	r1, r2
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	4798      	blx	r3
        setY(y);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3334      	adds	r3, #52	; 0x34
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009e00:	4611      	mov	r1, r2
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
    }
 8009e06:	bf00      	nop
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	887a      	ldrh	r2, [r7, #2]
 8009e1e:	811a      	strh	r2, [r3, #8]
    }
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	887a      	ldrh	r2, [r7, #2]
 8009e3c:	815a      	strh	r2, [r3, #10]
    }
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
    {
    }
 8009e52:	bf00      	nop
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
    {
    }
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
    {
    }
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	460b      	mov	r3, r1
 8009e94:	807b      	strh	r3, [r7, #2]
 8009e96:	4613      	mov	r3, r2
 8009e98:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3338      	adds	r3, #56	; 0x38
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	4798      	blx	r3
        setHeight(height);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	333c      	adds	r3, #60	; 0x3c
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	4798      	blx	r3
    }
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
    {
    }
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
    {
    }
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	807b      	strh	r3, [r7, #2]
 8009f30:	4613      	mov	r3, r2
 8009f32:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3354      	adds	r3, #84	; 0x54
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	8879      	ldrh	r1, [r7, #2]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009f44:	b292      	uxth	r2, r2
 8009f46:	1a8a      	subs	r2, r1, r2
 8009f48:	b292      	uxth	r2, r2
 8009f4a:	b210      	sxth	r0, r2
 8009f4c:	8839      	ldrh	r1, [r7, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8009f54:	b292      	uxth	r2, r2
 8009f56:	1a8a      	subs	r2, r1, r2
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	b212      	sxth	r2, r2
 8009f5c:	4601      	mov	r1, r0
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	4798      	blx	r3
    }
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f78:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f80:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f88:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7ff ffe1 	bl	8009f6a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	601a      	str	r2, [r3, #0]
    }
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8009fbe:	b480      	push	{r7}
 8009fc0:	b083      	sub	sp, #12
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
	...

08009fd8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    {
 8009fe0:	4a06      	ldr	r2, [pc, #24]	; (8009ffc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fd6a 	bl	800aac4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0802084c 	.word	0x0802084c

0800a000 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
    }
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ffe5 	bl	8009fd8 <_ZN8touchgfx6ScreenD1Ev>
 800a00e:	213c      	movs	r1, #60	; 0x3c
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f012 fe74 	bl	801ccfe <_ZdlPvj>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
    {
    }
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
    {
    }
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
    {
    }
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
    {
    }
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3304      	adds	r3, #4
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f003 fa8f 	bl	800d5bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800a09e:	bf00      	nop
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	607b      	str	r3, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	817b      	strh	r3, [r7, #10]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff ff18 	bl	8009ef0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d008      	beq.n	800a0d8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7ff ff1e 	bl	8009f0a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d002      	beq.n	800a0e4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
        }
    }
 800a0e4:	bf00      	nop
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fdbe 	bl	8009c78 <_ZN8touchgfx8DrawableC1Ev>
 800a0fc:	4a03      	ldr	r2, [pc, #12]	; (800a10c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	0801eed4 	.word	0x0801eed4

0800a110 <_ZN8touchgfx6WidgetD1Ev>:
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	4a05      	ldr	r2, [pc, #20]	; (800a130 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff fdd9 	bl	8009cd8 <_ZN8touchgfx8DrawableD1Ev>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	0801eed4 	.word	0x0801eed4

0800a134 <_ZN8touchgfx6WidgetD0Ev>:
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff ffe7 	bl	800a110 <_ZN8touchgfx6WidgetD1Ev>
 800a142:	2128      	movs	r1, #40	; 0x28
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f012 fdda 	bl	801ccfe <_ZdlPvj>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4618      	mov	r0, r3
 800a160:	2326      	movs	r3, #38	; 0x26
 800a162:	461a      	mov	r2, r3
 800a164:	2100      	movs	r1, #0
 800a166:	f012 fe77 	bl	801ce58 <memset>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff ffbd 	bl	800a0ec <_ZN8touchgfx6WidgetC1Ev>
 800a172:	4a09      	ldr	r2, [pc, #36]	; (800a198 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	22ff      	movs	r2, #255	; 0xff
 800a17c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	3328      	adds	r3, #40	; 0x28
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff fd44 	bl	8009c14 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	080202c0 	.word	0x080202c0

0800a19c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 800a1c0:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	809a      	strh	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	80da      	strh	r2, [r3, #6]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	22ff      	movs	r2, #255	; 0xff
 800a1d6:	721a      	strb	r2, [r3, #8]
    {
    }
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	0801eec0 	.word	0x0801eec0

0800a1ec <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
    {
 800a1f4:	4a04      	ldr	r2, [pc, #16]	; (800a208 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	601a      	str	r2, [r3, #0]
    }
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	0801eec0 	.word	0x0801eec0

0800a20c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
    }
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff ffe9 	bl	800a1ec <_ZN8touchgfx15AbstractPainterD1Ev>
 800a21a:	210c      	movs	r1, #12
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f012 fd6e 	bl	801ccfe <_ZdlPvj>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
     */
    class Q5
    {
    public:
        /** Initializes a new instance of the Q5 class. */
        Q5()
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
            : v(0)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
        {
        }
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
            : v(i)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	601a      	str	r2, [r3, #0]
        {
        }
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
        {
            return v;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
        }
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q10 format.
         *
         * @param  i int pre-formattet in Q10 format.
         */
        explicit Q10(int i)
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
            : v(i)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	601a      	str	r2, [r3, #0]
        {
        }
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4618      	mov	r0, r3
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     * @see setPainter
     */
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	78fa      	ldrb	r2, [r7, #3]
 800a2ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff ff68 	bl	800a1b8 <_ZN8touchgfx15AbstractPainterC1Ev>
 800a2e8:	4a29      	ldr	r2, [pc, #164]	; (800a390 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	60da      	str	r2, [r3, #12]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	611a      	str	r2, [r3, #16]
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800a2fe:	f7ff f811 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800a302:	4603      	mov	r3, r0
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	322c      	adds	r2, #44	; 0x2c
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	4790      	blx	r2
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	4293      	cmp	r3, r2
 800a316:	bf0c      	ite	eq
 800a318:	2301      	moveq	r3, #1
 800a31a:	2300      	movne	r3, #0
 800a31c:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800a31e:	f7fe fff5 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 800a322:	4603      	mov	r3, r0
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fe4a 	bl	8009fbe <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bf14      	ite	ne
 800a330:	2301      	movne	r3, #1
 800a332:	2300      	moveq	r3, #0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01b      	beq.n	800a372 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800a33a:	f7fe ffe7 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 800a33e:	4603      	mov	r3, r0
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff fe3c 	bl	8009fbe <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800a346:	4603      	mov	r3, r0
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	322c      	adds	r2, #44	; 0x2c
 800a34c:	6812      	ldr	r2, [r2, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	4790      	blx	r2
 800a352:	4603      	mov	r3, r0
 800a354:	461a      	mov	r2, r3
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	4293      	cmp	r3, r2
 800a35a:	bf0c      	ite	eq
 800a35c:	2301      	moveq	r3, #1
 800a35e:	2300      	movne	r3, #0
 800a360:	b2da      	uxtb	r2, r3
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	4313      	orrs	r3, r2
 800a366:	b2db      	uxtb	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bf14      	ite	ne
 800a36c:	2301      	movne	r3, #1
 800a36e:	2300      	moveq	r3, #0
 800a370:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800a372:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 800a374:	2b00      	cmp	r3, #0
 800a376:	d105      	bne.n	800a384 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 800a378:	4b06      	ldr	r3, [pc, #24]	; (800a394 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 800a37a:	4a07      	ldr	r2, [pc, #28]	; (800a398 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 800a37c:	2128      	movs	r1, #40	; 0x28
 800a37e:	4807      	ldr	r0, [pc, #28]	; (800a39c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 800a380:	f012 fcec 	bl	801cd5c <__assert_func>
 800a384:	bf00      	nop
    }
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	0802014c 	.word	0x0802014c
 800a394:	0801e20c 	.word	0x0801e20c
 800a398:	0801e26c 	.word	0x0801e26c
 800a39c:	0801e2a8 	.word	0x0801e2a8

0800a3a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	4a05      	ldr	r2, [pc, #20]	; (800a3c0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff ff1b 	bl	800a1ec <_ZN8touchgfx15AbstractPainterD1Ev>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0802014c 	.word	0x0802014c

0800a3c4 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7ff ffe7 	bl	800a3a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800a3d2:	2114      	movs	r1, #20
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f012 fc92 	bl	801ccfe <_ZdlPvj>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff ff71 	bl	800a2d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800a3f6:	4a0a      	ldr	r2, [pc, #40]	; (800a420 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	751a      	strb	r2, [r3, #20]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	755a      	strb	r2, [r3, #21]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f807 	bl	800a424 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	0802016c 	.word	0x0802016c

0800a424 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 800a432:	f107 0314 	add.w	r3, r7, #20
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff fbfb 	bl	8009c32 <_ZNK8touchgfx9colortypecvmEv>
 800a43c:	4603      	mov	r3, r0
 800a43e:	0c1b      	lsrs	r3, r3, #16
 800a440:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	751a      	strb	r2, [r3, #20]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 800a44a:	f107 0310 	add.w	r3, r7, #16
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fbef 	bl	8009c32 <_ZNK8touchgfx9colortypecvmEv>
 800a454:	4603      	mov	r3, r0
 800a456:	0a1b      	lsrs	r3, r3, #8
 800a458:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	755a      	strb	r2, [r3, #21]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800a462:	f107 030c 	add.w	r3, r7, #12
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff fbe3 	bl	8009c32 <_ZNK8touchgfx9colortypecvmEv>
 800a46c:	4603      	mov	r3, r0
 800a46e:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	759a      	strb	r2, [r3, #22]
    }
 800a474:	bf00      	nop
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	4a05      	ldr	r2, [pc, #20]	; (800a49c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff fda3 	bl	8009fd8 <_ZN8touchgfx6ScreenD1Ev>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	0801ee8c 	.word	0x0801ee8c

0800a4a0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff ffe7 	bl	800a47c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800a4ae:	2140      	movs	r1, #64	; 0x40
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f012 fc24 	bl	801ccfe <_ZdlPvj>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	4a0d      	ldr	r2, [pc, #52]	; (800a500 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	33f8      	adds	r3, #248	; 0xf8
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 fb3a 	bl	800ab4c <_ZN8touchgfx13PainterRGB888D1Ev>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	336c      	adds	r3, #108	; 0x6c
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 facf 	bl	800aa80 <_ZN8touchgfx5ShapeILt4EED1Ev>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3340      	adds	r3, #64	; 0x40
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fb0e 	bl	800ab08 <_ZN8touchgfx3BoxD1Ev>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff ffc4 	bl	800a47c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	0801edbc 	.word	0x0801edbc

0800a504 <_ZN15Screen1ViewBaseD0Ev>:
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff ffd7 	bl	800a4c0 <_ZN15Screen1ViewBaseD1Ev>
 800a512:	f641 5130 	movw	r1, #7472	; 0x1d30
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f012 fbf1 	bl	801ccfe <_ZdlPvj>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	4a05      	ldr	r2, [pc, #20]	; (800a548 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff fde9 	bl	800a110 <_ZN8touchgfx6WidgetD1Ev>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	080201f0 	.word	0x080201f0

0800a54c <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff ffe7 	bl	800a528 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800a55a:	2130      	movs	r1, #48	; 0x30
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f012 fbce 	bl	801ccfe <_ZdlPvj>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	4a05      	ldr	r2, [pc, #20]	; (800a58c <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7ff ffd3 	bl	800a528 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	080200b0 	.word	0x080200b0

0800a590 <_ZN8touchgfx13AbstractShapeD0Ev>:
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff ffe7 	bl	800a56c <_ZN8touchgfx13AbstractShapeD1Ev>
 800a59e:	214c      	movs	r1, #76	; 0x4c
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f012 fbac 	bl	801ccfe <_ZdlPvj>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <_ZN8touchgfx5ShapeILt4EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 800a5b0:	b5b0      	push	{r4, r5, r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f004 faa0 	bl	800eb00 <_ZN8touchgfx13AbstractShapeC1Ev>
 800a5c0:	4a1b      	ldr	r2, [pc, #108]	; (800a630 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x80>)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	334c      	adds	r3, #76	; 0x4c
 800a5ca:	2403      	movs	r4, #3
 800a5cc:	461d      	mov	r5, r3
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	db05      	blt.n	800a5de <_ZN8touchgfx5ShapeILt4EEC1Ev+0x2e>
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f7ff fe2a 	bl	800a22c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800a5d8:	3504      	adds	r5, #4
 800a5da:	3c01      	subs	r4, #1
 800a5dc:	e7f7      	b.n	800a5ce <_ZN8touchgfx5ShapeILt4EEC1Ev+0x1e>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	335c      	adds	r3, #92	; 0x5c
 800a5e2:	2403      	movs	r4, #3
 800a5e4:	461d      	mov	r5, r3
 800a5e6:	2c00      	cmp	r4, #0
 800a5e8:	db05      	blt.n	800a5f6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x46>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f7ff fe1e 	bl	800a22c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800a5f0:	3504      	adds	r5, #4
 800a5f2:	3c01      	subs	r4, #1
 800a5f4:	e7f7      	b.n	800a5e6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x36>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	336c      	adds	r3, #108	; 0x6c
 800a5fa:	2403      	movs	r4, #3
 800a5fc:	461d      	mov	r5, r3
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	db05      	blt.n	800a60e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x5e>
 800a602:	4628      	mov	r0, r5
 800a604:	f7ff fe12 	bl	800a22c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800a608:	3504      	adds	r5, #4
 800a60a:	3c01      	subs	r4, #1
 800a60c:	e7f7      	b.n	800a5fe <_ZN8touchgfx5ShapeILt4EEC1Ev+0x4e>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	337c      	adds	r3, #124	; 0x7c
 800a612:	2403      	movs	r4, #3
 800a614:	461d      	mov	r5, r3
 800a616:	2c00      	cmp	r4, #0
 800a618:	db05      	blt.n	800a626 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x76>
 800a61a:	4628      	mov	r0, r5
 800a61c:	f7ff fe06 	bl	800a22c <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 800a620:	3504      	adds	r5, #4
 800a622:	3c01      	subs	r4, #1
 800a624:	e7f7      	b.n	800a616 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x66>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bdb0      	pop	{r4, r5, r7, pc}
 800a630:	0801edf0 	.word	0x0801edf0

0800a634 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase()
 800a634:	b5b0      	push	{r4, r5, r7, lr}
 800a636:	b092      	sub	sp, #72	; 0x48
 800a638:	af02      	add	r7, sp, #8
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f8d8 	bl	800a7f4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800a644:	4a63      	ldr	r2, [pc, #396]	; (800a7d4 <_ZN15Screen1ViewBaseC1Ev+0x1a0>)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3340      	adds	r3, #64	; 0x40
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff fd80 	bl	800a154 <_ZN8touchgfx3BoxC1Ev>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	336c      	adds	r3, #108	; 0x6c
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff ffa9 	bl	800a5b0 <_ZN8touchgfx5ShapeILt4EEC1Ev>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 800a664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a668:	2100      	movs	r1, #0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff fad2 	bl	8009c14 <_ZN8touchgfx9colortypeC1Em>
 800a670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a672:	4620      	mov	r0, r4
 800a674:	f7ff feb6 	bl	800a3e4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a67e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800a682:	4618      	mov	r0, r3
 800a684:	f004 fdb8 	bl	800f1f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 480, 272);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800a68e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a698:	2200      	movs	r2, #0
 800a69a:	2100      	movs	r1, #0
 800a69c:	f7ff fb5a 	bl	8009d54 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a6b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a6bc:	041b      	lsls	r3, r3, #16
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a6c4:	021b      	lsls	r3, r3, #8
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a6d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff fa9b 	bl	8009c14 <_ZN8touchgfx9colortypeC1Em>
 800a6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7ff fd5a 	bl	800a19c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    shape1.setPosition(0, 0, 80, 80);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800a6ee:	2350      	movs	r3, #80	; 0x50
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	2350      	movs	r3, #80	; 0x50
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	f7ff fb2c 	bl	8009d54 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setOrigin(0.000f, 0.000f);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	336c      	adds	r3, #108	; 0x6c
 800a700:	eddf 0a35 	vldr	s1, [pc, #212]	; 800a7d8 <_ZN15Screen1ViewBaseC1Ev+0x1a4>
 800a704:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800a7d8 <_ZN15Screen1ViewBaseC1Ev+0x1a4>
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 f889 	bl	800a820 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(1.000f, 1.000f);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	336c      	adds	r3, #108	; 0x6c
 800a712:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800a716:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 f8e0 	bl	800a8e0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.000f);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	336c      	adds	r3, #108	; 0x6c
 800a724:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a7d8 <_ZN15Screen1ViewBaseC1Ev+0x1a4>
 800a728:	4618      	mov	r0, r3
 800a72a:	f000 f91d 	bl	800a968 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 800a734:	23ff      	movs	r3, #255	; 0xff
 800a736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a73a:	23ff      	movs	r3, #255	; 0xff
 800a73c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a740:	23ff      	movs	r3, #255	; 0xff
 800a742:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a746:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a74a:	041b      	lsls	r3, r3, #16
 800a74c:	461a      	mov	r2, r3
 800a74e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a752:	021b      	lsls	r3, r3, #8
 800a754:	431a      	orrs	r2, r3
 800a756:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a75a:	4313      	orrs	r3, r2
 800a75c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff fa54 	bl	8009c14 <_ZN8touchgfx9colortypeC1Em>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	4619      	mov	r1, r3
 800a770:	4620      	mov	r0, r4
 800a772:	f7ff fe57 	bl	800a424 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	33f8      	adds	r3, #248	; 0xf8
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f004 fbde 	bl	800ef44 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.000f, 0.000f }, { 80.000f, 40.000f }, { 40.000f, 80.000f }, { 0.000f, 40.000f } };
 800a788:	4b14      	ldr	r3, [pc, #80]	; (800a7dc <_ZN15Screen1ViewBaseC1Ev+0x1a8>)
 800a78a:	f107 040c 	add.w	r4, r7, #12
 800a78e:	461d      	mov	r5, r3
 800a790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a794:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape1.setShape(shape1Points);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	336c      	adds	r3, #108	; 0x6c
 800a7a0:	f107 020c 	add.w	r2, r7, #12
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f916 	bl	800a9d8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(__background);
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3340      	adds	r3, #64	; 0x40
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f7ff fc67 	bl	800a088 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	336c      	adds	r3, #108	; 0x6c
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f7ff fc60 	bl	800a088 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3740      	adds	r7, #64	; 0x40
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0801edbc 	.word	0x0801edbc
 800a7d8:	00000000 	.word	0x00000000
 800a7dc:	0801e308 	.word	0x0801e308

0800a7e0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]

}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f007 f8e6 	bl	80119d0 <_ZN8touchgfx6ScreenC1Ev>
 800a804:	4a05      	ldr	r2, [pc, #20]	; (800a81c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	0801ee8c 	.word	0x0801ee8c

0800a820 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b08b      	sub	sp, #44	; 0x2c
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	ed87 0a02 	vstr	s0, [r7, #8]
 800a82c:	edc7 0a01 	vstr	s1, [r7, #4]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	623b      	str	r3, [r7, #32]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800a834:	edd7 7a08 	vldr	s15, [r7, #32]
 800a838:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a8dc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 800a83c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a844:	f107 031c 	add.w	r3, r7, #28
 800a848:	ee17 1a90 	vmov	r1, s15
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fcfb 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800a852:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
 800a85a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a85e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a8dc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 800a862:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a86a:	f107 0318 	add.w	r3, r7, #24
 800a86e:	ee17 1a90 	vmov	r1, s15
 800a872:	4618      	mov	r0, r3
 800a874:	f7ff fce8 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800a878:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 800a87a:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	3330      	adds	r3, #48	; 0x30
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff fcf0 	bl	800a266 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800a886:	4604      	mov	r4, r0
 800a888:	f107 0314 	add.w	r3, r7, #20
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7ff fcea 	bl	800a266 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800a892:	4603      	mov	r3, r0
 800a894:	429c      	cmp	r4, r3
 800a896:	d10f      	bne.n	800a8b8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3334      	adds	r3, #52	; 0x34
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff fce2 	bl	800a266 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	f107 0310 	add.w	r3, r7, #16
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fcdc 	bl	800a266 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	d101      	bne.n	800a8b8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e000      	b.n	800a8ba <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	631a      	str	r2, [r3, #48]	; 0x30
        dy = dyNew;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	635a      	str	r2, [r3, #52]	; 0x34

        updateAbstractShapeCache();
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f004 f92e 	bl	800eb2c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 800a8d0:	e000      	b.n	800a8d4 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 800a8d2:	bf00      	nop
    }
 800a8d4:	372c      	adds	r7, #44	; 0x2c
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd90      	pop	{r4, r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	42000000 	.word	0x42000000

0800a8e0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	ed87 0a02 	vstr	s0, [r7, #8]
 800a8ec:	edc7 0a01 	vstr	s1, [r7, #4]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10(int(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 800a8f4:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8f8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a964 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800a8fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a900:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a964 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800a904:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a90c:	f107 0314 	add.w	r3, r7, #20
 800a910:	ee17 1a90 	vmov	r1, s15
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff fcb2 	bl	800a27e <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	63da      	str	r2, [r3, #60]	; 0x3c
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	61fb      	str	r3, [r7, #28]
 800a926:	edd7 7a07 	vldr	s15, [r7, #28]
 800a92a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a964 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800a92e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a932:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a964 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 800a936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a93a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a93e:	f107 0310 	add.w	r3, r7, #16
 800a942:	ee17 1a90 	vmov	r1, s15
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff fc99 	bl	800a27e <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	641a      	str	r2, [r3, #64]	; 0x40
        updateAbstractShapeCache();
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f004 f8e9 	bl	800eb2c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800a95a:	bf00      	nop
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	42000000 	.word	0x42000000

0800a968 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 800a968:	b590      	push	{r4, r7, lr}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	ed87 0a00 	vstr	s0, [r7]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	617b      	str	r3, [r7, #20]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800a978:	edd7 7a05 	vldr	s15, [r7, #20]
 800a97c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a9d4 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 800a980:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a988:	f107 0310 	add.w	r3, r7, #16
 800a98c:	ee17 1a90 	vmov	r1, s15
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff fc59 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800a996:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 800a998:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3338      	adds	r3, #56	; 0x38
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff fc61 	bl	800a266 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	f107 030c 	add.w	r3, r7, #12
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fc5b 	bl	800a266 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	bf14      	ite	ne
 800a9b6:	2301      	movne	r3, #1
 800a9b8:	2300      	moveq	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	639a      	str	r2, [r3, #56]	; 0x38
            updateAbstractShapeCache();
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f004 f8b0 	bl	800eb2c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800a9cc:	bf00      	nop
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd90      	pop	{r4, r7, pc}
 800a9d4:	42000000 	.word	0x42000000

0800a9d8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 800a9d8:	b5b0      	push	{r4, r5, r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3378      	adds	r3, #120	; 0x78
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	4798      	blx	r3
 800a9ee:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	69fa      	ldr	r2, [r7, #28]
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	da38      	bge.n	800aa6e <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	337c      	adds	r3, #124	; 0x7c
 800aa02:	681c      	ldr	r4, [r3, #0]
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa14:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800aa7c <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 800aa18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa20:	f107 030c 	add.w	r3, r7, #12
 800aa24:	ee17 1a90 	vmov	r1, s15
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff fc0d 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	461d      	mov	r5, r3
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4413      	add	r3, r2
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	edd7 7a05 	vldr	s15, [r7, #20]
 800aa42:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800aa7c <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 800aa46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa4e:	f107 0308 	add.w	r3, r7, #8
 800aa52:	ee17 1a90 	vmov	r1, s15
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fbf6 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	462a      	mov	r2, r5
 800aa60:	69f9      	ldr	r1, [r7, #28]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	61fb      	str	r3, [r7, #28]
 800aa6c:	e7c2      	b.n	800a9f4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f004 f85c 	bl	800eb2c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 800aa74:	bf00      	nop
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bdb0      	pop	{r4, r5, r7, pc}
 800aa7c:	42000000 	.word	0x42000000

0800aa80 <_ZN8touchgfx5ShapeILt4EED1Ev>:
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	4a05      	ldr	r2, [pc, #20]	; (800aaa0 <_ZN8touchgfx5ShapeILt4EED1Ev+0x20>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff fd6b 	bl	800a56c <_ZN8touchgfx13AbstractShapeD1Ev>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	0801edf0 	.word	0x0801edf0

0800aaa4 <_ZN8touchgfx5ShapeILt4EED0Ev>:
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff ffe7 	bl	800aa80 <_ZN8touchgfx5ShapeILt4EED1Ev>
 800aab2:	218c      	movs	r1, #140	; 0x8c
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f012 f922 	bl	801ccfe <_ZdlPvj>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	4a05      	ldr	r2, [pc, #20]	; (800aae4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7ff f8ff 	bl	8009cd8 <_ZN8touchgfx8DrawableD1Ev>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	0801f654 	.word	0x0801f654

0800aae8 <_ZN8touchgfx9ContainerD0Ev>:
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7ff ffe7 	bl	800aac4 <_ZN8touchgfx9ContainerD1Ev>
 800aaf6:	212c      	movs	r1, #44	; 0x2c
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f012 f900 	bl	801ccfe <_ZdlPvj>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	4a05      	ldr	r2, [pc, #20]	; (800ab28 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff faf9 	bl	800a110 <_ZN8touchgfx6WidgetD1Ev>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	080202c0 	.word	0x080202c0

0800ab2c <_ZN8touchgfx3BoxD0Ev>:
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff ffe7 	bl	800ab08 <_ZN8touchgfx3BoxD1Ev>
 800ab3a:	212c      	movs	r1, #44	; 0x2c
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f012 f8de 	bl	801ccfe <_ZdlPvj>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	4a05      	ldr	r2, [pc, #20]	; (800ab6c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff fc1f 	bl	800a3a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	0802016c 	.word	0x0802016c

0800ab70 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff ffe7 	bl	800ab4c <_ZN8touchgfx13PainterRGB888D1Ev>
 800ab7e:	2118      	movs	r1, #24
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f012 f8bc 	bl	801ccfe <_ZdlPvj>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 800ab98:	2304      	movs	r3, #4
    }
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 800aba6:	b480      	push	{r7}
 800aba8:	b085      	sub	sp, #20
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	db10      	blt.n	800abdc <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x36>
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	dc0d      	bgt.n	800abdc <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x36>
        {
            xCorner[i] = x, yCorner[i] = y;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3312      	adds	r3, #18
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	605a      	str	r2, [r3, #4]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	3316      	adds	r3, #22
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	605a      	str	r2, [r3, #4]
        }
    }
 800abdc:	bf00      	nop
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	db09      	blt.n	800ac0c <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x24>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	dc06      	bgt.n	800ac0c <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x24>
        {
            return xCorner[i];
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	3312      	adds	r3, #18
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	e00b      	b.n	800ac24 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x3c>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	4611      	mov	r1, r2
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fb14 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ac20:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 800ac22:	bf00      	nop
    }
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	db09      	blt.n	800ac50 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x24>
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	dc06      	bgt.n	800ac50 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x24>
        {
            return yCorner[i];
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	3316      	adds	r3, #22
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	e00b      	b.n	800ac68 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x3c>
 800ac50:	2300      	movs	r3, #0
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	f107 0308 	add.w	r3, r7, #8
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff faf2 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ac64:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 800ac66:	bf00      	nop
    }
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	db10      	blt.n	800aca6 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x36>
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	dc0d      	bgt.n	800aca6 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x36>
        {
            xCache[i] = x, yCache[i] = y;
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	331a      	adds	r3, #26
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	605a      	str	r2, [r3, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	331e      	adds	r3, #30
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	605a      	str	r2, [r3, #4]
        }
    }
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	db09      	blt.n	800acd6 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x24>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	dc06      	bgt.n	800acd6 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x24>
        {
            return xCache[i];
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	331a      	adds	r3, #26
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	e00b      	b.n	800acee <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x3c>
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	f107 0308 	add.w	r3, r7, #8
 800ace2:	4611      	mov	r1, r2
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff faaf 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800acea:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 800acec:	bf00      	nop
    }
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	db09      	blt.n	800ad1a <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x24>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	dc06      	bgt.n	800ad1a <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x24>
        {
            return yCache[i];
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	331e      	adds	r3, #30
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	e00b      	b.n	800ad32 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x3c>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	f107 0308 	add.w	r3, r7, #8
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff fa8d 	bl	800a248 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ad2e:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 800ad30:	bf00      	nop
    }
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800ad40:	4b02      	ldr	r3, [pc, #8]	; (800ad4c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	0801ef34 	.word	0x0801ef34

0800ad50 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800ad50:	b480      	push	{r7}
 800ad52:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800ad54:	2301      	movs	r3, #1
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800ad6e:	2300      	movs	r3, #0
    }
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ad84:	2300      	movs	r3, #0
    }
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ad9a:	2300      	movs	r3, #0
    }
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	4613      	mov	r3, r2
 800adb4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800adb6:	4a07      	ldr	r2, [pc, #28]	; (800add4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6013      	str	r3, [r2, #0]
        fonts = f;
 800adbc:	4a06      	ldr	r2, [pc, #24]	; (800add8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800adc2:	4a06      	ldr	r2, [pc, #24]	; (800addc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800adc4:	88fb      	ldrh	r3, [r7, #6]
 800adc6:	8013      	strh	r3, [r2, #0]
    }
 800adc8:	bf00      	nop
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	240c3db4 	.word	0x240c3db4
 800add8:	240c3dbc 	.word	0x240c3dbc
 800addc:	240c3db8 	.word	0x240c3db8

0800ade0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ade0:	b40e      	push	{r1, r2, r3}
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800adea:	f107 0320 	add.w	r3, r7, #32
 800adee:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	2100      	movs	r1, #0
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f006 f99e 	bl	8011138 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800adfc:	4603      	mov	r3, r0
 800adfe:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800ae00:	89fb      	ldrh	r3, [r7, #14]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae0c:	b003      	add	sp, #12
 800ae0e:	4770      	bx	lr

0800ae10 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ae10:	b40c      	push	{r2, r3}
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800ae1e:	f107 031c 	add.w	r3, r7, #28
 800ae22:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800ae24:	78f9      	ldrb	r1, [r7, #3]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	69ba      	ldr	r2, [r7, #24]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f006 f984 	bl	8011138 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800ae30:	4603      	mov	r3, r0
 800ae32:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800ae34:	89fb      	ldrh	r3, [r7, #14]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae40:	b002      	add	sp, #8
 800ae42:	4770      	bx	lr

0800ae44 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08a      	sub	sp, #40	; 0x28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d016      	beq.n	800ae86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3322      	adds	r3, #34	; 0x22
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	8adb      	ldrh	r3, [r3, #22]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d105      	bne.n	800ae72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800ae66:	4b43      	ldr	r3, [pc, #268]	; (800af74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800ae68:	4a43      	ldr	r2, [pc, #268]	; (800af78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ae6a:	21c0      	movs	r1, #192	; 0xc0
 800ae6c:	4843      	ldr	r0, [pc, #268]	; (800af7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ae6e:	f011 ff75 	bl	801cd5c <__assert_func>
            return buffer[pos];
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	8a9b      	ldrh	r3, [r3, #20]
 800ae76:	461a      	mov	r2, r3
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d06a      	beq.n	800af62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f007 fc61 	bl	8012754 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	3322      	adds	r3, #34	; 0x22
 800ae96:	623b      	str	r3, [r7, #32]
 800ae98:	2301      	movs	r3, #1
 800ae9a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	8adb      	ldrh	r3, [r3, #22]
 800aea0:	8bfa      	ldrh	r2, [r7, #30]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d305      	bcc.n	800aeb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800aea6:	4b36      	ldr	r3, [pc, #216]	; (800af80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800aea8:	4a36      	ldr	r2, [pc, #216]	; (800af84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800aeaa:	21c5      	movs	r1, #197	; 0xc5
 800aeac:	4833      	ldr	r0, [pc, #204]	; (800af7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800aeae:	f011 ff55 	bl	801cd5c <__assert_func>
            const uint16_t index = pos + offset;
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	8a9a      	ldrh	r2, [r3, #20]
 800aeb6:	8bfb      	ldrh	r3, [r7, #30]
 800aeb8:	4413      	add	r3, r2
 800aeba:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800aebc:	8bbb      	ldrh	r3, [r7, #28]
 800aebe:	2b09      	cmp	r3, #9
 800aec0:	d801      	bhi.n	800aec6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800aec2:	8bbb      	ldrh	r3, [r7, #28]
 800aec4:	e001      	b.n	800aeca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800aec6:	8bbb      	ldrh	r3, [r7, #28]
 800aec8:	3b0a      	subs	r3, #10
 800aeca:	6a3a      	ldr	r2, [r7, #32]
 800aecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aed0:	f640 123f 	movw	r2, #2367	; 0x93f
 800aed4:	4293      	cmp	r3, r2
 800aed6:	bf0c      	ite	eq
 800aed8:	2301      	moveq	r3, #1
 800aeda:	2300      	movne	r3, #0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d03f      	beq.n	800af62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3322      	adds	r3, #34	; 0x22
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	3222      	adds	r2, #34	; 0x22
 800aeea:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	8ad2      	ldrh	r2, [r2, #22]
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	d105      	bne.n	800af00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800aef4:	4b1f      	ldr	r3, [pc, #124]	; (800af74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800aef6:	4a20      	ldr	r2, [pc, #128]	; (800af78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800aef8:	21c0      	movs	r1, #192	; 0xc0
 800aefa:	4820      	ldr	r0, [pc, #128]	; (800af7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800aefc:	f011 ff2e 	bl	801cd5c <__assert_func>
            return buffer[pos];
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	8a92      	ldrh	r2, [r2, #20]
 800af04:	4611      	mov	r1, r2
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800af0c:	613b      	str	r3, [r7, #16]
 800af0e:	4613      	mov	r3, r2
 800af10:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	8adb      	ldrh	r3, [r3, #22]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d806      	bhi.n	800af28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800af1a:	4b1b      	ldr	r3, [pc, #108]	; (800af88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800af1c:	4a1b      	ldr	r2, [pc, #108]	; (800af8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800af1e:	f240 110d 	movw	r1, #269	; 0x10d
 800af22:	4816      	ldr	r0, [pc, #88]	; (800af7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800af24:	f011 ff1a 	bl	801cd5c <__assert_func>
            const uint16_t index = pos + 1;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	8a9b      	ldrh	r3, [r3, #20]
 800af2c:	3301      	adds	r3, #1
 800af2e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800af30:	89bb      	ldrh	r3, [r7, #12]
 800af32:	2b09      	cmp	r3, #9
 800af34:	d801      	bhi.n	800af3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800af36:	89bb      	ldrh	r3, [r7, #12]
 800af38:	e000      	b.n	800af3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800af3a:	2300      	movs	r3, #0
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	89f9      	ldrh	r1, [r7, #14]
 800af40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800af44:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3322      	adds	r3, #34	; 0x22
 800af4a:	61bb      	str	r3, [r7, #24]
 800af4c:	f640 133f 	movw	r3, #2367	; 0x93f
 800af50:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	8a9b      	ldrh	r3, [r3, #20]
 800af56:	4619      	mov	r1, r3
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	8afa      	ldrh	r2, [r7, #22]
 800af5c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800af60:	bf00      	nop
        }
    }
    return getNextChar();
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f007 fada 	bl	801251c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800af68:	4603      	mov	r3, r0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3728      	adds	r7, #40	; 0x28
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	0801e328 	.word	0x0801e328
 800af78:	0801e334 	.word	0x0801e334
 800af7c:	0801e3e0 	.word	0x0801e3e0
 800af80:	0801e428 	.word	0x0801e428
 800af84:	0801e438 	.word	0x0801e438
 800af88:	0801e50c 	.word	0x0801e50c
 800af8c:	0801e518 	.word	0x0801e518

0800af90 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f007 fa77 	bl	801248c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800afa8:	b590      	push	{r4, r7, lr}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800afb6:	88fb      	ldrh	r3, [r7, #6]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d127      	bne.n	800b00c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800afbc:	88fb      	ldrh	r3, [r7, #6]
 800afbe:	4a1e      	ldr	r2, [pc, #120]	; (800b038 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800afc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d016      	beq.n	800aff6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800afc8:	88fb      	ldrh	r3, [r7, #6]
 800afca:	4a1b      	ldr	r2, [pc, #108]	; (800b038 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800afcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afd0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	4413      	add	r3, r2
 800afda:	4a18      	ldr	r2, [pc, #96]	; (800b03c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800afdc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	4413      	add	r3, r2
 800afe6:	4a16      	ldr	r2, [pc, #88]	; (800b040 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800afe8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	4413      	add	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e00a      	b.n	800b00c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800aff6:	4b11      	ldr	r3, [pc, #68]	; (800b03c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800aff8:	4a12      	ldr	r2, [pc, #72]	; (800b044 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800affa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800affc:	2200      	movs	r2, #0
 800affe:	4b10      	ldr	r3, [pc, #64]	; (800b040 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b000:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800b002:	88fb      	ldrh	r3, [r7, #6]
 800b004:	4a10      	ldr	r2, [pc, #64]	; (800b048 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800b006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b00a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00d      	beq.n	800b02e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800b012:	4a0e      	ldr	r2, [pc, #56]	; (800b04c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800b014:	88fb      	ldrh	r3, [r7, #6]
 800b016:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800b018:	f000 f822 	bl	800b060 <_ZN17TypedTextDatabase8getFontsEv>
 800b01c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800b01e:	f000 f817 	bl	800b050 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800b022:	4603      	mov	r3, r0
 800b024:	461a      	mov	r2, r3
 800b026:	4621      	mov	r1, r4
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7ff febd 	bl	800ada8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800b02e:	bf00      	nop
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	bd90      	pop	{r4, r7, pc}
 800b036:	bf00      	nop
 800b038:	240c0ed4 	.word	0x240c0ed4
 800b03c:	240c0edc 	.word	0x240c0edc
 800b040:	240c0ee0 	.word	0x240c0ee0
 800b044:	08021fec 	.word	0x08021fec
 800b048:	08021ff4 	.word	0x08021ff4
 800b04c:	240c0ed8 	.word	0x240c0ed8

0800b050 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800b050:	b480      	push	{r7}
 800b052:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800b054:	2301      	movs	r3, #1
}
 800b056:	4618      	mov	r0, r3
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800b064:	4b02      	ldr	r3, [pc, #8]	; (800b070 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800b066:	4618      	mov	r0, r3
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	240c0ee4 	.word	0x240c0ee4

0800b074 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d113      	bne.n	800b0ac <_Z41__static_initialization_and_destruction_0ii+0x38>
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d10e      	bne.n	800b0ac <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800b08e:	f7fd ffe3 	bl	8009058 <_Z23getFont_verdana_20_4bppv>
 800b092:	4603      	mov	r3, r0
};
 800b094:	4a07      	ldr	r2, [pc, #28]	; (800b0b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b096:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800b098:	f7fe f834 	bl	8009104 <_Z23getFont_verdana_40_4bppv>
 800b09c:	4603      	mov	r3, r0
};
 800b09e:	4a05      	ldr	r2, [pc, #20]	; (800b0b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b0a0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800b0a2:	f7fd ff83 	bl	8008fac <_Z23getFont_verdana_10_4bppv>
 800b0a6:	4603      	mov	r3, r0
};
 800b0a8:	4a02      	ldr	r2, [pc, #8]	; (800b0b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b0aa:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	240c0ee4 	.word	0x240c0ee4

0800b0b8 <_GLOBAL__sub_I_touchgfx_fonts>:
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	f7ff ffd7 	bl	800b074 <_Z41__static_initialization_and_destruction_0ii>
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	4a05      	ldr	r2, [pc, #20]	; (800b0e8 <_ZN19FrontendApplicationD1Ev+0x20>)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fa5f 	bl	800959c <_ZN23FrontendApplicationBaseD1Ev>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	0801efa4 	.word	0x0801efa4

0800b0ec <_ZN19FrontendApplicationD0Ev>:
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff ffe7 	bl	800b0c8 <_ZN19FrontendApplicationD1Ev>
 800b0fa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f011 fdfd 	bl	801ccfe <_ZdlPvj>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f82d 	bl	800b17c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	f005 f83d 	bl	80101a4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	4618      	mov	r0, r3
 800b148:	f7fe fa78 	bl	800963c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800b14c:	4a03      	ldr	r2, [pc, #12]	; (800b15c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	601a      	str	r2, [r3, #0]
{

}
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	0801efa4 	.word	0x0801efa4

0800b160 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]
{

}
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <_ZN5Model4tickEv>:

void Model::tick()
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]

}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
    {
    }
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
    {
    }
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
    {
 800b1c0:	4a04      	ldr	r2, [pc, #16]	; (800b1d4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
    }
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	0801f028 	.word	0x0801f028

0800b1d8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
    }
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ffe9 	bl	800b1b8 <_ZN8touchgfx9PresenterD1Ev>
 800b1e6:	2104      	movs	r1, #4
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f011 fd88 	bl	801ccfe <_ZdlPvj>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
    {
 800b200:	4a04      	ldr	r2, [pc, #16]	; (800b214 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	601a      	str	r2, [r3, #0]
    }
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	0801f028 	.word	0x0801f028

0800b218 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	4a06      	ldr	r2, [pc, #24]	; (800b23c <_ZN13ModelListenerC1Ev+0x24>)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	605a      	str	r2, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4618      	mov	r0, r3
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	0801f018 	.word	0x0801f018

0800b240 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	4a04      	ldr	r2, [pc, #16]	; (800b25c <_ZN13ModelListenerD1Ev+0x1c>)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	0801f018 	.word	0x0801f018

0800b260 <_ZN13ModelListenerD0Ev>:
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff ffe9 	bl	800b240 <_ZN13ModelListenerD1Ev>
 800b26e:	2108      	movs	r1, #8
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f011 fd44 	bl	801ccfe <_ZdlPvj>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	4a09      	ldr	r2, [pc, #36]	; (800b2b0 <_ZN16Screen1PresenterD1Ev+0x30>)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	4a09      	ldr	r2, [pc, #36]	; (800b2b4 <_ZN16Screen1PresenterD1Ev+0x34>)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	605a      	str	r2, [r3, #4]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff ffd1 	bl	800b240 <_ZN13ModelListenerD1Ev>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff ff89 	bl	800b1b8 <_ZN8touchgfx9PresenterD1Ev>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	0801eff0 	.word	0x0801eff0
 800b2b4:	0801f008 	.word	0x0801f008

0800b2b8 <_ZThn4_N16Screen1PresenterD1Ev>:
 800b2b8:	f1a0 0004 	sub.w	r0, r0, #4
 800b2bc:	e7e0      	b.n	800b280 <_ZN16Screen1PresenterD1Ev>
 800b2be:	bf00      	nop

0800b2c0 <_ZN16Screen1PresenterD0Ev>:
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff ffd9 	bl	800b280 <_ZN16Screen1PresenterD1Ev>
 800b2ce:	2110      	movs	r1, #16
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f011 fd14 	bl	801ccfe <_ZdlPvj>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <_ZThn4_N16Screen1PresenterD0Ev>:
 800b2e0:	f1a0 0004 	sub.w	r0, r0, #4
 800b2e4:	e7ec      	b.n	800b2c0 <_ZN16Screen1PresenterD0Ev>
	...

0800b2e8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
    : view(v)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff ff7f 	bl	800b1f8 <_ZN8touchgfx9PresenterC1Ev>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff ff8a 	bl	800b218 <_ZN13ModelListenerC1Ev>
 800b304:	4a06      	ldr	r2, [pc, #24]	; (800b320 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	4a06      	ldr	r2, [pc, #24]	; (800b324 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	605a      	str	r2, [r3, #4]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	60da      	str	r2, [r3, #12]
{

}
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	0801eff0 	.word	0x0801eff0
 800b324:	0801f008 	.word	0x0801f008

0800b328 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]

}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]

}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	4a05      	ldr	r2, [pc, #20]	; (800b370 <_ZN11Screen1ViewD1Ev+0x20>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff f8ad 	bl	800a4c0 <_ZN15Screen1ViewBaseD1Ev>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	0801f040 	.word	0x0801f040

0800b374 <_ZN11Screen1ViewD0Ev>:
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff ffe7 	bl	800b350 <_ZN11Screen1ViewD1Ev>
 800b382:	f641 5130 	movw	r1, #7472	; 0x1d30
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f011 fcb9 	bl	801ccfe <_ZdlPvj>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff f946 	bl	800a634 <_ZN15Screen1ViewBaseC1Ev>
 800b3a8:	4a03      	ldr	r2, [pc, #12]	; (800b3b8 <_ZN11Screen1ViewC1Ev+0x20>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	601a      	str	r2, [r3, #0]
{

}
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	0801f040 	.word	0x0801f040

0800b3bc <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff fa0a 	bl	800a7e0 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe fe32 	bl	800a048 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
    {
 800b3f4:	4a04      	ldr	r2, [pc, #16]	; (800b408 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	601a      	str	r2, [r3, #0]
    }
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	0801f08c 	.word	0x0801f08c

0800b40c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
    }
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ffe9 	bl	800b3ec <_ZN8touchgfx15TouchControllerD1Ev>
 800b41a:	2104      	movs	r1, #4
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f011 fc6e 	bl	801ccfe <_ZdlPvj>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
	...

0800b45c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	4a05      	ldr	r2, [pc, #20]	; (800b47c <_ZN20STM32TouchControllerD1Ev+0x20>)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff ffbd 	bl	800b3ec <_ZN8touchgfx15TouchControllerD1Ev>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	0801f074 	.word	0x0801f074

0800b480 <_ZN20STM32TouchControllerD0Ev>:
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ffe7 	bl	800b45c <_ZN20STM32TouchControllerD1Ev>
 800b48e:	2104      	movs	r1, #4
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f011 fc34 	bl	801ccfe <_ZdlPvj>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	71fb      	strb	r3, [r7, #7]

}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	4603      	mov	r3, r0
 800b4be:	71fb      	strb	r3, [r7, #7]

}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	71fb      	strb	r3, [r7, #7]

}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
	...

0800b4e4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
    {
 800b4ec:	4a04      	ldr	r2, [pc, #16]	; (800b500 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	601a      	str	r2, [r3, #0]
    }
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	0801f978 	.word	0x0801f978

0800b504 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
    }
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff ffe9 	bl	800b4e4 <_ZN8touchgfx3HALD1Ev>
 800b512:	217c      	movs	r1, #124	; 0x7c
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f011 fbf2 	bl	801ccfe <_ZdlPvj>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	78fa      	ldrb	r2, [r7, #3]
 800b534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	460b      	mov	r3, r1
 800b556:	807b      	strh	r3, [r7, #2]
 800b558:	4613      	mov	r3, r2
 800b55a:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800b55c:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	887a      	ldrh	r2, [r7, #2]
 800b562:	429a      	cmp	r2, r3
 800b564:	d304      	bcc.n	800b570 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800b566:	4b0b      	ldr	r3, [pc, #44]	; (800b594 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	883a      	ldrh	r2, [r7, #0]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d205      	bcs.n	800b57c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800b570:	4b09      	ldr	r3, [pc, #36]	; (800b598 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800b572:	4a0a      	ldr	r2, [pc, #40]	; (800b59c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800b574:	219e      	movs	r1, #158	; 0x9e
 800b576:	480a      	ldr	r0, [pc, #40]	; (800b5a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800b578:	f011 fbf0 	bl	801cd5c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800b57c:	4a09      	ldr	r2, [pc, #36]	; (800b5a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800b57e:	887b      	ldrh	r3, [r7, #2]
 800b580:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800b582:	4a09      	ldr	r2, [pc, #36]	; (800b5a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800b584:	883b      	ldrh	r3, [r7, #0]
 800b586:	8013      	strh	r3, [r2, #0]
    }
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	240c3d36 	.word	0x240c3d36
 800b594:	240c3d38 	.word	0x240c3d38
 800b598:	0801e5cc 	.word	0x0801e5cc
 800b59c:	0801e630 	.word	0x0801e630
 800b5a0:	0801e674 	.word	0x0801e674
 800b5a4:	240c3d3c 	.word	0x240c3d3c
 800b5a8:	240c3d3e 	.word	0x240c3d3e

0800b5ac <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d009      	beq.n	800b5d2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	4798      	blx	r3
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	e000      	b.n	800b5d4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 800b5d2:	2300      	movs	r3, #0
    }
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f003 f8b3 	bl	800e750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	33ac      	adds	r3, #172	; 0xac
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4798      	blx	r3
    }
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
        return false;
 800b608:	2300      	movs	r3, #0
    }
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
	...

0800b618 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800b62c:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800b62e:	4a10      	ldr	r2, [pc, #64]	; (800b670 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800b630:	f240 21bb 	movw	r1, #699	; 0x2bb
 800b634:	480f      	ldr	r0, [pc, #60]	; (800b674 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800b636:	f011 fb91 	bl	801cd5c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bf14      	ite	ne
 800b64c:	2301      	movne	r3, #1
 800b64e:	2300      	moveq	r3, #0
 800b650:	b2da      	uxtb	r2, r3
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800b654:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	338c      	adds	r3, #140	; 0x8c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	4798      	blx	r3
    }
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	0801e6b8 	.word	0x0801e6b8
 800b670:	0801e6f0 	.word	0x0801e6f0
 800b674:	0801e674 	.word	0x0801e674
 800b678:	240c3d40 	.word	0x240c3d40

0800b67c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bf14      	ite	ne
 800b692:	2301      	movne	r3, #1
 800b694:	2300      	moveq	r3, #0
 800b696:	b2da      	uxtb	r2, r3
 800b698:	4b03      	ldr	r3, [pc, #12]	; (800b6a8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800b69a:	701a      	strb	r2, [r3, #0]
    }
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	240c3d41 	.word	0x240c3d41

0800b6ac <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
        return 0;
 800b6b4:	2300      	movs	r3, #0
    }
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	887a      	ldrh	r2, [r7, #2]
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4798      	blx	r3
    }
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 800b6f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3318      	adds	r3, #24
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4610      	mov	r0, r2
 800b718:	4798      	blx	r3
 800b71a:	4603      	mov	r3, r0
    }
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b738:	429a      	cmp	r2, r3
 800b73a:	d011      	beq.n	800b760 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800b73c:	4b14      	ldr	r3, [pc, #80]	; (800b790 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d11e      	bne.n	800b782 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800b744:	4b13      	ldr	r3, [pc, #76]	; (800b794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800b74a:	4b13      	ldr	r3, [pc, #76]	; (800b798 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b74c:	881a      	ldrh	r2, [r3, #0]
 800b74e:	4b11      	ldr	r3, [pc, #68]	; (800b794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b750:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800b752:	4a11      	ldr	r2, [pc, #68]	; (800b798 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b754:	89bb      	ldrh	r3, [r7, #12]
 800b756:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800b758:	4b0d      	ldr	r3, [pc, #52]	; (800b790 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b75a:	2201      	movs	r2, #1
 800b75c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800b75e:	e010      	b.n	800b782 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800b760:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00c      	beq.n	800b782 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800b76e:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b770:	881a      	ldrh	r2, [r3, #0]
 800b772:	4b08      	ldr	r3, [pc, #32]	; (800b794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b774:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800b776:	4a08      	ldr	r2, [pc, #32]	; (800b798 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b778:	89fb      	ldrh	r3, [r7, #14]
 800b77a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b77e:	2200      	movs	r2, #0
 800b780:	701a      	strb	r2, [r3, #0]
    }
 800b782:	bf00      	nop
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	240c3d3a 	.word	0x240c3d3a
 800b794:	240c3d38 	.word	0x240c3d38
 800b798:	240c3d36 	.word	0x240c3d36

0800b79c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 f95c 	bl	800da64 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	4a05      	ldr	r2, [pc, #20]	; (800b7d4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff fe8d 	bl	800b4e4 <_ZN8touchgfx3HALD1Ev>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	0801f2c4 	.word	0x0801f2c4

0800b7d8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ffe7 	bl	800b7b4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800b7e6:	217c      	movs	r1, #124	; 0x7c
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f011 fa88 	bl	801ccfe <_ZdlPvj>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4618      	mov	r0, r3
 800b804:	f7ff ffca 	bl	800b79c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f001 fba8 	bl	800cf70 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <_ZN11TouchGFXHAL9taskEntryEv>:
void TouchGFXHAL::taskEntry()
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3380      	adds	r3, #128	; 0x80
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	4798      	blx	r3
    enableInterrupts();
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3378      	adds	r3, #120	; 0x78
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	4798      	blx	r3

    OSWrappers::waitForVSync();
 800b848:	f000 f9f4 	bl	800bc34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3370      	adds	r3, #112	; 0x70
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4610      	mov	r0, r2
 800b858:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 800b85a:	2200      	movs	r2, #0
 800b85c:	2180      	movs	r1, #128	; 0x80
 800b85e:	480b      	ldr	r0, [pc, #44]	; (800b88c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 800b860:	f7f6 fe24 	bl	80024ac <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b864:	2201      	movs	r2, #1
 800b866:	2104      	movs	r1, #4
 800b868:	4809      	ldr	r0, [pc, #36]	; (800b890 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 800b86a:	f7f6 fe1f 	bl	80024ac <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800b86e:	2201      	movs	r2, #1
 800b870:	2102      	movs	r1, #2
 800b872:	4807      	ldr	r0, [pc, #28]	; (800b890 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 800b874:	f7f6 fe1a 	bl	80024ac <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800b878:	f000 f9dc 	bl	800bc34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3370      	adds	r3, #112	; 0x70
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4610      	mov	r0, r2
 800b888:	4798      	blx	r3
        OSWrappers::waitForVSync();
 800b88a:	e7f5      	b.n	800b878 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 800b88c:	58022800 	.word	0x58022800
 800b890:	58020000 	.word	0x58020000

0800b894 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f001 fc08 	bl	800d0b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800b8a4:	4603      	mov	r3, r0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 fc07 	bl	800d0d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f001 fc0f 	bl	800d0fc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800b8de:	bf00      	nop
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	60b9      	str	r1, [r7, #8]
 800b8f0:	607a      	str	r2, [r7, #4]
 800b8f2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	f001 fc56 	bl	800d1ac <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800b900:	4603      	mov	r3, r0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4618      	mov	r0, r3
 800b916:	f001 fb4f 	bl	800cfb8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800b91a:	bf00      	nop
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f001 fb53 	bl	800cfd8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b082      	sub	sp, #8
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4618      	mov	r0, r3
 800b946:	f001 fb55 	bl	800cff4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f001 fb57 	bl	800d010 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b082      	sub	sp, #8
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4618      	mov	r0, r3
 800b976:	f001 fb79 	bl	800d06c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800b97a:	4603      	mov	r3, r0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4618      	mov	r0, r3
 800b990:	f001 fb7a 	bl	800d088 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	4a05      	ldr	r2, [pc, #20]	; (800b9bc <_ZN11TouchGFXHALD1Ev+0x20>)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff ff01 	bl	800b7b4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	0801f0a4 	.word	0x0801f0a4

0800b9c0 <_ZN11TouchGFXHALD0Ev>:
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff ffe7 	bl	800b99c <_ZN11TouchGFXHALD1Ev>
 800b9ce:	217c      	movs	r1, #124	; 0x7c
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f011 f994 	bl	801ccfe <_ZdlPvj>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 800b9e6:	2334      	movs	r3, #52	; 0x34
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	2364      	movs	r3, #100	; 0x64
 800b9ec:	4a2b      	ldr	r2, [pc, #172]	; (800ba9c <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 800b9ee:	492c      	ldr	r1, [pc, #176]	; (800baa0 <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 800b9f0:	482c      	ldr	r0, [pc, #176]	; (800baa4 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 800b9f2:	f7fc fcc9 	bl	8008388 <_txe_byte_pool_create>
 800b9f6:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bf14      	ite	ne
 800b9fc:	2301      	movne	r3, #1
 800b9fe:	2300      	moveq	r3, #0
 800ba00:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d005      	beq.n	800ba12 <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 800ba06:	4b28      	ldr	r3, [pc, #160]	; (800baa8 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 800ba08:	4a28      	ldr	r2, [pc, #160]	; (800baac <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 800ba0a:	2138      	movs	r1, #56	; 0x38
 800ba0c:	4828      	ldr	r0, [pc, #160]	; (800bab0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 800ba0e:	f011 f9a5 	bl	801cd5c <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 800ba12:	1d39      	adds	r1, r7, #4
 800ba14:	2300      	movs	r3, #0
 800ba16:	2204      	movs	r2, #4
 800ba18:	4822      	ldr	r0, [pc, #136]	; (800baa4 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 800ba1a:	f7fc fc41 	bl	80082a0 <_txe_byte_allocate>
 800ba1e:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bf14      	ite	ne
 800ba24:	2301      	movne	r3, #1
 800ba26:	2300      	moveq	r3, #0
 800ba28:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 800ba2e:	4b21      	ldr	r3, [pc, #132]	; (800bab4 <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 800ba30:	4a1e      	ldr	r2, [pc, #120]	; (800baac <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 800ba32:	213f      	movs	r1, #63	; 0x3f
 800ba34:	481e      	ldr	r0, [pc, #120]	; (800bab0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 800ba36:	f011 f991 	bl	801cd5c <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2238      	movs	r2, #56	; 0x38
 800ba3e:	9201      	str	r2, [sp, #4]
 800ba40:	2204      	movs	r2, #4
 800ba42:	9200      	str	r2, [sp, #0]
 800ba44:	2201      	movs	r2, #1
 800ba46:	491c      	ldr	r1, [pc, #112]	; (800bab8 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 800ba48:	481c      	ldr	r0, [pc, #112]	; (800babc <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 800ba4a:	f7fc fd3d 	bl	80084c8 <_txe_queue_create>
 800ba4e:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	bf14      	ite	ne
 800ba54:	2301      	movne	r3, #1
 800ba56:	2300      	moveq	r3, #0
 800ba58:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d005      	beq.n	800ba6a <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 800ba5e:	4b18      	ldr	r3, [pc, #96]	; (800bac0 <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 800ba60:	4a12      	ldr	r2, [pc, #72]	; (800baac <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 800ba62:	2146      	movs	r1, #70	; 0x46
 800ba64:	4812      	ldr	r0, [pc, #72]	; (800bab0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 800ba66:	f011 f979 	bl	801cd5c <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 800ba6a:	231c      	movs	r3, #28
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	4915      	ldr	r1, [pc, #84]	; (800bac4 <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 800ba70:	4815      	ldr	r0, [pc, #84]	; (800bac8 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 800ba72:	f7fc fe6d 	bl	8008750 <_txe_semaphore_create>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	bf14      	ite	ne
 800ba7c:	2301      	movne	r3, #1
 800ba7e:	2300      	moveq	r3, #0
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 800ba86:	4b11      	ldr	r3, [pc, #68]	; (800bacc <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 800ba88:	4a08      	ldr	r2, [pc, #32]	; (800baac <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 800ba8a:	214c      	movs	r1, #76	; 0x4c
 800ba8c:	4808      	ldr	r0, [pc, #32]	; (800bab0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 800ba8e:	f011 f965 	bl	801cd5c <__assert_func>
    }
}
 800ba92:	bf00      	nop
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	240c0ef0 	.word	0x240c0ef0
 800baa0:	0801e740 	.word	0x0801e740
 800baa4:	240c0f54 	.word	0x240c0f54
 800baa8:	0801e754 	.word	0x0801e754
 800baac:	0801e784 	.word	0x0801e784
 800bab0:	0801e7b4 	.word	0x0801e7b4
 800bab4:	0801e7e0 	.word	0x0801e7e0
 800bab8:	0801e820 	.word	0x0801e820
 800babc:	240c0fa4 	.word	0x240c0fa4
 800bac0:	0801e834 	.word	0x0801e834
 800bac4:	0801e864 	.word	0x0801e864
 800bac8:	240c0f88 	.word	0x240c0f88
 800bacc:	0801e87c 	.word	0x0801e87c

0800bad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 800bad4:	f04f 31ff 	mov.w	r1, #4294967295
 800bad8:	4809      	ldr	r0, [pc, #36]	; (800bb00 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 800bada:	f7fc fecf 	bl	800887c <_txe_semaphore_get>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bf14      	ite	ne
 800bae4:	2301      	movne	r3, #1
 800bae6:	2300      	moveq	r3, #0
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 800baee:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 800baf0:	4a05      	ldr	r2, [pc, #20]	; (800bb08 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 800baf2:	2157      	movs	r1, #87	; 0x57
 800baf4:	4805      	ldr	r0, [pc, #20]	; (800bb0c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 800baf6:	f011 f931 	bl	801cd5c <__assert_func>
    }
}
 800bafa:	bf00      	nop
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	240c0f88 	.word	0x240c0f88
 800bb04:	0801e8ac 	.word	0x0801e8ac
 800bb08:	0801e8d8 	.word	0x0801e8d8
 800bb0c:	0801e7b4 	.word	0x0801e7b4

0800bb10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d110      	bne.n	800bb3e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 800bb1c:	4809      	ldr	r0, [pc, #36]	; (800bb44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 800bb1e:	f7fc feef 	bl	8008900 <_txe_semaphore_put>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bf14      	ite	ne
 800bb28:	2301      	movne	r3, #1
 800bb2a:	2300      	moveq	r3, #0
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 800bb34:	4a05      	ldr	r2, [pc, #20]	; (800bb4c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 800bb36:	2164      	movs	r1, #100	; 0x64
 800bb38:	4805      	ldr	r0, [pc, #20]	; (800bb50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 800bb3a:	f011 f90f 	bl	801cd5c <__assert_func>
        }
    }
}
 800bb3e:	bf00      	nop
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	240c0f88 	.word	0x240c0f88
 800bb48:	0801e918 	.word	0x0801e918
 800bb4c:	0801e944 	.word	0x0801e944
 800bb50:	0801e7b4 	.word	0x0801e7b4

0800bb54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 800bb58:	2100      	movs	r1, #0
 800bb5a:	4803      	ldr	r0, [pc, #12]	; (800bb68 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800bb5c:	f7fc fe8e 	bl	800887c <_txe_semaphore_get>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 800bb64:	bf00      	nop
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	240c0f88 	.word	0x240c0f88

0800bb6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb72:	f3ef 8310 	mrs	r3, PRIMASK
 800bb76:	60bb      	str	r3, [r7, #8]
    return(posture);
 800bb78:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800bb7a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb7c:	b672      	cpsid	i
    return(int_posture);
 800bb7e:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 800bb80:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 800bb82:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3301      	adds	r3, #1
 800bb88:	4a13      	ldr	r2, [pc, #76]	; (800bbd8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 800bb8a:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 800bb8c:	4b13      	ldr	r3, [pc, #76]	; (800bbdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d110      	bne.n	800bbb6 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 800bb94:	4811      	ldr	r0, [pc, #68]	; (800bbdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 800bb96:	f7fc feb3 	bl	8008900 <_txe_semaphore_put>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bf14      	ite	ne
 800bba0:	2301      	movne	r3, #1
 800bba2:	2300      	moveq	r3, #0
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d005      	beq.n	800bbb6 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 800bbaa:	4b0d      	ldr	r3, [pc, #52]	; (800bbe0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 800bbac:	4a0d      	ldr	r2, [pc, #52]	; (800bbe4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 800bbae:	218a      	movs	r1, #138	; 0x8a
 800bbb0:	480d      	ldr	r0, [pc, #52]	; (800bbe8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 800bbb2:	f011 f8d3 	bl	801cd5c <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 800bbb6:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	4a06      	ldr	r2, [pc, #24]	; (800bbd8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	f383 8810 	msr	PRIMASK, r3
}
 800bbca:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 800bbcc:	f7fb fe52 	bl	8007874 <_tx_thread_system_preempt_check>
}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	240c0830 	.word	0x240c0830
 800bbdc:	240c0f88 	.word	0x240c0f88
 800bbe0:	0801e918 	.word	0x0801e918
 800bbe4:	0801e984 	.word	0x0801e984
 800bbe8:	0801e7b4 	.word	0x0801e7b4

0800bbec <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 800bbf2:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10e      	bne.n	800bc18 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	4909      	ldr	r1, [pc, #36]	; (800bc24 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 800bbfe:	4808      	ldr	r0, [pc, #32]	; (800bc20 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 800bc00:	f7fc fd5c 	bl	80086bc <_txe_queue_send>
 800bc04:	6078      	str	r0, [r7, #4]
        if (ret != TX_SUCCESS)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d005      	beq.n	800bc18 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
        {
            assert(0 && "Failed to Signal Vsync!");
 800bc0c:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 800bc0e:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800bc10:	21a6      	movs	r1, #166	; 0xa6
 800bc12:	4807      	ldr	r0, [pc, #28]	; (800bc30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 800bc14:	f011 f8a2 	bl	801cd5c <__assert_func>
        }
    }
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	240c0fa4 	.word	0x240c0fa4
 800bc24:	24000018 	.word	0x24000018
 800bc28:	0801e9c8 	.word	0x0801e9c8
 800bc2c:	0801e9e8 	.word	0x0801e9e8
 800bc30:	0801e7b4 	.word	0x0801e7b4

0800bc34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	490f      	ldr	r1, [pc, #60]	; (800bc7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 800bc3e:	4810      	ldr	r0, [pc, #64]	; (800bc80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 800bc40:	f7fc fcf2 	bl	8008628 <_txe_queue_receive>
 800bc44:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b0a      	cmp	r3, #10
 800bc50:	d106      	bne.n	800bc60 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295
 800bc56:	4909      	ldr	r1, [pc, #36]	; (800bc7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 800bc58:	4809      	ldr	r0, [pc, #36]	; (800bc80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 800bc5a:	f7fc fce5 	bl	8008628 <_txe_queue_receive>
 800bc5e:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 800bc66:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 800bc68:	4a07      	ldr	r2, [pc, #28]	; (800bc88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 800bc6a:	21c9      	movs	r1, #201	; 0xc9
 800bc6c:	4807      	ldr	r0, [pc, #28]	; (800bc8c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 800bc6e:	f011 f875 	bl	801cd5c <__assert_func>
    }
}
 800bc72:	bf00      	nop
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	24000018 	.word	0x24000018
 800bc80:	240c0fa4 	.word	0x240c0fa4
 800bc84:	0801ea18 	.word	0x0801ea18
 800bc88:	0801ea3c 	.word	0x0801ea3c
 800bc8c:	0801e7b4 	.word	0x0801e7b4

0800bc90 <__NVIC_EnableIRQ>:
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bc9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	db0b      	blt.n	800bcba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	f003 021f 	and.w	r2, r3, #31
 800bca8:	4907      	ldr	r1, [pc, #28]	; (800bcc8 <__NVIC_EnableIRQ+0x38>)
 800bcaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcae:	095b      	lsrs	r3, r3, #5
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	fa00 f202 	lsl.w	r2, r0, r2
 800bcb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	e000e100 	.word	0xe000e100

0800bccc <__NVIC_DisableIRQ>:
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bcd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	db12      	blt.n	800bd04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	f003 021f 	and.w	r2, r3, #31
 800bce4:	490a      	ldr	r1, [pc, #40]	; (800bd10 <__NVIC_DisableIRQ+0x44>)
 800bce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcea:	095b      	lsrs	r3, r3, #5
 800bcec:	2001      	movs	r0, #1
 800bcee:	fa00 f202 	lsl.w	r2, r0, r2
 800bcf2:	3320      	adds	r3, #32
 800bcf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bcf8:	f3bf 8f4f 	dsb	sy
}
 800bcfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bcfe:	f3bf 8f6f 	isb	sy
}
 800bd02:	bf00      	nop
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	e000e100 	.word	0xe000e100

0800bd14 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
        : color(0)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]
    }
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4618      	mov	r0, r3
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
    {
 800bd38:	4a04      	ldr	r2, [pc, #16]	; (800bd4c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	601a      	str	r2, [r3, #0]
    }
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	0801f1cc 	.word	0x0801f1cc

0800bd50 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
    }
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff ffe9 	bl	800bd30 <_ZN8touchgfx9DMA_QueueD1Ev>
 800bd5e:	2104      	movs	r1, #4
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f010 ffcc 	bl	801ccfe <_ZdlPvj>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3344      	adds	r3, #68	; 0x44
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	4798      	blx	r3
    }
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
    {
 800bd94:	4a04      	ldr	r2, [pc, #16]	; (800bda8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]
    }
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	0801fed8 	.word	0x0801fed8

0800bdac <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
    }
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7ff ffe9 	bl	800bd8c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800bdba:	210c      	movs	r1, #12
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f010 ff9e 	bl	801ccfe <_ZdlPvj>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800bdd6:	4a09      	ldr	r2, [pc, #36]	; (800bdfc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	605a      	str	r2, [r3, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	721a      	strb	r2, [r3, #8]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	725a      	strb	r2, [r3, #9]
    {
    }
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	0801fed8 	.word	0x0801fed8

0800be00 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800be08:	2301      	movs	r3, #1
    }
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800be16:	b580      	push	{r7, lr}
 800be18:	b082      	sub	sp, #8
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3328      	adds	r3, #40	; 0x28
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4610      	mov	r0, r2
 800be2a:	4798      	blx	r3
    }
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3314      	adds	r3, #20
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4610      	mov	r0, r2
 800be4c:	4798      	blx	r3
    }
 800be4e:	bf00      	nop
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800be56:	b580      	push	{r7, lr}
 800be58:	b082      	sub	sp, #8
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800be5e:	f7fd fa55 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 800be62:	4603      	mov	r3, r0
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff ffe5 	bl	800be34 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800be6a:	bf00      	nop
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	330c      	adds	r3, #12
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff ff48 	bl	800bd14 <_ZN8touchgfx9colortypeC1Ev>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4618      	mov	r0, r3
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800be90:	b5b0      	push	{r4, r5, r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	330c      	adds	r3, #12
 800be9e:	4619      	mov	r1, r3
 800bea0:	4610      	mov	r0, r2
 800bea2:	f7ff ff93 	bl	800bdcc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800bea6:	4a0e      	ldr	r2, [pc, #56]	; (800bee0 <_ZN8STM32DMAC1Ev+0x50>)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f103 000c 	add.w	r0, r3, #12
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3320      	adds	r3, #32
 800beb6:	2260      	movs	r2, #96	; 0x60
 800beb8:	4619      	mov	r1, r3
 800beba:	f002 fdad 	bl	800ea18 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	3320      	adds	r3, #32
 800bec2:	245f      	movs	r4, #95	; 0x5f
 800bec4:	461d      	mov	r5, r3
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	db05      	blt.n	800bed6 <_ZN8STM32DMAC1Ev+0x46>
 800beca:	4628      	mov	r0, r5
 800becc:	f7ff ffd1 	bl	800be72 <_ZN8touchgfx6BlitOpC1Ev>
 800bed0:	3524      	adds	r5, #36	; 0x24
 800bed2:	3c01      	subs	r4, #1
 800bed4:	e7f7      	b.n	800bec6 <_ZN8STM32DMAC1Ev+0x36>
{
}
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bdb0      	pop	{r4, r5, r7, pc}
 800bee0:	0801f17c 	.word	0x0801f17c

0800bee4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	4a09      	ldr	r2, [pc, #36]	; (800bf14 <_ZN8STM32DMAD1Ev+0x30>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800bef2:	205a      	movs	r0, #90	; 0x5a
 800bef4:	f7ff feea 	bl	800bccc <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	330c      	adds	r3, #12
 800befc:	4618      	mov	r0, r3
 800befe:	f000 fab3 	bl	800c468 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff ff41 	bl	800bd8c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	0801f17c 	.word	0x0801f17c

0800bf18 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
}
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f7ff ffdf 	bl	800bee4 <_ZN8STM32DMAD1Ev>
 800bf26:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f010 fee7 	bl	801ccfe <_ZdlPvj>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800bf44:	4b12      	ldr	r3, [pc, #72]	; (800bf90 <_ZN8STM32DMA10initializeEv+0x54>)
 800bf46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bf4a:	4a11      	ldr	r2, [pc, #68]	; (800bf90 <_ZN8STM32DMA10initializeEv+0x54>)
 800bf4c:	f043 0310 	orr.w	r3, r3, #16
 800bf50:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800bf54:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <_ZN8STM32DMA10initializeEv+0x54>)
 800bf56:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bf5a:	f003 0310 	and.w	r3, r3, #16
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800bf62:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <_ZN8STM32DMA10initializeEv+0x54>)
 800bf64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf66:	4a0a      	ldr	r2, [pc, #40]	; (800bf90 <_ZN8STM32DMA10initializeEv+0x54>)
 800bf68:	f043 0310 	orr.w	r3, r3, #16
 800bf6c:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800bf6e:	4b08      	ldr	r3, [pc, #32]	; (800bf90 <_ZN8STM32DMA10initializeEv+0x54>)
 800bf70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf72:	4a07      	ldr	r2, [pc, #28]	; (800bf90 <_ZN8STM32DMA10initializeEv+0x54>)
 800bf74:	f023 0310 	bic.w	r3, r3, #16
 800bf78:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800bf7a:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <_ZN8STM32DMA10initializeEv+0x58>)
 800bf7c:	4a06      	ldr	r2, [pc, #24]	; (800bf98 <_ZN8STM32DMA10initializeEv+0x5c>)
 800bf7e:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800bf80:	205a      	movs	r0, #90	; 0x5a
 800bf82:	f7ff fe85 	bl	800bc90 <__NVIC_EnableIRQ>
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	58024400 	.word	0x58024400
 800bf94:	240c0554 	.word	0x240c0554
 800bf98:	0800be57 	.word	0x0800be57

0800bf9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]

    switch (format)
 800bfac:	78fb      	ldrb	r3, [r7, #3]
 800bfae:	2b0b      	cmp	r3, #11
 800bfb0:	d826      	bhi.n	800c000 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800bff5 	.word	0x0800bff5
 800bfbc:	0800bfef 	.word	0x0800bfef
 800bfc0:	0800bfe9 	.word	0x0800bfe9
 800bfc4:	0800c001 	.word	0x0800c001
 800bfc8:	0800c001 	.word	0x0800c001
 800bfcc:	0800c001 	.word	0x0800c001
 800bfd0:	0800c001 	.word	0x0800c001
 800bfd4:	0800bffb 	.word	0x0800bffb
 800bfd8:	0800bffb 	.word	0x0800bffb
 800bfdc:	0800bffb 	.word	0x0800bffb
 800bfe0:	0800bffb 	.word	0x0800bffb
 800bfe4:	0800bffb 	.word	0x0800bffb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60fb      	str	r3, [r7, #12]
        break;
 800bfec:	e00e      	b.n	800c00c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800bfee:	2301      	movs	r3, #1
 800bff0:	60fb      	str	r3, [r7, #12]
        break;
 800bff2:	e00b      	b.n	800c00c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800bff4:	2302      	movs	r3, #2
 800bff6:	60fb      	str	r3, [r7, #12]
        break;
 800bff8:	e008      	b.n	800c00c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800bffa:	2305      	movs	r3, #5
 800bffc:	60fb      	str	r3, [r7, #12]
        break;
 800bffe:	e005      	b.n	800c00c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800c002:	4a06      	ldr	r2, [pc, #24]	; (800c01c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800c004:	2166      	movs	r1, #102	; 0x66
 800c006:	4806      	ldr	r0, [pc, #24]	; (800c020 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800c008:	f010 fea8 	bl	801cd5c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800c00c:	68fb      	ldr	r3, [r7, #12]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	0801ea70 	.word	0x0801ea70
 800c01c:	0801ea8c 	.word	0x0801ea8c
 800c020:	0801ead8 	.word	0x0801ead8

0800c024 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800c030:	2300      	movs	r3, #0
 800c032:	60fb      	str	r3, [r7, #12]

    switch (format)
 800c034:	78fb      	ldrb	r3, [r7, #3]
 800c036:	2b0a      	cmp	r3, #10
 800c038:	d821      	bhi.n	800c07e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800c03a:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c079 	.word	0x0800c079
 800c044:	0800c073 	.word	0x0800c073
 800c048:	0800c06d 	.word	0x0800c06d
 800c04c:	0800c07f 	.word	0x0800c07f
 800c050:	0800c07f 	.word	0x0800c07f
 800c054:	0800c07f 	.word	0x0800c07f
 800c058:	0800c07f 	.word	0x0800c07f
 800c05c:	0800c073 	.word	0x0800c073
 800c060:	0800c073 	.word	0x0800c073
 800c064:	0800c073 	.word	0x0800c073
 800c068:	0800c073 	.word	0x0800c073
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800c06c:	2300      	movs	r3, #0
 800c06e:	60fb      	str	r3, [r7, #12]
        break;
 800c070:	e00b      	b.n	800c08a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800c072:	2301      	movs	r3, #1
 800c074:	60fb      	str	r3, [r7, #12]
        break;
 800c076:	e008      	b.n	800c08a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800c078:	2302      	movs	r3, #2
 800c07a:	60fb      	str	r3, [r7, #12]
        break;
 800c07c:	e005      	b.n	800c08a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800c07e:	4b05      	ldr	r3, [pc, #20]	; (800c094 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800c080:	4a05      	ldr	r2, [pc, #20]	; (800c098 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800c082:	2187      	movs	r1, #135	; 0x87
 800c084:	4805      	ldr	r0, [pc, #20]	; (800c09c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800c086:	f010 fe69 	bl	801cd5c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800c08a:	68fb      	ldr	r3, [r7, #12]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	0801ea70 	.word	0x0801ea70
 800c098:	0801eb04 	.word	0x0801eb04
 800c09c:	0801ead8 	.word	0x0801ead8

0800c0a0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800c0a8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800c0b8:	b590      	push	{r4, r7, lr}
 800c0ba:	b089      	sub	sp, #36	; 0x24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	7f5b      	ldrb	r3, [r3, #29]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff ff67 	bl	800bf9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c0ce:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	7f9b      	ldrb	r3, [r3, #30]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff ff60 	bl	800bf9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c0dc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	7f9b      	ldrb	r3, [r3, #30]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7ff ff9d 	bl	800c024 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c0ea:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	8b5b      	ldrh	r3, [r3, #26]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	8a9b      	ldrh	r3, [r3, #20]
 800c0f6:	1ad2      	subs	r2, r2, r3
 800c0f8:	4b92      	ldr	r3, [pc, #584]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c0fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	8b5b      	ldrh	r3, [r3, #26]
 800c100:	461a      	mov	r2, r3
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	8a9b      	ldrh	r3, [r3, #20]
 800c106:	1ad2      	subs	r2, r2, r3
 800c108:	4b8e      	ldr	r3, [pc, #568]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c10a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	8b1b      	ldrh	r3, [r3, #24]
 800c110:	461a      	mov	r2, r3
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	8a9b      	ldrh	r3, [r3, #20]
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	4b8a      	ldr	r3, [pc, #552]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c11a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800c11c:	4a89      	ldr	r2, [pc, #548]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	8adb      	ldrh	r3, [r3, #22]
 800c126:	461a      	mov	r2, r3
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	8a9b      	ldrh	r3, [r3, #20]
 800c12c:	041b      	lsls	r3, r3, #16
 800c12e:	431a      	orrs	r2, r3
 800c130:	4b84      	ldr	r3, [pc, #528]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	691a      	ldr	r2, [r3, #16]
 800c138:	4b82      	ldr	r3, [pc, #520]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c13a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	4b80      	ldr	r3, [pc, #512]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c142:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c14c:	d037      	beq.n	800c1be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800c14e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c152:	f200 80e3 	bhi.w	800c31c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c15a:	d015      	beq.n	800c188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800c15c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c160:	f200 80dc 	bhi.w	800c31c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c164:	2b80      	cmp	r3, #128	; 0x80
 800c166:	d045      	beq.n	800c1f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 800c168:	2b80      	cmp	r3, #128	; 0x80
 800c16a:	f200 80d7 	bhi.w	800c31c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c16e:	2b40      	cmp	r3, #64	; 0x40
 800c170:	f000 80bf 	beq.w	800c2f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800c174:	2b40      	cmp	r3, #64	; 0x40
 800c176:	f200 80d1 	bhi.w	800c31c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	f000 80a4 	beq.w	800c2c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 800c180:	2b20      	cmp	r3, #32
 800c182:	f000 80b6 	beq.w	800c2f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800c186:	e0c9      	b.n	800c31c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	7f1b      	ldrb	r3, [r3, #28]
 800c18c:	061b      	lsls	r3, r3, #24
 800c18e:	4619      	mov	r1, r3
 800c190:	4a6c      	ldr	r2, [pc, #432]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c192:	4b6d      	ldr	r3, [pc, #436]	; (800c348 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800c194:	430b      	orrs	r3, r1
 800c196:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	330c      	adds	r3, #12
 800c19c:	4c69      	ldr	r4, [pc, #420]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fd fd47 	bl	8009c32 <_ZNK8touchgfx9colortypecvmEv>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c1a8:	4a66      	ldr	r2, [pc, #408]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	691a      	ldr	r2, [r3, #16]
 800c1b2:	4b64      	ldr	r3, [pc, #400]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1b4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c1b6:	4b63      	ldr	r3, [pc, #396]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1b8:	4a64      	ldr	r2, [pc, #400]	; (800c34c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c1ba:	601a      	str	r2, [r3, #0]
        break;
 800c1bc:	e0d9      	b.n	800c372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	7f1b      	ldrb	r3, [r3, #28]
 800c1c2:	061b      	lsls	r3, r3, #24
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	4a5f      	ldr	r2, [pc, #380]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1c8:	4b61      	ldr	r3, [pc, #388]	; (800c350 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800c1ca:	430b      	orrs	r3, r1
 800c1cc:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	330c      	adds	r3, #12
 800c1d2:	4c5c      	ldr	r4, [pc, #368]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fd fd2c 	bl	8009c32 <_ZNK8touchgfx9colortypecvmEv>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c1de:	4a59      	ldr	r2, [pc, #356]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	691a      	ldr	r2, [r3, #16]
 800c1e8:	4b56      	ldr	r3, [pc, #344]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1ea:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c1ec:	4b55      	ldr	r3, [pc, #340]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c1ee:	4a57      	ldr	r2, [pc, #348]	; (800c34c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c1f0:	601a      	str	r2, [r3, #0]
        break;
 800c1f2:	e0be      	b.n	800c372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	7f1b      	ldrb	r3, [r3, #28]
 800c202:	061b      	lsls	r3, r3, #24
 800c204:	461a      	mov	r2, r3
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	4313      	orrs	r3, r2
 800c20a:	4a4e      	ldr	r2, [pc, #312]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c20c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c210:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c212:	4a4c      	ldr	r2, [pc, #304]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	691a      	ldr	r2, [r3, #16]
 800c21c:	4b49      	ldr	r3, [pc, #292]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c21e:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	1d1a      	adds	r2, r3, #4
 800c224:	4b47      	ldr	r3, [pc, #284]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c226:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d002      	beq.n	800c238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800c232:	2b01      	cmp	r3, #1
 800c234:	d00d      	beq.n	800c252 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800c236:	e020      	b.n	800c27a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800c238:	4b42      	ldr	r3, [pc, #264]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c23a:	69da      	ldr	r2, [r3, #28]
 800c23c:	4b45      	ldr	r3, [pc, #276]	; (800c354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800c23e:	4013      	ands	r3, r2
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	8852      	ldrh	r2, [r2, #2]
 800c244:	3a01      	subs	r2, #1
 800c246:	0212      	lsls	r2, r2, #8
 800c248:	4611      	mov	r1, r2
 800c24a:	4a3e      	ldr	r2, [pc, #248]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c24c:	430b      	orrs	r3, r1
 800c24e:	61d3      	str	r3, [r2, #28]
                break;
 800c250:	e01a      	b.n	800c288 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	7f1b      	ldrb	r3, [r3, #28]
 800c256:	2bff      	cmp	r3, #255	; 0xff
 800c258:	d101      	bne.n	800c25e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 800c25a:	2300      	movs	r3, #0
 800c25c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800c25e:	4b39      	ldr	r3, [pc, #228]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c260:	69da      	ldr	r2, [r3, #28]
 800c262:	4b3c      	ldr	r3, [pc, #240]	; (800c354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800c264:	4013      	ands	r3, r2
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	8852      	ldrh	r2, [r2, #2]
 800c26a:	3a01      	subs	r2, #1
 800c26c:	0212      	lsls	r2, r2, #8
 800c26e:	4313      	orrs	r3, r2
 800c270:	4a34      	ldr	r2, [pc, #208]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c272:	f043 0310 	orr.w	r3, r3, #16
 800c276:	61d3      	str	r3, [r2, #28]
                break;
 800c278:	e006      	b.n	800c288 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800c27a:	4b37      	ldr	r3, [pc, #220]	; (800c358 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800c27c:	4a37      	ldr	r2, [pc, #220]	; (800c35c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800c27e:	f240 1101 	movw	r1, #257	; 0x101
 800c282:	4837      	ldr	r0, [pc, #220]	; (800c360 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800c284:	f010 fd6a 	bl	801cd5c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800c288:	4b2e      	ldr	r3, [pc, #184]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c28a:	69db      	ldr	r3, [r3, #28]
 800c28c:	4a2d      	ldr	r2, [pc, #180]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c28e:	f043 0320 	orr.w	r3, r3, #32
 800c292:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800c294:	4b2b      	ldr	r3, [pc, #172]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	f003 0320 	and.w	r3, r3, #32
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	bf14      	ite	ne
 800c2a0:	2301      	movne	r3, #1
 800c2a2:	2300      	moveq	r3, #0
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d000      	beq.n	800c2ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 800c2aa:	e7f3      	b.n	800c294 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800c2ac:	4b25      	ldr	r3, [pc, #148]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c2ae:	2210      	movs	r2, #16
 800c2b0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 800c2b2:	7ffb      	ldrb	r3, [r7, #31]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c2b8:	4b22      	ldr	r3, [pc, #136]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c2ba:	4a24      	ldr	r2, [pc, #144]	; (800c34c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c2bc:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800c2be:	e058      	b.n	800c372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800c2c0:	4b20      	ldr	r3, [pc, #128]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c2c2:	4a28      	ldr	r2, [pc, #160]	; (800c364 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800c2c4:	601a      	str	r2, [r3, #0]
        break;
 800c2c6:	e054      	b.n	800c372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	7f1b      	ldrb	r3, [r3, #28]
 800c2cc:	061b      	lsls	r3, r3, #24
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	4a1b      	ldr	r2, [pc, #108]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2da:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c2dc:	4a19      	ldr	r2, [pc, #100]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	691a      	ldr	r2, [r3, #16]
 800c2e6:	4b17      	ldr	r3, [pc, #92]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c2e8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c2ea:	4b16      	ldr	r3, [pc, #88]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c2ec:	4a17      	ldr	r2, [pc, #92]	; (800c34c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c2ee:	601a      	str	r2, [r3, #0]
        break;
 800c2f0:	e03f      	b.n	800c372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	7f1b      	ldrb	r3, [r3, #28]
 800c2f6:	061b      	lsls	r3, r3, #24
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	4a11      	ldr	r2, [pc, #68]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c304:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c306:	4a0f      	ldr	r2, [pc, #60]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	691a      	ldr	r2, [r3, #16]
 800c310:	4b0c      	ldr	r3, [pc, #48]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c312:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c314:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c316:	4a0d      	ldr	r2, [pc, #52]	; (800c34c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c318:	601a      	str	r2, [r3, #0]
        break;
 800c31a:	e02a      	b.n	800c372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	7f1b      	ldrb	r3, [r3, #28]
 800c320:	061b      	lsls	r3, r3, #24
 800c322:	461a      	mov	r2, r3
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	4313      	orrs	r3, r2
 800c328:	4a06      	ldr	r2, [pc, #24]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c32a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c32e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	7f5a      	ldrb	r2, [r3, #29]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	7f9b      	ldrb	r3, [r3, #30]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d015      	beq.n	800c368 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800c33c:	4b01      	ldr	r3, [pc, #4]	; (800c344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c33e:	4a09      	ldr	r2, [pc, #36]	; (800c364 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800c340:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800c342:	e015      	b.n	800c370 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800c344:	52001000 	.word	0x52001000
 800c348:	0002000a 	.word	0x0002000a
 800c34c:	00020201 	.word	0x00020201
 800c350:	00020009 	.word	0x00020009
 800c354:	ffff00ef 	.word	0xffff00ef
 800c358:	0801eb50 	.word	0x0801eb50
 800c35c:	0801eb6c 	.word	0x0801eb6c
 800c360:	0801ead8 	.word	0x0801ead8
 800c364:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800c368:	4b04      	ldr	r3, [pc, #16]	; (800c37c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800c36a:	f240 2201 	movw	r2, #513	; 0x201
 800c36e:	601a      	str	r2, [r3, #0]
        break;
 800c370:	bf00      	nop
    }
}
 800c372:	bf00      	nop
 800c374:	3724      	adds	r7, #36	; 0x24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd90      	pop	{r4, r7, pc}
 800c37a:	bf00      	nop
 800c37c:	52001000 	.word	0x52001000

0800c380 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	7f9b      	ldrb	r3, [r3, #30]
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff fe47 	bl	800c024 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c396:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800c398:	4a2f      	ldr	r2, [pc, #188]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	8adb      	ldrh	r3, [r3, #22]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	8a9b      	ldrh	r3, [r3, #20]
 800c3a8:	041b      	lsls	r3, r3, #16
 800c3aa:	431a      	orrs	r2, r3
 800c3ac:	4b2a      	ldr	r3, [pc, #168]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c3ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	691a      	ldr	r2, [r3, #16]
 800c3b4:	4b28      	ldr	r3, [pc, #160]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c3b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	8b5b      	ldrh	r3, [r3, #26]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	8a9b      	ldrh	r3, [r3, #20]
 800c3c2:	1ad2      	subs	r2, r2, r3
 800c3c4:	4b24      	ldr	r3, [pc, #144]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c3c6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	d12e      	bne.n	800c42e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	8b5b      	ldrh	r3, [r3, #26]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	8a9b      	ldrh	r3, [r3, #20]
 800c3da:	1ad2      	subs	r2, r2, r3
 800c3dc:	4b1e      	ldr	r3, [pc, #120]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c3de:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	8b5b      	ldrh	r3, [r3, #26]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	8a9b      	ldrh	r3, [r3, #20]
 800c3ea:	1ad2      	subs	r2, r2, r3
 800c3ec:	4b1a      	ldr	r3, [pc, #104]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c3ee:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c3f0:	4a19      	ldr	r2, [pc, #100]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	7f1b      	ldrb	r3, [r3, #28]
 800c3fa:	061b      	lsls	r3, r3, #24
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	4a16      	ldr	r2, [pc, #88]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c400:	4b16      	ldr	r3, [pc, #88]	; (800c45c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800c402:	430b      	orrs	r3, r1
 800c404:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	330c      	adds	r3, #12
 800c40a:	4c13      	ldr	r4, [pc, #76]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fc10 	bl	8009c32 <_ZNK8touchgfx9colortypecvmEv>
 800c412:	4603      	mov	r3, r0
 800c414:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	691a      	ldr	r2, [r3, #16]
 800c41a:	4b0f      	ldr	r3, [pc, #60]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c41c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	691a      	ldr	r2, [r3, #16]
 800c422:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c424:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800c426:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c428:	4a0d      	ldr	r2, [pc, #52]	; (800c460 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800c42a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800c42c:	e010      	b.n	800c450 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c42e:	4a0a      	ldr	r2, [pc, #40]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800c434:	4b08      	ldr	r3, [pc, #32]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c436:	2200      	movs	r2, #0
 800c438:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	330c      	adds	r3, #12
 800c43e:	4c06      	ldr	r4, [pc, #24]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c440:	4618      	mov	r0, r3
 800c442:	f7fd fbf6 	bl	8009c32 <_ZNK8touchgfx9colortypecvmEv>
 800c446:	4603      	mov	r3, r0
 800c448:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800c44a:	4b03      	ldr	r3, [pc, #12]	; (800c458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c44c:	4a05      	ldr	r2, [pc, #20]	; (800c464 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800c44e:	601a      	str	r2, [r3, #0]
}
 800c450:	bf00      	nop
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	bd90      	pop	{r4, r7, pc}
 800c458:	52001000 	.word	0x52001000
 800c45c:	00010009 	.word	0x00010009
 800c460:	00020201 	.word	0x00020201
 800c464:	00030201 	.word	0x00030201

0800c468 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	4a05      	ldr	r2, [pc, #20]	; (800c488 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff fc59 	bl	800bd30 <_ZN8touchgfx9DMA_QueueD1Ev>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	0801ff28 	.word	0x0801ff28

0800c48c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff ffe7 	bl	800c468 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800c49a:	2114      	movs	r1, #20
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f010 fc2e 	bl	801ccfe <_ZdlPvj>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800c4b4:	4a04      	ldr	r2, [pc, #16]	; (800c4c8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6013      	str	r3, [r2, #0]
    }
 800c4ba:	bf00      	nop
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	240c3dc0 	.word	0x240c3dc0

0800c4cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800c4da:	4a0b      	ldr	r2, [pc, #44]	; (800c508 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	605a      	str	r2, [r3, #4]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	609a      	str	r2, [r3, #8]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	60da      	str	r2, [r3, #12]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	611a      	str	r2, [r3, #16]
    {
    }
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	0801f2b4 	.word	0x0801f2b4

0800c50c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
    {
 800c514:	4a04      	ldr	r2, [pc, #16]	; (800c528 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	601a      	str	r2, [r3, #0]
    }
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4618      	mov	r0, r3
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	0801f2b4 	.word	0x0801f2b4

0800c52c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
    }
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7ff ffe9 	bl	800c50c <_ZN8touchgfx7MVPHeapD1Ev>
 800c53a:	2114      	movs	r1, #20
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f010 fbde 	bl	801ccfe <_ZdlPvj>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
    {
 800c554:	4a04      	ldr	r2, [pc, #16]	; (800c568 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]
    }
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	0802043c 	.word	0x0802043c

0800c56c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
    }
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff ffe9 	bl	800c54c <_ZN8touchgfx3LCDD1Ev>
 800c57a:	2108      	movs	r1, #8
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f010 fbbe 	bl	801ccfe <_ZdlPvj>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4618      	mov	r0, r3
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	801a      	strh	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	805a      	strh	r2, [r3, #2]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	809a      	strh	r2, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	80da      	strh	r2, [r3, #6]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	811a      	strh	r2, [r3, #8]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	815a      	strh	r2, [r3, #10]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	819a      	strh	r2, [r3, #12]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	739a      	strb	r2, [r3, #14]
        {
        }
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff ffd5 	bl	800c58c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	611a      	str	r2, [r3, #16]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	829a      	strh	r2, [r3, #20]
    {
    }
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800c606:	4a55      	ldr	r2, [pc, #340]	; (800c75c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	605a      	str	r2, [r3, #4]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	609a      	str	r2, [r3, #8]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	60da      	str	r2, [r3, #12]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	611a      	str	r2, [r3, #16]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	615a      	str	r2, [r3, #20]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2200      	movs	r2, #0
 800c62e:	619a      	str	r2, [r3, #24]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	331c      	adds	r3, #28
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff ffcc 	bl	800c5d2 <_ZN8touchgfx8GesturesC1Ev>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	639a      	str	r2, [r3, #56]	; 0x38
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	63da      	str	r2, [r3, #60]	; 0x3c
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	641a      	str	r2, [r3, #64]	; 0x40
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	645a      	str	r2, [r3, #68]	; 0x44
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	64da      	str	r2, [r3, #76]	; 0x4c
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	3350      	adds	r3, #80	; 0x50
 800c684:	4618      	mov	r0, r3
 800c686:	f7fd fae0 	bl	8009c4a <_ZN8touchgfx4RectC1Ev>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	659a      	str	r2, [r3, #88]	; 0x58
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	65da      	str	r2, [r3, #92]	; 0x5c
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	661a      	str	r2, [r3, #96]	; 0x60
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	671a      	str	r2, [r3, #112]	; 0x70
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800c712:	4a13      	ldr	r2, [pc, #76]	; (800c760 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800c718:	4a12      	ldr	r2, [pc, #72]	; (800c764 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800c71a:	8b3b      	ldrh	r3, [r7, #24]
 800c71c:	8013      	strh	r3, [r2, #0]
 800c71e:	4b11      	ldr	r3, [pc, #68]	; (800c764 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800c720:	881a      	ldrh	r2, [r3, #0]
 800c722:	4b11      	ldr	r3, [pc, #68]	; (800c768 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800c724:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800c726:	4a11      	ldr	r2, [pc, #68]	; (800c76c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800c728:	8bbb      	ldrh	r3, [r7, #28]
 800c72a:	8013      	strh	r3, [r2, #0]
 800c72c:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800c72e:	881a      	ldrh	r2, [r3, #0]
 800c730:	4b0f      	ldr	r3, [pc, #60]	; (800c770 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800c732:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800c734:	4b0f      	ldr	r3, [pc, #60]	; (800c774 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800c736:	2200      	movs	r2, #0
 800c738:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800c73a:	8b3a      	ldrh	r2, [r7, #24]
 800c73c:	8bbb      	ldrh	r3, [r7, #28]
 800c73e:	429a      	cmp	r2, r3
 800c740:	bf34      	ite	cc
 800c742:	2301      	movcc	r3, #1
 800c744:	2300      	movcs	r3, #0
 800c746:	b2db      	uxtb	r3, r3
 800c748:	461a      	mov	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	0801f978 	.word	0x0801f978
 800c760:	240c3d44 	.word	0x240c3d44
 800c764:	240c3d36 	.word	0x240c3d36
 800c768:	240c3d3c 	.word	0x240c3d3c
 800c76c:	240c3d38 	.word	0x240c3d38
 800c770:	240c3d3e 	.word	0x240c3d3e
 800c774:	240c3d3a 	.word	0x240c3d3a

0800c778 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	4618      	mov	r0, r3
 800c786:	f7fc ffb3 	bl	80096f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
	...

0800c794 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af02      	add	r7, sp, #8
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	68b9      	ldr	r1, [r7, #8]
 800c7ae:	f7ff fe8d 	bl	800c4cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800c7b2:	4a04      	ldr	r2, [pc, #16]	; (800c7c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	601a      	str	r2, [r3, #0]
    {

    }
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	0801f2a0 	.word	0x0801f2a0

0800c7c8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	4801      	ldr	r0, [pc, #4]	; (800c7d4 <__tcf_0+0xc>)
 800c7ce:	f000 f96f 	bl	800cab0 <_ZN12FrontendHeapD1Ev>
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	240c0fdc 	.word	0x240c0fdc

0800c7d8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800c7dc:	4b12      	ldr	r3, [pc, #72]	; (800c828 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	f3bf 8f5b 	dmb	ish
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	bf0c      	ite	eq
 800c7ee:	2301      	moveq	r3, #1
 800c7f0:	2300      	movne	r3, #0
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d013      	beq.n	800c820 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800c7f8:	480b      	ldr	r0, [pc, #44]	; (800c828 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800c7fa:	f010 fa82 	bl	801cd02 <__cxa_guard_acquire>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	bf14      	ite	ne
 800c804:	2301      	movne	r3, #1
 800c806:	2300      	moveq	r3, #0
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d008      	beq.n	800c820 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800c80e:	4807      	ldr	r0, [pc, #28]	; (800c82c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800c810:	f000 f868 	bl	800c8e4 <_ZN12FrontendHeapC1Ev>
 800c814:	4806      	ldr	r0, [pc, #24]	; (800c830 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800c816:	f010 fabf 	bl	801cd98 <atexit>
 800c81a:	4803      	ldr	r0, [pc, #12]	; (800c828 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800c81c:	f010 fa7d 	bl	801cd1a <__cxa_guard_release>
        return instance;
 800c820:	4b02      	ldr	r3, [pc, #8]	; (800c82c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800c822:	4618      	mov	r0, r3
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	240c2eb0 	.word	0x240c2eb0
 800c82c:	240c0fdc 	.word	0x240c0fdc
 800c830:	0800c7c9 	.word	0x0800c7c9

0800c834 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	4a05      	ldr	r2, [pc, #20]	; (800c854 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	601a      	str	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff fe61 	bl	800c50c <_ZN8touchgfx7MVPHeapD1Ev>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4618      	mov	r0, r3
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	0801f2a0 	.word	0x0801f2a0

0800c858 <_ZN16FrontendHeapBaseD0Ev>:
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7ff ffe7 	bl	800c834 <_ZN16FrontendHeapBaseD1Ev>
 800c866:	2114      	movs	r1, #20
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f010 fa48 	bl	801ccfe <_ZdlPvj>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4618      	mov	r0, r3
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4618      	mov	r0, r3
 800c884:	f000 fe1e 	bl	800d4c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c888:	4a03      	ldr	r2, [pc, #12]	; (800c898 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4618      	mov	r0, r3
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	0801f26c 	.word	0x0801f26c

0800c89c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 fe0c 	bl	800d4c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c8ac:	4a03      	ldr	r2, [pc, #12]	; (800c8bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	601a      	str	r2, [r3, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	0801f238 	.word	0x0801f238

0800c8c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 fdfa 	bl	800d4c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c8d0:	4a03      	ldr	r2, [pc, #12]	; (800c8e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	0801f204 	.word	0x0801f204

0800c8e4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800c8e4:	b5b0      	push	{r4, r5, r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f103 0414 	add.w	r4, r3, #20
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f641 5264 	movw	r2, #7524	; 0x1d64
 800c900:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800c902:	6879      	ldr	r1, [r7, #4]
 800c904:	f641 537c 	movw	r3, #7548	; 0x1d7c
 800c908:	440b      	add	r3, r1
                     app(model, *this)
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	4613      	mov	r3, r2
 800c90e:	462a      	mov	r2, r5
 800c910:	4621      	mov	r1, r4
 800c912:	f7ff ff3f 	bl	800c794 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800c916:	4a1a      	ldr	r2, [pc, #104]	; (800c980 <_ZN12FrontendHeapC1Ev+0x9c>)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3314      	adds	r3, #20
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff ffa9 	bl	800c878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	332c      	adds	r3, #44	; 0x2c
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7ff ffb6 	bl	800c89c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	f641 5364 	movw	r3, #7524	; 0x1d64
 800c936:	4413      	add	r3, r2
 800c938:	4618      	mov	r0, r3
 800c93a:	f7ff ffc1 	bl	800c8c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	f641 5378 	movw	r3, #7544	; 0x1d78
 800c944:	4413      	add	r3, r2
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fc0a 	bl	800b160 <_ZN5ModelC1Ev>
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	f641 537c 	movw	r3, #7548	; 0x1d7c
 800c952:	4413      	add	r3, r2
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	f641 5178 	movw	r1, #7544	; 0x1d78
 800c95a:	4411      	add	r1, r2
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fbe8 	bl	800b134 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	f641 537c 	movw	r3, #7548	; 0x1d7c
 800c96c:	4413      	add	r3, r2
 800c96e:	4619      	mov	r1, r3
 800c970:	f7ff ff02 	bl	800c778 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bdb0      	pop	{r4, r5, r7, pc}
 800c97e:	bf00      	nop
 800c980:	0801f1f0 	.word	0x0801f1f0

0800c984 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af02      	add	r7, sp, #8
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	8bbb      	ldrh	r3, [r7, #28]
 800c996:	9301      	str	r3, [sp, #4]
 800c998:	8b3b      	ldrh	r3, [r7, #24]
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	68b9      	ldr	r1, [r7, #8]
 800c9a2:	f7ff fe29 	bl	800c5f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800c9a6:	4a04      	ldr	r2, [pc, #16]	; (800c9b8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	601a      	str	r2, [r3, #0]
    }
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	0801f2c4 	.word	0x0801f2c4

0800c9bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af02      	add	r7, sp, #8
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	8bbb      	ldrh	r3, [r7, #28]
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	8b3b      	ldrh	r3, [r7, #24]
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	68b9      	ldr	r1, [r7, #8]
 800c9da:	f7ff ffd3 	bl	800c984 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800c9de:	4a04      	ldr	r2, [pc, #16]	; (800c9f0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	601a      	str	r2, [r3, #0]
    }
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0801f0a4 	.word	0x0801f0a4

0800c9f4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	4a04      	ldr	r2, [pc, #16]	; (800ca10 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4618      	mov	r0, r3
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	0801f08c 	.word	0x0801f08c

0800ca14 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff ffe8 	bl	800c9f4 <_ZN8touchgfx15TouchControllerC1Ev>
 800ca24:	4a03      	ldr	r2, [pc, #12]	; (800ca34 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	0801f074 	.word	0x0801f074

0800ca38 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800ca38:	b590      	push	{r4, r7, lr}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800ca3e:	f7fe f97d 	bl	800ad3c <_ZN14BitmapDatabase11getInstanceEv>
 800ca42:	4604      	mov	r4, r0
 800ca44:	f7fe f984 	bl	800ad50 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	2300      	movs	r3, #0
 800ca52:	2200      	movs	r2, #0
 800ca54:	4620      	mov	r0, r4
 800ca56:	f006 fa37 	bl	8012ec8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800ca5a:	4809      	ldr	r0, [pc, #36]	; (800ca80 <touchgfx_init+0x48>)
 800ca5c:	f7ff fd26 	bl	800c4ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800ca60:	2000      	movs	r0, #0
 800ca62:	f7fe faa1 	bl	800afa8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800ca66:	4807      	ldr	r0, [pc, #28]	; (800ca84 <touchgfx_init+0x4c>)
 800ca68:	f006 f8ca 	bl	8012c00 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800ca6c:	f7ff feb4 	bl	800c7d8 <_ZN12FrontendHeap11getInstanceEv>
 800ca70:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800ca72:	4805      	ldr	r0, [pc, #20]	; (800ca88 <touchgfx_init+0x50>)
 800ca74:	f7fe fecc 	bl	800b810 <_ZN11TouchGFXHAL10initializeEv>
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd90      	pop	{r4, r7, pc}
 800ca80:	240c3cb0 	.word	0x240c3cb0
 800ca84:	2400001c 	.word	0x2400001c
 800ca88:	240c3cb4 	.word	0x240c3cb4

0800ca8c <touchgfx_components_init>:

void touchgfx_components_init()
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	af00      	add	r7, sp, #0
}
 800ca90:	bf00      	nop
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
	...

0800ca9c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800caa0:	4802      	ldr	r0, [pc, #8]	; (800caac <touchgfx_taskEntry+0x10>)
 800caa2:	f7fe fec1 	bl	800b828 <_ZN11TouchGFXHAL9taskEntryEv>
}
 800caa6:	bf00      	nop
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	240c3cb4 	.word	0x240c3cb4

0800cab0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	4a11      	ldr	r2, [pc, #68]	; (800cb00 <_ZN12FrontendHeapD1Ev+0x50>)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	f641 537c 	movw	r3, #7548	; 0x1d7c
 800cac4:	4413      	add	r3, r2
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe fafe 	bl	800b0c8 <_ZN19FrontendApplicationD1Ev>
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	f641 5364 	movw	r3, #7524	; 0x1d64
 800cad2:	4413      	add	r3, r2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 f827 	bl	800cb28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	332c      	adds	r3, #44	; 0x2c
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 f844 	bl	800cb6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3314      	adds	r3, #20
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 f863 	bl	800cbb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff fe9f 	bl	800c834 <_ZN16FrontendHeapBaseD1Ev>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4618      	mov	r0, r3
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	0801f1f0 	.word	0x0801f1f0

0800cb04 <_ZN12FrontendHeapD0Ev>:
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff ffcf 	bl	800cab0 <_ZN12FrontendHeapD1Ev>
 800cb12:	f641 61d4 	movw	r1, #7892	; 0x1ed4
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f010 f8f1 	bl	801ccfe <_ZdlPvj>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	4a05      	ldr	r2, [pc, #20]	; (800cb48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	601a      	str	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fcc1 	bl	800d4c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	0801f204 	.word	0x0801f204

0800cb4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff ffe7 	bl	800cb28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800cb5a:	2114      	movs	r1, #20
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f010 f8ce 	bl	801ccfe <_ZdlPvj>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	4a05      	ldr	r2, [pc, #20]	; (800cb8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 fc9f 	bl	800d4c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4618      	mov	r0, r3
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	0801f238 	.word	0x0801f238

0800cb90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff ffe7 	bl	800cb6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800cb9e:	f641 5138 	movw	r1, #7480	; 0x1d38
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f010 f8ab 	bl	801ccfe <_ZdlPvj>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	4a05      	ldr	r2, [pc, #20]	; (800cbd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fc7b 	bl	800d4c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	0801f26c 	.word	0x0801f26c

0800cbd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff ffe7 	bl	800cbb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800cbe6:	2118      	movs	r1, #24
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f010 f888 	bl	801ccfe <_ZdlPvj>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	4a05      	ldr	r2, [pc, #20]	; (800cc18 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fc9f 	bl	800c54c <_ZN8touchgfx3LCDD1Ev>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4618      	mov	r0, r3
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	08021608 	.word	0x08021608

0800cc1c <_ZN8touchgfx8LCD24bppD0Ev>:
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff ffe7 	bl	800cbf8 <_ZN8touchgfx8LCD24bppD1Ev>
 800cc2a:	2158      	movs	r1, #88	; 0x58
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f010 f866 	bl	801ccfe <_ZdlPvj>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <_Z41__static_initialization_and_destruction_0ii>:
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af02      	add	r7, sp, #8
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d119      	bne.n	800cc80 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d114      	bne.n	800cc80 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800cc56:	4818      	ldr	r0, [pc, #96]	; (800ccb8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800cc58:	f7ff fedc 	bl	800ca14 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800cc5c:	4817      	ldr	r0, [pc, #92]	; (800ccbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800cc5e:	f7ff f917 	bl	800be90 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800cc62:	4817      	ldr	r0, [pc, #92]	; (800ccc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800cc64:	f008 fb9a 	bl	801539c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800cc68:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800cc76:	4a12      	ldr	r2, [pc, #72]	; (800ccc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800cc78:	4910      	ldr	r1, [pc, #64]	; (800ccbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800cc7a:	4812      	ldr	r0, [pc, #72]	; (800ccc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800cc7c:	f7ff fe9e 	bl	800c9bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d113      	bne.n	800ccae <_Z41__static_initialization_and_destruction_0ii+0x72>
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d10e      	bne.n	800ccae <_Z41__static_initialization_and_destruction_0ii+0x72>
 800cc90:	480c      	ldr	r0, [pc, #48]	; (800ccc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800cc92:	f7fe fe83 	bl	800b99c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800cc96:	480c      	ldr	r0, [pc, #48]	; (800ccc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800cc98:	f7fb ffd4 	bl	8008c44 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800cc9c:	4808      	ldr	r0, [pc, #32]	; (800ccc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800cc9e:	f7ff ffab 	bl	800cbf8 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800cca2:	4806      	ldr	r0, [pc, #24]	; (800ccbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800cca4:	f7ff f91e 	bl	800bee4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800cca8:	4803      	ldr	r0, [pc, #12]	; (800ccb8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800ccaa:	f7fe fbd7 	bl	800b45c <_ZN20STM32TouchControllerD1Ev>
}
 800ccae:	bf00      	nop
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	240c2eb4 	.word	0x240c2eb4
 800ccbc:	240c2eb8 	.word	0x240c2eb8
 800ccc0:	240c3c58 	.word	0x240c3c58
 800ccc4:	240c3cb4 	.word	0x240c3cb4
 800ccc8:	2400001c 	.word	0x2400001c

0800cccc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800ccd4:	2301      	movs	r3, #1
    }
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800ccea:	230c      	movs	r3, #12
    }
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800cd04:	887a      	ldrh	r2, [r7, #2]
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	3308      	adds	r3, #8
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	4413      	add	r3, r2
    }
 800cd14:	4618      	mov	r0, r3
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800cd2c:	887a      	ldrh	r2, [r7, #2]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	3308      	adds	r3, #8
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	4413      	add	r3, r2
    }
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800cd50:	2301      	movs	r3, #1
    }
 800cd52:	4618      	mov	r0, r3
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800cd5e:	b480      	push	{r7}
 800cd60:	b083      	sub	sp, #12
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800cd66:	f641 5330 	movw	r3, #7472	; 0x1d30
    }
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800cd76:	b480      	push	{r7}
 800cd78:	b083      	sub	sp, #12
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	460b      	mov	r3, r1
 800cd80:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800cd82:	887b      	ldrh	r3, [r7, #2]
 800cd84:	f641 5230 	movw	r2, #7472	; 0x1d30
 800cd88:	fb02 f303 	mul.w	r3, r2, r3
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4413      	add	r3, r2
    }
 800cd92:	4618      	mov	r0, r3
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800cd9e:	b480      	push	{r7}
 800cda0:	b083      	sub	sp, #12
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	460b      	mov	r3, r1
 800cda8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800cdaa:	887b      	ldrh	r3, [r7, #2]
 800cdac:	f641 5230 	movw	r2, #7472	; 0x1d30
 800cdb0:	fb02 f303 	mul.w	r3, r2, r3
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	4413      	add	r3, r2
    }
 800cdba:	4618      	mov	r0, r3
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800cdce:	2301      	movs	r3, #1
    }
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800cde4:	2310      	movs	r3, #16
    }
 800cde6:	4618      	mov	r0, r3
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800cdf2:	b480      	push	{r7}
 800cdf4:	b083      	sub	sp, #12
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800cdfe:	887b      	ldrh	r3, [r7, #2]
 800ce00:	011b      	lsls	r3, r3, #4
 800ce02:	3308      	adds	r3, #8
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	4413      	add	r3, r2
    }
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800ce20:	887b      	ldrh	r3, [r7, #2]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	3308      	adds	r3, #8
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	4413      	add	r3, r2
    }
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <_GLOBAL__sub_I_touchgfx_init>:
 800ce36:	b580      	push	{r7, lr}
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ce3e:	2001      	movs	r0, #1
 800ce40:	f7ff fefc 	bl	800cc3c <_Z41__static_initialization_and_destruction_0ii>
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <_GLOBAL__sub_D_touchgfx_init>:
 800ce46:	b580      	push	{r7, lr}
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ce4e:	2000      	movs	r0, #0
 800ce50:	f7ff fef4 	bl	800cc3c <_Z41__static_initialization_and_destruction_0ii>
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3320      	adds	r3, #32
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	4798      	blx	r3
    }
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800ce72:	b480      	push	{r7}
 800ce74:	b083      	sub	sp, #12
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800ce80:	3301      	adds	r3, #1
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800ce8a:	bf00      	nop
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
	...

0800ce98 <__NVIC_EnableIRQ>:
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	4603      	mov	r3, r0
 800cea0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	db0b      	blt.n	800cec2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ceaa:	88fb      	ldrh	r3, [r7, #6]
 800ceac:	f003 021f 	and.w	r2, r3, #31
 800ceb0:	4907      	ldr	r1, [pc, #28]	; (800ced0 <__NVIC_EnableIRQ+0x38>)
 800ceb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceb6:	095b      	lsrs	r3, r3, #5
 800ceb8:	2001      	movs	r0, #1
 800ceba:	fa00 f202 	lsl.w	r2, r0, r2
 800cebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cec2:	bf00      	nop
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	e000e100 	.word	0xe000e100

0800ced4 <__NVIC_DisableIRQ>:
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	4603      	mov	r3, r0
 800cedc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	db12      	blt.n	800cf0c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cee6:	88fb      	ldrh	r3, [r7, #6]
 800cee8:	f003 021f 	and.w	r2, r3, #31
 800ceec:	490a      	ldr	r1, [pc, #40]	; (800cf18 <__NVIC_DisableIRQ+0x44>)
 800ceee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cef2:	095b      	lsrs	r3, r3, #5
 800cef4:	2001      	movs	r0, #1
 800cef6:	fa00 f202 	lsl.w	r2, r0, r2
 800cefa:	3320      	adds	r3, #32
 800cefc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cf00:	f3bf 8f4f 	dsb	sy
}
 800cf04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf06:	f3bf 8f6f 	isb	sy
}
 800cf0a:	bf00      	nop
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	e000e100 	.word	0xe000e100

0800cf1c <__NVIC_SetPriority>:
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	6039      	str	r1, [r7, #0]
 800cf26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cf28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	db0a      	blt.n	800cf46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	490c      	ldr	r1, [pc, #48]	; (800cf68 <__NVIC_SetPriority+0x4c>)
 800cf36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf3a:	0112      	lsls	r2, r2, #4
 800cf3c:	b2d2      	uxtb	r2, r2
 800cf3e:	440b      	add	r3, r1
 800cf40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cf44:	e00a      	b.n	800cf5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	4908      	ldr	r1, [pc, #32]	; (800cf6c <__NVIC_SetPriority+0x50>)
 800cf4c:	88fb      	ldrh	r3, [r7, #6]
 800cf4e:	f003 030f 	and.w	r3, r3, #15
 800cf52:	3b04      	subs	r3, #4
 800cf54:	0112      	lsls	r2, r2, #4
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	440b      	add	r3, r1
 800cf5a:	761a      	strb	r2, [r3, #24]
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	e000e100 	.word	0xe000e100
 800cf6c:	e000ed00 	.word	0xe000ed00

0800cf70 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800cf70:	b5b0      	push	{r4, r5, r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 fdc7 	bl	800db0e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800cf80:	687d      	ldr	r5, [r7, #4]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3364      	adds	r3, #100	; 0x64
 800cf88:	681c      	ldr	r4, [r3, #0]
 800cf8a:	f003 fa69 	bl	8010460 <_ZN8touchgfx11Application11getInstanceEv>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4619      	mov	r1, r3
 800cf92:	4628      	mov	r0, r5
 800cf94:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3388      	adds	r3, #136	; 0x88
 800cf9e:	681c      	ldr	r4, [r3, #0]
 800cfa0:	4a03      	ldr	r2, [pc, #12]	; (800cfb0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4903      	ldr	r1, [pc, #12]	; (800cfb4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800cfa6:	47a0      	blx	r4
}
 800cfa8:	bf00      	nop
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bdb0      	pop	{r4, r5, r7, pc}
 800cfb0:	2405fae0 	.word	0x2405fae0
 800cfb4:	240000e0 	.word	0x240000e0

0800cfb8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800cfc0:	2109      	movs	r1, #9
 800cfc2:	205a      	movs	r0, #90	; 0x5a
 800cfc4:	f7ff ffaa 	bl	800cf1c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800cfc8:	2109      	movs	r1, #9
 800cfca:	2058      	movs	r0, #88	; 0x58
 800cfcc:	f7ff ffa6 	bl	800cf1c <__NVIC_SetPriority>
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800cfe0:	205a      	movs	r0, #90	; 0x5a
 800cfe2:	f7ff ff59 	bl	800ce98 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800cfe6:	2058      	movs	r0, #88	; 0x58
 800cfe8:	f7ff ff56 	bl	800ce98 <__NVIC_EnableIRQ>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800cffc:	205a      	movs	r0, #90	; 0x5a
 800cffe:	f7ff ff69 	bl	800ced4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800d002:	2058      	movs	r0, #88	; 0x58
 800d004:	f7ff ff66 	bl	800ced4 <__NVIC_DisableIRQ>
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800d018:	4b11      	ldr	r3, [pc, #68]	; (800d060 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d022:	b29b      	uxth	r3, r3
 800d024:	3b01      	subs	r3, #1
 800d026:	b29a      	uxth	r2, r3
 800d028:	4b0e      	ldr	r3, [pc, #56]	; (800d064 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800d02a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800d02c:	4b0c      	ldr	r3, [pc, #48]	; (800d060 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	b29b      	uxth	r3, r3
 800d032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d036:	b29b      	uxth	r3, r3
 800d038:	3b01      	subs	r3, #1
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	4b0a      	ldr	r3, [pc, #40]	; (800d068 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800d03e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800d040:	4b08      	ldr	r3, [pc, #32]	; (800d064 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800d042:	881a      	ldrh	r2, [r3, #0]
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d046:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800d048:	4b05      	ldr	r3, [pc, #20]	; (800d060 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04c:	4a04      	ldr	r2, [pc, #16]	; (800d060 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d04e:	f043 0301 	orr.w	r3, r3, #1
 800d052:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	50001000 	.word	0x50001000
 800d064:	240c3d32 	.word	0x240c3d32
 800d068:	240c3d34 	.word	0x240c3d34

0800d06c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4618      	mov	r0, r3
 800d078:	f000 fd30 	bl	800dadc <_ZN8touchgfx3HAL10beginFrameEv>
 800d07c:	4603      	mov	r3, r0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
	...

0800d088 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 800d09a:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 800d09c:	2201      	movs	r2, #1
 800d09e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 fd26 	bl	800daf4 <_ZN8touchgfx3HAL8endFrameEv>
}
 800d0a8:	bf00      	nop
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	240c3d30 	.word	0x240c3d30

0800d0b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800d0bc:	4b03      	ldr	r3, [pc, #12]	; (800d0cc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800d0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	50001084 	.word	0x50001084

0800d0d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800d0da:	4a06      	ldr	r2, [pc, #24]	; (800d0f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800d0e0:	4b05      	ldr	r3, [pc, #20]	; (800d0f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	50001084 	.word	0x50001084
 800d0f8:	50001000 	.word	0x50001000

0800d0fc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fcb0 	bl	800da70 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800d110:	4b25      	ldr	r3, [pc, #148]	; (800d1a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800d112:	695b      	ldr	r3, [r3, #20]
 800d114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	bf14      	ite	ne
 800d11c:	2301      	movne	r3, #1
 800d11e:	2300      	moveq	r3, #0
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d03c      	beq.n	800d1a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d126:	4b20      	ldr	r3, [pc, #128]	; (800d1a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800d128:	2200      	movs	r2, #0
 800d12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d12e:	f3bf 8f4f 	dsb	sy
}
 800d132:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800d134:	4b1c      	ldr	r3, [pc, #112]	; (800d1a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800d136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d13a:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	0b5b      	lsrs	r3, r3, #13
 800d140:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d144:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	08db      	lsrs	r3, r3, #3
 800d14a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d14e:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	015a      	lsls	r2, r3, #5
 800d154:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d158:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d15e:	4912      	ldr	r1, [pc, #72]	; (800d1a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800d160:	4313      	orrs	r3, r2
 800d162:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	1e5a      	subs	r2, r3, #1
 800d16a:	60fa      	str	r2, [r7, #12]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	bf14      	ite	ne
 800d170:	2301      	movne	r3, #1
 800d172:	2300      	moveq	r3, #0
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d000      	beq.n	800d17c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 800d17a:	e7e9      	b.n	800d150 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	1e5a      	subs	r2, r3, #1
 800d180:	613a      	str	r2, [r7, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	bf14      	ite	ne
 800d186:	2301      	movne	r3, #1
 800d188:	2300      	moveq	r3, #0
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d000      	beq.n	800d192 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 800d190:	e7d9      	b.n	800d146 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800d192:	f3bf 8f4f 	dsb	sy
}
 800d196:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d198:	f3bf 8f6f 	isb	sy
}
 800d19c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800d19e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800d1a0:	bf00      	nop
 800d1a2:	3718      	adds	r7, #24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	e000ed00 	.word	0xe000ed00

0800d1ac <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	68b9      	ldr	r1, [r7, #8]
 800d1c2:	f000 fdbe 	bl	800dd42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800d1c6:	4603      	mov	r3, r0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800d1d8:	4b26      	ldr	r3, [pc, #152]	; (800d274 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	bf14      	ite	ne
 800d1e4:	2301      	movne	r3, #1
 800d1e6:	2300      	moveq	r3, #0
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d03c      	beq.n	800d268 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d1ee:	4b21      	ldr	r3, [pc, #132]	; (800d274 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d1f6:	f3bf 8f4f 	dsb	sy
}
 800d1fa:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800d1fc:	4b1d      	ldr	r3, [pc, #116]	; (800d274 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 800d1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d202:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	0b5b      	lsrs	r3, r3, #13
 800d208:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d20c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	08db      	lsrs	r3, r3, #3
 800d212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d216:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	015a      	lsls	r2, r3, #5
 800d21c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d220:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d226:	4913      	ldr	r1, [pc, #76]	; (800d274 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	1e5a      	subs	r2, r3, #1
 800d232:	60fa      	str	r2, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	bf14      	ite	ne
 800d238:	2301      	movne	r3, #1
 800d23a:	2300      	moveq	r3, #0
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d000      	beq.n	800d244 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 800d242:	e7e9      	b.n	800d218 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	1e5a      	subs	r2, r3, #1
 800d248:	613a      	str	r2, [r7, #16]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	bf14      	ite	ne
 800d24e:	2301      	movne	r3, #1
 800d250:	2300      	moveq	r3, #0
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	d000      	beq.n	800d25a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 800d258:	e7d9      	b.n	800d20e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d25a:	f3bf 8f4f 	dsb	sy
}
 800d25e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d260:	f3bf 8f6f 	isb	sy
}
 800d264:	bf00      	nop
}
 800d266:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800d268:	bf00      	nop
 800d26a:	371c      	adds	r7, #28
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	e000ed00 	.word	0xe000ed00

0800d278 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800d278:	b480      	push	{r7}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800d280:	4b26      	ldr	r3, [pc, #152]	; (800d31c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800d282:	695b      	ldr	r3, [r3, #20]
 800d284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	bf14      	ite	ne
 800d28c:	2301      	movne	r3, #1
 800d28e:	2300      	moveq	r3, #0
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	d03c      	beq.n	800d310 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d296:	4b21      	ldr	r3, [pc, #132]	; (800d31c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800d298:	2200      	movs	r2, #0
 800d29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d29e:	f3bf 8f4f 	dsb	sy
}
 800d2a2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800d2a4:	4b1d      	ldr	r3, [pc, #116]	; (800d31c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800d2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2aa:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	0b5b      	lsrs	r3, r3, #13
 800d2b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d2b4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	08db      	lsrs	r3, r3, #3
 800d2ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2be:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d2c8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d2ce:	4913      	ldr	r1, [pc, #76]	; (800d31c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	1e5a      	subs	r2, r3, #1
 800d2da:	60fa      	str	r2, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bf14      	ite	ne
 800d2e0:	2301      	movne	r3, #1
 800d2e2:	2300      	moveq	r3, #0
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d000      	beq.n	800d2ec <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 800d2ea:	e7e9      	b.n	800d2c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	1e5a      	subs	r2, r3, #1
 800d2f0:	613a      	str	r2, [r7, #16]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bf14      	ite	ne
 800d2f6:	2301      	movne	r3, #1
 800d2f8:	2300      	moveq	r3, #0
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d000      	beq.n	800d302 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 800d300:	e7d9      	b.n	800d2b6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d302:	f3bf 8f4f 	dsb	sy
}
 800d306:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d308:	f3bf 8f6f 	isb	sy
}
 800d30c:	bf00      	nop
}
 800d30e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800d310:	bf00      	nop
 800d312:	371c      	adds	r7, #28
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	e000ed00 	.word	0xe000ed00

0800d320 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 800d328:	f7fb fff0 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	bf0c      	ite	eq
 800d332:	2301      	moveq	r3, #1
 800d334:	2300      	movne	r3, #0
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d132      	bne.n	800d3a2 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800d33c:	4b1b      	ldr	r3, [pc, #108]	; (800d3ac <HAL_LTDC_LineEventCallback+0x8c>)
 800d33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d340:	4a1b      	ldr	r2, [pc, #108]	; (800d3b0 <HAL_LTDC_LineEventCallback+0x90>)
 800d342:	8812      	ldrh	r2, [r2, #0]
 800d344:	4293      	cmp	r3, r2
 800d346:	bf0c      	ite	eq
 800d348:	2301      	moveq	r3, #1
 800d34a:	2300      	movne	r3, #0
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d017      	beq.n	800d382 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800d352:	4b18      	ldr	r3, [pc, #96]	; (800d3b4 <HAL_LTDC_LineEventCallback+0x94>)
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	4619      	mov	r1, r3
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7f5 fbd3 	bl	8002b04 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800d35e:	f7fb ffd5 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 800d362:	4603      	mov	r3, r0
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff fd84 	bl	800ce72 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800d36a:	f7fe fc3f 	bl	800bbec <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800d36e:	f7fb ffcd 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 800d372:	4603      	mov	r3, r0
 800d374:	4618      	mov	r0, r3
 800d376:	f001 f9eb 	bl	800e750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800d37a:	2000      	movs	r0, #0
 800d37c:	f7fe f890 	bl	800b4a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d380:	e010      	b.n	800d3a4 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800d382:	4b0b      	ldr	r3, [pc, #44]	; (800d3b0 <HAL_LTDC_LineEventCallback+0x90>)
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7f5 fbbb 	bl	8002b04 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800d38e:	f7fb ffbd 	bl	800930c <_ZN8touchgfx3HAL11getInstanceEv>
 800d392:	4603      	mov	r3, r0
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff fd5e 	bl	800ce56 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800d39a:	2000      	movs	r0, #0
 800d39c:	f7fe f88b 	bl	800b4b6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d3a0:	e000      	b.n	800d3a4 <HAL_LTDC_LineEventCallback+0x84>
            return;
 800d3a2:	bf00      	nop
        }
    }
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	50001000 	.word	0x50001000
 800d3b0:	240c3d32 	.word	0x240c3d32
 800d3b4:	240c3d34 	.word	0x240c3d34

0800d3b8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d3b8:	8880      	ldrh	r0, [r0, #4]
 800d3ba:	4770      	bx	lr

0800d3bc <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d3bc:	2300      	movs	r3, #0
 800d3be:	8083      	strh	r3, [r0, #4]
 800d3c0:	4770      	bx	lr
	...

0800d3c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c6:	6803      	ldr	r3, [r0, #0]
 800d3c8:	460e      	mov	r6, r1
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	4605      	mov	r5, r0
 800d3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d0:	4798      	blx	r3
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	1b34      	subs	r4, r6, r4
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	b2a4      	uxth	r4, r4
 800d3de:	4798      	blx	r3
 800d3e0:	88ab      	ldrh	r3, [r5, #4]
 800d3e2:	fbb4 f4f0 	udiv	r4, r4, r0
 800d3e6:	42a3      	cmp	r3, r4
 800d3e8:	d805      	bhi.n	800d3f6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800d3ea:	4b0e      	ldr	r3, [pc, #56]	; (800d424 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800d3ec:	211d      	movs	r1, #29
 800d3ee:	4a0e      	ldr	r2, [pc, #56]	; (800d428 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d3f0:	480e      	ldr	r0, [pc, #56]	; (800d42c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800d3f2:	f00f fcb3 	bl	801cd5c <__assert_func>
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	4798      	blx	r3
 800d400:	682b      	ldr	r3, [r5, #0]
 800d402:	4607      	mov	r7, r0
 800d404:	4628      	mov	r0, r5
 800d406:	6a1b      	ldr	r3, [r3, #32]
 800d408:	4798      	blx	r3
 800d40a:	1bf3      	subs	r3, r6, r7
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	fbb3 f2f0 	udiv	r2, r3, r0
 800d412:	fb02 3010 	mls	r0, r2, r0, r3
 800d416:	b118      	cbz	r0, 800d420 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800d418:	4b05      	ldr	r3, [pc, #20]	; (800d430 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800d41a:	211e      	movs	r1, #30
 800d41c:	4a02      	ldr	r2, [pc, #8]	; (800d428 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d41e:	e7e7      	b.n	800d3f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800d420:	4620      	mov	r0, r4
 800d422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d424:	0801f394 	.word	0x0801f394
 800d428:	0801f502 	.word	0x0801f502
 800d42c:	0801f3a9 	.word	0x0801f3a9
 800d430:	0801f3d7 	.word	0x0801f3d7

0800d434 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	6803      	ldr	r3, [r0, #0]
 800d438:	460d      	mov	r5, r1
 800d43a:	4604      	mov	r4, r0
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	4798      	blx	r3
 800d440:	4285      	cmp	r5, r0
 800d442:	d905      	bls.n	800d450 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800d444:	4b0c      	ldr	r3, [pc, #48]	; (800d478 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800d446:	212f      	movs	r1, #47	; 0x2f
 800d448:	4a0c      	ldr	r2, [pc, #48]	; (800d47c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d44a:	480d      	ldr	r0, [pc, #52]	; (800d480 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800d44c:	f00f fc86 	bl	801cd5c <__assert_func>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	4620      	mov	r0, r4
 800d454:	88a5      	ldrh	r5, [r4, #4]
 800d456:	69db      	ldr	r3, [r3, #28]
 800d458:	4798      	blx	r3
 800d45a:	4285      	cmp	r5, r0
 800d45c:	d303      	bcc.n	800d466 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800d45e:	4b09      	ldr	r3, [pc, #36]	; (800d484 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800d460:	2130      	movs	r1, #48	; 0x30
 800d462:	4a06      	ldr	r2, [pc, #24]	; (800d47c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d464:	e7f1      	b.n	800d44a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	4620      	mov	r0, r4
 800d46a:	88a1      	ldrh	r1, [r4, #4]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	4798      	blx	r3
 800d470:	88a3      	ldrh	r3, [r4, #4]
 800d472:	3301      	adds	r3, #1
 800d474:	80a3      	strh	r3, [r4, #4]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	0801f451 	.word	0x0801f451
 800d47c:	0801f545 	.word	0x0801f545
 800d480:	0801f3a9 	.word	0x0801f3a9
 800d484:	0801f468 	.word	0x0801f468

0800d488 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	6803      	ldr	r3, [r0, #0]
 800d48c:	4616      	mov	r6, r2
 800d48e:	4604      	mov	r4, r0
 800d490:	460d      	mov	r5, r1
 800d492:	6a1b      	ldr	r3, [r3, #32]
 800d494:	4798      	blx	r3
 800d496:	4286      	cmp	r6, r0
 800d498:	d905      	bls.n	800d4a6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800d49a:	4b06      	ldr	r3, [pc, #24]	; (800d4b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800d49c:	2139      	movs	r1, #57	; 0x39
 800d49e:	4a06      	ldr	r2, [pc, #24]	; (800d4b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800d4a0:	4806      	ldr	r0, [pc, #24]	; (800d4bc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800d4a2:	f00f fc5b 	bl	801cd5c <__assert_func>
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4b2:	4718      	bx	r3
 800d4b4:	0801f451 	.word	0x0801f451
 800d4b8:	0801f4b8 	.word	0x0801f4b8
 800d4bc:	0801f3a9 	.word	0x0801f3a9

0800d4c0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d4c4:	4a02      	ldr	r2, [pc, #8]	; (800d4d0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d4c6:	6002      	str	r2, [r0, #0]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	8082      	strh	r2, [r0, #4]
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	0801f48c 	.word	0x0801f48c

0800d4d4 <_ZN8touchgfx9Container13getFirstChildEv>:
 800d4d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d4d6:	4770      	bx	lr

0800d4d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d4d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d4da:	2000      	movs	r0, #0
 800d4dc:	b12b      	cbz	r3, 800d4ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d4de:	b920      	cbnz	r0, 800d4ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d4e0:	1a5a      	subs	r2, r3, r1
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	4250      	negs	r0, r2
 800d4e6:	4150      	adcs	r0, r2
 800d4e8:	e7f8      	b.n	800d4dc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d4ea:	4770      	bx	lr

0800d4ec <_ZN8touchgfx9Container9removeAllEv>:
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d4f0:	b123      	cbz	r3, 800d4fc <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d4f2:	6999      	ldr	r1, [r3, #24]
 800d4f4:	6281      	str	r1, [r0, #40]	; 0x28
 800d4f6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d4fa:	e7f8      	b.n	800d4ee <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d4fc:	4770      	bx	lr

0800d4fe <_ZN8touchgfx9Container6unlinkEv>:
 800d4fe:	2300      	movs	r3, #0
 800d500:	6283      	str	r3, [r0, #40]	; 0x28
 800d502:	4770      	bx	lr

0800d504 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d504:	2200      	movs	r2, #0
 800d506:	8002      	strh	r2, [r0, #0]
 800d508:	8042      	strh	r2, [r0, #2]
 800d50a:	8082      	strh	r2, [r0, #4]
 800d50c:	80c2      	strh	r2, [r0, #6]
 800d50e:	4770      	bx	lr

0800d510 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	460d      	mov	r5, r1
 800d514:	4616      	mov	r6, r2
 800d516:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d518:	b13c      	cbz	r4, 800d52a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	4620      	mov	r0, r4
 800d51e:	4632      	mov	r2, r6
 800d520:	4629      	mov	r1, r5
 800d522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d524:	4798      	blx	r3
 800d526:	69a4      	ldr	r4, [r4, #24]
 800d528:	e7f6      	b.n	800d518 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d52a:	bd70      	pop	{r4, r5, r6, pc}

0800d52c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	460d      	mov	r5, r1
 800d530:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d532:	b134      	cbz	r4, 800d542 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	4621      	mov	r1, r4
 800d538:	4628      	mov	r0, r5
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	4798      	blx	r3
 800d53e:	69a4      	ldr	r4, [r4, #24]
 800d540:	e7f7      	b.n	800d532 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d542:	bd38      	pop	{r3, r4, r5, pc}

0800d544 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800d544:	b510      	push	{r4, lr}
 800d546:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d548:	b12c      	cbz	r4, 800d556 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800d54a:	6823      	ldr	r3, [r4, #0]
 800d54c:	4620      	mov	r0, r4
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	4798      	blx	r3
 800d552:	69a4      	ldr	r4, [r4, #24]
 800d554:	e7f8      	b.n	800d548 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800d556:	bd10      	pop	{r4, pc}

0800d558 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d558:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d55a:	b19b      	cbz	r3, 800d584 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d55c:	428b      	cmp	r3, r1
 800d55e:	d109      	bne.n	800d574 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d560:	699a      	ldr	r2, [r3, #24]
 800d562:	2100      	movs	r1, #0
 800d564:	6159      	str	r1, [r3, #20]
 800d566:	6282      	str	r2, [r0, #40]	; 0x28
 800d568:	b902      	cbnz	r2, 800d56c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d56a:	4770      	bx	lr
 800d56c:	6199      	str	r1, [r3, #24]
 800d56e:	4770      	bx	lr
 800d570:	4613      	mov	r3, r2
 800d572:	b13a      	cbz	r2, 800d584 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d574:	699a      	ldr	r2, [r3, #24]
 800d576:	428a      	cmp	r2, r1
 800d578:	d1fa      	bne.n	800d570 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d57a:	698a      	ldr	r2, [r1, #24]
 800d57c:	619a      	str	r2, [r3, #24]
 800d57e:	2300      	movs	r3, #0
 800d580:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d584:	4770      	bx	lr

0800d586 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d586:	b410      	push	{r4}
 800d588:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d58a:	4604      	mov	r4, r0
 800d58c:	b92b      	cbnz	r3, 800d59a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d58e:	6803      	ldr	r3, [r0, #0]
 800d590:	4611      	mov	r1, r2
 800d592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d598:	4718      	bx	r3
 800d59a:	b941      	cbnz	r1, 800d5ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d59c:	6193      	str	r3, [r2, #24]
 800d59e:	6282      	str	r2, [r0, #40]	; 0x28
 800d5a0:	6154      	str	r4, [r2, #20]
 800d5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5a6:	4770      	bx	lr
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d0f9      	beq.n	800d5a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d5ae:	4299      	cmp	r1, r3
 800d5b0:	6998      	ldr	r0, [r3, #24]
 800d5b2:	d1f9      	bne.n	800d5a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d5b4:	6190      	str	r0, [r2, #24]
 800d5b6:	618a      	str	r2, [r1, #24]
 800d5b8:	e7f2      	b.n	800d5a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800d5bc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d5bc:	4288      	cmp	r0, r1
 800d5be:	b508      	push	{r3, lr}
 800d5c0:	d105      	bne.n	800d5ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800d5c2:	4b11      	ldr	r3, [pc, #68]	; (800d608 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800d5c4:	2120      	movs	r1, #32
 800d5c6:	4a11      	ldr	r2, [pc, #68]	; (800d60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d5c8:	4811      	ldr	r0, [pc, #68]	; (800d610 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800d5ca:	f00f fbc7 	bl	801cd5c <__assert_func>
 800d5ce:	694b      	ldr	r3, [r1, #20]
 800d5d0:	b11b      	cbz	r3, 800d5da <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800d5d2:	4b10      	ldr	r3, [pc, #64]	; (800d614 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800d5d4:	2121      	movs	r1, #33	; 0x21
 800d5d6:	4a0d      	ldr	r2, [pc, #52]	; (800d60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d5d8:	e7f6      	b.n	800d5c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800d5da:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800d5de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d5e0:	b913      	cbnz	r3, 800d5e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800d5e2:	6281      	str	r1, [r0, #40]	; 0x28
 800d5e4:	bd08      	pop	{r3, pc}
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	699a      	ldr	r2, [r3, #24]
 800d5ea:	b12a      	cbz	r2, 800d5f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800d5ec:	428b      	cmp	r3, r1
 800d5ee:	d1fa      	bne.n	800d5e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800d5f0:	4b09      	ldr	r3, [pc, #36]	; (800d618 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800d5f2:	2132      	movs	r1, #50	; 0x32
 800d5f4:	4a05      	ldr	r2, [pc, #20]	; (800d60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d5f6:	e7e7      	b.n	800d5c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	d103      	bne.n	800d604 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800d5fc:	4b06      	ldr	r3, [pc, #24]	; (800d618 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800d5fe:	2135      	movs	r1, #53	; 0x35
 800d600:	4a02      	ldr	r2, [pc, #8]	; (800d60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d602:	e7e1      	b.n	800d5c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800d604:	6199      	str	r1, [r3, #24]
 800d606:	e7ed      	b.n	800d5e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800d608:	0801f583 	.word	0x0801f583
 800d60c:	0801f6dc 	.word	0x0801f6dc
 800d610:	0801f5af 	.word	0x0801f5af
 800d614:	0801f5e2 	.word	0x0801f5e2
 800d618:	0801f618 	.word	0x0801f618

0800d61c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d620:	461f      	mov	r7, r3
 800d622:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d626:	460d      	mov	r5, r1
 800d628:	4616      	mov	r6, r2
 800d62a:	b103      	cbz	r3, 800d62e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d62c:	6038      	str	r0, [r7, #0]
 800d62e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d630:	b314      	cbz	r4, 800d678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d632:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d636:	b1eb      	cbz	r3, 800d674 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d638:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d63c:	428d      	cmp	r5, r1
 800d63e:	db19      	blt.n	800d674 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d640:	b289      	uxth	r1, r1
 800d642:	8923      	ldrh	r3, [r4, #8]
 800d644:	440b      	add	r3, r1
 800d646:	b21b      	sxth	r3, r3
 800d648:	429d      	cmp	r5, r3
 800d64a:	da13      	bge.n	800d674 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d64c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d650:	4296      	cmp	r6, r2
 800d652:	db0f      	blt.n	800d674 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d654:	b292      	uxth	r2, r2
 800d656:	8963      	ldrh	r3, [r4, #10]
 800d658:	4413      	add	r3, r2
 800d65a:	b21b      	sxth	r3, r3
 800d65c:	429e      	cmp	r6, r3
 800d65e:	da09      	bge.n	800d674 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	1ab2      	subs	r2, r6, r2
 800d664:	1a69      	subs	r1, r5, r1
 800d666:	4620      	mov	r0, r4
 800d668:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800d66c:	b212      	sxth	r2, r2
 800d66e:	463b      	mov	r3, r7
 800d670:	b209      	sxth	r1, r1
 800d672:	47c0      	blx	r8
 800d674:	69a4      	ldr	r4, [r4, #24]
 800d676:	e7db      	b.n	800d630 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d67c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	4c6d      	ldr	r4, [pc, #436]	; (800d838 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d682:	b0a1      	sub	sp, #132	; 0x84
 800d684:	4606      	mov	r6, r0
 800d686:	6824      	ldr	r4, [r4, #0]
 800d688:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800d68a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800d68e:	2400      	movs	r4, #0
 800d690:	9303      	str	r3, [sp, #12]
 800d692:	802c      	strh	r4, [r5, #0]
 800d694:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800d696:	802c      	strh	r4, [r5, #0]
 800d698:	601c      	str	r4, [r3, #0]
 800d69a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d69e:	f7ff ffbd 	bl	800d61c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d6a2:	f1b9 0f03 	cmp.w	r9, #3
 800d6a6:	f340 80c1 	ble.w	800d82c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	a80c      	add	r0, sp, #48	; 0x30
 800d6ae:	f003 ff01 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d6b2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800d6b6:	9306      	str	r3, [sp, #24]
 800d6b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800d6bc:	9307      	str	r3, [sp, #28]
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	f8d3 a000 	ldr.w	sl, [r3]
 800d6c4:	f1ba 0f00 	cmp.w	sl, #0
 800d6c8:	f000 80b3 	beq.w	800d832 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d6cc:	4651      	mov	r1, sl
 800d6ce:	a810      	add	r0, sp, #64	; 0x40
 800d6d0:	f003 fef0 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d6d4:	2002      	movs	r0, #2
 800d6d6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800d6da:	9b01      	ldr	r3, [sp, #4]
 800d6dc:	9a06      	ldr	r2, [sp, #24]
 800d6de:	fb91 f1f0 	sdiv	r1, r1, r0
 800d6e2:	189d      	adds	r5, r3, r2
 800d6e4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800d6e8:	9a07      	ldr	r2, [sp, #28]
 800d6ea:	4419      	add	r1, r3
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800d6f4:	1a6d      	subs	r5, r5, r1
 800d6f6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d6fa:	fb92 f2f0 	sdiv	r2, r2, r0
 800d6fe:	440a      	add	r2, r1
 800d700:	1a9b      	subs	r3, r3, r2
 800d702:	435b      	muls	r3, r3
 800d704:	fb05 3505 	mla	r5, r5, r5, r3
 800d708:	4f4c      	ldr	r7, [pc, #304]	; (800d83c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d70a:	ac10      	add	r4, sp, #64	; 0x40
 800d70c:	f1b9 0f0c 	cmp.w	r9, #12
 800d710:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d714:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d718:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d71a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d71c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d724:	f04f 0303 	mov.w	r3, #3
 800d728:	bfd8      	it	le
 800d72a:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d72e:	f04f 0400 	mov.w	r4, #0
 800d732:	f8cd 9000 	str.w	r9, [sp]
 800d736:	bfcc      	ite	gt
 800d738:	4698      	movgt	r8, r3
 800d73a:	fb92 f8f3 	sdivle	r8, r2, r3
 800d73e:	1c63      	adds	r3, r4, #1
 800d740:	aa10      	add	r2, sp, #64	; 0x40
 800d742:	f004 0401 	and.w	r4, r4, #1
 800d746:	f04f 0b00 	mov.w	fp, #0
 800d74a:	9308      	str	r3, [sp, #32]
 800d74c:	9b00      	ldr	r3, [sp, #0]
 800d74e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d752:	fb93 f3f8 	sdiv	r3, r3, r8
 800d756:	3404      	adds	r4, #4
 800d758:	b29b      	uxth	r3, r3
 800d75a:	9304      	str	r3, [sp, #16]
 800d75c:	9a04      	ldr	r2, [sp, #16]
 800d75e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d762:	fb13 f302 	smulbb	r3, r3, r2
 800d766:	9a01      	ldr	r2, [sp, #4]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	1899      	adds	r1, r3, r2
 800d76c:	9305      	str	r3, [sp, #20]
 800d76e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d772:	b209      	sxth	r1, r1
 800d774:	4299      	cmp	r1, r3
 800d776:	db4d      	blt.n	800d814 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d778:	8932      	ldrh	r2, [r6, #8]
 800d77a:	4413      	add	r3, r2
 800d77c:	b21b      	sxth	r3, r3
 800d77e:	4299      	cmp	r1, r3
 800d780:	da48      	bge.n	800d814 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d782:	9b04      	ldr	r3, [sp, #16]
 800d784:	6827      	ldr	r7, [r4, #0]
 800d786:	fb17 f703 	smulbb	r7, r7, r3
 800d78a:	9b02      	ldr	r3, [sp, #8]
 800d78c:	b2bf      	uxth	r7, r7
 800d78e:	18fa      	adds	r2, r7, r3
 800d790:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d794:	b212      	sxth	r2, r2
 800d796:	429a      	cmp	r2, r3
 800d798:	db3c      	blt.n	800d814 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d79a:	8970      	ldrh	r0, [r6, #10]
 800d79c:	4403      	add	r3, r0
 800d79e:	b21b      	sxth	r3, r3
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	da37      	bge.n	800d814 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7aa:	ab0b      	add	r3, sp, #44	; 0x2c
 800d7ac:	f7ff ff36 	bl	800d61c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d7b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7b2:	b37a      	cbz	r2, 800d814 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d7b4:	4552      	cmp	r2, sl
 800d7b6:	d02d      	beq.n	800d814 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	a80e      	add	r0, sp, #56	; 0x38
 800d7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d7be:	f003 fe79 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d7c2:	f04f 0e02 	mov.w	lr, #2
 800d7c6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800d7ca:	9a06      	ldr	r2, [sp, #24]
 800d7cc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800d7d6:	4413      	add	r3, r2
 800d7d8:	9a07      	ldr	r2, [sp, #28]
 800d7da:	fb91 f1fe 	sdiv	r1, r1, lr
 800d7de:	fb9c fcfe 	sdiv	ip, ip, lr
 800d7e2:	4401      	add	r1, r0
 800d7e4:	1a58      	subs	r0, r3, r1
 800d7e6:	9b02      	ldr	r3, [sp, #8]
 800d7e8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800d7ec:	4413      	add	r3, r2
 800d7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f0:	448c      	add	ip, r1
 800d7f2:	eba3 030c 	sub.w	r3, r3, ip
 800d7f6:	435b      	muls	r3, r3
 800d7f8:	fb00 3300 	mla	r3, r0, r0, r3
 800d7fc:	42ab      	cmp	r3, r5
 800d7fe:	d208      	bcs.n	800d812 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d802:	461d      	mov	r5, r3
 800d804:	9803      	ldr	r0, [sp, #12]
 800d806:	6001      	str	r1, [r0, #0]
 800d808:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d80a:	9805      	ldr	r0, [sp, #20]
 800d80c:	8008      	strh	r0, [r1, #0]
 800d80e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d810:	800f      	strh	r7, [r1, #0]
 800d812:	4692      	mov	sl, r2
 800d814:	f10b 0b01 	add.w	fp, fp, #1
 800d818:	3408      	adds	r4, #8
 800d81a:	f1bb 0f04 	cmp.w	fp, #4
 800d81e:	d19d      	bne.n	800d75c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d820:	9b00      	ldr	r3, [sp, #0]
 800d822:	9c08      	ldr	r4, [sp, #32]
 800d824:	444b      	add	r3, r9
 800d826:	4544      	cmp	r4, r8
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	d188      	bne.n	800d73e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d82c:	b021      	add	sp, #132	; 0x84
 800d82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d832:	f04f 35ff 	mov.w	r5, #4294967295
 800d836:	e767      	b.n	800d708 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d838:	240c3d44 	.word	0x240c3d44
 800d83c:	0801ebac 	.word	0x0801ebac

0800d840 <_ZN8touchgfx4RectaNERKS0_>:
 800d840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d844:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d848:	888c      	ldrh	r4, [r1, #4]
 800d84a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d84e:	443c      	add	r4, r7
 800d850:	b2a4      	uxth	r4, r4
 800d852:	fa0f f884 	sxth.w	r8, r4
 800d856:	45c1      	cmp	r9, r8
 800d858:	da2f      	bge.n	800d8ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d85a:	8882      	ldrh	r2, [r0, #4]
 800d85c:	444a      	add	r2, r9
 800d85e:	b292      	uxth	r2, r2
 800d860:	fa0f fe82 	sxth.w	lr, r2
 800d864:	4577      	cmp	r7, lr
 800d866:	da28      	bge.n	800d8ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d868:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d86c:	88cb      	ldrh	r3, [r1, #6]
 800d86e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d872:	442b      	add	r3, r5
 800d874:	b21b      	sxth	r3, r3
 800d876:	429e      	cmp	r6, r3
 800d878:	da1f      	bge.n	800d8ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d87a:	88c3      	ldrh	r3, [r0, #6]
 800d87c:	4433      	add	r3, r6
 800d87e:	b29b      	uxth	r3, r3
 800d880:	fa0f fc83 	sxth.w	ip, r3
 800d884:	4565      	cmp	r5, ip
 800d886:	da18      	bge.n	800d8ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d888:	454f      	cmp	r7, r9
 800d88a:	bfb8      	it	lt
 800d88c:	464f      	movlt	r7, r9
 800d88e:	42b5      	cmp	r5, r6
 800d890:	bfb8      	it	lt
 800d892:	4635      	movlt	r5, r6
 800d894:	45f0      	cmp	r8, lr
 800d896:	bfd8      	it	le
 800d898:	4622      	movle	r2, r4
 800d89a:	1bd2      	subs	r2, r2, r7
 800d89c:	8082      	strh	r2, [r0, #4]
 800d89e:	884a      	ldrh	r2, [r1, #2]
 800d8a0:	88c9      	ldrh	r1, [r1, #6]
 800d8a2:	8007      	strh	r7, [r0, #0]
 800d8a4:	440a      	add	r2, r1
 800d8a6:	8045      	strh	r5, [r0, #2]
 800d8a8:	b292      	uxth	r2, r2
 800d8aa:	b211      	sxth	r1, r2
 800d8ac:	458c      	cmp	ip, r1
 800d8ae:	bfa8      	it	ge
 800d8b0:	4613      	movge	r3, r2
 800d8b2:	1b5b      	subs	r3, r3, r5
 800d8b4:	80c3      	strh	r3, [r0, #6]
 800d8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	8003      	strh	r3, [r0, #0]
 800d8be:	8043      	strh	r3, [r0, #2]
 800d8c0:	8083      	strh	r3, [r0, #4]
 800d8c2:	80c3      	strh	r3, [r0, #6]
 800d8c4:	e7f7      	b.n	800d8b6 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d8c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	dd06      	ble.n	800d8dc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d8ce:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	bfcc      	ite	gt
 800d8d6:	2000      	movgt	r0, #0
 800d8d8:	2001      	movle	r0, #1
 800d8da:	4770      	bx	lr
 800d8dc:	2001      	movs	r0, #1
 800d8de:	4770      	bx	lr

0800d8e0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800d8ea:	8003      	strh	r3, [r0, #0]
 800d8ec:	8043      	strh	r3, [r0, #2]
 800d8ee:	8083      	strh	r3, [r0, #4]
 800d8f0:	80c3      	strh	r3, [r0, #6]
 800d8f2:	2d00      	cmp	r5, #0
 800d8f4:	d040      	beq.n	800d978 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d8f6:	1d28      	adds	r0, r5, #4
 800d8f8:	f7ff ffe5 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8fc:	b988      	cbnz	r0, 800d922 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d8fe:	4620      	mov	r0, r4
 800d900:	f7ff ffe1 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d904:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d908:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d90c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d910:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d914:	b138      	cbz	r0, 800d926 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d916:	8022      	strh	r2, [r4, #0]
 800d918:	8063      	strh	r3, [r4, #2]
 800d91a:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d91e:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d922:	69ad      	ldr	r5, [r5, #24]
 800d924:	e7e5      	b.n	800d8f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d926:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d92a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d92e:	4290      	cmp	r0, r2
 800d930:	4607      	mov	r7, r0
 800d932:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d936:	460e      	mov	r6, r1
 800d938:	bfa8      	it	ge
 800d93a:	4617      	movge	r7, r2
 800d93c:	4299      	cmp	r1, r3
 800d93e:	4472      	add	r2, lr
 800d940:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d944:	bfa8      	it	ge
 800d946:	461e      	movge	r6, r3
 800d948:	4440      	add	r0, r8
 800d94a:	4471      	add	r1, lr
 800d94c:	4463      	add	r3, ip
 800d94e:	b200      	sxth	r0, r0
 800d950:	8027      	strh	r7, [r4, #0]
 800d952:	b212      	sxth	r2, r2
 800d954:	8066      	strh	r6, [r4, #2]
 800d956:	b209      	sxth	r1, r1
 800d958:	b21b      	sxth	r3, r3
 800d95a:	4290      	cmp	r0, r2
 800d95c:	bfac      	ite	ge
 800d95e:	ebc7 0200 	rsbge	r2, r7, r0
 800d962:	ebc7 0202 	rsblt	r2, r7, r2
 800d966:	4299      	cmp	r1, r3
 800d968:	bfac      	ite	ge
 800d96a:	ebc6 0301 	rsbge	r3, r6, r1
 800d96e:	ebc6 0303 	rsblt	r3, r6, r3
 800d972:	80a2      	strh	r2, [r4, #4]
 800d974:	80e3      	strh	r3, [r4, #6]
 800d976:	e7d4      	b.n	800d922 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d978:	4620      	mov	r0, r4
 800d97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d97e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d97e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d982:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d986:	b383      	cbz	r3, 800d9ea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d988:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d98a:	b374      	cbz	r4, 800d9ea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d98c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d990:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d994:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d998:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d99c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d9a0:	b303      	cbz	r3, 800d9e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d9a2:	4668      	mov	r0, sp
 800d9a4:	1d21      	adds	r1, r4, #4
 800d9a6:	f8ad 5000 	strh.w	r5, [sp]
 800d9aa:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d9ae:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d9b2:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d9b6:	f7ff ff43 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 800d9ba:	4668      	mov	r0, sp
 800d9bc:	f7ff ff83 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9c0:	b980      	cbnz	r0, 800d9e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d9c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800d9c6:	4669      	mov	r1, sp
 800d9c8:	88a2      	ldrh	r2, [r4, #4]
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	1a9b      	subs	r3, r3, r2
 800d9ce:	88e2      	ldrh	r2, [r4, #6]
 800d9d0:	f8ad 3000 	strh.w	r3, [sp]
 800d9d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d9d8:	1a9b      	subs	r3, r3, r2
 800d9da:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	4798      	blx	r3
 800d9e4:	69a4      	ldr	r4, [r4, #24]
 800d9e6:	2c00      	cmp	r4, #0
 800d9e8:	d1d8      	bne.n	800d99c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d9ea:	b002      	add	sp, #8
 800d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9f0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d9f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9f2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d9f6:	460d      	mov	r5, r1
 800d9f8:	4616      	mov	r6, r2
 800d9fa:	b323      	cbz	r3, 800da46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d9fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d9fe:	b314      	cbz	r4, 800da46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800da00:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800da04:	b1eb      	cbz	r3, 800da42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800da06:	6828      	ldr	r0, [r5, #0]
 800da08:	466b      	mov	r3, sp
 800da0a:	6869      	ldr	r1, [r5, #4]
 800da0c:	c303      	stmia	r3!, {r0, r1}
 800da0e:	4668      	mov	r0, sp
 800da10:	1d21      	adds	r1, r4, #4
 800da12:	f7ff ff15 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 800da16:	4668      	mov	r0, sp
 800da18:	f7ff ff55 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800da1c:	b988      	cbnz	r0, 800da42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800da1e:	f8bd 3000 	ldrh.w	r3, [sp]
 800da22:	4669      	mov	r1, sp
 800da24:	88a2      	ldrh	r2, [r4, #4]
 800da26:	4620      	mov	r0, r4
 800da28:	1a9b      	subs	r3, r3, r2
 800da2a:	88e2      	ldrh	r2, [r4, #6]
 800da2c:	f8ad 3000 	strh.w	r3, [sp]
 800da30:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800da34:	1a9b      	subs	r3, r3, r2
 800da36:	4632      	mov	r2, r6
 800da38:	f8ad 3002 	strh.w	r3, [sp, #2]
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da40:	4798      	blx	r3
 800da42:	69a4      	ldr	r4, [r4, #24]
 800da44:	e7db      	b.n	800d9fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800da46:	b002      	add	sp, #8
 800da48:	bd70      	pop	{r4, r5, r6, pc}

0800da4a <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800da4a:	4770      	bx	lr

0800da4c <_ZN8touchgfx3HAL10FlushCacheEv>:
 800da4c:	4770      	bx	lr

0800da4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800da4e:	6803      	ldr	r3, [r0, #0]
 800da50:	b513      	push	{r0, r1, r4, lr}
 800da52:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800da56:	2300      	movs	r3, #0
 800da58:	e9cd 3300 	strd	r3, r3, [sp]
 800da5c:	466b      	mov	r3, sp
 800da5e:	47a0      	blx	r4
 800da60:	b002      	add	sp, #8
 800da62:	bd10      	pop	{r4, pc}

0800da64 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800da64:	2301      	movs	r3, #1
 800da66:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800da6a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800da6e:	4770      	bx	lr

0800da70 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800da70:	2301      	movs	r3, #1
 800da72:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800da76:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800da7a:	4770      	bx	lr

0800da7c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800da7c:	6843      	ldr	r3, [r0, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	725a      	strb	r2, [r3, #9]
 800da82:	6840      	ldr	r0, [r0, #4]
 800da84:	6803      	ldr	r3, [r0, #0]
 800da86:	691b      	ldr	r3, [r3, #16]
 800da88:	4718      	bx	r3

0800da8a <_ZN8touchgfx3HAL8flushDMAEv>:
 800da8a:	6840      	ldr	r0, [r0, #4]
 800da8c:	6803      	ldr	r3, [r0, #0]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	4718      	bx	r3

0800da92 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800da92:	b530      	push	{r4, r5, lr}
 800da94:	b08b      	sub	sp, #44	; 0x2c
 800da96:	6804      	ldr	r4, [r0, #0]
 800da98:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800da9c:	9509      	str	r5, [sp, #36]	; 0x24
 800da9e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800daa2:	9508      	str	r5, [sp, #32]
 800daa4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800daa8:	9507      	str	r5, [sp, #28]
 800daaa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800daae:	9506      	str	r5, [sp, #24]
 800dab0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800dab4:	9505      	str	r5, [sp, #20]
 800dab6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800daba:	9504      	str	r5, [sp, #16]
 800dabc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800dac0:	9503      	str	r5, [sp, #12]
 800dac2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800dac6:	9502      	str	r5, [sp, #8]
 800dac8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800dacc:	e9cd 3500 	strd	r3, r5, [sp]
 800dad0:	4613      	mov	r3, r2
 800dad2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800dad4:	2200      	movs	r2, #0
 800dad6:	47a0      	blx	r4
 800dad8:	b00b      	add	sp, #44	; 0x2c
 800dada:	bd30      	pop	{r4, r5, pc}

0800dadc <_ZN8touchgfx3HAL10beginFrameEv>:
 800dadc:	4b04      	ldr	r3, [pc, #16]	; (800daf0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	b123      	cbz	r3, 800daec <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800dae2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800dae6:	f080 0001 	eor.w	r0, r0, #1
 800daea:	4770      	bx	lr
 800daec:	2001      	movs	r0, #1
 800daee:	4770      	bx	lr
 800daf0:	240c3d40 	.word	0x240c3d40

0800daf4 <_ZN8touchgfx3HAL8endFrameEv>:
 800daf4:	b510      	push	{r4, lr}
 800daf6:	4604      	mov	r4, r0
 800daf8:	6840      	ldr	r0, [r0, #4]
 800dafa:	6803      	ldr	r3, [r0, #0]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	4798      	blx	r3
 800db00:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800db04:	b113      	cbz	r3, 800db0c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800db06:	2301      	movs	r3, #1
 800db08:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800db0c:	bd10      	pop	{r4, pc}

0800db0e <_ZN8touchgfx3HAL10initializeEv>:
 800db0e:	b510      	push	{r4, lr}
 800db10:	4604      	mov	r4, r0
 800db12:	f7fd ff65 	bl	800b9e0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800db16:	6860      	ldr	r0, [r4, #4]
 800db18:	6803      	ldr	r3, [r0, #0]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	4798      	blx	r3
 800db1e:	68e0      	ldr	r0, [r4, #12]
 800db20:	6803      	ldr	r3, [r0, #0]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	4798      	blx	r3
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	4620      	mov	r0, r4
 800db2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db30:	4718      	bx	r3

0800db32 <_ZN8touchgfx3HAL9taskEntryEv>:
 800db32:	b508      	push	{r3, lr}
 800db34:	6803      	ldr	r3, [r0, #0]
 800db36:	4604      	mov	r4, r0
 800db38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db3c:	4798      	blx	r3
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db42:	4620      	mov	r0, r4
 800db44:	4798      	blx	r3
 800db46:	f7fe f875 	bl	800bc34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4e:	e7f8      	b.n	800db42 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800db50 <_ZN8touchgfx3HAL4tickEv>:
 800db50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800db52:	6803      	ldr	r3, [r0, #0]
 800db54:	4604      	mov	r4, r0
 800db56:	4d5b      	ldr	r5, [pc, #364]	; (800dcc4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800db58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800db5c:	4798      	blx	r3
 800db5e:	2800      	cmp	r0, #0
 800db60:	f000 8095 	beq.w	800dc8e <_ZN8touchgfx3HAL4tickEv+0x13e>
 800db64:	2001      	movs	r0, #1
 800db66:	2600      	movs	r6, #0
 800db68:	f7fd fc9a 	bl	800b4a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800db6c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800db70:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800db74:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800db78:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800db7c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800db80:	b133      	cbz	r3, 800db90 <_ZN8touchgfx3HAL4tickEv+0x40>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	4620      	mov	r0, r4
 800db86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800db8a:	4798      	blx	r3
 800db8c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800db90:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800db94:	2601      	movs	r6, #1
 800db96:	6862      	ldr	r2, [r4, #4]
 800db98:	f083 0301 	eor.w	r3, r3, #1
 800db9c:	702e      	strb	r6, [r5, #0]
 800db9e:	7253      	strb	r3, [r2, #9]
 800dba0:	f002 fc5e 	bl	8010460 <_ZN8touchgfx11Application11getInstanceEv>
 800dba4:	6803      	ldr	r3, [r0, #0]
 800dba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba8:	4798      	blx	r3
 800dbaa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800dbae:	b90b      	cbnz	r3, 800dbb4 <_ZN8touchgfx3HAL4tickEv+0x64>
 800dbb0:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800dbb4:	f002 fc54 	bl	8010460 <_ZN8touchgfx11Application11getInstanceEv>
 800dbb8:	6803      	ldr	r3, [r0, #0]
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	4798      	blx	r3
 800dbbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbc0:	6803      	ldr	r3, [r0, #0]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	4798      	blx	r3
 800dbc6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800dbca:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800dbd6:	b10a      	cbz	r2, 800dbdc <_ZN8touchgfx3HAL4tickEv+0x8c>
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1eb      	bne.n	800dbb4 <_ZN8touchgfx3HAL4tickEv+0x64>
 800dbdc:	4a3a      	ldr	r2, [pc, #232]	; (800dcc8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800dbde:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800dbe2:	7813      	ldrb	r3, [r2, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	b25b      	sxtb	r3, r3
 800dbe8:	4299      	cmp	r1, r3
 800dbea:	7013      	strb	r3, [r2, #0]
 800dbec:	dc10      	bgt.n	800dc10 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	68e0      	ldr	r0, [r4, #12]
 800dbf2:	a902      	add	r1, sp, #8
 800dbf4:	7013      	strb	r3, [r2, #0]
 800dbf6:	aa03      	add	r2, sp, #12
 800dbf8:	6803      	ldr	r3, [r0, #0]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	4798      	blx	r3
 800dbfe:	6823      	ldr	r3, [r4, #0]
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d050      	beq.n	800dca6 <_ZN8touchgfx3HAL4tickEv+0x156>
 800dc04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dc08:	4620      	mov	r0, r4
 800dc0a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dc0e:	4798      	blx	r3
 800dc10:	2300      	movs	r3, #0
 800dc12:	6960      	ldr	r0, [r4, #20]
 800dc14:	f88d 3007 	strb.w	r3, [sp, #7]
 800dc18:	b158      	cbz	r0, 800dc32 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dc1a:	6803      	ldr	r3, [r0, #0]
 800dc1c:	f10d 0107 	add.w	r1, sp, #7
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	4798      	blx	r3
 800dc24:	b128      	cbz	r0, 800dc32 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dc26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc28:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dc2c:	6803      	ldr	r3, [r0, #0]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	4798      	blx	r3
 800dc32:	f104 001c 	add.w	r0, r4, #28
 800dc36:	f00d fb95 	bl	801b364 <_ZN8touchgfx8Gestures4tickEv>
 800dc3a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800dc3e:	b30b      	cbz	r3, 800dc84 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dc40:	6920      	ldr	r0, [r4, #16]
 800dc42:	6803      	ldr	r3, [r0, #0]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	4798      	blx	r3
 800dc48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	b903      	cbnz	r3, 800dc50 <_ZN8touchgfx3HAL4tickEv+0x100>
 800dc4e:	6720      	str	r0, [r4, #112]	; 0x70
 800dc50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dc52:	4a1e      	ldr	r2, [pc, #120]	; (800dccc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800dc54:	1af3      	subs	r3, r6, r3
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d914      	bls.n	800dc84 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dc5a:	6920      	ldr	r0, [r4, #16]
 800dc5c:	6803      	ldr	r3, [r0, #0]
 800dc5e:	699b      	ldr	r3, [r3, #24]
 800dc60:	4798      	blx	r3
 800dc62:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dc64:	2264      	movs	r2, #100	; 0x64
 800dc66:	1af3      	subs	r3, r6, r3
 800dc68:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc6c:	fbb0 f0f3 	udiv	r0, r0, r3
 800dc70:	2800      	cmp	r0, #0
 800dc72:	dc1d      	bgt.n	800dcb0 <_ZN8touchgfx3HAL4tickEv+0x160>
 800dc74:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800dc78:	6920      	ldr	r0, [r4, #16]
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	6803      	ldr	r3, [r0, #0]
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	4798      	blx	r3
 800dc82:	6726      	str	r6, [r4, #112]	; 0x70
 800dc84:	f002 fbec 	bl	8010460 <_ZN8touchgfx11Application11getInstanceEv>
 800dc88:	6803      	ldr	r3, [r0, #0]
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8c:	4798      	blx	r3
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	4620      	mov	r0, r4
 800dc92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dc96:	4798      	blx	r3
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f7fd fc0c 	bl	800b4b6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	702b      	strb	r3, [r5, #0]
 800dca2:	b004      	add	sp, #16
 800dca4:	bd70      	pop	{r4, r5, r6, pc}
 800dca6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dcaa:	4620      	mov	r0, r4
 800dcac:	4798      	blx	r3
 800dcae:	e7af      	b.n	800dc10 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dcb0:	2863      	cmp	r0, #99	; 0x63
 800dcb2:	bfcb      	itete	gt
 800dcb4:	2300      	movgt	r3, #0
 800dcb6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800dcba:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800dcbe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800dcc2:	e7d9      	b.n	800dc78 <_ZN8touchgfx3HAL4tickEv+0x128>
 800dcc4:	240c3d48 	.word	0x240c3d48
 800dcc8:	240c3d49 	.word	0x240c3d49
 800dccc:	05f5e100 	.word	0x05f5e100

0800dcd0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800dcd0:	f7fd bf1e 	b.w	800bb10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800dcd4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800dcd4:	6581      	str	r1, [r0, #88]	; 0x58
 800dcd6:	301c      	adds	r0, #28
 800dcd8:	f00d bb42 	b.w	801b360 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800dcdc <_ZN8touchgfx3HAL5touchEll>:
 800dcdc:	b530      	push	{r4, r5, lr}
 800dcde:	b087      	sub	sp, #28
 800dce0:	4604      	mov	r4, r0
 800dce2:	a804      	add	r0, sp, #16
 800dce4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dce8:	f002 f944 	bl	800ff74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800dcec:	9b04      	ldr	r3, [sp, #16]
 800dcee:	a906      	add	r1, sp, #24
 800dcf0:	a803      	add	r0, sp, #12
 800dcf2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dcf6:	9b05      	ldr	r3, [sp, #20]
 800dcf8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800dcfc:	f002 f98c 	bl	8010018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800dd00:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800dd04:	f104 001c 	add.w	r0, r4, #28
 800dd08:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800dd0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800dd10:	b189      	cbz	r1, 800dd36 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800dd12:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	4613      	mov	r3, r2
 800dd1a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800dd1e:	462a      	mov	r2, r5
 800dd20:	f00d fb2e 	bl	801b380 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800dd24:	b128      	cbz	r0, 800dd32 <_ZN8touchgfx3HAL5touchEll+0x56>
 800dd26:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800dd2a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800dd2c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dd30:	6623      	str	r3, [r4, #96]	; 0x60
 800dd32:	b007      	add	sp, #28
 800dd34:	bd30      	pop	{r4, r5, pc}
 800dd36:	f00d fb63 	bl	801b400 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800dd40:	e7f1      	b.n	800dd26 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800dd42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800dd42:	b510      	push	{r4, lr}
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d046      	beq.n	800ddd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dd48:	ea81 0002 	eor.w	r0, r1, r2
 800dd4c:	07c4      	lsls	r4, r0, #31
 800dd4e:	d508      	bpl.n	800dd62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800dd50:	440b      	add	r3, r1
 800dd52:	3a01      	subs	r2, #1
 800dd54:	428b      	cmp	r3, r1
 800dd56:	d93e      	bls.n	800ddd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dd58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dd5c:	f801 0b01 	strb.w	r0, [r1], #1
 800dd60:	e7f8      	b.n	800dd54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800dd62:	07d0      	lsls	r0, r2, #31
 800dd64:	bf42      	ittt	mi
 800dd66:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800dd6a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800dd6e:	f801 0b01 	strbmi.w	r0, [r1], #1
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d911      	bls.n	800dd9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dd76:	ea81 0402 	eor.w	r4, r1, r2
 800dd7a:	4610      	mov	r0, r2
 800dd7c:	07a4      	lsls	r4, r4, #30
 800dd7e:	d022      	beq.n	800ddc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800dd80:	f023 0401 	bic.w	r4, r3, #1
 800dd84:	440c      	add	r4, r1
 800dd86:	428c      	cmp	r4, r1
 800dd88:	4602      	mov	r2, r0
 800dd8a:	d904      	bls.n	800dd96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800dd8c:	8812      	ldrh	r2, [r2, #0]
 800dd8e:	3002      	adds	r0, #2
 800dd90:	f821 2b02 	strh.w	r2, [r1], #2
 800dd94:	e7f7      	b.n	800dd86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	f023 0003 	bic.w	r0, r3, #3
 800dd9e:	4408      	add	r0, r1
 800dda0:	4288      	cmp	r0, r1
 800dda2:	4614      	mov	r4, r2
 800dda4:	d904      	bls.n	800ddb0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800dda6:	6824      	ldr	r4, [r4, #0]
 800dda8:	3204      	adds	r2, #4
 800ddaa:	f841 4b04 	str.w	r4, [r1], #4
 800ddae:	e7f7      	b.n	800dda0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800ddb0:	f003 0303 	and.w	r3, r3, #3
 800ddb4:	3a01      	subs	r2, #1
 800ddb6:	440b      	add	r3, r1
 800ddb8:	428b      	cmp	r3, r1
 800ddba:	d90c      	bls.n	800ddd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ddbc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ddc0:	f801 0b01 	strb.w	r0, [r1], #1
 800ddc4:	e7f8      	b.n	800ddb8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800ddc6:	0790      	lsls	r0, r2, #30
 800ddc8:	d0e7      	beq.n	800dd9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ddca:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ddce:	3b02      	subs	r3, #2
 800ddd0:	f821 0b02 	strh.w	r0, [r1], #2
 800ddd4:	e7e1      	b.n	800dd9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	bd10      	pop	{r4, pc}

0800ddda <_ZN8touchgfx3HAL7noTouchEv>:
 800ddda:	b510      	push	{r4, lr}
 800dddc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800dde0:	4604      	mov	r4, r0
 800dde2:	b153      	cbz	r3, 800ddfa <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800dde4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800dde8:	2101      	movs	r1, #1
 800ddea:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800ddee:	301c      	adds	r0, #28
 800ddf0:	f00d fb06 	bl	801b400 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ddfa:	bd10      	pop	{r4, pc}

0800ddfc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800ddfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de00:	4604      	mov	r4, r0
 800de02:	6980      	ldr	r0, [r0, #24]
 800de04:	b085      	sub	sp, #20
 800de06:	460f      	mov	r7, r1
 800de08:	4690      	mov	r8, r2
 800de0a:	4699      	mov	r9, r3
 800de0c:	b930      	cbnz	r0, 800de1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800de0e:	4b1c      	ldr	r3, [pc, #112]	; (800de80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800de10:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800de14:	4a1b      	ldr	r2, [pc, #108]	; (800de84 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800de16:	481c      	ldr	r0, [pc, #112]	; (800de88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800de18:	f00e ffa0 	bl	801cd5c <__assert_func>
 800de1c:	ad04      	add	r5, sp, #16
 800de1e:	2600      	movs	r6, #0
 800de20:	f845 6d04 	str.w	r6, [r5, #-4]!
 800de24:	6806      	ldr	r6, [r0, #0]
 800de26:	9501      	str	r5, [sp, #4]
 800de28:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800de2c:	9500      	str	r5, [sp, #0]
 800de2e:	6835      	ldr	r5, [r6, #0]
 800de30:	47a8      	blx	r5
 800de32:	4d16      	ldr	r5, [pc, #88]	; (800de8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800de34:	4606      	mov	r6, r0
 800de36:	f8a5 9000 	strh.w	r9, [r5]
 800de3a:	f7fb fa73 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800de3e:	6803      	ldr	r3, [r0, #0]
 800de40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de42:	4798      	blx	r3
 800de44:	2801      	cmp	r0, #1
 800de46:	d012      	beq.n	800de6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800de48:	d306      	bcc.n	800de58 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800de4a:	280d      	cmp	r0, #13
 800de4c:	d80b      	bhi.n	800de66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800de4e:	4b10      	ldr	r3, [pc, #64]	; (800de90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800de50:	f240 115b 	movw	r1, #347	; 0x15b
 800de54:	4a0b      	ldr	r2, [pc, #44]	; (800de84 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800de56:	e7de      	b.n	800de16 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800de58:	882b      	ldrh	r3, [r5, #0]
 800de5a:	fb08 7203 	mla	r2, r8, r3, r7
 800de5e:	9b03      	ldr	r3, [sp, #12]
 800de60:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800de64:	63e3      	str	r3, [r4, #60]	; 0x3c
 800de66:	4630      	mov	r0, r6
 800de68:	b005      	add	sp, #20
 800de6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de6e:	882a      	ldrh	r2, [r5, #0]
 800de70:	9b03      	ldr	r3, [sp, #12]
 800de72:	fb08 7202 	mla	r2, r8, r2, r7
 800de76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800de7a:	1a9a      	subs	r2, r3, r2
 800de7c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800de7e:	e7f2      	b.n	800de66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800de80:	0801f87d 	.word	0x0801f87d
 800de84:	0801fc13 	.word	0x0801fc13
 800de88:	0801f8c2 	.word	0x0801f8c2
 800de8c:	240c3d3c 	.word	0x240c3d3c
 800de90:	0801f8e8 	.word	0x0801f8e8

0800de94 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800de94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de96:	b08b      	sub	sp, #44	; 0x2c
 800de98:	4617      	mov	r7, r2
 800de9a:	4604      	mov	r4, r0
 800de9c:	460e      	mov	r6, r1
 800de9e:	461d      	mov	r5, r3
 800dea0:	f7fb fa40 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800dea4:	6803      	ldr	r3, [r0, #0]
 800dea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea8:	4798      	blx	r3
 800deaa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800deae:	9007      	str	r0, [sp, #28]
 800deb0:	4631      	mov	r1, r6
 800deb2:	6822      	ldr	r2, [r4, #0]
 800deb4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800deb8:	4b0c      	ldr	r3, [pc, #48]	; (800deec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800deba:	4620      	mov	r0, r4
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	9306      	str	r3, [sp, #24]
 800dec0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800dec4:	9305      	str	r3, [sp, #20]
 800dec6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800deca:	9304      	str	r3, [sp, #16]
 800decc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ded0:	9303      	str	r3, [sp, #12]
 800ded2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ded6:	9302      	str	r3, [sp, #8]
 800ded8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800dedc:	e9cd 5300 	strd	r5, r3, [sp]
 800dee0:	463b      	mov	r3, r7
 800dee2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800dee4:	2200      	movs	r2, #0
 800dee6:	47a8      	blx	r5
 800dee8:	b00b      	add	sp, #44	; 0x2c
 800deea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deec:	240c3d3c 	.word	0x240c3d3c

0800def0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800def0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800def4:	4698      	mov	r8, r3
 800def6:	6803      	ldr	r3, [r0, #0]
 800def8:	b08b      	sub	sp, #44	; 0x2c
 800defa:	4617      	mov	r7, r2
 800defc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800defe:	460e      	mov	r6, r1
 800df00:	4b13      	ldr	r3, [pc, #76]	; (800df50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800df02:	4604      	mov	r4, r0
 800df04:	f8b3 9000 	ldrh.w	r9, [r3]
 800df08:	f7fb fa0c 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800df0c:	6803      	ldr	r3, [r0, #0]
 800df0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df10:	4798      	blx	r3
 800df12:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800df16:	2200      	movs	r2, #0
 800df18:	4631      	mov	r1, r6
 800df1a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800df1e:	2302      	movs	r3, #2
 800df20:	4620      	mov	r0, r4
 800df22:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800df26:	2301      	movs	r3, #1
 800df28:	9305      	str	r3, [sp, #20]
 800df2a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800df2e:	9304      	str	r3, [sp, #16]
 800df30:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800df34:	9303      	str	r3, [sp, #12]
 800df36:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800df3a:	9302      	str	r3, [sp, #8]
 800df3c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800df40:	e9cd 8300 	strd	r8, r3, [sp]
 800df44:	463b      	mov	r3, r7
 800df46:	47a8      	blx	r5
 800df48:	b00b      	add	sp, #44	; 0x2c
 800df4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df4e:	bf00      	nop
 800df50:	240c3d3c 	.word	0x240c3d3c

0800df54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800df54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df58:	4698      	mov	r8, r3
 800df5a:	6803      	ldr	r3, [r0, #0]
 800df5c:	b087      	sub	sp, #28
 800df5e:	460e      	mov	r6, r1
 800df60:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800df62:	4617      	mov	r7, r2
 800df64:	4b0f      	ldr	r3, [pc, #60]	; (800dfa4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800df66:	4604      	mov	r4, r0
 800df68:	f8b3 9000 	ldrh.w	r9, [r3]
 800df6c:	f7fb f9da 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800df70:	6803      	ldr	r3, [r0, #0]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	4798      	blx	r3
 800df76:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800df7a:	463a      	mov	r2, r7
 800df7c:	4631      	mov	r1, r6
 800df7e:	f8cd 900c 	str.w	r9, [sp, #12]
 800df82:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800df86:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800df8a:	4620      	mov	r0, r4
 800df8c:	9302      	str	r3, [sp, #8]
 800df8e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	4643      	mov	r3, r8
 800df9c:	47a8      	blx	r5
 800df9e:	b007      	add	sp, #28
 800dfa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfa4:	240c3d3c 	.word	0x240c3d3c

0800dfa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfac:	4604      	mov	r4, r0
 800dfae:	b08f      	sub	sp, #60	; 0x3c
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	460d      	mov	r5, r1
 800dfb4:	4691      	mov	r9, r2
 800dfb6:	461e      	mov	r6, r3
 800dfb8:	f004 fe3a 	bl	8012c30 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	f000 809c 	beq.w	800e0fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800dfc2:	6823      	ldr	r3, [r4, #0]
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f8df b194 	ldr.w	fp, [pc, #404]	; 800e15c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800dfca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800dfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd0:	4798      	blx	r3
 800dfd2:	6823      	ldr	r3, [r4, #0]
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f8df a188 	ldr.w	sl, [pc, #392]	; 800e160 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800dfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfdc:	4798      	blx	r3
 800dfde:	f8bb 3000 	ldrh.w	r3, [fp]
 800dfe2:	4f5b      	ldr	r7, [pc, #364]	; (800e150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	f8ba 3000 	ldrh.w	r3, [sl]
 800dfea:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800dfee:	4640      	mov	r0, r8
 800dff0:	9302      	str	r3, [sp, #8]
 800dff2:	883b      	ldrh	r3, [r7, #0]
 800dff4:	9303      	str	r3, [sp, #12]
 800dff6:	4b57      	ldr	r3, [pc, #348]	; (800e154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800dff8:	881a      	ldrh	r2, [r3, #0]
 800dffa:	9305      	str	r3, [sp, #20]
 800dffc:	9204      	str	r2, [sp, #16]
 800dffe:	f004 ff77 	bl	8012ef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e002:	8038      	strh	r0, [r7, #0]
 800e004:	4640      	mov	r0, r8
 800e006:	f004 ffb7 	bl	8012f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e00a:	9b05      	ldr	r3, [sp, #20]
 800e00c:	8018      	strh	r0, [r3, #0]
 800e00e:	4b52      	ldr	r3, [pc, #328]	; (800e158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d174      	bne.n	800e100 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800e016:	883b      	ldrh	r3, [r7, #0]
 800e018:	f8aa 0000 	strh.w	r0, [sl]
 800e01c:	f8ab 3000 	strh.w	r3, [fp]
 800e020:	4648      	mov	r0, r9
 800e022:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800e026:	f004 fe03 	bl	8012c30 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e02a:	2200      	movs	r2, #0
 800e02c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e030:	4611      	mov	r1, r2
 800e032:	4628      	mov	r0, r5
 800e034:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e038:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e03c:	f7fb fec9 	bl	8009dd2 <_ZN8touchgfx8Drawable5setXYEss>
 800e040:	2301      	movs	r3, #1
 800e042:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800e046:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e04a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	dd5c      	ble.n	800e10c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800e052:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e056:	2b00      	cmp	r3, #0
 800e058:	dd58      	ble.n	800e10c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800e05a:	462a      	mov	r2, r5
 800e05c:	ab0a      	add	r3, sp, #40	; 0x28
 800e05e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e062:	6851      	ldr	r1, [r2, #4]
 800e064:	c303      	stmia	r3!, {r0, r1}
 800e066:	4631      	mov	r1, r6
 800e068:	a80a      	add	r0, sp, #40	; 0x28
 800e06a:	f7ff fbe9 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 800e06e:	4b38      	ldr	r3, [pc, #224]	; (800e150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e070:	2100      	movs	r1, #0
 800e072:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e076:	4b37      	ldr	r3, [pc, #220]	; (800e154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e078:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e07c:	aa0a      	add	r2, sp, #40	; 0x28
 800e07e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e082:	910c      	str	r1, [sp, #48]	; 0x30
 800e084:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e088:	ab08      	add	r3, sp, #32
 800e08a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e08e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e092:	4618      	mov	r0, r3
 800e094:	a90c      	add	r1, sp, #48	; 0x30
 800e096:	f7ff fbd3 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 800e09a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d13c      	bne.n	800e11a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800e0a6:	2600      	movs	r6, #0
 800e0a8:	696b      	ldr	r3, [r5, #20]
 800e0aa:	a908      	add	r1, sp, #32
 800e0ac:	682a      	ldr	r2, [r5, #0]
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	9305      	str	r3, [sp, #20]
 800e0b2:	616e      	str	r6, [r5, #20]
 800e0b4:	6892      	ldr	r2, [r2, #8]
 800e0b6:	4790      	blx	r2
 800e0b8:	9b05      	ldr	r3, [sp, #20]
 800e0ba:	4652      	mov	r2, sl
 800e0bc:	4649      	mov	r1, r9
 800e0be:	616b      	str	r3, [r5, #20]
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800e0c6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800e0ca:	f7fb fe82 	bl	8009dd2 <_ZN8touchgfx8Drawable5setXYEss>
 800e0ce:	9a01      	ldr	r2, [sp, #4]
 800e0d0:	4b22      	ldr	r3, [pc, #136]	; (800e15c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	801a      	strh	r2, [r3, #0]
 800e0d6:	9a02      	ldr	r2, [sp, #8]
 800e0d8:	4b21      	ldr	r3, [pc, #132]	; (800e160 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e0da:	801a      	strh	r2, [r3, #0]
 800e0dc:	9a03      	ldr	r2, [sp, #12]
 800e0de:	4b1c      	ldr	r3, [pc, #112]	; (800e150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e0e0:	801a      	strh	r2, [r3, #0]
 800e0e2:	4b1c      	ldr	r3, [pc, #112]	; (800e154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e0e4:	9a04      	ldr	r2, [sp, #16]
 800e0e6:	801a      	strh	r2, [r3, #0]
 800e0e8:	6823      	ldr	r3, [r4, #0]
 800e0ea:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800e0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0f0:	4798      	blx	r3
 800e0f2:	6823      	ldr	r3, [r4, #0]
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f8:	4798      	blx	r3
 800e0fa:	b00f      	add	sp, #60	; 0x3c
 800e0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e100:	883b      	ldrh	r3, [r7, #0]
 800e102:	f8ab 0000 	strh.w	r0, [fp]
 800e106:	f8aa 3000 	strh.w	r3, [sl]
 800e10a:	e789      	b.n	800e020 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800e10c:	462a      	mov	r2, r5
 800e10e:	ab0a      	add	r3, sp, #40	; 0x28
 800e110:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e114:	6851      	ldr	r1, [r2, #4]
 800e116:	c303      	stmia	r3!, {r0, r1}
 800e118:	e7a9      	b.n	800e06e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800e11a:	a807      	add	r0, sp, #28
 800e11c:	f004 fffa 	bl	8013114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e120:	4606      	mov	r6, r0
 800e122:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e124:	6803      	ldr	r3, [r0, #0]
 800e126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e128:	4798      	blx	r3
 800e12a:	4286      	cmp	r6, r0
 800e12c:	d1b8      	bne.n	800e0a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800e12e:	f7fb f8f9 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800e132:	6803      	ldr	r3, [r0, #0]
 800e134:	4606      	mov	r6, r0
 800e136:	a807      	add	r0, sp, #28
 800e138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13a:	9305      	str	r3, [sp, #20]
 800e13c:	f004 ffea 	bl	8013114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e140:	9b05      	ldr	r3, [sp, #20]
 800e142:	4601      	mov	r1, r0
 800e144:	4630      	mov	r0, r6
 800e146:	4798      	blx	r3
 800e148:	f080 0001 	eor.w	r0, r0, #1
 800e14c:	b2c0      	uxtb	r0, r0
 800e14e:	e7a8      	b.n	800e0a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e150:	240c3d36 	.word	0x240c3d36
 800e154:	240c3d38 	.word	0x240c3d38
 800e158:	240c3d3a 	.word	0x240c3d3a
 800e15c:	240c3d3c 	.word	0x240c3d3c
 800e160:	240c3d3e 	.word	0x240c3d3e

0800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e164:	4b07      	ldr	r3, [pc, #28]	; (800e184 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e166:	b510      	push	{r4, lr}
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	4604      	mov	r4, r0
 800e16c:	b13b      	cbz	r3, 800e17e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e16e:	6803      	ldr	r3, [r0, #0]
 800e170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e172:	4798      	blx	r3
 800e174:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e176:	4283      	cmp	r3, r0
 800e178:	d101      	bne.n	800e17e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e17a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e17c:	bd10      	pop	{r4, pc}
 800e17e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e180:	e7fc      	b.n	800e17c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e182:	bf00      	nop
 800e184:	240c3d40 	.word	0x240c3d40

0800e188 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e18c:	b08a      	sub	sp, #40	; 0x28
 800e18e:	4692      	mov	sl, r2
 800e190:	461d      	mov	r5, r3
 800e192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e196:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 800e19a:	2400      	movs	r4, #0
 800e19c:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800e1a6:	fb09 a505 	mla	r5, r9, r5, sl
 800e1aa:	9404      	str	r4, [sp, #16]
 800e1ac:	f8ad 8018 	strh.w	r8, [sp, #24]
 800e1b0:	f8ad 701a 	strh.w	r7, [sp, #26]
 800e1b4:	f88d 4020 	strb.w	r4, [sp, #32]
 800e1b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e1bc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e1c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e1c4:	f7ff ffce 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e1c8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e1cc:	f8ad 901e 	strh.w	r9, [sp, #30]
 800e1d0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e1d4:	9505      	str	r5, [sp, #20]
 800e1d6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800e1da:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800e1de:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800e1e2:	f1b8 0f00 	cmp.w	r8, #0
 800e1e6:	d000      	beq.n	800e1ea <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 800e1e8:	b937      	cbnz	r7, 800e1f8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800e1ec:	f240 2102 	movw	r1, #514	; 0x202
 800e1f0:	4a0c      	ldr	r2, [pc, #48]	; (800e224 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800e1f2:	480d      	ldr	r0, [pc, #52]	; (800e228 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800e1f4:	f00e fdb2 	bl	801cd5c <__assert_func>
 800e1f8:	6833      	ldr	r3, [r6, #0]
 800e1fa:	4630      	mov	r0, r6
 800e1fc:	9c01      	ldr	r4, [sp, #4]
 800e1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e200:	4798      	blx	r3
 800e202:	4220      	tst	r0, r4
 800e204:	d104      	bne.n	800e210 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 800e206:	4b09      	ldr	r3, [pc, #36]	; (800e22c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 800e208:	f240 2103 	movw	r1, #515	; 0x203
 800e20c:	4a05      	ldr	r2, [pc, #20]	; (800e224 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800e20e:	e7f0      	b.n	800e1f2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 800e210:	6870      	ldr	r0, [r6, #4]
 800e212:	a901      	add	r1, sp, #4
 800e214:	6803      	ldr	r3, [r0, #0]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	4798      	blx	r3
 800e21a:	b00a      	add	sp, #40	; 0x28
 800e21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e220:	0801f717 	.word	0x0801f717
 800e224:	0801fa48 	.word	0x0801fa48
 800e228:	0801f8c2 	.word	0x0801f8c2
 800e22c:	0801f74f 	.word	0x0801f74f

0800e230 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e234:	b08b      	sub	sp, #44	; 0x2c
 800e236:	4693      	mov	fp, r2
 800e238:	461d      	mov	r5, r3
 800e23a:	2400      	movs	r4, #0
 800e23c:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 800e240:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e244:	468a      	mov	sl, r1
 800e246:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 800e24a:	fb09 b505 	mla	r5, r9, r5, fp
 800e24e:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800e252:	4606      	mov	r6, r0
 800e254:	9404      	str	r4, [sp, #16]
 800e256:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e25a:	f7ff ff83 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e25e:	f8ad 8018 	strh.w	r8, [sp, #24]
 800e262:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e266:	f8ad 701a 	strh.w	r7, [sp, #26]
 800e26a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e26e:	9505      	str	r5, [sp, #20]
 800e270:	f8ad 901e 	strh.w	r9, [sp, #30]
 800e274:	f8cd a010 	str.w	sl, [sp, #16]
 800e278:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e27c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e280:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800e284:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800e288:	f1b8 0f00 	cmp.w	r8, #0
 800e28c:	d000      	beq.n	800e290 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 800e28e:	b937      	cbnz	r7, 800e29e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 800e290:	4b0d      	ldr	r3, [pc, #52]	; (800e2c8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800e292:	f240 2119 	movw	r1, #537	; 0x219
 800e296:	4a0d      	ldr	r2, [pc, #52]	; (800e2cc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800e298:	480d      	ldr	r0, [pc, #52]	; (800e2d0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800e29a:	f00e fd5f 	bl	801cd5c <__assert_func>
 800e29e:	6833      	ldr	r3, [r6, #0]
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	9c01      	ldr	r4, [sp, #4]
 800e2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a6:	4798      	blx	r3
 800e2a8:	4220      	tst	r0, r4
 800e2aa:	d104      	bne.n	800e2b6 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 800e2ac:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 800e2ae:	f240 211a 	movw	r1, #538	; 0x21a
 800e2b2:	4a06      	ldr	r2, [pc, #24]	; (800e2cc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800e2b4:	e7f0      	b.n	800e298 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 800e2b6:	6870      	ldr	r0, [r6, #4]
 800e2b8:	a901      	add	r1, sp, #4
 800e2ba:	6803      	ldr	r3, [r0, #0]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	4798      	blx	r3
 800e2c0:	b00b      	add	sp, #44	; 0x2c
 800e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c6:	bf00      	nop
 800e2c8:	0801f794 	.word	0x0801f794
 800e2cc:	0801fabe 	.word	0x0801fabe
 800e2d0:	0801f8c2 	.word	0x0801f8c2
 800e2d4:	0801f7cc 	.word	0x0801f7cc

0800e2d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800e2d8:	b508      	push	{r3, lr}
 800e2da:	290d      	cmp	r1, #13
 800e2dc:	d817      	bhi.n	800e30e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800e2de:	e8df f001 	tbb	[pc, r1]
 800e2e2:	090b      	.short	0x090b
 800e2e4:	0d0d0d07 	.word	0x0d0d0d07
 800e2e8:	1414140d 	.word	0x1414140d
 800e2ec:	0d0d1414 	.word	0x0d0d1414
 800e2f0:	2020      	movs	r0, #32
 800e2f2:	bd08      	pop	{r3, pc}
 800e2f4:	2018      	movs	r0, #24
 800e2f6:	e7fc      	b.n	800e2f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e2f8:	2010      	movs	r0, #16
 800e2fa:	e7fa      	b.n	800e2f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e2fc:	4b05      	ldr	r3, [pc, #20]	; (800e314 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800e2fe:	f240 2183 	movw	r1, #643	; 0x283
 800e302:	4a05      	ldr	r2, [pc, #20]	; (800e318 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800e304:	4805      	ldr	r0, [pc, #20]	; (800e31c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800e306:	f00e fd29 	bl	801cd5c <__assert_func>
 800e30a:	2008      	movs	r0, #8
 800e30c:	e7f1      	b.n	800e2f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e30e:	2000      	movs	r0, #0
 800e310:	e7ef      	b.n	800e2f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e312:	bf00      	nop
 800e314:	0801f93e 	.word	0x0801f93e
 800e318:	0801fde9 	.word	0x0801fde9
 800e31c:	0801f8c2 	.word	0x0801f8c2

0800e320 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800e320:	b570      	push	{r4, r5, r6, lr}
 800e322:	460d      	mov	r5, r1
 800e324:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800e328:	4616      	mov	r6, r2
 800e32a:	461c      	mov	r4, r3
 800e32c:	f7ff ffd4 	bl	800e2d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800e330:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800e334:	10c0      	asrs	r0, r0, #3
 800e336:	fb06 5101 	mla	r1, r6, r1, r5
 800e33a:	fb00 4001 	mla	r0, r0, r1, r4
 800e33e:	bd70      	pop	{r4, r5, r6, pc}

0800e340 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e344:	b08c      	sub	sp, #48	; 0x30
 800e346:	f04f 0c00 	mov.w	ip, #0
 800e34a:	4604      	mov	r4, r0
 800e34c:	469a      	mov	sl, r3
 800e34e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 800e352:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800e356:	2d0b      	cmp	r5, #11
 800e358:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800e35c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e360:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800e364:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 800e368:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 800e36c:	f8cd c018 	str.w	ip, [sp, #24]
 800e370:	d130      	bne.n	800e3d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 800e372:	2080      	movs	r0, #128	; 0x80
 800e374:	9205      	str	r2, [sp, #20]
 800e376:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800e37a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e37e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800e382:	f8ad 7020 	strh.w	r7, [sp, #32]
 800e386:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800e38a:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800e38e:	4620      	mov	r0, r4
 800e390:	f7ff fee8 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e394:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800e398:	4603      	mov	r3, r0
 800e39a:	4651      	mov	r1, sl
 800e39c:	4620      	mov	r0, r4
 800e39e:	e9cd 9800 	strd	r9, r8, [sp]
 800e3a2:	f7ff ffbd 	bl	800e320 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e3a6:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800e3aa:	9007      	str	r0, [sp, #28]
 800e3ac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 800e3b6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e3ba:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 800e3be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800e3c2:	b107      	cbz	r7, 800e3c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 800e3c4:	b9d6      	cbnz	r6, 800e3fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 800e3c6:	4b17      	ldr	r3, [pc, #92]	; (800e424 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800e3c8:	f240 11c9 	movw	r1, #457	; 0x1c9
 800e3cc:	4a16      	ldr	r2, [pc, #88]	; (800e428 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800e3ce:	4817      	ldr	r0, [pc, #92]	; (800e42c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800e3d0:	f00e fcc4 	bl	801cd5c <__assert_func>
 800e3d4:	2d02      	cmp	r5, #2
 800e3d6:	d108      	bne.n	800e3ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e3d8:	2bff      	cmp	r3, #255	; 0xff
 800e3da:	d104      	bne.n	800e3e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	bf14      	ite	ne
 800e3e0:	2040      	movne	r0, #64	; 0x40
 800e3e2:	2020      	moveq	r0, #32
 800e3e4:	e7c6      	b.n	800e374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e3e6:	2040      	movs	r0, #64	; 0x40
 800e3e8:	e7c4      	b.n	800e374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e3ea:	2bff      	cmp	r3, #255	; 0xff
 800e3ec:	d104      	bne.n	800e3f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	bf14      	ite	ne
 800e3f2:	2004      	movne	r0, #4
 800e3f4:	2001      	moveq	r0, #1
 800e3f6:	e7bd      	b.n	800e374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e3f8:	2004      	movs	r0, #4
 800e3fa:	e7bb      	b.n	800e374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	4620      	mov	r0, r4
 800e400:	9d03      	ldr	r5, [sp, #12]
 800e402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e404:	4798      	blx	r3
 800e406:	4228      	tst	r0, r5
 800e408:	d104      	bne.n	800e414 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 800e40a:	4b09      	ldr	r3, [pc, #36]	; (800e430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 800e40c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800e410:	4a05      	ldr	r2, [pc, #20]	; (800e428 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800e412:	e7dc      	b.n	800e3ce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800e414:	6860      	ldr	r0, [r4, #4]
 800e416:	a903      	add	r1, sp, #12
 800e418:	6803      	ldr	r3, [r0, #0]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	4798      	blx	r3
 800e41e:	b00c      	add	sp, #48	; 0x30
 800e420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e424:	0801f717 	.word	0x0801f717
 800e428:	0801fc77 	.word	0x0801fc77
 800e42c:	0801f8c2 	.word	0x0801f8c2
 800e430:	0801f74f 	.word	0x0801f74f

0800e434 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e438:	b08d      	sub	sp, #52	; 0x34
 800e43a:	469b      	mov	fp, r3
 800e43c:	2500      	movs	r5, #0
 800e43e:	4604      	mov	r4, r0
 800e440:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 800e444:	4692      	mov	sl, r2
 800e446:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 800e44a:	4689      	mov	r9, r1
 800e44c:	2fff      	cmp	r7, #255	; 0xff
 800e44e:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800e452:	9506      	str	r5, [sp, #24]
 800e454:	bf14      	ite	ne
 800e456:	2308      	movne	r3, #8
 800e458:	2302      	moveq	r3, #2
 800e45a:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800e45e:	f7ff fe81 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e462:	465a      	mov	r2, fp
 800e464:	4603      	mov	r3, r0
 800e466:	4651      	mov	r1, sl
 800e468:	4620      	mov	r0, r4
 800e46a:	e9cd 8600 	strd	r8, r6, [sp]
 800e46e:	f7ff ff57 	bl	800e320 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e472:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800e476:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 800e47a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e47e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800e482:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e486:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e48a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800e48e:	9d03      	ldr	r5, [sp, #12]
 800e490:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	9007      	str	r0, [sp, #28]
 800e498:	4620      	mov	r0, r4
 800e49a:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 800e49e:	f8cd 9018 	str.w	r9, [sp, #24]
 800e4a2:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800e4a6:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800e4aa:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b0:	4798      	blx	r3
 800e4b2:	4228      	tst	r0, r5
 800e4b4:	d106      	bne.n	800e4c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 800e4b6:	4b07      	ldr	r3, [pc, #28]	; (800e4d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800e4b8:	f44f 710c 	mov.w	r1, #560	; 0x230
 800e4bc:	4a06      	ldr	r2, [pc, #24]	; (800e4d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800e4be:	4807      	ldr	r0, [pc, #28]	; (800e4dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 800e4c0:	f00e fc4c 	bl	801cd5c <__assert_func>
 800e4c4:	6860      	ldr	r0, [r4, #4]
 800e4c6:	a903      	add	r1, sp, #12
 800e4c8:	6803      	ldr	r3, [r0, #0]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	4798      	blx	r3
 800e4ce:	b00d      	add	sp, #52	; 0x34
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	0801f74f 	.word	0x0801f74f
 800e4d8:	0801fd4e 	.word	0x0801fd4e
 800e4dc:	0801f8c2 	.word	0x0801f8c2

0800e4e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e4e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e4e4:	461f      	mov	r7, r3
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e4e8:	460d      	mov	r5, r1
 800e4ea:	4616      	mov	r6, r2
 800e4ec:	f8b3 8000 	ldrh.w	r8, [r3]
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	f7fa ff17 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800e4f6:	6803      	ldr	r3, [r0, #0]
 800e4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4fa:	4798      	blx	r3
 800e4fc:	463b      	mov	r3, r7
 800e4fe:	4632      	mov	r2, r6
 800e500:	4629      	mov	r1, r5
 800e502:	e9cd 8000 	strd	r8, r0, [sp]
 800e506:	4620      	mov	r0, r4
 800e508:	f7ff ff0a 	bl	800e320 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e50c:	b002      	add	sp, #8
 800e50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e512:	bf00      	nop
 800e514:	240c3d3c 	.word	0x240c3d3c

0800e518 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e51c:	b08b      	sub	sp, #44	; 0x2c
 800e51e:	4699      	mov	r9, r3
 800e520:	4690      	mov	r8, r2
 800e522:	4604      	mov	r4, r0
 800e524:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800e528:	2500      	movs	r5, #0
 800e52a:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 800e52e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800e532:	9504      	str	r5, [sp, #16]
 800e534:	f8ad 7018 	strh.w	r7, [sp, #24]
 800e538:	f8ad 601a 	strh.w	r6, [sp, #26]
 800e53c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e540:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e544:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e548:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e54c:	f88d 3020 	strb.w	r3, [sp, #32]
 800e550:	f7ff fe08 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e554:	464a      	mov	r2, r9
 800e556:	4603      	mov	r3, r0
 800e558:	4641      	mov	r1, r8
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7ff ffc0 	bl	800e4e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e560:	4b19      	ldr	r3, [pc, #100]	; (800e5c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800e562:	9005      	str	r0, [sp, #20]
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e56a:	f7fa fedb 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800e56e:	6803      	ldr	r3, [r0, #0]
 800e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e572:	4798      	blx	r3
 800e574:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800e578:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800e57c:	b107      	cbz	r7, 800e580 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800e57e:	b936      	cbnz	r6, 800e58e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800e580:	4b12      	ldr	r3, [pc, #72]	; (800e5cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800e582:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800e586:	4a12      	ldr	r2, [pc, #72]	; (800e5d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800e588:	4812      	ldr	r0, [pc, #72]	; (800e5d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800e58a:	f00e fbe7 	bl	801cd5c <__assert_func>
 800e58e:	6823      	ldr	r3, [r4, #0]
 800e590:	4620      	mov	r0, r4
 800e592:	9e01      	ldr	r6, [sp, #4]
 800e594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e596:	4798      	blx	r3
 800e598:	4230      	tst	r0, r6
 800e59a:	d104      	bne.n	800e5a6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800e59c:	4b0e      	ldr	r3, [pc, #56]	; (800e5d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 800e59e:	f240 11e7 	movw	r1, #487	; 0x1e7
 800e5a2:	4a0b      	ldr	r2, [pc, #44]	; (800e5d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800e5a4:	e7f0      	b.n	800e588 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800e5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5a8:	a901      	add	r1, sp, #4
 800e5aa:	6860      	ldr	r0, [r4, #4]
 800e5ac:	9304      	str	r3, [sp, #16]
 800e5ae:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e5b2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800e5b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800e5ba:	6803      	ldr	r3, [r0, #0]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	4798      	blx	r3
 800e5c0:	b00b      	add	sp, #44	; 0x2c
 800e5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5c6:	bf00      	nop
 800e5c8:	240c3d3c 	.word	0x240c3d3c
 800e5cc:	0801f717 	.word	0x0801f717
 800e5d0:	0801fb23 	.word	0x0801fb23
 800e5d4:	0801f8c2 	.word	0x0801f8c2
 800e5d8:	0801f74f 	.word	0x0801f74f

0800e5dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5de:	b08d      	sub	sp, #52	; 0x34
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	466b      	mov	r3, sp
 800e5e4:	e883 0006 	stmia.w	r3, {r1, r2}
 800e5e8:	4b21      	ldr	r3, [pc, #132]	; (800e670 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	b933      	cbnz	r3, 800e5fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800e5ee:	4b21      	ldr	r3, [pc, #132]	; (800e674 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800e5f0:	f240 2141 	movw	r1, #577	; 0x241
 800e5f4:	4a20      	ldr	r2, [pc, #128]	; (800e678 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800e5f6:	4821      	ldr	r0, [pc, #132]	; (800e67c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800e5f8:	f00e fbb0 	bl	801cd5c <__assert_func>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	2501      	movs	r5, #1
 800e600:	f8bd 6000 	ldrh.w	r6, [sp]
 800e604:	9306      	str	r3, [sp, #24]
 800e606:	6803      	ldr	r3, [r0, #0]
 800e608:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e60c:	9503      	str	r5, [sp, #12]
 800e60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e610:	4798      	blx	r3
 800e612:	463a      	mov	r2, r7
 800e614:	4631      	mov	r1, r6
 800e616:	4603      	mov	r3, r0
 800e618:	4620      	mov	r0, r4
 800e61a:	f7ff ff61 	bl	800e4e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e61e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e620:	9004      	str	r0, [sp, #16]
 800e622:	9307      	str	r3, [sp, #28]
 800e624:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e628:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e62c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e630:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e634:	4b12      	ldr	r3, [pc, #72]	; (800e680 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e63c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e640:	f7fa fe70 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800e644:	6803      	ldr	r3, [r0, #0]
 800e646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e648:	4798      	blx	r3
 800e64a:	23ff      	movs	r3, #255	; 0xff
 800e64c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e650:	a903      	add	r1, sp, #12
 800e652:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e656:	6860      	ldr	r0, [r4, #4]
 800e658:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e65c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e660:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e664:	6803      	ldr	r3, [r0, #0]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	4798      	blx	r3
 800e66a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e66c:	b00d      	add	sp, #52	; 0x34
 800e66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e670:	240c3d41 	.word	0x240c3d41
 800e674:	0801f816 	.word	0x0801f816
 800e678:	0801fbcd 	.word	0x0801fbcd
 800e67c:	0801f8c2 	.word	0x0801f8c2
 800e680:	240c3d3c 	.word	0x240c3d3c

0800e684 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e688:	b08c      	sub	sp, #48	; 0x30
 800e68a:	461e      	mov	r6, r3
 800e68c:	2300      	movs	r3, #0
 800e68e:	4604      	mov	r4, r0
 800e690:	466d      	mov	r5, sp
 800e692:	9306      	str	r3, [sp, #24]
 800e694:	6803      	ldr	r3, [r0, #0]
 800e696:	e885 0006 	stmia.w	r5, {r1, r2}
 800e69a:	2501      	movs	r5, #1
 800e69c:	f8bd 7000 	ldrh.w	r7, [sp]
 800e6a0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e6a4:	9503      	str	r5, [sp, #12]
 800e6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a8:	4798      	blx	r3
 800e6aa:	4642      	mov	r2, r8
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7ff ff15 	bl	800e4e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e6b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e6ba:	9004      	str	r0, [sp, #16]
 800e6bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e6c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e6c4:	9607      	str	r6, [sp, #28]
 800e6c6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e6ca:	4b10      	ldr	r3, [pc, #64]	; (800e70c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e6cc:	881b      	ldrh	r3, [r3, #0]
 800e6ce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e6d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e6d4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e6d8:	f7fa fe24 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 800e6dc:	6803      	ldr	r3, [r0, #0]
 800e6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e0:	4798      	blx	r3
 800e6e2:	23ff      	movs	r3, #255	; 0xff
 800e6e4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e6e8:	a903      	add	r1, sp, #12
 800e6ea:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e6ee:	6860      	ldr	r0, [r4, #4]
 800e6f0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e6f4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e6f8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e6fc:	6803      	ldr	r3, [r0, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	4798      	blx	r3
 800e702:	4630      	mov	r0, r6
 800e704:	b00c      	add	sp, #48	; 0x30
 800e706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e70a:	bf00      	nop
 800e70c:	240c3d3c 	.word	0x240c3d3c

0800e710 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e712:	b085      	sub	sp, #20
 800e714:	4605      	mov	r5, r0
 800e716:	ac02      	add	r4, sp, #8
 800e718:	e884 0006 	stmia.w	r4, {r1, r2}
 800e71c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e720:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e724:	f7ff fd1e 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e728:	4631      	mov	r1, r6
 800e72a:	4603      	mov	r3, r0
 800e72c:	463a      	mov	r2, r7
 800e72e:	4628      	mov	r0, r5
 800e730:	f7ff fed6 	bl	800e4e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e734:	4a05      	ldr	r2, [pc, #20]	; (800e74c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e736:	682b      	ldr	r3, [r5, #0]
 800e738:	8812      	ldrh	r2, [r2, #0]
 800e73a:	9200      	str	r2, [sp, #0]
 800e73c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800e73e:	4603      	mov	r3, r0
 800e740:	4628      	mov	r0, r5
 800e742:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e746:	47b0      	blx	r6
 800e748:	b005      	add	sp, #20
 800e74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e74c:	240c3d3c 	.word	0x240c3d3c

0800e750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e750:	b570      	push	{r4, r5, r6, lr}
 800e752:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800e756:	4604      	mov	r4, r0
 800e758:	b19b      	cbz	r3, 800e782 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e75a:	2002      	movs	r0, #2
 800e75c:	f7fc feb6 	bl	800b4cc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e760:	2300      	movs	r3, #0
 800e762:	4620      	mov	r0, r4
 800e764:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800e768:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800e76c:	6823      	ldr	r3, [r4, #0]
 800e76e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800e772:	f7ff fcf7 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e776:	4601      	mov	r1, r0
 800e778:	4620      	mov	r0, r4
 800e77a:	462b      	mov	r3, r5
 800e77c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e780:	4718      	bx	r3
 800e782:	bd70      	pop	{r4, r5, r6, pc}

0800e784 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e784:	b538      	push	{r3, r4, r5, lr}
 800e786:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800e78a:	4604      	mov	r4, r0
 800e78c:	460d      	mov	r5, r1
 800e78e:	428b      	cmp	r3, r1
 800e790:	d006      	beq.n	800e7a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e792:	6803      	ldr	r3, [r0, #0]
 800e794:	b929      	cbnz	r1, 800e7a2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e796:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e79a:	4798      	blx	r3
 800e79c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800e7a0:	bd38      	pop	{r3, r4, r5, pc}
 800e7a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e7a6:	e7f8      	b.n	800e79a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e7a8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e7a8:	4b0d      	ldr	r3, [pc, #52]	; (800e7e0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e7aa:	b510      	push	{r4, lr}
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	b95b      	cbnz	r3, 800e7ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e7b2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	d007      	beq.n	800e7ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e7ba:	6840      	ldr	r0, [r0, #4]
 800e7bc:	f000 f938 	bl	800ea30 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e7c0:	b118      	cbz	r0, 800e7ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e7c2:	6862      	ldr	r2, [r4, #4]
 800e7c4:	7a53      	ldrb	r3, [r2, #9]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0fc      	beq.n	800e7c4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e7ca:	f7fd f981 	bl	800bad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	f7ff ffd7 	bl	800e784 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f7ff fcc4 	bl	800e164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e7dc:	bd10      	pop	{r4, pc}
 800e7de:	bf00      	nop
 800e7e0:	240c3d40 	.word	0x240c3d40

0800e7e4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800e7e4:	4770      	bx	lr

0800e7e6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	4770      	bx	lr

0800e7ea <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e7ea:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e7ee:	1a13      	subs	r3, r2, r0
 800e7f0:	4258      	negs	r0, r3
 800e7f2:	4158      	adcs	r0, r3
 800e7f4:	4770      	bx	lr

0800e7f6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e7f6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e7fa:	1a9b      	subs	r3, r3, r2
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	bfdc      	itt	le
 800e800:	6882      	ldrle	r2, [r0, #8]
 800e802:	189b      	addle	r3, r3, r2
 800e804:	2b01      	cmp	r3, #1
 800e806:	bfcc      	ite	gt
 800e808:	2000      	movgt	r0, #0
 800e80a:	2001      	movle	r0, #1
 800e80c:	4770      	bx	lr

0800e80e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e80e:	6902      	ldr	r2, [r0, #16]
 800e810:	6843      	ldr	r3, [r0, #4]
 800e812:	2024      	movs	r0, #36	; 0x24
 800e814:	fb00 3002 	mla	r0, r0, r2, r3
 800e818:	4770      	bx	lr

0800e81a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e81a:	6803      	ldr	r3, [r0, #0]
 800e81c:	691b      	ldr	r3, [r3, #16]
 800e81e:	4718      	bx	r3

0800e820 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e820:	4770      	bx	lr

0800e822 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e822:	4770      	bx	lr

0800e824 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e824:	2301      	movs	r3, #1
 800e826:	b570      	push	{r4, r5, r6, lr}
 800e828:	7203      	strb	r3, [r0, #8]
 800e82a:	4604      	mov	r4, r0
 800e82c:	6840      	ldr	r0, [r0, #4]
 800e82e:	6803      	ldr	r3, [r0, #0]
 800e830:	699b      	ldr	r3, [r3, #24]
 800e832:	4798      	blx	r3
 800e834:	6803      	ldr	r3, [r0, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	2b40      	cmp	r3, #64	; 0x40
 800e83a:	d039      	beq.n	800e8b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e83c:	d815      	bhi.n	800e86a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800e83e:	2b04      	cmp	r3, #4
 800e840:	d022      	beq.n	800e888 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e842:	d808      	bhi.n	800e856 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e844:	2b01      	cmp	r3, #1
 800e846:	d033      	beq.n	800e8b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e848:	2b02      	cmp	r3, #2
 800e84a:	d108      	bne.n	800e85e <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	4620      	mov	r0, r4
 800e850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e852:	4798      	blx	r3
 800e854:	e025      	b.n	800e8a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800e856:	2b08      	cmp	r3, #8
 800e858:	d01e      	beq.n	800e898 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800e85a:	2b20      	cmp	r3, #32
 800e85c:	d028      	beq.n	800e8b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e85e:	4b17      	ldr	r3, [pc, #92]	; (800e8bc <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800e860:	2188      	movs	r1, #136	; 0x88
 800e862:	4a17      	ldr	r2, [pc, #92]	; (800e8c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800e864:	4817      	ldr	r0, [pc, #92]	; (800e8c4 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800e866:	f00e fa79 	bl	801cd5c <__assert_func>
 800e86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e86e:	d01f      	beq.n	800e8b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e870:	d804      	bhi.n	800e87c <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800e872:	2b80      	cmp	r3, #128	; 0x80
 800e874:	d01c      	beq.n	800e8b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e87a:	e7ef      	b.n	800e85c <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800e87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e880:	d016      	beq.n	800e8b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e886:	e7e0      	b.n	800e84a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	7f01      	ldrb	r1, [r0, #28]
 800e88c:	4620      	mov	r0, r4
 800e88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e890:	4798      	blx	r3
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e896:	e006      	b.n	800e8a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e898:	6823      	ldr	r3, [r4, #0]
 800e89a:	7f01      	ldrb	r1, [r0, #28]
 800e89c:	4620      	mov	r0, r4
 800e89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a0:	4798      	blx	r3
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8ae:	4718      	bx	r3
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b6:	4798      	blx	r3
 800e8b8:	e7eb      	b.n	800e892 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800e8ba:	bf00      	nop
 800e8bc:	0801fe32 	.word	0x0801fe32
 800e8c0:	0801ff44 	.word	0x0801ff44
 800e8c4:	0801fe57 	.word	0x0801fe57

0800e8c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	460e      	mov	r6, r1
 800e8ce:	6860      	ldr	r0, [r4, #4]
 800e8d0:	6803      	ldr	r3, [r0, #0]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	4798      	blx	r3
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d1f9      	bne.n	800e8ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e8da:	4d0d      	ldr	r5, [pc, #52]	; (800e910 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e8dc:	6828      	ldr	r0, [r5, #0]
 800e8de:	6803      	ldr	r3, [r0, #0]
 800e8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8e2:	4798      	blx	r3
 800e8e4:	f7fd f936 	bl	800bb54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e8e8:	6828      	ldr	r0, [r5, #0]
 800e8ea:	2101      	movs	r1, #1
 800e8ec:	f7ff ff4a 	bl	800e784 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e8f0:	6860      	ldr	r0, [r4, #4]
 800e8f2:	4631      	mov	r1, r6
 800e8f4:	6803      	ldr	r3, [r0, #0]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	4798      	blx	r3
 800e8fa:	6823      	ldr	r3, [r4, #0]
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e900:	4798      	blx	r3
 800e902:	6828      	ldr	r0, [r5, #0]
 800e904:	6803      	ldr	r3, [r0, #0]
 800e906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e90a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e90c:	4718      	bx	r3
 800e90e:	bf00      	nop
 800e910:	240c3d44 	.word	0x240c3d44

0800e914 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e914:	b508      	push	{r3, lr}
 800e916:	f7fd f8db 	bl	800bad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e91a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e91e:	f7fd b8f7 	b.w	800bb10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e922 <_ZN8touchgfx13DMA_Interface5startEv>:
 800e922:	b510      	push	{r4, lr}
 800e924:	4604      	mov	r4, r0
 800e926:	6840      	ldr	r0, [r0, #4]
 800e928:	6803      	ldr	r3, [r0, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4798      	blx	r3
 800e92e:	b948      	cbnz	r0, 800e944 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e930:	7a63      	ldrb	r3, [r4, #9]
 800e932:	b13b      	cbz	r3, 800e944 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e934:	7a23      	ldrb	r3, [r4, #8]
 800e936:	b92b      	cbnz	r3, 800e944 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	4620      	mov	r0, r4
 800e93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e942:	4718      	bx	r3
 800e944:	bd10      	pop	{r4, pc}
	...

0800e948 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e948:	b510      	push	{r4, lr}
 800e94a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e94e:	1ad2      	subs	r2, r2, r3
 800e950:	2a00      	cmp	r2, #0
 800e952:	bfdc      	itt	le
 800e954:	6884      	ldrle	r4, [r0, #8]
 800e956:	1912      	addle	r2, r2, r4
 800e958:	2a01      	cmp	r2, #1
 800e95a:	dd17      	ble.n	800e98c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 800e95c:	6842      	ldr	r2, [r0, #4]
 800e95e:	2424      	movs	r4, #36	; 0x24
 800e960:	fb04 2303 	mla	r3, r4, r3, r2
 800e964:	f101 0220 	add.w	r2, r1, #32
 800e968:	f851 4b04 	ldr.w	r4, [r1], #4
 800e96c:	4291      	cmp	r1, r2
 800e96e:	f843 4b04 	str.w	r4, [r3], #4
 800e972:	d1f9      	bne.n	800e968 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e974:	780a      	ldrb	r2, [r1, #0]
 800e976:	701a      	strb	r2, [r3, #0]
 800e978:	68c3      	ldr	r3, [r0, #12]
 800e97a:	6882      	ldr	r2, [r0, #8]
 800e97c:	f3bf 8f5b 	dmb	ish
 800e980:	3301      	adds	r3, #1
 800e982:	429a      	cmp	r2, r3
 800e984:	bfd8      	it	le
 800e986:	1a9b      	suble	r3, r3, r2
 800e988:	60c3      	str	r3, [r0, #12]
 800e98a:	bd10      	pop	{r4, pc}
 800e98c:	4b02      	ldr	r3, [pc, #8]	; (800e998 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800e98e:	2136      	movs	r1, #54	; 0x36
 800e990:	4a02      	ldr	r2, [pc, #8]	; (800e99c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800e992:	4803      	ldr	r0, [pc, #12]	; (800e9a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800e994:	f00e f9e2 	bl	801cd5c <__assert_func>
 800e998:	0801fe7d 	.word	0x0801fe7d
 800e99c:	0801ff74 	.word	0x0801ff74
 800e9a0:	0801fe57 	.word	0x0801fe57

0800e9a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e9a4:	b510      	push	{r4, lr}
 800e9a6:	6803      	ldr	r3, [r0, #0]
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4798      	blx	r3
 800e9ae:	b128      	cbz	r0, 800e9bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800e9b0:	4b07      	ldr	r3, [pc, #28]	; (800e9d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800e9b2:	213c      	movs	r1, #60	; 0x3c
 800e9b4:	4a07      	ldr	r2, [pc, #28]	; (800e9d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800e9b6:	4808      	ldr	r0, [pc, #32]	; (800e9d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800e9b8:	f00e f9d0 	bl	801cd5c <__assert_func>
 800e9bc:	6923      	ldr	r3, [r4, #16]
 800e9be:	68a2      	ldr	r2, [r4, #8]
 800e9c0:	f3bf 8f5b 	dmb	ish
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	bfd8      	it	le
 800e9ca:	1a9b      	suble	r3, r3, r2
 800e9cc:	6123      	str	r3, [r4, #16]
 800e9ce:	bd10      	pop	{r4, pc}
 800e9d0:	0801fea0 	.word	0x0801fea0
 800e9d4:	0801ffc2 	.word	0x0801ffc2
 800e9d8:	0801fe57 	.word	0x0801fe57

0800e9dc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e9dc:	b570      	push	{r4, r5, r6, lr}
 800e9de:	4604      	mov	r4, r0
 800e9e0:	6840      	ldr	r0, [r0, #4]
 800e9e2:	6803      	ldr	r3, [r0, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4798      	blx	r3
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	b930      	cbnz	r0, 800e9fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e9ec:	7a23      	ldrb	r3, [r4, #8]
 800e9ee:	b123      	cbz	r3, 800e9fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e9f0:	6860      	ldr	r0, [r4, #4]
 800e9f2:	6803      	ldr	r3, [r0, #0]
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	4798      	blx	r3
 800e9f8:	7225      	strb	r5, [r4, #8]
 800e9fa:	6860      	ldr	r0, [r4, #4]
 800e9fc:	6803      	ldr	r3, [r0, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4798      	blx	r3
 800ea02:	b928      	cbnz	r0, 800ea10 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ea04:	6823      	ldr	r3, [r4, #0]
 800ea06:	4620      	mov	r0, r4
 800ea08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea0e:	4718      	bx	r3
 800ea10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea14:	f7fd b8aa 	b.w	800bb6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ea18 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	6082      	str	r2, [r0, #8]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	4c03      	ldr	r4, [pc, #12]	; (800ea2c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800ea20:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800ea24:	e9c0 4100 	strd	r4, r1, [r0]
 800ea28:	bd10      	pop	{r4, pc}
 800ea2a:	bf00      	nop
 800ea2c:	0801ff28 	.word	0x0801ff28

0800ea30 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ea30:	6840      	ldr	r0, [r0, #4]
 800ea32:	6803      	ldr	r3, [r0, #0]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4718      	bx	r3

0800ea38 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 800ea38:	f101 0344 	add.w	r3, r1, #68	; 0x44
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	cb03      	ldmia	r3!, {r0, r1}
 800ea40:	6010      	str	r0, [r2, #0]
 800ea42:	4610      	mov	r0, r2
 800ea44:	6051      	str	r1, [r2, #4]
 800ea46:	4770      	bx	lr

0800ea48 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 800ea48:	b507      	push	{r0, r1, r2, lr}
 800ea4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ea4e:	ab01      	add	r3, sp, #4
 800ea50:	6809      	ldr	r1, [r1, #0]
 800ea52:	6800      	ldr	r0, [r0, #0]
 800ea54:	f002 fe3c 	bl	80116d0 <_ZN8touchgfx6muldivElllRl>
 800ea58:	b003      	add	sp, #12
 800ea5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ea60 <_ZN8touchgfx7CWRUtil4sineEi>:
 800ea60:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ea64:	fb90 f3f2 	sdiv	r3, r0, r2
 800ea68:	fb03 0312 	mls	r3, r3, r2, r0
 800ea6c:	4413      	add	r3, r2
 800ea6e:	fb93 f0f2 	sdiv	r0, r3, r2
 800ea72:	fb02 3010 	mls	r0, r2, r0, r3
 800ea76:	4b0a      	ldr	r3, [pc, #40]	; (800eaa0 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 800ea78:	285a      	cmp	r0, #90	; 0x5a
 800ea7a:	dc02      	bgt.n	800ea82 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 800ea7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800ea80:	4770      	bx	lr
 800ea82:	28b4      	cmp	r0, #180	; 0xb4
 800ea84:	dc02      	bgt.n	800ea8c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 800ea86:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 800ea8a:	e7f7      	b.n	800ea7c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 800ea8c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 800ea90:	bfd4      	ite	le
 800ea92:	38b4      	suble	r0, #180	; 0xb4
 800ea94:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 800ea98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800ea9c:	4240      	negs	r0, r0
 800ea9e:	4770      	bx	lr
 800eaa0:	0801fff2 	.word	0x0801fff2

0800eaa4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 800eaa4:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 800eaa8:	fb90 f3f2 	sdiv	r3, r0, r2
 800eaac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eaae:	fb03 0012 	mls	r0, r3, r2, r0
 800eab2:	4410      	add	r0, r2
 800eab4:	fb90 f4f2 	sdiv	r4, r0, r2
 800eab8:	fb02 0414 	mls	r4, r2, r4, r0
 800eabc:	f004 061f 	and.w	r6, r4, #31
 800eac0:	1164      	asrs	r4, r4, #5
 800eac2:	4620      	mov	r0, r4
 800eac4:	f7ff ffcc 	bl	800ea60 <_ZN8touchgfx7CWRUtil4sineEi>
 800eac8:	4605      	mov	r5, r0
 800eaca:	b90e      	cbnz	r6, 800ead0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 800eacc:	b002      	add	sp, #8
 800eace:	bd70      	pop	{r4, r5, r6, pc}
 800ead0:	1c60      	adds	r0, r4, #1
 800ead2:	f7ff ffc5 	bl	800ea60 <_ZN8touchgfx7CWRUtil4sineEi>
 800ead6:	ab01      	add	r3, sp, #4
 800ead8:	2220      	movs	r2, #32
 800eada:	4631      	mov	r1, r6
 800eadc:	1b40      	subs	r0, r0, r5
 800eade:	f002 fdf7 	bl	80116d0 <_ZN8touchgfx6muldivElllRl>
 800eae2:	4428      	add	r0, r5
 800eae4:	e7f2      	b.n	800eacc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

0800eae6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 800eae6:	b507      	push	{r0, r1, r2, lr}
 800eae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eaec:	ab01      	add	r3, sp, #4
 800eaee:	0140      	lsls	r0, r0, #5
 800eaf0:	f002 fdee 	bl	80116d0 <_ZN8touchgfx6muldivElllRl>
 800eaf4:	2320      	movs	r3, #32
 800eaf6:	fb90 f0f3 	sdiv	r0, r0, r3
 800eafa:	b003      	add	sp, #12
 800eafc:	f85d fb04 	ldr.w	pc, [sp], #4

0800eb00 <_ZN8touchgfx13AbstractShapeC1Ev>:
 800eb00:	b510      	push	{r4, lr}
 800eb02:	4604      	mov	r4, r0
 800eb04:	f000 fb22 	bl	800f14c <_ZN8touchgfx12CanvasWidgetC1Ev>
 800eb08:	4b07      	ldr	r3, [pc, #28]	; (800eb28 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 800eb0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb0e:	4620      	mov	r0, r4
 800eb10:	6023      	str	r3, [r4, #0]
 800eb12:	2300      	movs	r3, #0
 800eb14:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
 800eb18:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 800eb1c:	63a3      	str	r3, [r4, #56]	; 0x38
 800eb1e:	60a3      	str	r3, [r4, #8]
 800eb20:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	bf00      	nop
 800eb28:	080200b0 	.word	0x080200b0

0800eb2c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 800eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	2500      	movs	r5, #0
 800eb32:	6803      	ldr	r3, [r0, #0]
 800eb34:	b087      	sub	sp, #28
 800eb36:	4604      	mov	r4, r0
 800eb38:	462e      	mov	r6, r5
 800eb3a:	46a8      	mov	r8, r5
 800eb3c:	462f      	mov	r7, r5
 800eb3e:	46a9      	mov	r9, r5
 800eb40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb42:	4798      	blx	r3
 800eb44:	9000      	str	r0, [sp, #0]
 800eb46:	9b00      	ldr	r3, [sp, #0]
 800eb48:	429d      	cmp	r5, r3
 800eb4a:	da7f      	bge.n	800ec4c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x120>
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	4629      	mov	r1, r5
 800eb50:	4620      	mov	r0, r4
 800eb52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb56:	4798      	blx	r3
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	4682      	mov	sl, r0
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb62:	4620      	mov	r0, r4
 800eb64:	4798      	blx	r3
 800eb66:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb68:	4683      	mov	fp, r0
 800eb6a:	4650      	mov	r0, sl
 800eb6c:	f7ff ffbb 	bl	800eae6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 800eb70:	9002      	str	r0, [sp, #8]
 800eb72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800eb74:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 800eb78:	f7ff ff94 	bl	800eaa4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800eb7c:	a903      	add	r1, sp, #12
 800eb7e:	9003      	str	r0, [sp, #12]
 800eb80:	a802      	add	r0, sp, #8
 800eb82:	f7ff ff61 	bl	800ea48 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800eb86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800eb88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb8a:	4402      	add	r2, r0
 800eb8c:	4658      	mov	r0, fp
 800eb8e:	9201      	str	r2, [sp, #4]
 800eb90:	f7ff ffa9 	bl	800eae6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 800eb94:	9004      	str	r0, [sp, #16]
 800eb96:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800eb98:	f7ff ff84 	bl	800eaa4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800eb9c:	a905      	add	r1, sp, #20
 800eb9e:	9005      	str	r0, [sp, #20]
 800eba0:	a804      	add	r0, sp, #16
 800eba2:	f7ff ff51 	bl	800ea48 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800eba6:	9a01      	ldr	r2, [sp, #4]
 800eba8:	1a12      	subs	r2, r2, r0
 800ebaa:	b125      	cbz	r5, 800ebb6 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8a>
 800ebac:	2320      	movs	r3, #32
 800ebae:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebb2:	429f      	cmp	r7, r3
 800ebb4:	da03      	bge.n	800ebbe <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x92>
 800ebb6:	2720      	movs	r7, #32
 800ebb8:	fb92 f7f7 	sdiv	r7, r2, r7
 800ebbc:	b125      	cbz	r5, 800ebc8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x9c>
 800ebbe:	2320      	movs	r3, #32
 800ebc0:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebc4:	4599      	cmp	r9, r3
 800ebc6:	dd03      	ble.n	800ebd0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa4>
 800ebc8:	f04f 0920 	mov.w	r9, #32
 800ebcc:	fb92 f9f9 	sdiv	r9, r2, r9
 800ebd0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ebd2:	4658      	mov	r0, fp
 800ebd4:	9201      	str	r2, [sp, #4]
 800ebd6:	f7ff ff86 	bl	800eae6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 800ebda:	9002      	str	r0, [sp, #8]
 800ebdc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ebde:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 800ebe2:	f7ff ff5f 	bl	800eaa4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800ebe6:	a903      	add	r1, sp, #12
 800ebe8:	9003      	str	r0, [sp, #12]
 800ebea:	a802      	add	r0, sp, #8
 800ebec:	f7ff ff2c 	bl	800ea48 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800ebf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebf2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ebf4:	eb00 0b03 	add.w	fp, r0, r3
 800ebf8:	4650      	mov	r0, sl
 800ebfa:	f7ff ff74 	bl	800eae6 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 800ebfe:	9004      	str	r0, [sp, #16]
 800ec00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ec02:	f7ff ff4f 	bl	800eaa4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800ec06:	a905      	add	r1, sp, #20
 800ec08:	9005      	str	r0, [sp, #20]
 800ec0a:	a804      	add	r0, sp, #16
 800ec0c:	f7ff ff1c 	bl	800ea48 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800ec10:	9a01      	ldr	r2, [sp, #4]
 800ec12:	eb00 030b 	add.w	r3, r0, fp
 800ec16:	b125      	cbz	r5, 800ec22 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf6>
 800ec18:	2120      	movs	r1, #32
 800ec1a:	fb93 f1f1 	sdiv	r1, r3, r1
 800ec1e:	428e      	cmp	r6, r1
 800ec20:	da03      	bge.n	800ec2a <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfe>
 800ec22:	2620      	movs	r6, #32
 800ec24:	fb93 f6f6 	sdiv	r6, r3, r6
 800ec28:	b125      	cbz	r5, 800ec34 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x108>
 800ec2a:	2120      	movs	r1, #32
 800ec2c:	fb93 f1f1 	sdiv	r1, r3, r1
 800ec30:	4588      	cmp	r8, r1
 800ec32:	dd03      	ble.n	800ec3c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x110>
 800ec34:	f04f 0820 	mov.w	r8, #32
 800ec38:	fb93 f8f8 	sdiv	r8, r3, r8
 800ec3c:	6821      	ldr	r1, [r4, #0]
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f8d1 a088 	ldr.w	sl, [r1, #136]	; 0x88
 800ec44:	4629      	mov	r1, r5
 800ec46:	47d0      	blx	sl
 800ec48:	3501      	adds	r5, #1
 800ec4a:	e77c      	b.n	800eb46 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 800ec4c:	3701      	adds	r7, #1
 800ec4e:	3601      	adds	r6, #1
 800ec50:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 800ec54:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 800ec58:	eba7 0909 	sub.w	r9, r7, r9
 800ec5c:	eba6 0808 	sub.w	r8, r6, r8
 800ec60:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
 800ec64:	f8a4 804a 	strh.w	r8, [r4, #74]	; 0x4a
 800ec68:	b007      	add	sp, #28
 800ec6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec6e <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 800ec6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec70:	b0b1      	sub	sp, #196	; 0xc4
 800ec72:	4604      	mov	r4, r0
 800ec74:	460a      	mov	r2, r1
 800ec76:	4601      	mov	r1, r0
 800ec78:	a801      	add	r0, sp, #4
 800ec7a:	f00c fc73 	bl	801b564 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	4620      	mov	r0, r4
 800ec82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec84:	4798      	blx	r3
 800ec86:	4606      	mov	r6, r0
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d033      	beq.n	800ecf4 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x86>
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4620      	mov	r0, r4
 800ec92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec96:	4798      	blx	r3
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	4605      	mov	r5, r0
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eca2:	4620      	mov	r0, r4
 800eca4:	4798      	blx	r3
 800eca6:	4629      	mov	r1, r5
 800eca8:	2501      	movs	r5, #1
 800ecaa:	4602      	mov	r2, r0
 800ecac:	a801      	add	r0, sp, #4
 800ecae:	f00c fe24 	bl	801b8fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800ecb2:	42b5      	cmp	r5, r6
 800ecb4:	da13      	bge.n	800ecde <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x70>
 800ecb6:	6823      	ldr	r3, [r4, #0]
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecc0:	4798      	blx	r3
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	4629      	mov	r1, r5
 800ecc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eccc:	4620      	mov	r0, r4
 800ecce:	4798      	blx	r3
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	a801      	add	r0, sp, #4
 800ecd6:	f00c fd9f 	bl	801b818 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800ecda:	3501      	adds	r5, #1
 800ecdc:	e7e9      	b.n	800ecb2 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x44>
 800ecde:	21ff      	movs	r1, #255	; 0xff
 800ece0:	a801      	add	r0, sp, #4
 800ece2:	f00c ff0e 	bl	801bb02 <_ZN8touchgfx6Canvas6renderEh>
 800ece6:	4604      	mov	r4, r0
 800ece8:	a801      	add	r0, sp, #4
 800ecea:	f00c ff49 	bl	801bb80 <_ZN8touchgfx6CanvasD1Ev>
 800ecee:	4620      	mov	r0, r4
 800ecf0:	b031      	add	sp, #196	; 0xc4
 800ecf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf4:	2401      	movs	r4, #1
 800ecf6:	e7f7      	b.n	800ece8 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x7a>

0800ecf8 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 800ecf8:	2001      	movs	r0, #1
 800ecfa:	4770      	bx	lr

0800ecfc <_ZN8touchgfx21AbstractPainterRGB88810renderNextERhS1_S1_S1_>:
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	4770      	bx	lr

0800ed00 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 800ed00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed04:	460d      	mov	r5, r1
 800ed06:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	4690      	mov	r8, r2
 800ed0e:	4411      	add	r1, r2
 800ed10:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800ed14:	4699      	mov	r9, r3
 800ed16:	6803      	ldr	r3, [r0, #0]
 800ed18:	60c1      	str	r1, [r0, #12]
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed1e:	440a      	add	r2, r1
 800ed20:	6102      	str	r2, [r0, #16]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 800ed28:	4798      	blx	r3
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	d03a      	beq.n	800eda4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 800ed2e:	44c8      	add	r8, r9
 800ed30:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800ed34:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800ed38:	4445      	add	r5, r8
 800ed3a:	442e      	add	r6, r5
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	f10d 020f 	add.w	r2, sp, #15
 800ed42:	a903      	add	r1, sp, #12
 800ed44:	4620      	mov	r0, r4
 800ed46:	9200      	str	r2, [sp, #0]
 800ed48:	f10d 020d 	add.w	r2, sp, #13
 800ed4c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ed50:	f10d 030e 	add.w	r3, sp, #14
 800ed54:	47c0      	blx	r8
 800ed56:	b1f0      	cbz	r0, 800ed96 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 800ed58:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ed5c:	7a20      	ldrb	r0, [r4, #8]
 800ed5e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ed62:	4358      	muls	r0, r3
 800ed64:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800ed68:	1c43      	adds	r3, r0, #1
 800ed6a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 800ed6e:	7838      	ldrb	r0, [r7, #0]
 800ed70:	121b      	asrs	r3, r3, #8
 800ed72:	fb10 f003 	smulbb	r0, r0, r3
 800ed76:	b283      	uxth	r3, r0
 800ed78:	1c58      	adds	r0, r3, #1
 800ed7a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	1200      	asrs	r0, r0, #8
 800ed82:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800ed86:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800ed8a:	28ff      	cmp	r0, #255	; 0xff
 800ed8c:	d10d      	bne.n	800edaa <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 800ed8e:	9100      	str	r1, [sp, #0]
 800ed90:	4629      	mov	r1, r5
 800ed92:	4620      	mov	r0, r4
 800ed94:	47c0      	blx	r8
 800ed96:	68e3      	ldr	r3, [r4, #12]
 800ed98:	3503      	adds	r5, #3
 800ed9a:	3701      	adds	r7, #1
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	42ae      	cmp	r6, r5
 800eda0:	60e3      	str	r3, [r4, #12]
 800eda2:	d8cb      	bhi.n	800ed3c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 800eda4:	b005      	add	sp, #20
 800eda6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edaa:	fa1f fc80 	uxth.w	ip, r0
 800edae:	43c0      	mvns	r0, r0
 800edb0:	f895 e002 	ldrb.w	lr, [r5, #2]
 800edb4:	fb12 f20c 	smulbb	r2, r2, ip
 800edb8:	b2c0      	uxtb	r0, r0
 800edba:	fb13 f30c 	smulbb	r3, r3, ip
 800edbe:	fb0e 2200 	mla	r2, lr, r0, r2
 800edc2:	f895 e001 	ldrb.w	lr, [r5, #1]
 800edc6:	fb11 f10c 	smulbb	r1, r1, ip
 800edca:	fb0e 3300 	mla	r3, lr, r0, r3
 800edce:	f895 e000 	ldrb.w	lr, [r5]
 800edd2:	b292      	uxth	r2, r2
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	fb0e 1000 	mla	r0, lr, r0, r1
 800edda:	1c59      	adds	r1, r3, #1
 800eddc:	b280      	uxth	r0, r0
 800edde:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800ede2:	1c51      	adds	r1, r2, #1
 800ede4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800ede8:	1c41      	adds	r1, r0, #1
 800edea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800edee:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 800edf2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800edf6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800edfa:	9000      	str	r0, [sp, #0]
 800edfc:	e7c8      	b.n	800ed90 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0800edfe <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 800edfe:	f89d 0000 	ldrb.w	r0, [sp]
 800ee02:	704b      	strb	r3, [r1, #1]
 800ee04:	7008      	strb	r0, [r1, #0]
 800ee06:	708a      	strb	r2, [r1, #2]
 800ee08:	4770      	bx	lr

0800ee0a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 800ee0a:	4413      	add	r3, r2
 800ee0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ee10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee12:	4419      	add	r1, r3
 800ee14:	7a03      	ldrb	r3, [r0, #8]
 800ee16:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 800ee1a:	2bff      	cmp	r3, #255	; 0xff
 800ee1c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800ee20:	440e      	add	r6, r1
 800ee22:	d13d      	bne.n	800eea0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 800ee24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee28:	3103      	adds	r1, #3
 800ee2a:	7d87      	ldrb	r7, [r0, #22]
 800ee2c:	2bff      	cmp	r3, #255	; 0xff
 800ee2e:	d10a      	bne.n	800ee46 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 800ee30:	f801 7c03 	strb.w	r7, [r1, #-3]
 800ee34:	7d43      	ldrb	r3, [r0, #21]
 800ee36:	f801 3c02 	strb.w	r3, [r1, #-2]
 800ee3a:	7d03      	ldrb	r3, [r0, #20]
 800ee3c:	f801 3c01 	strb.w	r3, [r1, #-1]
 800ee40:	428e      	cmp	r6, r1
 800ee42:	d8ef      	bhi.n	800ee24 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 800ee44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	43db      	mvns	r3, r3
 800ee4a:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 800ee4e:	fb17 f702 	smulbb	r7, r7, r2
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	fb05 7503 	mla	r5, r5, r3, r7
 800ee58:	b2ad      	uxth	r5, r5
 800ee5a:	1c6f      	adds	r7, r5, #1
 800ee5c:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 800ee60:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 800ee64:	fb17 f703 	smulbb	r7, r7, r3
 800ee68:	122d      	asrs	r5, r5, #8
 800ee6a:	f801 5c03 	strb.w	r5, [r1, #-3]
 800ee6e:	7d45      	ldrb	r5, [r0, #21]
 800ee70:	fb05 7502 	mla	r5, r5, r2, r7
 800ee74:	b2ad      	uxth	r5, r5
 800ee76:	1c6f      	adds	r7, r5, #1
 800ee78:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 800ee7c:	122d      	asrs	r5, r5, #8
 800ee7e:	f801 5c02 	strb.w	r5, [r1, #-2]
 800ee82:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800ee86:	7d07      	ldrb	r7, [r0, #20]
 800ee88:	fb15 f303 	smulbb	r3, r5, r3
 800ee8c:	fb07 3202 	mla	r2, r7, r2, r3
 800ee90:	b292      	uxth	r2, r2
 800ee92:	1c53      	adds	r3, r2, #1
 800ee94:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 800ee98:	1212      	asrs	r2, r2, #8
 800ee9a:	f801 2c01 	strb.w	r2, [r1, #-1]
 800ee9e:	e7cf      	b.n	800ee40 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 800eea0:	3103      	adds	r1, #3
 800eea2:	f814 2b01 	ldrb.w	r2, [r4], #1
 800eea6:	428e      	cmp	r6, r1
 800eea8:	7a03      	ldrb	r3, [r0, #8]
 800eeaa:	f101 0103 	add.w	r1, r1, #3
 800eeae:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 800eeb2:	fb02 f303 	mul.w	r3, r2, r3
 800eeb6:	f103 0201 	add.w	r2, r3, #1
 800eeba:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 800eebe:	ea4f 2222 	mov.w	r2, r2, asr #8
 800eec2:	b295      	uxth	r5, r2
 800eec4:	ea6f 0202 	mvn.w	r2, r2
 800eec8:	b2d3      	uxtb	r3, r2
 800eeca:	7d82      	ldrb	r2, [r0, #22]
 800eecc:	fb1c fc03 	smulbb	ip, ip, r3
 800eed0:	fb02 c205 	mla	r2, r2, r5, ip
 800eed4:	b292      	uxth	r2, r2
 800eed6:	f102 0c01 	add.w	ip, r2, #1
 800eeda:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 800eede:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 800eee2:	fb1c fc03 	smulbb	ip, ip, r3
 800eee6:	ea4f 2222 	mov.w	r2, r2, asr #8
 800eeea:	f801 2c06 	strb.w	r2, [r1, #-6]
 800eeee:	7d42      	ldrb	r2, [r0, #21]
 800eef0:	fb02 c205 	mla	r2, r2, r5, ip
 800eef4:	b292      	uxth	r2, r2
 800eef6:	f102 0c01 	add.w	ip, r2, #1
 800eefa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 800eefe:	ea4f 2222 	mov.w	r2, r2, asr #8
 800ef02:	f801 2c05 	strb.w	r2, [r1, #-5]
 800ef06:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800ef0a:	f890 c014 	ldrb.w	ip, [r0, #20]
 800ef0e:	fb12 f303 	smulbb	r3, r2, r3
 800ef12:	fb0c 3305 	mla	r3, ip, r5, r3
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	f103 0201 	add.w	r2, r3, #1
 800ef1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 800ef20:	ea4f 2323 	mov.w	r3, r3, asr #8
 800ef24:	f801 3c04 	strb.w	r3, [r1, #-4]
 800ef28:	d8bb      	bhi.n	800eea2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 800ef2a:	e78b      	b.n	800ee44 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

0800ef2c <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	7d04      	ldrb	r4, [r0, #20]
 800ef30:	700c      	strb	r4, [r1, #0]
 800ef32:	7d41      	ldrb	r1, [r0, #21]
 800ef34:	7011      	strb	r1, [r2, #0]
 800ef36:	7d82      	ldrb	r2, [r0, #22]
 800ef38:	2001      	movs	r0, #1
 800ef3a:	701a      	strb	r2, [r3, #0]
 800ef3c:	22ff      	movs	r2, #255	; 0xff
 800ef3e:	9b02      	ldr	r3, [sp, #8]
 800ef40:	701a      	strb	r2, [r3, #0]
 800ef42:	bd10      	pop	{r4, pc}

0800ef44 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 800ef44:	6281      	str	r1, [r0, #40]	; 0x28
 800ef46:	4770      	bx	lr

0800ef48 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 800ef48:	b510      	push	{r4, lr}
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 800ef50:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800ef54:	8002      	strh	r2, [r0, #0]
 800ef56:	8042      	strh	r2, [r0, #2]
 800ef58:	8084      	strh	r4, [r0, #4]
 800ef5a:	80c1      	strh	r1, [r0, #6]
 800ef5c:	bd10      	pop	{r4, pc}

0800ef5e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 800ef5e:	2200      	movs	r2, #0
 800ef60:	8002      	strh	r2, [r0, #0]
 800ef62:	8042      	strh	r2, [r0, #2]
 800ef64:	8082      	strh	r2, [r0, #4]
 800ef66:	80c2      	strh	r2, [r0, #6]
 800ef68:	4770      	bx	lr
	...

0800ef6c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 800ef6c:	b508      	push	{r3, lr}
 800ef6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ef70:	b928      	cbnz	r0, 800ef7e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 800ef72:	4b03      	ldr	r3, [pc, #12]	; (800ef80 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 800ef74:	2123      	movs	r1, #35	; 0x23
 800ef76:	4a03      	ldr	r2, [pc, #12]	; (800ef84 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 800ef78:	4803      	ldr	r0, [pc, #12]	; (800ef88 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 800ef7a:	f00d feef 	bl	801cd5c <__assert_func>
 800ef7e:	bd08      	pop	{r3, pc}
 800ef80:	08020184 	.word	0x08020184
 800ef84:	08020268 	.word	0x08020268
 800ef88:	080201ab 	.word	0x080201ab

0800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ef92:	888a      	ldrh	r2, [r1, #4]
 800ef94:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ef98:	4422      	add	r2, r4
 800ef9a:	b212      	sxth	r2, r2
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	da15      	bge.n	800efcc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800efa0:	8882      	ldrh	r2, [r0, #4]
 800efa2:	4413      	add	r3, r2
 800efa4:	b21b      	sxth	r3, r3
 800efa6:	429c      	cmp	r4, r3
 800efa8:	da10      	bge.n	800efcc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800efaa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800efae:	88c9      	ldrh	r1, [r1, #6]
 800efb0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800efb4:	4419      	add	r1, r3
 800efb6:	b209      	sxth	r1, r1
 800efb8:	428a      	cmp	r2, r1
 800efba:	da07      	bge.n	800efcc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800efbc:	88c0      	ldrh	r0, [r0, #6]
 800efbe:	4410      	add	r0, r2
 800efc0:	b200      	sxth	r0, r0
 800efc2:	4283      	cmp	r3, r0
 800efc4:	bfac      	ite	ge
 800efc6:	2000      	movge	r0, #0
 800efc8:	2001      	movlt	r0, #1
 800efca:	bd10      	pop	{r4, pc}
 800efcc:	2000      	movs	r0, #0
 800efce:	e7fc      	b.n	800efca <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800efd0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	b08b      	sub	sp, #44	; 0x2c
 800efd6:	4604      	mov	r4, r0
 800efd8:	6808      	ldr	r0, [r1, #0]
 800efda:	f04f 0a00 	mov.w	sl, #0
 800efde:	6849      	ldr	r1, [r1, #4]
 800efe0:	ab04      	add	r3, sp, #16
 800efe2:	f647 7bff 	movw	fp, #32767	; 0x7fff
 800efe6:	c303      	stmia	r3!, {r0, r1}
 800efe8:	4b35      	ldr	r3, [pc, #212]	; (800f0c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 800efea:	4621      	mov	r1, r4
 800efec:	a806      	add	r0, sp, #24
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	6823      	ldr	r3, [r4, #0]
 800eff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eff6:	bf1f      	itttt	ne
 800eff8:	f10d 090e 	addne.w	r9, sp, #14
 800effc:	ae05      	addne	r6, sp, #20
 800effe:	f10d 0516 	addne.w	r5, sp, #22
 800f002:	f10d 0812 	addne.w	r8, sp, #18
 800f006:	bf01      	itttt	eq
 800f008:	f10d 0916 	addeq.w	r9, sp, #22
 800f00c:	f10d 060e 	addeq.w	r6, sp, #14
 800f010:	ad05      	addeq	r5, sp, #20
 800f012:	f10d 0810 	addeq.w	r8, sp, #16
 800f016:	4798      	blx	r3
 800f018:	f9b5 3000 	ldrsh.w	r3, [r5]
 800f01c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d042      	beq.n	800f0aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 800f024:	4293      	cmp	r3, r2
 800f026:	bfa8      	it	ge
 800f028:	4613      	movge	r3, r2
 800f02a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f02e:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 800f032:	2f00      	cmp	r7, #0
 800f034:	dd21      	ble.n	800f07a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 800f036:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800f03a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800f03e:	f9b6 2000 	ldrsh.w	r2, [r6]
 800f042:	f9b9 3000 	ldrsh.w	r3, [r9]
 800f046:	f8ad 0020 	strh.w	r0, [sp, #32]
 800f04a:	a808      	add	r0, sp, #32
 800f04c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800f050:	a906      	add	r1, sp, #24
 800f052:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800f056:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f05a:	f7ff ff97 	bl	800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f05e:	9001      	str	r0, [sp, #4]
 800f060:	b1d0      	cbz	r0, 800f098 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800f062:	6822      	ldr	r2, [r4, #0]
 800f064:	a908      	add	r1, sp, #32
 800f066:	4620      	mov	r0, r4
 800f068:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800f06a:	4790      	blx	r2
 800f06c:	b9a0      	cbnz	r0, 800f098 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800f06e:	107f      	asrs	r7, r7, #1
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	f8ad 700e 	strh.w	r7, [sp, #14]
 800f076:	469a      	mov	sl, r3
 800f078:	e7d9      	b.n	800f02e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800f07a:	d10d      	bne.n	800f098 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800f07c:	2301      	movs	r3, #1
 800f07e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f082:	f8b8 2000 	ldrh.w	r2, [r8]
 800f086:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800f08a:	440a      	add	r2, r1
 800f08c:	f8a8 2000 	strh.w	r2, [r8]
 800f090:	882b      	ldrh	r3, [r5, #0]
 800f092:	1a5b      	subs	r3, r3, r1
 800f094:	802b      	strh	r3, [r5, #0]
 800f096:	e7bf      	b.n	800f018 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800f098:	f1ba 0f00 	cmp.w	sl, #0
 800f09c:	d0f1      	beq.n	800f082 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800f09e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800f0a2:	455b      	cmp	r3, fp
 800f0a4:	bf08      	it	eq
 800f0a6:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 800f0a8:	e7eb      	b.n	800f082 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800f0aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	bf04      	itt	eq
 800f0b2:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 800f0b6:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 800f0b8:	b00b      	add	sp, #44	; 0x2c
 800f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0be:	bf00      	nop
 800f0c0:	240c3d3a 	.word	0x240c3d3a

0800f0c4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800f0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	6803      	ldr	r3, [r0, #0]
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	4601      	mov	r1, r0
 800f0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d0:	4668      	mov	r0, sp
 800f0d2:	4798      	blx	r3
 800f0d4:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800f0d8:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 800f0dc:	2300      	movs	r3, #0
 800f0de:	a902      	add	r1, sp, #8
 800f0e0:	4668      	mov	r0, sp
 800f0e2:	9302      	str	r3, [sp, #8]
 800f0e4:	f8ad 600c 	strh.w	r6, [sp, #12]
 800f0e8:	f8ad 500e 	strh.w	r5, [sp, #14]
 800f0ec:	f7ff ff4e 	bl	800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f0f0:	b340      	cbz	r0, 800f144 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 800f0f2:	f9bd 2000 	ldrsh.w	r2, [sp]
 800f0f6:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 800f0fa:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f0fe:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800f102:	443a      	add	r2, r7
 800f104:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 800f108:	f8ad 0000 	strh.w	r0, [sp]
 800f10c:	b292      	uxth	r2, r2
 800f10e:	f8ad 1002 	strh.w	r1, [sp, #2]
 800f112:	b217      	sxth	r7, r2
 800f114:	42be      	cmp	r6, r7
 800f116:	bfd8      	it	le
 800f118:	b2b2      	uxthle	r2, r6
 800f11a:	1a12      	subs	r2, r2, r0
 800f11c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f120:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f124:	4413      	add	r3, r2
 800f126:	b29b      	uxth	r3, r3
 800f128:	b21a      	sxth	r2, r3
 800f12a:	4295      	cmp	r5, r2
 800f12c:	bfd8      	it	le
 800f12e:	b2ab      	uxthle	r3, r5
 800f130:	1a5b      	subs	r3, r3, r1
 800f132:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f136:	6823      	ldr	r3, [r4, #0]
 800f138:	4669      	mov	r1, sp
 800f13a:	4620      	mov	r0, r4
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	4798      	blx	r3
 800f140:	b005      	add	sp, #20
 800f142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f144:	e9cd 0000 	strd	r0, r0, [sp]
 800f148:	e7f5      	b.n	800f136 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

0800f14c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800f14c:	2101      	movs	r1, #1
 800f14e:	2200      	movs	r2, #0
 800f150:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800f154:	490c      	ldr	r1, [pc, #48]	; (800f188 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 800f156:	8082      	strh	r2, [r0, #4]
 800f158:	80c2      	strh	r2, [r0, #6]
 800f15a:	8102      	strh	r2, [r0, #8]
 800f15c:	8142      	strh	r2, [r0, #10]
 800f15e:	8182      	strh	r2, [r0, #12]
 800f160:	81c2      	strh	r2, [r0, #14]
 800f162:	8202      	strh	r2, [r0, #16]
 800f164:	8242      	strh	r2, [r0, #18]
 800f166:	61c2      	str	r2, [r0, #28]
 800f168:	8402      	strh	r2, [r0, #32]
 800f16a:	8442      	strh	r2, [r0, #34]	; 0x22
 800f16c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800f170:	6001      	str	r1, [r0, #0]
 800f172:	21ff      	movs	r1, #255	; 0xff
 800f174:	6282      	str	r2, [r0, #40]	; 0x28
 800f176:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800f17a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f17e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f182:	8582      	strh	r2, [r0, #44]	; 0x2c
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	080201f0 	.word	0x080201f0

0800f18c <_ZNK8touchgfx3Box12getSolidRectEv>:
 800f18c:	2300      	movs	r3, #0
 800f18e:	8083      	strh	r3, [r0, #4]
 800f190:	80c3      	strh	r3, [r0, #6]
 800f192:	8003      	strh	r3, [r0, #0]
 800f194:	8043      	strh	r3, [r0, #2]
 800f196:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800f19a:	2bff      	cmp	r3, #255	; 0xff
 800f19c:	bf01      	itttt	eq
 800f19e:	890b      	ldrheq	r3, [r1, #8]
 800f1a0:	8083      	strheq	r3, [r0, #4]
 800f1a2:	894b      	ldrheq	r3, [r1, #10]
 800f1a4:	80c3      	strheq	r3, [r0, #6]
 800f1a6:	4770      	bx	lr

0800f1a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800f1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	466b      	mov	r3, sp
 800f1ae:	6808      	ldr	r0, [r1, #0]
 800f1b0:	6849      	ldr	r1, [r1, #4]
 800f1b2:	c303      	stmia	r3!, {r0, r1}
 800f1b4:	6823      	ldr	r3, [r4, #0]
 800f1b6:	4669      	mov	r1, sp
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1bc:	4798      	blx	r3
 800f1be:	4b08      	ldr	r3, [pc, #32]	; (800f1e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f1c6:	b10a      	cbz	r2, 800f1cc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800f1c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f1ca:	b900      	cbnz	r0, 800f1ce <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800f1cc:	6898      	ldr	r0, [r3, #8]
 800f1ce:	6803      	ldr	r3, [r0, #0]
 800f1d0:	4669      	mov	r1, sp
 800f1d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f1d4:	6a1d      	ldr	r5, [r3, #32]
 800f1d6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800f1da:	47a8      	blx	r5
 800f1dc:	b003      	add	sp, #12
 800f1de:	bd30      	pop	{r4, r5, pc}
 800f1e0:	240c3d44 	.word	0x240c3d44

0800f1e4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800f1e4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800f1e8:	b12a      	cbz	r2, 800f1f6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800f1ea:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800f1ee:	b112      	cbz	r2, 800f1f6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800f1f0:	6803      	ldr	r3, [r0, #0]
 800f1f2:	695b      	ldr	r3, [r3, #20]
 800f1f4:	4718      	bx	r3
 800f1f6:	4770      	bx	lr

0800f1f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 800f1f8:	4b02      	ldr	r3, [pc, #8]	; (800f204 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 800f1fa:	6018      	str	r0, [r3, #0]
 800f1fc:	4b02      	ldr	r3, [pc, #8]	; (800f208 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 800f1fe:	6019      	str	r1, [r3, #0]
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	240c3d4c 	.word	0x240c3d4c
 800f208:	240c3d60 	.word	0x240c3d60

0800f20c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	4c2b      	ldr	r4, [pc, #172]	; (800f2bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 800f210:	4b2b      	ldr	r3, [pc, #172]	; (800f2c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 800f212:	6821      	ldr	r1, [r4, #0]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	4281      	cmp	r1, r0
 800f218:	4d2a      	ldr	r5, [pc, #168]	; (800f2c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 800f21a:	492b      	ldr	r1, [pc, #172]	; (800f2c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 800f21c:	d108      	bne.n	800f230 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 800f21e:	682b      	ldr	r3, [r5, #0]
 800f220:	4293      	cmp	r3, r2
 800f222:	d105      	bne.n	800f230 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 800f224:	6808      	ldr	r0, [r1, #0]
 800f226:	280f      	cmp	r0, #15
 800f228:	bf94      	ite	ls
 800f22a:	2000      	movls	r0, #0
 800f22c:	2001      	movhi	r0, #1
 800f22e:	bd38      	pop	{r3, r4, r5, pc}
 800f230:	4b26      	ldr	r3, [pc, #152]	; (800f2cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 800f232:	6020      	str	r0, [r4, #0]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	602a      	str	r2, [r5, #0]
 800f238:	4298      	cmp	r0, r3
 800f23a:	d905      	bls.n	800f248 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 800f23c:	4b24      	ldr	r3, [pc, #144]	; (800f2d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 800f23e:	2135      	movs	r1, #53	; 0x35
 800f240:	4a24      	ldr	r2, [pc, #144]	; (800f2d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 800f242:	4825      	ldr	r0, [pc, #148]	; (800f2d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 800f244:	f00d fd8a 	bl	801cd5c <__assert_func>
 800f248:	f010 0403 	ands.w	r4, r0, #3
 800f24c:	bf1f      	itttt	ne
 800f24e:	f1c4 0504 	rsbne	r5, r4, #4
 800f252:	3b04      	subne	r3, #4
 800f254:	1952      	addne	r2, r2, r5
 800f256:	191b      	addne	r3, r3, r4
 800f258:	4d20      	ldr	r5, [pc, #128]	; (800f2dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 800f25a:	4402      	add	r2, r0
 800f25c:	1a1b      	subs	r3, r3, r0
 800f25e:	3001      	adds	r0, #1
 800f260:	602a      	str	r2, [r5, #0]
 800f262:	f020 0401 	bic.w	r4, r0, #1
 800f266:	42a3      	cmp	r3, r4
 800f268:	d203      	bcs.n	800f272 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 800f26a:	4b19      	ldr	r3, [pc, #100]	; (800f2d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 800f26c:	2148      	movs	r1, #72	; 0x48
 800f26e:	4a19      	ldr	r2, [pc, #100]	; (800f2d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 800f270:	e7e7      	b.n	800f242 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 800f272:	f010 0002 	ands.w	r0, r0, #2
 800f276:	bf1f      	itttt	ne
 800f278:	f1c0 0504 	rsbne	r5, r0, #4
 800f27c:	1952      	addne	r2, r2, r5
 800f27e:	1f05      	subne	r5, r0, #4
 800f280:	195b      	addne	r3, r3, r5
 800f282:	4422      	add	r2, r4
 800f284:	4d16      	ldr	r5, [pc, #88]	; (800f2e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 800f286:	1b1b      	subs	r3, r3, r4
 800f288:	602a      	str	r2, [r5, #0]
 800f28a:	429c      	cmp	r4, r3
 800f28c:	d903      	bls.n	800f296 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 800f28e:	4b10      	ldr	r3, [pc, #64]	; (800f2d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 800f290:	215b      	movs	r1, #91	; 0x5b
 800f292:	4a10      	ldr	r2, [pc, #64]	; (800f2d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 800f294:	e7d5      	b.n	800f242 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 800f296:	b120      	cbz	r0, 800f2a2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 800f298:	f1c0 0504 	rsb	r5, r0, #4
 800f29c:	3804      	subs	r0, #4
 800f29e:	442a      	add	r2, r5
 800f2a0:	4403      	add	r3, r0
 800f2a2:	1b1b      	subs	r3, r3, r4
 800f2a4:	4422      	add	r2, r4
 800f2a6:	480f      	ldr	r0, [pc, #60]	; (800f2e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 800f2a8:	2b0f      	cmp	r3, #15
 800f2aa:	600b      	str	r3, [r1, #0]
 800f2ac:	6002      	str	r2, [r0, #0]
 800f2ae:	d803      	bhi.n	800f2b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 800f2b0:	4b0d      	ldr	r3, [pc, #52]	; (800f2e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 800f2b2:	216e      	movs	r1, #110	; 0x6e
 800f2b4:	4a07      	ldr	r2, [pc, #28]	; (800f2d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 800f2b6:	e7c4      	b.n	800f242 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 800f2b8:	2001      	movs	r0, #1
 800f2ba:	e7b8      	b.n	800f22e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 800f2bc:	240c3d54 	.word	0x240c3d54
 800f2c0:	240c3d4c 	.word	0x240c3d4c
 800f2c4:	240c3d5c 	.word	0x240c3d5c
 800f2c8:	240c3d64 	.word	0x240c3d64
 800f2cc:	240c3d60 	.word	0x240c3d60
 800f2d0:	08020320 	.word	0x08020320
 800f2d4:	080203e8 	.word	0x080203e8
 800f2d8:	08020359 	.word	0x08020359
 800f2dc:	240c3d68 	.word	0x240c3d68
 800f2e0:	240c3d58 	.word	0x240c3d58
 800f2e4:	240c3d50 	.word	0x240c3d50
 800f2e8:	080203a3 	.word	0x080203a3

0800f2ec <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 800f2ec:	4b04      	ldr	r3, [pc, #16]	; (800f300 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 800f2ee:	6818      	ldr	r0, [r3, #0]
 800f2f0:	b120      	cbz	r0, 800f2fc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 800f2f2:	4b04      	ldr	r3, [pc, #16]	; (800f304 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 800f2f4:	6818      	ldr	r0, [r3, #0]
 800f2f6:	3000      	adds	r0, #0
 800f2f8:	bf18      	it	ne
 800f2fa:	2001      	movne	r0, #1
 800f2fc:	4770      	bx	lr
 800f2fe:	bf00      	nop
 800f300:	240c3d4c 	.word	0x240c3d4c
 800f304:	240c3d60 	.word	0x240c3d60

0800f308 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 800f308:	4b01      	ldr	r3, [pc, #4]	; (800f310 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 800f30a:	6818      	ldr	r0, [r3, #0]
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	240c3d54 	.word	0x240c3d54

0800f314 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 800f314:	4b01      	ldr	r3, [pc, #4]	; (800f31c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 800f316:	6818      	ldr	r0, [r3, #0]
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	240c3d5c 	.word	0x240c3d5c

0800f320 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 800f320:	4b01      	ldr	r3, [pc, #4]	; (800f328 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 800f322:	6818      	ldr	r0, [r3, #0]
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	240c3d68 	.word	0x240c3d68

0800f32c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 800f32c:	4b01      	ldr	r3, [pc, #4]	; (800f334 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 800f32e:	6818      	ldr	r0, [r3, #0]
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	240c3d58 	.word	0x240c3d58

0800f338 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 800f338:	4b01      	ldr	r3, [pc, #4]	; (800f340 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 800f33a:	6818      	ldr	r0, [r3, #0]
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	240c3d50 	.word	0x240c3d50

0800f344 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 800f344:	4b01      	ldr	r3, [pc, #4]	; (800f34c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 800f346:	6818      	ldr	r0, [r3, #0]
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	240c3d64 	.word	0x240c3d64

0800f350 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800f350:	b510      	push	{r4, lr}
 800f352:	6803      	ldr	r3, [r0, #0]
 800f354:	460c      	mov	r4, r1
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	4798      	blx	r3
 800f35a:	1b03      	subs	r3, r0, r4
 800f35c:	4258      	negs	r0, r3
 800f35e:	4158      	adcs	r0, r3
 800f360:	bd10      	pop	{r4, pc}
	...

0800f364 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800f364:	4b01      	ldr	r3, [pc, #4]	; (800f36c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800f366:	6019      	str	r1, [r3, #0]
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	240c3d6c 	.word	0x240c3d6c

0800f370 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f374:	4696      	mov	lr, r2
 800f376:	b097      	sub	sp, #92	; 0x5c
 800f378:	4605      	mov	r5, r0
 800f37a:	4614      	mov	r4, r2
 800f37c:	460e      	mov	r6, r1
 800f37e:	461f      	mov	r7, r3
 800f380:	f10d 0c1c 	add.w	ip, sp, #28
 800f384:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800f388:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800f38c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800f390:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f398:	f8de 3000 	ldr.w	r3, [lr]
 800f39c:	f104 0e14 	add.w	lr, r4, #20
 800f3a0:	f8cc 3000 	str.w	r3, [ip]
 800f3a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800f3a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3b0:	f8de 3000 	ldr.w	r3, [lr]
 800f3b4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800f3b8:	f8cc 3000 	str.w	r3, [ip]
 800f3bc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f3c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3c8:	f8de 3000 	ldr.w	r3, [lr]
 800f3cc:	4631      	mov	r1, r6
 800f3ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	f8cc 3000 	str.w	r3, [ip]
 800f3d6:	682b      	ldr	r3, [r5, #0]
 800f3d8:	9201      	str	r2, [sp, #4]
 800f3da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f3dc:	f8cd 8008 	str.w	r8, [sp, #8]
 800f3e0:	9200      	str	r2, [sp, #0]
 800f3e2:	aa07      	add	r2, sp, #28
 800f3e4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800f3e8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800f3ec:	463b      	mov	r3, r7
 800f3ee:	47d8      	blx	fp
 800f3f0:	46a6      	mov	lr, r4
 800f3f2:	f10d 0c1c 	add.w	ip, sp, #28
 800f3f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3fe:	f8de 3000 	ldr.w	r3, [lr]
 800f402:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800f406:	343c      	adds	r4, #60	; 0x3c
 800f408:	f8cc 3000 	str.w	r3, [ip]
 800f40c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800f410:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f418:	f8de 3000 	ldr.w	r3, [lr]
 800f41c:	f8cc 3000 	str.w	r3, [ip]
 800f420:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f426:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	4631      	mov	r1, r6
 800f42e:	4628      	mov	r0, r5
 800f430:	f8cc 3000 	str.w	r3, [ip]
 800f434:	682b      	ldr	r3, [r5, #0]
 800f436:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800f43a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f43c:	f8cd 8008 	str.w	r8, [sp, #8]
 800f440:	9201      	str	r2, [sp, #4]
 800f442:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f444:	9200      	str	r2, [sp, #0]
 800f446:	aa07      	add	r2, sp, #28
 800f448:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800f44a:	463b      	mov	r3, r7
 800f44c:	47a0      	blx	r4
 800f44e:	b017      	add	sp, #92	; 0x5c
 800f450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f454 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800f454:	2000      	movs	r0, #0
 800f456:	4770      	bx	lr

0800f458 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	b08d      	sub	sp, #52	; 0x34
 800f45e:	4688      	mov	r8, r1
 800f460:	f8d3 c000 	ldr.w	ip, [r3]
 800f464:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f466:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800f46a:	680f      	ldr	r7, [r1, #0]
 800f46c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800f470:	eba7 070c 	sub.w	r7, r7, ip
 800f474:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800f478:	edd3 6a07 	vldr	s13, [r3, #28]
 800f47c:	42bc      	cmp	r4, r7
 800f47e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f480:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800f484:	bfa8      	it	ge
 800f486:	463c      	movge	r4, r7
 800f488:	f9b1 9000 	ldrsh.w	r9, [r1]
 800f48c:	f9ba 1000 	ldrsh.w	r1, [sl]
 800f490:	ee07 4a90 	vmov	s15, r4
 800f494:	eb09 0e0c 	add.w	lr, r9, ip
 800f498:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800f49c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800f4a0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800f4a4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800f4a8:	4571      	cmp	r1, lr
 800f4aa:	ee25 4a04 	vmul.f32	s8, s10, s8
 800f4ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 800f4b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f4b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f4ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800f4be:	ee32 1a05 	vadd.f32	s2, s4, s10
 800f4c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f4c6:	ee36 0a84 	vadd.f32	s0, s13, s8
 800f4ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f4ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f4d2:	f340 808c 	ble.w	800f5ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800f4d6:	eba1 060e 	sub.w	r6, r1, lr
 800f4da:	fb96 f5f4 	sdiv	r5, r6, r4
 800f4de:	ee07 5a10 	vmov	s14, r5
 800f4e2:	2d00      	cmp	r5, #0
 800f4e4:	fb04 6615 	mls	r6, r4, r5, r6
 800f4e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 800f4f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 800f4f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 800f4f8:	dd12      	ble.n	800f520 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800f4fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 800f4fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800f502:	ee31 2a45 	vsub.f32	s4, s2, s10
 800f506:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50e:	bf14      	ite	ne
 800f510:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800f514:	eeb0 7a67 	vmoveq.f32	s14, s15
 800f518:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f51c:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f520:	fb05 f204 	mul.w	r2, r5, r4
 800f524:	1abf      	subs	r7, r7, r2
 800f526:	4494      	add	ip, r2
 800f528:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800f52c:	4411      	add	r1, r2
 800f52e:	eb09 020c 	add.w	r2, r9, ip
 800f532:	b209      	sxth	r1, r1
 800f534:	443a      	add	r2, r7
 800f536:	428a      	cmp	r2, r1
 800f538:	bfc4      	itt	gt
 800f53a:	eba1 0209 	subgt.w	r2, r1, r9
 800f53e:	eba2 070c 	subgt.w	r7, r2, ip
 800f542:	2f00      	cmp	r7, #0
 800f544:	dd50      	ble.n	800f5e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800f546:	fb97 f1f4 	sdiv	r1, r7, r4
 800f54a:	fb04 7211 	mls	r2, r4, r1, r7
 800f54e:	b90a      	cbnz	r2, 800f554 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800f550:	3901      	subs	r1, #1
 800f552:	4622      	mov	r2, r4
 800f554:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800f558:	6840      	ldr	r0, [r0, #4]
 800f55a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800f55e:	44b6      	add	lr, r6
 800f560:	f8d0 a000 	ldr.w	sl, [r0]
 800f564:	2900      	cmp	r1, #0
 800f566:	bfcc      	ite	gt
 800f568:	46a1      	movgt	r9, r4
 800f56a:	4691      	movle	r9, r2
 800f56c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f56e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f570:	fb04 e505 	mla	r5, r4, r5, lr
 800f574:	eef0 6a42 	vmov.f32	s13, s4
 800f578:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f57c:	9008      	str	r0, [sp, #32]
 800f57e:	eeb0 7a61 	vmov.f32	s14, s3
 800f582:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f584:	695b      	ldr	r3, [r3, #20]
 800f586:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f58a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800f58e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800f592:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f594:	445b      	add	r3, fp
 800f596:	9307      	str	r3, [sp, #28]
 800f598:	ee16 3a90 	vmov	r3, s13
 800f59c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800f5a0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800f5a4:	ee21 3a23 	vmul.f32	s6, s2, s7
 800f5a8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800f5ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f5b0:	ee17 7a90 	vmov	r7, s15
 800f5b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f5b8:	fb97 f7f4 	sdiv	r7, r7, r4
 800f5bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f5c0:	ee17 ca90 	vmov	ip, s15
 800f5c4:	fb9c fcf4 	sdiv	ip, ip, r4
 800f5c8:	fb0c 3306 	mla	r3, ip, r6, r3
 800f5cc:	9302      	str	r3, [sp, #8]
 800f5ce:	ee17 3a10 	vmov	r3, s14
 800f5d2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800f5d6:	fb07 3706 	mla	r7, r7, r6, r3
 800f5da:	eba9 0306 	sub.w	r3, r9, r6
 800f5de:	e9cd 4700 	strd	r4, r7, [sp]
 800f5e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 800f5e6:	47a0      	blx	r4
 800f5e8:	b00d      	add	sp, #52	; 0x34
 800f5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ee:	2500      	movs	r5, #0
 800f5f0:	462e      	mov	r6, r5
 800f5f2:	e799      	b.n	800f528 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800f5f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f8:	b0db      	sub	sp, #364	; 0x16c
 800f5fa:	461d      	mov	r5, r3
 800f5fc:	4614      	mov	r4, r2
 800f5fe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800f602:	910f      	str	r1, [sp, #60]	; 0x3c
 800f604:	4629      	mov	r1, r5
 800f606:	930a      	str	r3, [sp, #40]	; 0x28
 800f608:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800f60c:	9009      	str	r0, [sp, #36]	; 0x24
 800f60e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f610:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800f614:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800f618:	9310      	str	r3, [sp, #64]	; 0x40
 800f61a:	6803      	ldr	r3, [r0, #0]
 800f61c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800f61e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f622:	47b8      	blx	r7
 800f624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f626:	6058      	str	r0, [r3, #4]
 800f628:	2800      	cmp	r0, #0
 800f62a:	f000 83a1 	beq.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f62e:	682b      	ldr	r3, [r5, #0]
 800f630:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f634:	ed94 7a02 	vldr	s14, [r4, #8]
 800f638:	9314      	str	r3, [sp, #80]	; 0x50
 800f63a:	686b      	ldr	r3, [r5, #4]
 800f63c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f640:	9315      	str	r3, [sp, #84]	; 0x54
 800f642:	4bc1      	ldr	r3, [pc, #772]	; (800f948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800f644:	7819      	ldrb	r1, [r3, #0]
 800f646:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f64a:	2900      	cmp	r1, #0
 800f64c:	bf16      	itet	ne
 800f64e:	4619      	movne	r1, r3
 800f650:	4611      	moveq	r1, r2
 800f652:	4613      	movne	r3, r2
 800f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f658:	9116      	str	r1, [sp, #88]	; 0x58
 800f65a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800f65e:	f240 8387 	bls.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f662:	ed94 7a07 	vldr	s14, [r4, #28]
 800f666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f66e:	f240 837f 	bls.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f672:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67e:	f240 8377 	bls.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f682:	6822      	ldr	r2, [r4, #0]
 800f684:	4bb1      	ldr	r3, [pc, #708]	; (800f94c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800f686:	429a      	cmp	r2, r3
 800f688:	f2c0 8372 	blt.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f68c:	49b0      	ldr	r1, [pc, #704]	; (800f950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800f68e:	6963      	ldr	r3, [r4, #20]
 800f690:	428a      	cmp	r2, r1
 800f692:	f300 836d 	bgt.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f696:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f69a:	48ae      	ldr	r0, [pc, #696]	; (800f954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800f69c:	33ff      	adds	r3, #255	; 0xff
 800f69e:	4283      	cmp	r3, r0
 800f6a0:	f200 8366 	bhi.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f6a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f6a6:	4dac      	ldr	r5, [pc, #688]	; (800f958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800f6a8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f6ac:	33ff      	adds	r3, #255	; 0xff
 800f6ae:	42ab      	cmp	r3, r5
 800f6b0:	f200 835e 	bhi.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f6b4:	6862      	ldr	r2, [r4, #4]
 800f6b6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800f6ba:	33ff      	adds	r3, #255	; 0xff
 800f6bc:	4283      	cmp	r3, r0
 800f6be:	f200 8357 	bhi.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f6c2:	69a1      	ldr	r1, [r4, #24]
 800f6c4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800f6c8:	33ff      	adds	r3, #255	; 0xff
 800f6ca:	4283      	cmp	r3, r0
 800f6cc:	f200 8350 	bhi.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f6d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6d2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800f6d6:	30ff      	adds	r0, #255	; 0xff
 800f6d8:	42a8      	cmp	r0, r5
 800f6da:	f200 8349 	bhi.w	800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f6de:	428a      	cmp	r2, r1
 800f6e0:	f280 8110 	bge.w	800f904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	f300 8119 	bgt.w	800f91c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800f6ea:	4299      	cmp	r1, r3
 800f6ec:	f280 811d 	bge.w	800f92a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800f6f0:	2502      	movs	r5, #2
 800f6f2:	2701      	movs	r7, #1
 800f6f4:	46a9      	mov	r9, r5
 800f6f6:	46b8      	mov	r8, r7
 800f6f8:	f04f 0a00 	mov.w	sl, #0
 800f6fc:	4621      	mov	r1, r4
 800f6fe:	a849      	add	r0, sp, #292	; 0x124
 800f700:	f003 f856 	bl	80127b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800f704:	4622      	mov	r2, r4
 800f706:	4653      	mov	r3, sl
 800f708:	a949      	add	r1, sp, #292	; 0x124
 800f70a:	f8cd 9000 	str.w	r9, [sp]
 800f70e:	a819      	add	r0, sp, #100	; 0x64
 800f710:	f003 f97e 	bl	8012a10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f714:	4622      	mov	r2, r4
 800f716:	4653      	mov	r3, sl
 800f718:	a949      	add	r1, sp, #292	; 0x124
 800f71a:	f8cd 8000 	str.w	r8, [sp]
 800f71e:	a829      	add	r0, sp, #164	; 0xa4
 800f720:	f003 f976 	bl	8012a10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f724:	4643      	mov	r3, r8
 800f726:	4622      	mov	r2, r4
 800f728:	a949      	add	r1, sp, #292	; 0x124
 800f72a:	f8cd 9000 	str.w	r9, [sp]
 800f72e:	a839      	add	r0, sp, #228	; 0xe4
 800f730:	f003 f96e 	bl	8012a10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f734:	42af      	cmp	r7, r5
 800f736:	af12      	add	r7, sp, #72	; 0x48
 800f738:	bfb7      	itett	lt
 800f73a:	2300      	movlt	r3, #0
 800f73c:	2301      	movge	r3, #1
 800f73e:	ad29      	addlt	r5, sp, #164	; 0xa4
 800f740:	ac19      	addlt	r4, sp, #100	; 0x64
 800f742:	bfb1      	iteee	lt
 800f744:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f746:	ad19      	addge	r5, sp, #100	; 0x64
 800f748:	930e      	strge	r3, [sp, #56]	; 0x38
 800f74a:	ac29      	addge	r4, sp, #164	; 0xa4
 800f74c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f74e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f752:	e887 0003 	stmia.w	r7, {r0, r1}
 800f756:	b928      	cbnz	r0, 800f764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800f758:	4b80      	ldr	r3, [pc, #512]	; (800f95c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800f75a:	6818      	ldr	r0, [r3, #0]
 800f75c:	6803      	ldr	r3, [r0, #0]
 800f75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f760:	4798      	blx	r3
 800f762:	6038      	str	r0, [r7, #0]
 800f764:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f766:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f76a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f76e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f770:	930c      	str	r3, [sp, #48]	; 0x30
 800f772:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f774:	6963      	ldr	r3, [r4, #20]
 800f776:	440b      	add	r3, r1
 800f778:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f77c:	4408      	add	r0, r1
 800f77e:	b200      	sxth	r0, r0
 800f780:	4283      	cmp	r3, r0
 800f782:	900d      	str	r0, [sp, #52]	; 0x34
 800f784:	f280 80dd 	bge.w	800f942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800f788:	428b      	cmp	r3, r1
 800f78a:	da08      	bge.n	800f79e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f78c:	2a00      	cmp	r2, #0
 800f78e:	dd06      	ble.n	800f79e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f790:	1acb      	subs	r3, r1, r3
 800f792:	429a      	cmp	r2, r3
 800f794:	f2c0 80e4 	blt.w	800f960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f300 80e2 	bgt.w	800f962 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800f79e:	6967      	ldr	r7, [r4, #20]
 800f7a0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f7a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7a6:	443b      	add	r3, r7
 800f7a8:	461f      	mov	r7, r3
 800f7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7ac:	1bdf      	subs	r7, r3, r7
 800f7ae:	4297      	cmp	r7, r2
 800f7b0:	bfa8      	it	ge
 800f7b2:	4617      	movge	r7, r2
 800f7b4:	2f00      	cmp	r7, #0
 800f7b6:	f340 8166 	ble.w	800fa86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800f7ba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f7bc:	6829      	ldr	r1, [r5, #0]
 800f7be:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f7c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f7c6:	4411      	add	r1, r2
 800f7c8:	6820      	ldr	r0, [r4, #0]
 800f7ca:	4299      	cmp	r1, r3
 800f7cc:	dd1a      	ble.n	800f804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f7ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f7d2:	4402      	add	r2, r0
 800f7d4:	440b      	add	r3, r1
 800f7d6:	b21b      	sxth	r3, r3
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	dc13      	bgt.n	800f804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f7dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7de:	a912      	add	r1, sp, #72	; 0x48
 800f7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	9206      	str	r2, [sp, #24]
 800f7e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7ea:	9500      	str	r5, [sp, #0]
 800f7ec:	9205      	str	r2, [sp, #20]
 800f7ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f7f4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f7f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f7fa:	aa49      	add	r2, sp, #292	; 0x124
 800f7fc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800f800:	4623      	mov	r3, r4
 800f802:	47c8      	blx	r9
 800f804:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f808:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f80c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f810:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f814:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f818:	68a1      	ldr	r1, [r4, #8]
 800f81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f81e:	ed94 6a08 	vldr	s12, [r4, #32]
 800f822:	edd4 6a07 	vldr	s13, [r4, #28]
 800f826:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f82a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f82e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f832:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f836:	edc4 6a07 	vstr	s13, [r4, #28]
 800f83a:	441a      	add	r2, r3
 800f83c:	6963      	ldr	r3, [r4, #20]
 800f83e:	3301      	adds	r3, #1
 800f840:	6022      	str	r2, [r4, #0]
 800f842:	6163      	str	r3, [r4, #20]
 800f844:	69a3      	ldr	r3, [r4, #24]
 800f846:	3b01      	subs	r3, #1
 800f848:	61a3      	str	r3, [r4, #24]
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	440b      	add	r3, r1
 800f84e:	68e1      	ldr	r1, [r4, #12]
 800f850:	428b      	cmp	r3, r1
 800f852:	6123      	str	r3, [r4, #16]
 800f854:	db15      	blt.n	800f882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800f856:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f85a:	3201      	adds	r2, #1
 800f85c:	1a5b      	subs	r3, r3, r1
 800f85e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f862:	6022      	str	r2, [r4, #0]
 800f864:	6123      	str	r3, [r4, #16]
 800f866:	edc4 6a07 	vstr	s13, [r4, #28]
 800f86a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f86e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f872:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f876:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f87a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f87e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f882:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f886:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f88a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f88e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f892:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f896:	68a9      	ldr	r1, [r5, #8]
 800f898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f89c:	ed95 6a08 	vldr	s12, [r5, #32]
 800f8a0:	edd5 6a07 	vldr	s13, [r5, #28]
 800f8a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f8a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f8ac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f8b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8b4:	edc5 6a07 	vstr	s13, [r5, #28]
 800f8b8:	441a      	add	r2, r3
 800f8ba:	696b      	ldr	r3, [r5, #20]
 800f8bc:	3301      	adds	r3, #1
 800f8be:	602a      	str	r2, [r5, #0]
 800f8c0:	616b      	str	r3, [r5, #20]
 800f8c2:	69ab      	ldr	r3, [r5, #24]
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	61ab      	str	r3, [r5, #24]
 800f8c8:	692b      	ldr	r3, [r5, #16]
 800f8ca:	440b      	add	r3, r1
 800f8cc:	68e9      	ldr	r1, [r5, #12]
 800f8ce:	428b      	cmp	r3, r1
 800f8d0:	612b      	str	r3, [r5, #16]
 800f8d2:	db15      	blt.n	800f900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800f8d4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f8d8:	3201      	adds	r2, #1
 800f8da:	1a5b      	subs	r3, r3, r1
 800f8dc:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f8e0:	602a      	str	r2, [r5, #0]
 800f8e2:	612b      	str	r3, [r5, #16]
 800f8e4:	edc5 6a07 	vstr	s13, [r5, #28]
 800f8e8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f8ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f8f0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f8f4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f8f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8fc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f900:	3f01      	subs	r7, #1
 800f902:	e757      	b.n	800f7b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800f904:	4299      	cmp	r1, r3
 800f906:	dc13      	bgt.n	800f930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800f908:	429a      	cmp	r2, r3
 800f90a:	da14      	bge.n	800f936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800f90c:	2502      	movs	r5, #2
 800f90e:	2703      	movs	r7, #3
 800f910:	f04f 0800 	mov.w	r8, #0
 800f914:	46a9      	mov	r9, r5
 800f916:	f04f 0a01 	mov.w	sl, #1
 800f91a:	e6ef      	b.n	800f6fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f91c:	2501      	movs	r5, #1
 800f91e:	2700      	movs	r7, #0
 800f920:	46a9      	mov	r9, r5
 800f922:	46b8      	mov	r8, r7
 800f924:	f04f 0a02 	mov.w	sl, #2
 800f928:	e6e8      	b.n	800f6fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f92a:	2501      	movs	r5, #1
 800f92c:	2702      	movs	r7, #2
 800f92e:	e6e1      	b.n	800f6f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800f930:	2500      	movs	r5, #0
 800f932:	2701      	movs	r7, #1
 800f934:	e7f4      	b.n	800f920 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800f936:	2702      	movs	r7, #2
 800f938:	2503      	movs	r5, #3
 800f93a:	f04f 0900 	mov.w	r9, #0
 800f93e:	46b8      	mov	r8, r7
 800f940:	e7e9      	b.n	800f916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800f942:	4613      	mov	r3, r2
 800f944:	e728      	b.n	800f798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800f946:	bf00      	nop
 800f948:	240c3d3a 	.word	0x240c3d3a
 800f94c:	fffd8f01 	.word	0xfffd8f01
 800f950:	00027100 	.word	0x00027100
 800f954:	0004e1ff 	.word	0x0004e1ff
 800f958:	0004e1fe 	.word	0x0004e1fe
 800f95c:	240c3d44 	.word	0x240c3d44
 800f960:	4613      	mov	r3, r2
 800f962:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f964:	469e      	mov	lr, r3
 800f966:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f968:	469c      	mov	ip, r3
 800f96a:	9111      	str	r1, [sp, #68]	; 0x44
 800f96c:	f04f 0900 	mov.w	r9, #0
 800f970:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800f974:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800f978:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800f97c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800f980:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800f984:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f988:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800f98c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800f990:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800f994:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800f998:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800f99c:	f1bc 0f00 	cmp.w	ip, #0
 800f9a0:	d147      	bne.n	800fa32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800f9a2:	eb03 0c07 	add.w	ip, r3, r7
 800f9a6:	1ad7      	subs	r7, r2, r3
 800f9a8:	f1b9 0f00 	cmp.w	r9, #0
 800f9ac:	d009      	beq.n	800f9c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800f9ae:	9029      	str	r0, [sp, #164]	; 0xa4
 800f9b0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800f9b4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800f9b8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800f9bc:	912d      	str	r1, [sp, #180]	; 0xb4
 800f9be:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800f9c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f9c4:	f04f 0800 	mov.w	r8, #0
 800f9c8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f9cc:	9111      	str	r1, [sp, #68]	; 0x44
 800f9ce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f9d2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f9d6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f9da:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f9de:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f9e2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f9e6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f9ea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f9ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f9f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f9f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f9fa:	f1be 0f00 	cmp.w	lr, #0
 800f9fe:	d031      	beq.n	800fa64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800fa00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fa02:	4450      	add	r0, sl
 800fa04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800fa08:	4431      	add	r1, r6
 800fa0a:	ee37 7a04 	vadd.f32	s14, s14, s8
 800fa0e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800fa12:	4549      	cmp	r1, r9
 800fa14:	db08      	blt.n	800fa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800fa16:	ee77 7a85 	vadd.f32	s15, s15, s10
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fa20:	eba1 0109 	sub.w	r1, r1, r9
 800fa24:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fa28:	f10e 3eff 	add.w	lr, lr, #4294967295
 800fa2c:	f04f 0801 	mov.w	r8, #1
 800fa30:	e7e3      	b.n	800f9fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800fa32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fa34:	4450      	add	r0, sl
 800fa36:	ee37 7a24 	vadd.f32	s14, s14, s9
 800fa3a:	4431      	add	r1, r6
 800fa3c:	ee77 7a84 	vadd.f32	s15, s15, s8
 800fa40:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800fa44:	4541      	cmp	r1, r8
 800fa46:	db08      	blt.n	800fa5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800fa48:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fa4c:	3001      	adds	r0, #1
 800fa4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fa52:	eba1 0108 	sub.w	r1, r1, r8
 800fa56:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fa5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fa5e:	f04f 0901 	mov.w	r9, #1
 800fa62:	e79b      	b.n	800f99c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800fa64:	449c      	add	ip, r3
 800fa66:	1aff      	subs	r7, r7, r3
 800fa68:	f1b8 0f00 	cmp.w	r8, #0
 800fa6c:	d009      	beq.n	800fa82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800fa6e:	9019      	str	r0, [sp, #100]	; 0x64
 800fa70:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800fa74:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800fa78:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800fa7c:	911d      	str	r1, [sp, #116]	; 0x74
 800fa7e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800fa82:	1ad2      	subs	r2, r2, r3
 800fa84:	e68b      	b.n	800f79e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800fa86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa88:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f000 80d1 	beq.w	800fc32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800fa90:	ad19      	add	r5, sp, #100	; 0x64
 800fa92:	ac39      	add	r4, sp, #228	; 0xe4
 800fa94:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fa96:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800fa9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa9e:	930c      	str	r3, [sp, #48]	; 0x30
 800faa0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800faa2:	6963      	ldr	r3, [r4, #20]
 800faa4:	440b      	add	r3, r1
 800faa6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800faaa:	4408      	add	r0, r1
 800faac:	b200      	sxth	r0, r0
 800faae:	4283      	cmp	r3, r0
 800fab0:	900d      	str	r0, [sp, #52]	; 0x34
 800fab2:	f280 80c1 	bge.w	800fc38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800fab6:	428b      	cmp	r3, r1
 800fab8:	da08      	bge.n	800facc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800faba:	2a00      	cmp	r2, #0
 800fabc:	dd06      	ble.n	800facc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800fabe:	1acb      	subs	r3, r1, r3
 800fac0:	429a      	cmp	r2, r3
 800fac2:	f2c0 80bb 	blt.w	800fc3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f300 80b9 	bgt.w	800fc3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800facc:	6967      	ldr	r7, [r4, #20]
 800face:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800fad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fad4:	443b      	add	r3, r7
 800fad6:	461f      	mov	r7, r3
 800fad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fada:	1bdf      	subs	r7, r3, r7
 800fadc:	4297      	cmp	r7, r2
 800fade:	bfa8      	it	ge
 800fae0:	4617      	movge	r7, r2
 800fae2:	2f00      	cmp	r7, #0
 800fae4:	f340 813c 	ble.w	800fd60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800fae8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800faea:	6829      	ldr	r1, [r5, #0]
 800faec:	f9b3 2000 	ldrsh.w	r2, [r3]
 800faf0:	f9bb 3000 	ldrsh.w	r3, [fp]
 800faf4:	4411      	add	r1, r2
 800faf6:	6820      	ldr	r0, [r4, #0]
 800faf8:	4299      	cmp	r1, r3
 800fafa:	dd1a      	ble.n	800fb32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800fafc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800fb00:	4402      	add	r2, r0
 800fb02:	440b      	add	r3, r1
 800fb04:	b21b      	sxth	r3, r3
 800fb06:	429a      	cmp	r2, r3
 800fb08:	dc13      	bgt.n	800fb32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800fb0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb0c:	a912      	add	r1, sp, #72	; 0x48
 800fb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	9206      	str	r2, [sp, #24]
 800fb16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb18:	9500      	str	r5, [sp, #0]
 800fb1a:	9205      	str	r2, [sp, #20]
 800fb1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb1e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800fb22:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800fb24:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800fb28:	aa49      	add	r2, sp, #292	; 0x124
 800fb2a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800fb2e:	4623      	mov	r3, r4
 800fb30:	47c8      	blx	r9
 800fb32:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800fb36:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800fb3a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800fb3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb42:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800fb46:	68a1      	ldr	r1, [r4, #8]
 800fb48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb4c:	ed94 6a08 	vldr	s12, [r4, #32]
 800fb50:	edd4 6a07 	vldr	s13, [r4, #28]
 800fb54:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800fb58:	ee76 6a86 	vadd.f32	s13, s13, s12
 800fb5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800fb60:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fb64:	edc4 6a07 	vstr	s13, [r4, #28]
 800fb68:	441a      	add	r2, r3
 800fb6a:	6963      	ldr	r3, [r4, #20]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	6022      	str	r2, [r4, #0]
 800fb70:	6163      	str	r3, [r4, #20]
 800fb72:	69a3      	ldr	r3, [r4, #24]
 800fb74:	3b01      	subs	r3, #1
 800fb76:	61a3      	str	r3, [r4, #24]
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	440b      	add	r3, r1
 800fb7c:	68e1      	ldr	r1, [r4, #12]
 800fb7e:	428b      	cmp	r3, r1
 800fb80:	6123      	str	r3, [r4, #16]
 800fb82:	db15      	blt.n	800fbb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800fb84:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800fb88:	3201      	adds	r2, #1
 800fb8a:	1a5b      	subs	r3, r3, r1
 800fb8c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800fb90:	6022      	str	r2, [r4, #0]
 800fb92:	6123      	str	r3, [r4, #16]
 800fb94:	edc4 6a07 	vstr	s13, [r4, #28]
 800fb98:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800fb9c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fba0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800fba4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800fba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800fbb0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800fbb4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800fbb8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800fbbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbc0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800fbc4:	68a9      	ldr	r1, [r5, #8]
 800fbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbca:	ed95 6a08 	vldr	s12, [r5, #32]
 800fbce:	edd5 6a07 	vldr	s13, [r5, #28]
 800fbd2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800fbd6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800fbda:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800fbde:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fbe2:	edc5 6a07 	vstr	s13, [r5, #28]
 800fbe6:	441a      	add	r2, r3
 800fbe8:	696b      	ldr	r3, [r5, #20]
 800fbea:	3301      	adds	r3, #1
 800fbec:	602a      	str	r2, [r5, #0]
 800fbee:	616b      	str	r3, [r5, #20]
 800fbf0:	69ab      	ldr	r3, [r5, #24]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	61ab      	str	r3, [r5, #24]
 800fbf6:	692b      	ldr	r3, [r5, #16]
 800fbf8:	440b      	add	r3, r1
 800fbfa:	68e9      	ldr	r1, [r5, #12]
 800fbfc:	428b      	cmp	r3, r1
 800fbfe:	612b      	str	r3, [r5, #16]
 800fc00:	db15      	blt.n	800fc2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800fc02:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800fc06:	3201      	adds	r2, #1
 800fc08:	1a5b      	subs	r3, r3, r1
 800fc0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800fc0e:	602a      	str	r2, [r5, #0]
 800fc10:	612b      	str	r3, [r5, #16]
 800fc12:	edc5 6a07 	vstr	s13, [r5, #28]
 800fc16:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800fc1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fc1e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800fc22:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800fc26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc2a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800fc2e:	3f01      	subs	r7, #1
 800fc30:	e757      	b.n	800fae2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800fc32:	ad39      	add	r5, sp, #228	; 0xe4
 800fc34:	ac19      	add	r4, sp, #100	; 0x64
 800fc36:	e72d      	b.n	800fa94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800fc38:	4613      	mov	r3, r2
 800fc3a:	e744      	b.n	800fac6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800fc40:	469e      	mov	lr, r3
 800fc42:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800fc46:	461f      	mov	r7, r3
 800fc48:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800fc4c:	f04f 0900 	mov.w	r9, #0
 800fc50:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800fc54:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800fc58:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800fc5c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800fc60:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800fc64:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800fc66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800fc6a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800fc6e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800fc72:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800fc76:	960e      	str	r6, [sp, #56]	; 0x38
 800fc78:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800fc7c:	2f00      	cmp	r7, #0
 800fc7e:	d146      	bne.n	800fd0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800fc80:	449c      	add	ip, r3
 800fc82:	1ad7      	subs	r7, r2, r3
 800fc84:	f1b9 0f00 	cmp.w	r9, #0
 800fc88:	d009      	beq.n	800fc9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800fc8a:	9039      	str	r0, [sp, #228]	; 0xe4
 800fc8c:	913d      	str	r1, [sp, #244]	; 0xf4
 800fc8e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800fc92:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800fc96:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800fc9a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800fc9e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800fca0:	f04f 0800 	mov.w	r8, #0
 800fca4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800fca8:	910e      	str	r1, [sp, #56]	; 0x38
 800fcaa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800fcae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800fcb2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800fcb6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800fcba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800fcbe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800fcc2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800fcc6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800fcca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800fcce:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800fcd2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800fcd6:	f1be 0f00 	cmp.w	lr, #0
 800fcda:	d030      	beq.n	800fd3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800fcdc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fcde:	4450      	add	r0, sl
 800fce0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800fce4:	4431      	add	r1, r6
 800fce6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800fcea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800fcee:	4549      	cmp	r1, r9
 800fcf0:	db08      	blt.n	800fd04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800fcf2:	ee77 7a85 	vadd.f32	s15, s15, s10
 800fcf6:	3001      	adds	r0, #1
 800fcf8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fcfc:	eba1 0109 	sub.w	r1, r1, r9
 800fd00:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fd04:	f10e 3eff 	add.w	lr, lr, #4294967295
 800fd08:	f04f 0801 	mov.w	r8, #1
 800fd0c:	e7e3      	b.n	800fcd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800fd0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fd10:	4450      	add	r0, sl
 800fd12:	ee37 7a24 	vadd.f32	s14, s14, s9
 800fd16:	4431      	add	r1, r6
 800fd18:	ee77 7a84 	vadd.f32	s15, s15, s8
 800fd1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800fd20:	4541      	cmp	r1, r8
 800fd22:	db08      	blt.n	800fd36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800fd24:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fd28:	3001      	adds	r0, #1
 800fd2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fd2e:	eba1 0108 	sub.w	r1, r1, r8
 800fd32:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fd36:	3f01      	subs	r7, #1
 800fd38:	f04f 0901 	mov.w	r9, #1
 800fd3c:	e79e      	b.n	800fc7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800fd3e:	449c      	add	ip, r3
 800fd40:	1aff      	subs	r7, r7, r3
 800fd42:	f1b8 0f00 	cmp.w	r8, #0
 800fd46:	d009      	beq.n	800fd5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800fd48:	9019      	str	r0, [sp, #100]	; 0x64
 800fd4a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800fd4e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800fd52:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800fd56:	911d      	str	r1, [sp, #116]	; 0x74
 800fd58:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800fd5c:	1ad2      	subs	r2, r2, r3
 800fd5e:	e6b5      	b.n	800facc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800fd60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	b923      	cbnz	r3, 800fd70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fd66:	4b04      	ldr	r3, [pc, #16]	; (800fd78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800fd68:	6818      	ldr	r0, [r3, #0]
 800fd6a:	6803      	ldr	r3, [r0, #0]
 800fd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd6e:	4798      	blx	r3
 800fd70:	b05b      	add	sp, #364	; 0x16c
 800fd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd76:	bf00      	nop
 800fd78:	240c3d44 	.word	0x240c3d44

0800fd7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	b510      	push	{r4, lr}
 800fd80:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fd84:	d00b      	beq.n	800fd9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800fd86:	2b03      	cmp	r3, #3
 800fd88:	d00e      	beq.n	800fda8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d001      	beq.n	800fd92 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800fd8e:	1860      	adds	r0, r4, r1
 800fd90:	bd10      	pop	{r4, pc}
 800fd92:	8880      	ldrh	r0, [r0, #4]
 800fd94:	4420      	add	r0, r4
 800fd96:	b200      	sxth	r0, r0
 800fd98:	1a80      	subs	r0, r0, r2
 800fd9a:	3801      	subs	r0, #1
 800fd9c:	e7f8      	b.n	800fd90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800fd9e:	8880      	ldrh	r0, [r0, #4]
 800fda0:	4420      	add	r0, r4
 800fda2:	b200      	sxth	r0, r0
 800fda4:	1a40      	subs	r0, r0, r1
 800fda6:	e7f8      	b.n	800fd9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800fda8:	18a0      	adds	r0, r4, r2
 800fdaa:	e7f1      	b.n	800fd90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800fdac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	b510      	push	{r4, lr}
 800fdb0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800fdb4:	d006      	beq.n	800fdc4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800fdb6:	2b03      	cmp	r3, #3
 800fdb8:	d00a      	beq.n	800fdd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	bf14      	ite	ne
 800fdbe:	18a0      	addne	r0, r4, r2
 800fdc0:	1860      	addeq	r0, r4, r1
 800fdc2:	bd10      	pop	{r4, pc}
 800fdc4:	88c0      	ldrh	r0, [r0, #6]
 800fdc6:	4420      	add	r0, r4
 800fdc8:	b200      	sxth	r0, r0
 800fdca:	1a80      	subs	r0, r0, r2
 800fdcc:	3801      	subs	r0, #1
 800fdce:	e7f8      	b.n	800fdc2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800fdd0:	88c0      	ldrh	r0, [r0, #6]
 800fdd2:	4420      	add	r0, r4
 800fdd4:	b200      	sxth	r0, r0
 800fdd6:	1a40      	subs	r0, r0, r1
 800fdd8:	e7f8      	b.n	800fdcc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800fddc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800fddc:	4b01      	ldr	r3, [pc, #4]	; (800fde4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	4770      	bx	lr
 800fde4:	240c3d6c 	.word	0x240c3d6c

0800fde8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800fde8:	4603      	mov	r3, r0
 800fdea:	b1c8      	cbz	r0, 800fe20 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800fdec:	0c02      	lsrs	r2, r0, #16
 800fdee:	0412      	lsls	r2, r2, #16
 800fdf0:	b9a2      	cbnz	r2, 800fe1c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800fdf2:	0403      	lsls	r3, r0, #16
 800fdf4:	2010      	movs	r0, #16
 800fdf6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fdfa:	bf04      	itt	eq
 800fdfc:	021b      	lsleq	r3, r3, #8
 800fdfe:	3008      	addeq	r0, #8
 800fe00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fe04:	bf04      	itt	eq
 800fe06:	011b      	lsleq	r3, r3, #4
 800fe08:	3004      	addeq	r0, #4
 800fe0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fe0e:	bf04      	itt	eq
 800fe10:	009b      	lsleq	r3, r3, #2
 800fe12:	3002      	addeq	r0, #2
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	db04      	blt.n	800fe22 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800fe18:	3001      	adds	r0, #1
 800fe1a:	4770      	bx	lr
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	e7ea      	b.n	800fdf6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800fe20:	2020      	movs	r0, #32
 800fe22:	4770      	bx	lr

0800fe24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800fe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe28:	b087      	sub	sp, #28
 800fe2a:	4681      	mov	r9, r0
 800fe2c:	4698      	mov	r8, r3
 800fe2e:	4610      	mov	r0, r2
 800fe30:	460d      	mov	r5, r1
 800fe32:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800fe36:	b981      	cbnz	r1, 800fe5a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800fe38:	b14b      	cbz	r3, 800fe4e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	464a      	mov	r2, r9
 800fe3e:	4641      	mov	r1, r8
 800fe40:	e9cd 4700 	strd	r4, r7, [sp]
 800fe44:	f7ff ffee 	bl	800fe24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fe48:	b007      	add	sp, #28
 800fe4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe52:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800fe56:	603b      	str	r3, [r7, #0]
 800fe58:	e7f6      	b.n	800fe48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800fe5a:	fa32 fa01 	lsrs.w	sl, r2, r1
 800fe5e:	d107      	bne.n	800fe70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800fe60:	fb09 f602 	mul.w	r6, r9, r2
 800fe64:	fbb6 f0f4 	udiv	r0, r6, r4
 800fe68:	fb04 6610 	mls	r6, r4, r0, r6
 800fe6c:	603e      	str	r6, [r7, #0]
 800fe6e:	e7eb      	b.n	800fe48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800fe70:	2601      	movs	r6, #1
 800fe72:	fa09 fb01 	lsl.w	fp, r9, r1
 800fe76:	408e      	lsls	r6, r1
 800fe78:	fbbb f3f4 	udiv	r3, fp, r4
 800fe7c:	3e01      	subs	r6, #1
 800fe7e:	9302      	str	r3, [sp, #8]
 800fe80:	fb0a f303 	mul.w	r3, sl, r3
 800fe84:	4016      	ands	r6, r2
 800fe86:	9303      	str	r3, [sp, #12]
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f7ff ffad 	bl	800fde8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800fe8e:	464a      	mov	r2, r9
 800fe90:	460b      	mov	r3, r1
 800fe92:	4601      	mov	r1, r0
 800fe94:	4630      	mov	r0, r6
 800fe96:	e9cd 4700 	strd	r4, r7, [sp]
 800fe9a:	f7ff ffc3 	bl	800fe24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fe9e:	9b02      	ldr	r3, [sp, #8]
 800fea0:	4606      	mov	r6, r0
 800fea2:	eb05 0108 	add.w	r1, r5, r8
 800fea6:	fb04 bb13 	mls	fp, r4, r3, fp
 800feaa:	4658      	mov	r0, fp
 800feac:	f7ff ff9c 	bl	800fde8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800feb0:	ab05      	add	r3, sp, #20
 800feb2:	465a      	mov	r2, fp
 800feb4:	e9cd 4300 	strd	r4, r3, [sp]
 800feb8:	4603      	mov	r3, r0
 800feba:	4650      	mov	r0, sl
 800febc:	f7ff ffb2 	bl	800fe24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fec0:	6839      	ldr	r1, [r7, #0]
 800fec2:	9a05      	ldr	r2, [sp, #20]
 800fec4:	9b03      	ldr	r3, [sp, #12]
 800fec6:	4411      	add	r1, r2
 800fec8:	fbb1 f2f4 	udiv	r2, r1, r4
 800fecc:	18d3      	adds	r3, r2, r3
 800fece:	fb04 1412 	mls	r4, r4, r2, r1
 800fed2:	441e      	add	r6, r3
 800fed4:	603c      	str	r4, [r7, #0]
 800fed6:	4430      	add	r0, r6
 800fed8:	e7b6      	b.n	800fe48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800feda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800feda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fede:	b085      	sub	sp, #20
 800fee0:	f1b0 0900 	subs.w	r9, r0, #0
 800fee4:	461d      	mov	r5, r3
 800fee6:	4617      	mov	r7, r2
 800fee8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800feea:	bfbb      	ittet	lt
 800feec:	f1c9 0900 	rsblt	r9, r9, #0
 800fef0:	f04f 36ff 	movlt.w	r6, #4294967295
 800fef4:	2601      	movge	r6, #1
 800fef6:	6823      	ldrlt	r3, [r4, #0]
 800fef8:	bfbc      	itt	lt
 800fefa:	425b      	neglt	r3, r3
 800fefc:	6023      	strlt	r3, [r4, #0]
 800fefe:	2a00      	cmp	r2, #0
 800ff00:	da04      	bge.n	800ff0c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	4257      	negs	r7, r2
 800ff06:	4276      	negs	r6, r6
 800ff08:	425b      	negs	r3, r3
 800ff0a:	6023      	str	r3, [r4, #0]
 800ff0c:	2d00      	cmp	r5, #0
 800ff0e:	4638      	mov	r0, r7
 800ff10:	bfba      	itte	lt
 800ff12:	426d      	neglt	r5, r5
 800ff14:	f04f 38ff 	movlt.w	r8, #4294967295
 800ff18:	f04f 0801 	movge.w	r8, #1
 800ff1c:	f7ff ff64 	bl	800fde8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ff20:	ab03      	add	r3, sp, #12
 800ff22:	463a      	mov	r2, r7
 800ff24:	e9cd 5300 	strd	r5, r3, [sp]
 800ff28:	4603      	mov	r3, r0
 800ff2a:	4648      	mov	r0, r9
 800ff2c:	f7ff ff7a 	bl	800fe24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	9a03      	ldr	r2, [sp, #12]
 800ff34:	4546      	cmp	r6, r8
 800ff36:	441a      	add	r2, r3
 800ff38:	fb92 f3f5 	sdiv	r3, r2, r5
 800ff3c:	4418      	add	r0, r3
 800ff3e:	fb05 2313 	mls	r3, r5, r3, r2
 800ff42:	bf18      	it	ne
 800ff44:	4240      	negne	r0, r0
 800ff46:	1c72      	adds	r2, r6, #1
 800ff48:	6023      	str	r3, [r4, #0]
 800ff4a:	d105      	bne.n	800ff58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f1c3 0200 	rsb	r2, r3, #0
 800ff52:	db0b      	blt.n	800ff6c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800ff54:	6022      	str	r2, [r4, #0]
 800ff56:	e006      	b.n	800ff66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800ff58:	2e01      	cmp	r6, #1
 800ff5a:	d104      	bne.n	800ff66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	da02      	bge.n	800ff66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800ff60:	442b      	add	r3, r5
 800ff62:	3801      	subs	r0, #1
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	b005      	add	sp, #20
 800ff68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff6c:	3801      	subs	r0, #1
 800ff6e:	1b52      	subs	r2, r2, r5
 800ff70:	e7f0      	b.n	800ff54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800ff74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800ff74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ff78:	4c1c      	ldr	r4, [pc, #112]	; (800ffec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800ff7a:	4605      	mov	r5, r0
 800ff7c:	6807      	ldr	r7, [r0, #0]
 800ff7e:	69a3      	ldr	r3, [r4, #24]
 800ff80:	b92b      	cbnz	r3, 800ff8e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800ff82:	6840      	ldr	r0, [r0, #4]
 800ff84:	e9c5 7000 	strd	r7, r0, [r5]
 800ff88:	b004      	add	sp, #16
 800ff8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff8e:	f04f 0802 	mov.w	r8, #2
 800ff92:	68a2      	ldr	r2, [r4, #8]
 800ff94:	ae04      	add	r6, sp, #16
 800ff96:	6820      	ldr	r0, [r4, #0]
 800ff98:	fb93 f1f8 	sdiv	r1, r3, r8
 800ff9c:	440a      	add	r2, r1
 800ff9e:	69e1      	ldr	r1, [r4, #28]
 800ffa0:	f846 2d04 	str.w	r2, [r6, #-4]!
 800ffa4:	463a      	mov	r2, r7
 800ffa6:	9600      	str	r6, [sp, #0]
 800ffa8:	f7ff ff97 	bl	800feda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ffac:	69a3      	ldr	r3, [r4, #24]
 800ffae:	4607      	mov	r7, r0
 800ffb0:	686a      	ldr	r2, [r5, #4]
 800ffb2:	6a21      	ldr	r1, [r4, #32]
 800ffb4:	9600      	str	r6, [sp, #0]
 800ffb6:	6860      	ldr	r0, [r4, #4]
 800ffb8:	f7ff ff8f 	bl	800feda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ffbc:	69a3      	ldr	r3, [r4, #24]
 800ffbe:	6962      	ldr	r2, [r4, #20]
 800ffc0:	4407      	add	r7, r0
 800ffc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ffc4:	9600      	str	r6, [sp, #0]
 800ffc6:	68e0      	ldr	r0, [r4, #12]
 800ffc8:	fb93 f8f8 	sdiv	r8, r3, r8
 800ffcc:	4442      	add	r2, r8
 800ffce:	9203      	str	r2, [sp, #12]
 800ffd0:	682a      	ldr	r2, [r5, #0]
 800ffd2:	f7ff ff82 	bl	800feda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ffd6:	4680      	mov	r8, r0
 800ffd8:	9600      	str	r6, [sp, #0]
 800ffda:	69a3      	ldr	r3, [r4, #24]
 800ffdc:	686a      	ldr	r2, [r5, #4]
 800ffde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ffe0:	6920      	ldr	r0, [r4, #16]
 800ffe2:	f7ff ff7a 	bl	800feda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ffe6:	4440      	add	r0, r8
 800ffe8:	e7cc      	b.n	800ff84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800ffea:	bf00      	nop
 800ffec:	240c3d70 	.word	0x240c3d70

0800fff0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800fff0:	4b07      	ldr	r3, [pc, #28]	; (8010010 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d109      	bne.n	801000c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800fff8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fffc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010000:	8003      	strh	r3, [r0, #0]
 8010002:	4b04      	ldr	r3, [pc, #16]	; (8010014 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8010004:	881b      	ldrh	r3, [r3, #0]
 8010006:	3b01      	subs	r3, #1
 8010008:	1a9b      	subs	r3, r3, r2
 801000a:	800b      	strh	r3, [r1, #0]
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	240c3d3a 	.word	0x240c3d3a
 8010014:	240c3d36 	.word	0x240c3d36

08010018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8010018:	4b07      	ldr	r3, [pc, #28]	; (8010038 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801001a:	b510      	push	{r4, lr}
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d108      	bne.n	8010034 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8010022:	4b06      	ldr	r3, [pc, #24]	; (801003c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8010024:	880c      	ldrh	r4, [r1, #0]
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	f9b0 2000 	ldrsh.w	r2, [r0]
 801002c:	3b01      	subs	r3, #1
 801002e:	1b1b      	subs	r3, r3, r4
 8010030:	8003      	strh	r3, [r0, #0]
 8010032:	800a      	strh	r2, [r1, #0]
 8010034:	bd10      	pop	{r4, pc}
 8010036:	bf00      	nop
 8010038:	240c3d3a 	.word	0x240c3d3a
 801003c:	240c3d36 	.word	0x240c3d36

08010040 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8010040:	4b0a      	ldr	r3, [pc, #40]	; (801006c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8010042:	b510      	push	{r4, lr}
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	2b01      	cmp	r3, #1
 8010048:	d10e      	bne.n	8010068 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801004a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801004e:	8843      	ldrh	r3, [r0, #2]
 8010050:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010054:	18ca      	adds	r2, r1, r3
 8010056:	4b06      	ldr	r3, [pc, #24]	; (8010070 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8010058:	8044      	strh	r4, [r0, #2]
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	1a9b      	subs	r3, r3, r2
 801005e:	8003      	strh	r3, [r0, #0]
 8010060:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010064:	8081      	strh	r1, [r0, #4]
 8010066:	80c3      	strh	r3, [r0, #6]
 8010068:	bd10      	pop	{r4, pc}
 801006a:	bf00      	nop
 801006c:	240c3d3a 	.word	0x240c3d3a
 8010070:	240c3d36 	.word	0x240c3d36

08010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8010074:	4b08      	ldr	r3, [pc, #32]	; (8010098 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d10c      	bne.n	8010096 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801007c:	8803      	ldrh	r3, [r0, #0]
 801007e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8010082:	8842      	ldrh	r2, [r0, #2]
 8010084:	8002      	strh	r2, [r0, #0]
 8010086:	185a      	adds	r2, r3, r1
 8010088:	4b04      	ldr	r3, [pc, #16]	; (801009c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801008a:	881b      	ldrh	r3, [r3, #0]
 801008c:	1a9b      	subs	r3, r3, r2
 801008e:	8043      	strh	r3, [r0, #2]
 8010090:	88c3      	ldrh	r3, [r0, #6]
 8010092:	80c1      	strh	r1, [r0, #6]
 8010094:	8083      	strh	r3, [r0, #4]
 8010096:	4770      	bx	lr
 8010098:	240c3d3a 	.word	0x240c3d3a
 801009c:	240c3d36 	.word	0x240c3d36

080100a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80100a0:	4b07      	ldr	r3, [pc, #28]	; (80100c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80100a2:	b510      	push	{r4, lr}
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d108      	bne.n	80100bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80100aa:	f9b1 3000 	ldrsh.w	r3, [r1]
 80100ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 80100b2:	8003      	strh	r3, [r0, #0]
 80100b4:	8893      	ldrh	r3, [r2, #4]
 80100b6:	3b01      	subs	r3, #1
 80100b8:	1b1b      	subs	r3, r3, r4
 80100ba:	800b      	strh	r3, [r1, #0]
 80100bc:	bd10      	pop	{r4, pc}
 80100be:	bf00      	nop
 80100c0:	240c3d3a 	.word	0x240c3d3a

080100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80100c4:	4b0a      	ldr	r3, [pc, #40]	; (80100f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80100c6:	460a      	mov	r2, r1
 80100c8:	b510      	push	{r4, lr}
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d10d      	bne.n	80100ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80100d0:	8881      	ldrh	r1, [r0, #4]
 80100d2:	8803      	ldrh	r3, [r0, #0]
 80100d4:	440b      	add	r3, r1
 80100d6:	4601      	mov	r1, r0
 80100d8:	3b01      	subs	r3, #1
 80100da:	f821 3b02 	strh.w	r3, [r1], #2
 80100de:	f7ff ffdf 	bl	80100a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80100e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80100e6:	88c2      	ldrh	r2, [r0, #6]
 80100e8:	80c3      	strh	r3, [r0, #6]
 80100ea:	8082      	strh	r2, [r0, #4]
 80100ec:	bd10      	pop	{r4, pc}
 80100ee:	bf00      	nop
 80100f0:	240c3d3a 	.word	0x240c3d3a

080100f4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80100f4:	4b06      	ldr	r3, [pc, #24]	; (8010110 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80100f6:	2100      	movs	r1, #0
 80100f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80100fc:	4b05      	ldr	r3, [pc, #20]	; (8010114 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80100fe:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8010102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010106:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801010a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801010e:	4770      	bx	lr
 8010110:	240c3d36 	.word	0x240c3d36
 8010114:	240c3d38 	.word	0x240c3d38

08010118 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8010118:	4b03      	ldr	r3, [pc, #12]	; (8010128 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801011a:	6818      	ldr	r0, [r3, #0]
 801011c:	b110      	cbz	r0, 8010124 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801011e:	6803      	ldr	r3, [r0, #0]
 8010120:	699b      	ldr	r3, [r3, #24]
 8010122:	4718      	bx	r3
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	240c3da0 	.word	0x240c3da0

0801012c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801012c:	4770      	bx	lr
	...

08010130 <_ZN8touchgfx11Application4drawEv>:
 8010130:	4b09      	ldr	r3, [pc, #36]	; (8010158 <_ZN8touchgfx11Application4drawEv+0x28>)
 8010132:	b507      	push	{r0, r1, r2, lr}
 8010134:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010138:	2100      	movs	r1, #0
 801013a:	4b08      	ldr	r3, [pc, #32]	; (801015c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801013c:	9100      	str	r1, [sp, #0]
 801013e:	4669      	mov	r1, sp
 8010140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010144:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010148:	f8ad 3006 	strh.w	r3, [sp, #6]
 801014c:	6803      	ldr	r3, [r0, #0]
 801014e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010150:	4798      	blx	r3
 8010152:	b003      	add	sp, #12
 8010154:	f85d fb04 	ldr.w	pc, [sp], #4
 8010158:	240c3d36 	.word	0x240c3d36
 801015c:	240c3d38 	.word	0x240c3d38

08010160 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8010160:	4b03      	ldr	r3, [pc, #12]	; (8010170 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8010162:	6818      	ldr	r0, [r3, #0]
 8010164:	b110      	cbz	r0, 801016c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8010166:	6803      	ldr	r3, [r0, #0]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	4718      	bx	r3
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	240c3da0 	.word	0x240c3da0

08010174 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8010174:	4b03      	ldr	r3, [pc, #12]	; (8010184 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8010176:	6818      	ldr	r0, [r3, #0]
 8010178:	b110      	cbz	r0, 8010180 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801017a:	6803      	ldr	r3, [r0, #0]
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	4718      	bx	r3
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	240c3da0 	.word	0x240c3da0

08010188 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8010188:	2300      	movs	r3, #0
 801018a:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801018e:	4770      	bx	lr

08010190 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8010190:	4b03      	ldr	r3, [pc, #12]	; (80101a0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8010192:	6818      	ldr	r0, [r3, #0]
 8010194:	b110      	cbz	r0, 801019c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8010196:	6803      	ldr	r3, [r0, #0]
 8010198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801019a:	4718      	bx	r3
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	240c3da0 	.word	0x240c3da0

080101a4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	4d38      	ldr	r5, [pc, #224]	; (8010288 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 80101a8:	4604      	mov	r4, r0
 80101aa:	6828      	ldr	r0, [r5, #0]
 80101ac:	b140      	cbz	r0, 80101c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80101ae:	7a03      	ldrb	r3, [r0, #8]
 80101b0:	b933      	cbnz	r3, 80101c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80101b2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80101b6:	6803      	ldr	r3, [r0, #0]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101be:	4718      	bx	r3
 80101c0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80101c4:	b97b      	cbnz	r3, 80101e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80101c6:	b170      	cbz	r0, 80101e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80101c8:	7a03      	ldrb	r3, [r0, #8]
 80101ca:	b163      	cbz	r3, 80101e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80101cc:	4b2f      	ldr	r3, [pc, #188]	; (801028c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80101ce:	6818      	ldr	r0, [r3, #0]
 80101d0:	b110      	cbz	r0, 80101d8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80101d2:	6803      	ldr	r3, [r0, #0]
 80101d4:	691b      	ldr	r3, [r3, #16]
 80101d6:	4798      	blx	r3
 80101d8:	6828      	ldr	r0, [r5, #0]
 80101da:	6803      	ldr	r3, [r0, #0]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	4798      	blx	r3
 80101e0:	2301      	movs	r3, #1
 80101e2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80101e6:	2500      	movs	r5, #0
 80101e8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80101ec:	42a8      	cmp	r0, r5
 80101ee:	dd0c      	ble.n	801020a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80101f0:	1963      	adds	r3, r4, r5
 80101f2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80101f6:	b132      	cbz	r2, 8010206 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80101f8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80101fc:	4413      	add	r3, r2
 80101fe:	6858      	ldr	r0, [r3, #4]
 8010200:	6803      	ldr	r3, [r0, #0]
 8010202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010204:	4798      	blx	r3
 8010206:	3501      	adds	r5, #1
 8010208:	e7ee      	b.n	80101e8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801020a:	2300      	movs	r3, #0
 801020c:	461a      	mov	r2, r3
 801020e:	4298      	cmp	r0, r3
 8010210:	d10f      	bne.n	8010232 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 8010212:	1d25      	adds	r5, r4, #4
 8010214:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8010218:	4291      	cmp	r1, r2
 801021a:	dd2d      	ble.n	8010278 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801021c:	1e48      	subs	r0, r1, #1
 801021e:	b280      	uxth	r0, r0
 8010220:	4288      	cmp	r0, r1
 8010222:	d31a      	bcc.n	801025a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8010224:	4b1a      	ldr	r3, [pc, #104]	; (8010290 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8010226:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801022a:	4a1a      	ldr	r2, [pc, #104]	; (8010294 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801022c:	481a      	ldr	r0, [pc, #104]	; (8010298 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801022e:	f00c fd95 	bl	801cd5c <__assert_func>
 8010232:	18e1      	adds	r1, r4, r3
 8010234:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8010238:	b16d      	cbz	r5, 8010256 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801023a:	429a      	cmp	r2, r3
 801023c:	d00a      	beq.n	8010254 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801023e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8010242:	4431      	add	r1, r6
 8010244:	684e      	ldr	r6, [r1, #4]
 8010246:	b291      	uxth	r1, r2
 8010248:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801024c:	604e      	str	r6, [r1, #4]
 801024e:	18a1      	adds	r1, r4, r2
 8010250:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8010254:	3201      	adds	r2, #1
 8010256:	3301      	adds	r3, #1
 8010258:	e7d9      	b.n	801020e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801025a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801025e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8010262:	3304      	adds	r3, #4
 8010264:	428b      	cmp	r3, r1
 8010266:	d004      	beq.n	8010272 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8010268:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801026c:	f843 6c04 	str.w	r6, [r3, #-4]
 8010270:	e7f8      	b.n	8010264 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8010272:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8010276:	e7cd      	b.n	8010214 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8010278:	4b04      	ldr	r3, [pc, #16]	; (801028c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801027a:	6818      	ldr	r0, [r3, #0]
 801027c:	b110      	cbz	r0, 8010284 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801027e:	6803      	ldr	r3, [r0, #0]
 8010280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010282:	e79a      	b.n	80101ba <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8010284:	bd70      	pop	{r4, r5, r6, pc}
 8010286:	bf00      	nop
 8010288:	240c3da4 	.word	0x240c3da4
 801028c:	240c3da0 	.word	0x240c3da0
 8010290:	080204c0 	.word	0x080204c0
 8010294:	080206b4 	.word	0x080206b4
 8010298:	080204ce 	.word	0x080204ce

0801029c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	4606      	mov	r6, r0
 80102a0:	460c      	mov	r4, r1
 80102a2:	b929      	cbnz	r1, 80102b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80102a4:	4b0c      	ldr	r3, [pc, #48]	; (80102d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80102a6:	215e      	movs	r1, #94	; 0x5e
 80102a8:	4a0c      	ldr	r2, [pc, #48]	; (80102dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80102aa:	480d      	ldr	r0, [pc, #52]	; (80102e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80102ac:	f00c fd56 	bl	801cd5c <__assert_func>
 80102b0:	2300      	movs	r3, #0
 80102b2:	4d0c      	ldr	r5, [pc, #48]	; (80102e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80102b4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80102b8:	6828      	ldr	r0, [r5, #0]
 80102ba:	b110      	cbz	r0, 80102c2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80102bc:	6803      	ldr	r3, [r0, #0]
 80102be:	695b      	ldr	r3, [r3, #20]
 80102c0:	4798      	blx	r3
 80102c2:	602c      	str	r4, [r5, #0]
 80102c4:	4620      	mov	r0, r4
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	4798      	blx	r3
 80102cc:	6833      	ldr	r3, [r6, #0]
 80102ce:	4630      	mov	r0, r6
 80102d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102d6:	4718      	bx	r3
 80102d8:	0802048c 	.word	0x0802048c
 80102dc:	08020574 	.word	0x08020574
 80102e0:	08020496 	.word	0x08020496
 80102e4:	240c3da0 	.word	0x240c3da0

080102e8 <_ZN8touchgfx4Rect10restrictToEss>:
 80102e8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	b510      	push	{r4, lr}
 80102f0:	da04      	bge.n	80102fc <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80102f2:	8884      	ldrh	r4, [r0, #4]
 80102f4:	4423      	add	r3, r4
 80102f6:	8083      	strh	r3, [r0, #4]
 80102f8:	2300      	movs	r3, #0
 80102fa:	8003      	strh	r3, [r0, #0]
 80102fc:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010300:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010304:	1b09      	subs	r1, r1, r4
 8010306:	428b      	cmp	r3, r1
 8010308:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801030c:	bfc8      	it	gt
 801030e:	8081      	strhgt	r1, [r0, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	da04      	bge.n	801031e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8010314:	88c1      	ldrh	r1, [r0, #6]
 8010316:	440b      	add	r3, r1
 8010318:	80c3      	strh	r3, [r0, #6]
 801031a:	2300      	movs	r3, #0
 801031c:	8043      	strh	r3, [r0, #2]
 801031e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010322:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010326:	1a52      	subs	r2, r2, r1
 8010328:	4293      	cmp	r3, r2
 801032a:	bfc8      	it	gt
 801032c:	80c2      	strhgt	r2, [r0, #6]
 801032e:	bd10      	pop	{r4, pc}

08010330 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8010330:	4b10      	ldr	r3, [pc, #64]	; (8010374 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8010332:	b510      	push	{r4, lr}
 8010334:	460c      	mov	r4, r1
 8010336:	f9b3 2000 	ldrsh.w	r2, [r3]
 801033a:	4b0f      	ldr	r3, [pc, #60]	; (8010378 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801033c:	4620      	mov	r0, r4
 801033e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010342:	f7ff ffd1 	bl	80102e8 <_ZN8touchgfx4Rect10restrictToEss>
 8010346:	4b0d      	ldr	r3, [pc, #52]	; (801037c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8010348:	6818      	ldr	r0, [r3, #0]
 801034a:	b190      	cbz	r0, 8010372 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801034c:	6803      	ldr	r3, [r0, #0]
 801034e:	4621      	mov	r1, r4
 8010350:	689b      	ldr	r3, [r3, #8]
 8010352:	4798      	blx	r3
 8010354:	4b0a      	ldr	r3, [pc, #40]	; (8010380 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8010356:	6818      	ldr	r0, [r3, #0]
 8010358:	b118      	cbz	r0, 8010362 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801035a:	6803      	ldr	r3, [r0, #0]
 801035c:	4621      	mov	r1, r4
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	4798      	blx	r3
 8010362:	4b08      	ldr	r3, [pc, #32]	; (8010384 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8010364:	4621      	mov	r1, r4
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	6803      	ldr	r3, [r0, #0]
 801036a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801036e:	69db      	ldr	r3, [r3, #28]
 8010370:	4718      	bx	r3
 8010372:	bd10      	pop	{r4, pc}
 8010374:	240c3d38 	.word	0x240c3d38
 8010378:	240c3d36 	.word	0x240c3d36
 801037c:	240c3da0 	.word	0x240c3da0
 8010380:	240c3d9c 	.word	0x240c3d9c
 8010384:	240c3d44 	.word	0x240c3d44

08010388 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8010388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038a:	4606      	mov	r6, r0
 801038c:	4608      	mov	r0, r1
 801038e:	460f      	mov	r7, r1
 8010390:	f7fd fa99 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010394:	b9e8      	cbnz	r0, 80103d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8010396:	f9b7 5000 	ldrsh.w	r5, [r7]
 801039a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801039e:	42a5      	cmp	r5, r4
 80103a0:	db17      	blt.n	80103d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80103a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80103a6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	db11      	blt.n	80103d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80103ae:	88b9      	ldrh	r1, [r7, #4]
 80103b0:	440d      	add	r5, r1
 80103b2:	88b1      	ldrh	r1, [r6, #4]
 80103b4:	440c      	add	r4, r1
 80103b6:	b22d      	sxth	r5, r5
 80103b8:	b224      	sxth	r4, r4
 80103ba:	42a5      	cmp	r5, r4
 80103bc:	dc09      	bgt.n	80103d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80103be:	88f8      	ldrh	r0, [r7, #6]
 80103c0:	4410      	add	r0, r2
 80103c2:	88f2      	ldrh	r2, [r6, #6]
 80103c4:	4413      	add	r3, r2
 80103c6:	b200      	sxth	r0, r0
 80103c8:	b21b      	sxth	r3, r3
 80103ca:	4298      	cmp	r0, r3
 80103cc:	bfcc      	ite	gt
 80103ce:	2000      	movgt	r0, #0
 80103d0:	2001      	movle	r0, #1
 80103d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080103d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80103d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d6:	4604      	mov	r4, r0
 80103d8:	4608      	mov	r0, r1
 80103da:	460d      	mov	r5, r1
 80103dc:	f7fd fa73 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80103e0:	b978      	cbnz	r0, 8010402 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80103e2:	4620      	mov	r0, r4
 80103e4:	f7fd fa6f 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80103e8:	f9b5 6000 	ldrsh.w	r6, [r5]
 80103ec:	b150      	cbz	r0, 8010404 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80103ee:	8026      	strh	r6, [r4, #0]
 80103f0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80103f4:	8063      	strh	r3, [r4, #2]
 80103f6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80103fa:	80a3      	strh	r3, [r4, #4]
 80103fc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010400:	80e3      	strh	r3, [r4, #6]
 8010402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010404:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010408:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801040c:	42b1      	cmp	r1, r6
 801040e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010412:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8010416:	460f      	mov	r7, r1
 8010418:	88ed      	ldrh	r5, [r5, #6]
 801041a:	bfa8      	it	ge
 801041c:	4637      	movge	r7, r6
 801041e:	4293      	cmp	r3, r2
 8010420:	4618      	mov	r0, r3
 8010422:	4466      	add	r6, ip
 8010424:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8010428:	bfa8      	it	ge
 801042a:	4610      	movge	r0, r2
 801042c:	442a      	add	r2, r5
 801042e:	88e5      	ldrh	r5, [r4, #6]
 8010430:	4461      	add	r1, ip
 8010432:	b236      	sxth	r6, r6
 8010434:	8027      	strh	r7, [r4, #0]
 8010436:	442b      	add	r3, r5
 8010438:	b209      	sxth	r1, r1
 801043a:	b212      	sxth	r2, r2
 801043c:	8060      	strh	r0, [r4, #2]
 801043e:	b21b      	sxth	r3, r3
 8010440:	428e      	cmp	r6, r1
 8010442:	bfac      	ite	ge
 8010444:	ebc7 0106 	rsbge	r1, r7, r6
 8010448:	ebc7 0101 	rsblt	r1, r7, r1
 801044c:	429a      	cmp	r2, r3
 801044e:	bfac      	ite	ge
 8010450:	ebc0 0202 	rsbge	r2, r0, r2
 8010454:	ebc0 0203 	rsblt	r2, r0, r3
 8010458:	80a1      	strh	r1, [r4, #4]
 801045a:	80e2      	strh	r2, [r4, #6]
 801045c:	e7d1      	b.n	8010402 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08010460 <_ZN8touchgfx11Application11getInstanceEv>:
 8010460:	4b01      	ldr	r3, [pc, #4]	; (8010468 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8010462:	6818      	ldr	r0, [r3, #0]
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	240c3db0 	.word	0x240c3db0

0801046c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801046c:	2300      	movs	r3, #0
 801046e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8010472:	30a8      	adds	r0, #168	; 0xa8
 8010474:	f820 3c24 	strh.w	r3, [r0, #-36]
 8010478:	f802 3b01 	strb.w	r3, [r2], #1
 801047c:	4282      	cmp	r2, r0
 801047e:	d1fb      	bne.n	8010478 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8010480:	4770      	bx	lr

08010482 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8010482:	4603      	mov	r3, r0
 8010484:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8010488:	2200      	movs	r2, #0
 801048a:	801a      	strh	r2, [r3, #0]
 801048c:	3308      	adds	r3, #8
 801048e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8010492:	f823 2c04 	strh.w	r2, [r3, #-4]
 8010496:	f823 2c02 	strh.w	r2, [r3, #-2]
 801049a:	428b      	cmp	r3, r1
 801049c:	d1f5      	bne.n	801048a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801049e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80104a2:	4770      	bx	lr

080104a4 <_ZN8touchgfx11ApplicationC1Ev>:
 80104a4:	b570      	push	{r4, r5, r6, lr}
 80104a6:	4b19      	ldr	r3, [pc, #100]	; (801050c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80104a8:	2500      	movs	r5, #0
 80104aa:	4604      	mov	r4, r0
 80104ac:	30a8      	adds	r0, #168	; 0xa8
 80104ae:	f840 3ca8 	str.w	r3, [r0, #-168]
 80104b2:	f820 5c24 	strh.w	r5, [r0, #-36]
 80104b6:	f7ff ffe4 	bl	8010482 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80104ba:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80104be:	f7ff ffe0 	bl	8010482 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80104c2:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80104c6:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80104ca:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80104ce:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80104d2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80104d6:	490e      	ldr	r1, [pc, #56]	; (8010510 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80104d8:	480e      	ldr	r0, [pc, #56]	; (8010514 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80104da:	f00a feef 	bl	801b2bc <CRC_Lock>
 80104de:	4e0e      	ldr	r6, [pc, #56]	; (8010518 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80104e0:	4b0e      	ldr	r3, [pc, #56]	; (801051c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80104e2:	b158      	cbz	r0, 80104fc <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80104e4:	801d      	strh	r5, [r3, #0]
 80104e6:	2300      	movs	r3, #0
 80104e8:	4a0d      	ldr	r2, [pc, #52]	; (8010520 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80104ea:	4620      	mov	r0, r4
 80104ec:	6013      	str	r3, [r2, #0]
 80104ee:	4a0d      	ldr	r2, [pc, #52]	; (8010524 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80104f0:	6033      	str	r3, [r6, #0]
 80104f2:	6013      	str	r3, [r2, #0]
 80104f4:	f7ff ffba 	bl	801046c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80104f8:	4620      	mov	r0, r4
 80104fa:	bd70      	pop	{r4, r5, r6, pc}
 80104fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010500:	2002      	movs	r0, #2
 8010502:	801a      	strh	r2, [r3, #0]
 8010504:	6030      	str	r0, [r6, #0]
 8010506:	f001 fa9b 	bl	8011a40 <_ZN8touchgfx6Screen4drawEv>
 801050a:	e7ec      	b.n	80104e6 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801050c:	08020530 	.word	0x08020530
 8010510:	b5e8b5cd 	.word	0xb5e8b5cd
 8010514:	f407a5c2 	.word	0xf407a5c2
 8010518:	240c3da0 	.word	0x240c3da0
 801051c:	24000020 	.word	0x24000020
 8010520:	240c3db0 	.word	0x240c3db0
 8010524:	240c3da4 	.word	0x240c3da4

08010528 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8010528:	b510      	push	{r4, lr}
 801052a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801052e:	428b      	cmp	r3, r1
 8010530:	d806      	bhi.n	8010540 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 8010532:	4b0b      	ldr	r3, [pc, #44]	; (8010560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8010534:	f240 11dd 	movw	r1, #477	; 0x1dd
 8010538:	4a0a      	ldr	r2, [pc, #40]	; (8010564 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801053a:	480b      	ldr	r0, [pc, #44]	; (8010568 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801053c:	f00c fc0e 	bl	801cd5c <__assert_func>
 8010540:	3b01      	subs	r3, #1
 8010542:	b29b      	uxth	r3, r3
 8010544:	428b      	cmp	r3, r1
 8010546:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801054a:	d908      	bls.n	801055e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801054c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010550:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801055a:	685a      	ldr	r2, [r3, #4]
 801055c:	6062      	str	r2, [r4, #4]
 801055e:	bd10      	pop	{r4, pc}
 8010560:	080204c0 	.word	0x080204c0
 8010564:	080205b8 	.word	0x080205b8
 8010568:	080204ce 	.word	0x080204ce

0801056c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801056c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801056e:	466b      	mov	r3, sp
 8010570:	4604      	mov	r4, r0
 8010572:	e883 0006 	stmia.w	r3, {r1, r2}
 8010576:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801057a:	2a07      	cmp	r2, #7
 801057c:	d906      	bls.n	801058c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801057e:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8010580:	f240 11a3 	movw	r1, #419	; 0x1a3
 8010584:	4a08      	ldr	r2, [pc, #32]	; (80105a8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8010586:	4809      	ldr	r0, [pc, #36]	; (80105ac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8010588:	f00c fbe8 	bl	801cd5c <__assert_func>
 801058c:	1c51      	adds	r1, r2, #1
 801058e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8010592:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8010596:	cb03      	ldmia	r3!, {r0, r1}
 8010598:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801059c:	6069      	str	r1, [r5, #4]
 801059e:	b003      	add	sp, #12
 80105a0:	bd30      	pop	{r4, r5, pc}
 80105a2:	bf00      	nop
 80105a4:	080204f7 	.word	0x080204f7
 80105a8:	0802064e 	.word	0x0802064e
 80105ac:	080204ce 	.word	0x080204ce

080105b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80105b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b4:	b08d      	sub	sp, #52	; 0x34
 80105b6:	4b94      	ldr	r3, [pc, #592]	; (8010808 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80105b8:	4683      	mov	fp, r0
 80105ba:	ac08      	add	r4, sp, #32
 80105bc:	e884 0006 	stmia.w	r4, {r1, r2}
 80105c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80105c4:	4620      	mov	r0, r4
 80105c6:	4b91      	ldr	r3, [pc, #580]	; (801080c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 80105c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80105cc:	f7ff fe8c 	bl	80102e8 <_ZN8touchgfx4Rect10restrictToEss>
 80105d0:	4620      	mov	r0, r4
 80105d2:	f7fd f978 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	d16a      	bne.n	80106b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80105da:	9402      	str	r4, [sp, #8]
 80105dc:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80105e0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80105e4:	2400      	movs	r4, #0
 80105e6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80105ea:	9301      	str	r3, [sp, #4]
 80105ec:	36a0      	adds	r6, #160	; 0xa0
 80105ee:	42a5      	cmp	r5, r4
 80105f0:	d00d      	beq.n	801060e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80105f2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80105f6:	9802      	ldr	r0, [sp, #8]
 80105f8:	f7ff fec6 	bl	8010388 <_ZNK8touchgfx4Rect8includesERKS0_>
 80105fc:	b128      	cbz	r0, 801060a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80105fe:	1e69      	subs	r1, r5, #1
 8010600:	9801      	ldr	r0, [sp, #4]
 8010602:	1b09      	subs	r1, r1, r4
 8010604:	b289      	uxth	r1, r1
 8010606:	f7ff ff8f 	bl	8010528 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801060a:	3401      	adds	r4, #1
 801060c:	e7ef      	b.n	80105ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801060e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010612:	1e7b      	subs	r3, r7, #1
 8010614:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8010618:	9703      	str	r7, [sp, #12]
 801061a:	9300      	str	r3, [sp, #0]
 801061c:	2400      	movs	r4, #0
 801061e:	4655      	mov	r5, sl
 8010620:	9704      	str	r7, [sp, #16]
 8010622:	4626      	mov	r6, r4
 8010624:	9b04      	ldr	r3, [sp, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d078      	beq.n	801071c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801062a:	9902      	ldr	r1, [sp, #8]
 801062c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010630:	f7fe fcac 	bl	800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010634:	b360      	cbz	r0, 8010690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8010636:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801063a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801063e:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8010642:	45e6      	cmp	lr, ip
 8010644:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8010648:	db35      	blt.n	80106b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801064a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801064e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010652:	4472      	add	r2, lr
 8010654:	4463      	add	r3, ip
 8010656:	b212      	sxth	r2, r2
 8010658:	b21b      	sxth	r3, r3
 801065a:	429a      	cmp	r2, r3
 801065c:	dc2b      	bgt.n	80106b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801065e:	fa1f f288 	uxth.w	r2, r8
 8010662:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010666:	45c1      	cmp	r9, r8
 8010668:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801066c:	4413      	add	r3, r2
 801066e:	fa1f fc89 	uxth.w	ip, r9
 8010672:	b29b      	uxth	r3, r3
 8010674:	fa0f fe83 	sxth.w	lr, r3
 8010678:	db0f      	blt.n	801069a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801067a:	eba3 030c 	sub.w	r3, r3, ip
 801067e:	1ac9      	subs	r1, r1, r3
 8010680:	b209      	sxth	r1, r1
 8010682:	2900      	cmp	r1, #0
 8010684:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010688:	dd12      	ble.n	80106b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801068a:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801068e:	4604      	mov	r4, r0
 8010690:	9b04      	ldr	r3, [sp, #16]
 8010692:	3d08      	subs	r5, #8
 8010694:	3b01      	subs	r3, #1
 8010696:	9304      	str	r3, [sp, #16]
 8010698:	e7c4      	b.n	8010624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801069a:	4461      	add	r1, ip
 801069c:	b209      	sxth	r1, r1
 801069e:	4571      	cmp	r1, lr
 80106a0:	dc3a      	bgt.n	8010718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80106a2:	eba2 020c 	sub.w	r2, r2, ip
 80106a6:	b212      	sxth	r2, r2
 80106a8:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80106ac:	2a00      	cmp	r2, #0
 80106ae:	dcee      	bgt.n	801068e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80106b0:	b00d      	add	sp, #52	; 0x34
 80106b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b6:	45c1      	cmp	r9, r8
 80106b8:	db2e      	blt.n	8010718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80106ba:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80106be:	4499      	add	r9, r3
 80106c0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80106c4:	4498      	add	r8, r3
 80106c6:	fa0f f989 	sxth.w	r9, r9
 80106ca:	fa0f f888 	sxth.w	r8, r8
 80106ce:	45c1      	cmp	r9, r8
 80106d0:	dc22      	bgt.n	8010718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80106d2:	fa1f f28c 	uxth.w	r2, ip
 80106d6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80106da:	45e6      	cmp	lr, ip
 80106dc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80106e0:	4413      	add	r3, r2
 80106e2:	fa1f f88e 	uxth.w	r8, lr
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	fa0f f983 	sxth.w	r9, r3
 80106ec:	db0a      	blt.n	8010704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 80106ee:	eba3 0308 	sub.w	r3, r3, r8
 80106f2:	1ac9      	subs	r1, r1, r3
 80106f4:	b209      	sxth	r1, r1
 80106f6:	2900      	cmp	r1, #0
 80106f8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80106fc:	ddd8      	ble.n	80106b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80106fe:	f8ad 9020 	strh.w	r9, [sp, #32]
 8010702:	e7c4      	b.n	801068e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8010704:	4441      	add	r1, r8
 8010706:	b209      	sxth	r1, r1
 8010708:	4549      	cmp	r1, r9
 801070a:	dc05      	bgt.n	8010718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801070c:	eba2 0208 	sub.w	r2, r2, r8
 8010710:	b212      	sxth	r2, r2
 8010712:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8010716:	e7c9      	b.n	80106ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8010718:	4606      	mov	r6, r0
 801071a:	e7b9      	b.n	8010690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801071c:	2c00      	cmp	r4, #0
 801071e:	f47f af7d 	bne.w	801061c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8010722:	2e00      	cmp	r6, #0
 8010724:	f000 81e0 	beq.w	8010ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 8010728:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801072c:	4655      	mov	r5, sl
 801072e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8010732:	b2b9      	uxth	r1, r7
 8010734:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010738:	b2b3      	uxth	r3, r6
 801073a:	9104      	str	r1, [sp, #16]
 801073c:	9804      	ldr	r0, [sp, #16]
 801073e:	441a      	add	r2, r3
 8010740:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010744:	b292      	uxth	r2, r2
 8010746:	4401      	add	r1, r0
 8010748:	fa0f f882 	sxth.w	r8, r2
 801074c:	b289      	uxth	r1, r1
 801074e:	9105      	str	r1, [sp, #20]
 8010750:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8010754:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010758:	9b03      	ldr	r3, [sp, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d058      	beq.n	8010810 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801075e:	9902      	ldr	r1, [sp, #8]
 8010760:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010764:	f7fe fc12 	bl	800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801076c:	b1d8      	cbz	r0, 80107a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801076e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8010772:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8010776:	4576      	cmp	r6, lr
 8010778:	dc26      	bgt.n	80107c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801077a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801077e:	44f4      	add	ip, lr
 8010780:	fa0f fc8c 	sxth.w	ip, ip
 8010784:	45e0      	cmp	r8, ip
 8010786:	db1f      	blt.n	80107c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8010788:	428f      	cmp	r7, r1
 801078a:	fa1f fc81 	uxth.w	ip, r1
 801078e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8010792:	dc0f      	bgt.n	80107b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8010794:	9805      	ldr	r0, [sp, #20]
 8010796:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801079a:	eba0 0c0c 	sub.w	ip, r0, ip
 801079e:	eba1 010c 	sub.w	r1, r1, ip
 80107a2:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80107a6:	4620      	mov	r0, r4
 80107a8:	9903      	ldr	r1, [sp, #12]
 80107aa:	3d08      	subs	r5, #8
 80107ac:	4604      	mov	r4, r0
 80107ae:	3901      	subs	r1, #1
 80107b0:	9103      	str	r1, [sp, #12]
 80107b2:	e7cf      	b.n	8010754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 80107b4:	4461      	add	r1, ip
 80107b6:	b209      	sxth	r1, r1
 80107b8:	4549      	cmp	r1, r9
 80107ba:	dcf5      	bgt.n	80107a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80107bc:	9904      	ldr	r1, [sp, #16]
 80107be:	eba1 0c0c 	sub.w	ip, r1, ip
 80107c2:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80107c6:	e7ee      	b.n	80107a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80107c8:	428f      	cmp	r7, r1
 80107ca:	dced      	bgt.n	80107a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80107cc:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80107d0:	4461      	add	r1, ip
 80107d2:	b209      	sxth	r1, r1
 80107d4:	4589      	cmp	r9, r1
 80107d6:	dbe7      	blt.n	80107a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80107d8:	4576      	cmp	r6, lr
 80107da:	fa1f fc8e 	uxth.w	ip, lr
 80107de:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80107e2:	dc08      	bgt.n	80107f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80107e4:	eba2 0c0c 	sub.w	ip, r2, ip
 80107e8:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80107ec:	eba1 010c 	sub.w	r1, r1, ip
 80107f0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80107f4:	e7d7      	b.n	80107a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80107f6:	4461      	add	r1, ip
 80107f8:	b209      	sxth	r1, r1
 80107fa:	4588      	cmp	r8, r1
 80107fc:	dbd4      	blt.n	80107a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80107fe:	eba3 0c0c 	sub.w	ip, r3, ip
 8010802:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8010806:	e7ce      	b.n	80107a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8010808:	240c3d38 	.word	0x240c3d38
 801080c:	240c3d36 	.word	0x240c3d36
 8010810:	2c00      	cmp	r4, #0
 8010812:	f000 8169 	beq.w	8010ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 8010816:	9b00      	ldr	r3, [sp, #0]
 8010818:	3301      	adds	r3, #1
 801081a:	f000 8165 	beq.w	8010ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 801081e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8010822:	9802      	ldr	r0, [sp, #8]
 8010824:	4621      	mov	r1, r4
 8010826:	f7ff fdaf 	bl	8010388 <_ZNK8touchgfx4Rect8includesERKS0_>
 801082a:	b120      	cbz	r0, 8010836 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801082c:	f8bd 1000 	ldrh.w	r1, [sp]
 8010830:	9801      	ldr	r0, [sp, #4]
 8010832:	f7ff fe79 	bl	8010528 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010836:	9902      	ldr	r1, [sp, #8]
 8010838:	4620      	mov	r0, r4
 801083a:	f7fe fba7 	bl	800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801083e:	2800      	cmp	r0, #0
 8010840:	f000 809b 	beq.w	801097a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8010844:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8010848:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801084c:	fa1f f288 	uxth.w	r2, r8
 8010850:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8010854:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8010858:	19d5      	adds	r5, r2, r7
 801085a:	b2a1      	uxth	r1, r4
 801085c:	45a0      	cmp	r8, r4
 801085e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010862:	fa1f f985 	uxth.w	r9, r5
 8010866:	440b      	add	r3, r1
 8010868:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801086c:	fa0f f589 	sxth.w	r5, r9
 8010870:	b29b      	uxth	r3, r3
 8010872:	9503      	str	r5, [sp, #12]
 8010874:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8010878:	9507      	str	r5, [sp, #28]
 801087a:	f340 809d 	ble.w	80109b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 801087e:	1a52      	subs	r2, r2, r1
 8010880:	4584      	cmp	ip, r0
 8010882:	fa0f fe83 	sxth.w	lr, r3
 8010886:	b292      	uxth	r2, r2
 8010888:	b215      	sxth	r5, r2
 801088a:	dd2f      	ble.n	80108ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33c>
 801088c:	9e00      	ldr	r6, [sp, #0]
 801088e:	fa1f fc8c 	uxth.w	ip, ip
 8010892:	b280      	uxth	r0, r0
 8010894:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010898:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801089c:	9e03      	ldr	r6, [sp, #12]
 801089e:	ebac 0300 	sub.w	r3, ip, r0
 80108a2:	448c      	add	ip, r1
 80108a4:	eba6 060e 	sub.w	r6, r6, lr
 80108a8:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	4470      	add	r0, lr
 80108b0:	fa0f fc8c 	sxth.w	ip, ip
 80108b4:	b21c      	sxth	r4, r3
 80108b6:	b200      	sxth	r0, r0
 80108b8:	4366      	muls	r6, r4
 80108ba:	ebac 0000 	sub.w	r0, ip, r0
 80108be:	4368      	muls	r0, r5
 80108c0:	4286      	cmp	r6, r0
 80108c2:	db09      	blt.n	80108d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80108c4:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80108c8:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80108cc:	4417      	add	r7, r2
 80108ce:	f8ad 3020 	strh.w	r3, [sp, #32]
 80108d2:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80108d6:	e681      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80108d8:	440b      	add	r3, r1
 80108da:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80108de:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80108e2:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80108e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80108ea:	e677      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80108ec:	9e03      	ldr	r6, [sp, #12]
 80108ee:	45b6      	cmp	lr, r6
 80108f0:	da28      	bge.n	8010944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80108f2:	9b00      	ldr	r3, [sp, #0]
 80108f4:	eba6 060e 	sub.w	r6, r6, lr
 80108f8:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80108fc:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8010900:	eb04 030c 	add.w	r3, r4, ip
 8010904:	fa1f f883 	uxth.w	r8, r3
 8010908:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801090c:	4403      	add	r3, r0
 801090e:	fa0f f988 	sxth.w	r9, r8
 8010912:	eba0 000c 	sub.w	r0, r0, ip
 8010916:	eba3 0308 	sub.w	r3, r3, r8
 801091a:	4368      	muls	r0, r5
 801091c:	b29b      	uxth	r3, r3
 801091e:	fa0f f883 	sxth.w	r8, r3
 8010922:	fb08 f606 	mul.w	r6, r8, r6
 8010926:	42b0      	cmp	r0, r6
 8010928:	dc06      	bgt.n	8010938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801092a:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801092e:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8010932:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8010936:	e7c9      	b.n	80108cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31c>
 8010938:	4423      	add	r3, r4
 801093a:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801093e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010942:	e64b      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010944:	eba3 0309 	sub.w	r3, r3, r9
 8010948:	9807      	ldr	r0, [sp, #28]
 801094a:	b29b      	uxth	r3, r3
 801094c:	2806      	cmp	r0, #6
 801094e:	fa0f fc83 	sxth.w	ip, r3
 8010952:	d818      	bhi.n	8010986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8010954:	4652      	mov	r2, sl
 8010956:	ab0a      	add	r3, sp, #40	; 0x28
 8010958:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801095c:	6851      	ldr	r1, [r2, #4]
 801095e:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8010962:	c303      	stmia	r3!, {r0, r1}
 8010964:	9b03      	ldr	r3, [sp, #12]
 8010966:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801096a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801096e:	ab0a      	add	r3, sp, #40	; 0x28
 8010970:	9801      	ldr	r0, [sp, #4]
 8010972:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010976:	f7ff fdf9 	bl	801056c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801097a:	9b00      	ldr	r3, [sp, #0]
 801097c:	f1aa 0a08 	sub.w	sl, sl, #8
 8010980:	3b01      	subs	r3, #1
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	e747      	b.n	8010816 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8010986:	9800      	ldr	r0, [sp, #0]
 8010988:	45ac      	cmp	ip, r5
 801098a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801098e:	db0c      	blt.n	80109aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fa>
 8010990:	4417      	add	r7, r2
 8010992:	4458      	add	r0, fp
 8010994:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010998:	b2bf      	uxth	r7, r7
 801099a:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801099e:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80109a2:	440f      	add	r7, r1
 80109a4:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80109a8:	e618      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80109aa:	4458      	add	r0, fp
 80109ac:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80109b0:	443b      	add	r3, r7
 80109b2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80109b6:	e611      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80109b8:	fa1f f18c 	uxth.w	r1, ip
 80109bc:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80109c0:	b282      	uxth	r2, r0
 80109c2:	4584      	cmp	ip, r0
 80109c4:	eb01 0e05 	add.w	lr, r1, r5
 80109c8:	9204      	str	r2, [sp, #16]
 80109ca:	fa1f fe8e 	uxth.w	lr, lr
 80109ce:	9e04      	ldr	r6, [sp, #16]
 80109d0:	fa0f f28e 	sxth.w	r2, lr
 80109d4:	9205      	str	r2, [sp, #20]
 80109d6:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80109da:	4432      	add	r2, r6
 80109dc:	b292      	uxth	r2, r2
 80109de:	9206      	str	r2, [sp, #24]
 80109e0:	da26      	bge.n	8010a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x480>
 80109e2:	eba3 0309 	sub.w	r3, r3, r9
 80109e6:	eba2 020e 	sub.w	r2, r2, lr
 80109ea:	eba0 000c 	sub.w	r0, r0, ip
 80109ee:	eba4 0408 	sub.w	r4, r4, r8
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	b292      	uxth	r2, r2
 80109f6:	fa0f fa83 	sxth.w	sl, r3
 80109fa:	b211      	sxth	r1, r2
 80109fc:	fb0a f000 	mul.w	r0, sl, r0
 8010a00:	434c      	muls	r4, r1
 8010a02:	42a0      	cmp	r0, r4
 8010a04:	9800      	ldr	r0, [sp, #0]
 8010a06:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010a0a:	dc06      	bgt.n	8010a1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8010a0c:	4458      	add	r0, fp
 8010a0e:	9a05      	ldr	r2, [sp, #20]
 8010a10:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8010a14:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8010a18:	e7ca      	b.n	80109b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 8010a1a:	eb0b 0300 	add.w	r3, fp, r0
 8010a1e:	9903      	ldr	r1, [sp, #12]
 8010a20:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8010a24:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8010a28:	442a      	add	r2, r5
 8010a2a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010a2e:	e5d5      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010a30:	9e04      	ldr	r6, [sp, #16]
 8010a32:	9a03      	ldr	r2, [sp, #12]
 8010a34:	1b89      	subs	r1, r1, r6
 8010a36:	b21e      	sxth	r6, r3
 8010a38:	b289      	uxth	r1, r1
 8010a3a:	4296      	cmp	r6, r2
 8010a3c:	fa0f fc81 	sxth.w	ip, r1
 8010a40:	dd25      	ble.n	8010a8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4de>
 8010a42:	eba3 0309 	sub.w	r3, r3, r9
 8010a46:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8010a4a:	9e05      	ldr	r6, [sp, #20]
 8010a4c:	eba4 0408 	sub.w	r4, r4, r8
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	eba6 0902 	sub.w	r9, r6, r2
 8010a56:	fb0c f404 	mul.w	r4, ip, r4
 8010a5a:	b218      	sxth	r0, r3
 8010a5c:	9a00      	ldr	r2, [sp, #0]
 8010a5e:	fb00 f909 	mul.w	r9, r0, r9
 8010a62:	00d2      	lsls	r2, r2, #3
 8010a64:	454c      	cmp	r4, r9
 8010a66:	db03      	blt.n	8010a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8010a68:	445a      	add	r2, fp
 8010a6a:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8010a6e:	e79f      	b.n	80109b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 8010a70:	eb0b 0302 	add.w	r3, fp, r2
 8010a74:	9a03      	ldr	r2, [sp, #12]
 8010a76:	4429      	add	r1, r5
 8010a78:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8010a7c:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8010a80:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8010a84:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010a88:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010a8c:	e5a6      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010a8e:	9b06      	ldr	r3, [sp, #24]
 8010a90:	9c07      	ldr	r4, [sp, #28]
 8010a92:	eba3 020e 	sub.w	r2, r3, lr
 8010a96:	2c06      	cmp	r4, #6
 8010a98:	b292      	uxth	r2, r2
 8010a9a:	b213      	sxth	r3, r2
 8010a9c:	d80d      	bhi.n	8010aba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50a>
 8010a9e:	4651      	mov	r1, sl
 8010aa0:	aa0a      	add	r2, sp, #40	; 0x28
 8010aa2:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8010aa6:	6849      	ldr	r1, [r1, #4]
 8010aa8:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8010aac:	9b05      	ldr	r3, [sp, #20]
 8010aae:	c203      	stmia	r2!, {r0, r1}
 8010ab0:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8010ab4:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8010ab8:	e759      	b.n	801096e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8010aba:	9c00      	ldr	r4, [sp, #0]
 8010abc:	4563      	cmp	r3, ip
 8010abe:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8010ac2:	db0d      	blt.n	8010ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x530>
 8010ac4:	4429      	add	r1, r5
 8010ac6:	9a04      	ldr	r2, [sp, #16]
 8010ac8:	445c      	add	r4, fp
 8010aca:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010ace:	b289      	uxth	r1, r1
 8010ad0:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8010ad4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010ad8:	4411      	add	r1, r2
 8010ada:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8010ade:	e57d      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010ae0:	445c      	add	r4, fp
 8010ae2:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8010ae6:	e79f      	b.n	8010a28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x478>
 8010ae8:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010aec:	2f07      	cmp	r7, #7
 8010aee:	d806      	bhi.n	8010afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 8010af0:	ab08      	add	r3, sp, #32
 8010af2:	9801      	ldr	r0, [sp, #4]
 8010af4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010af8:	f7ff fd38 	bl	801056c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010afc:	e5d8      	b.n	80106b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8010afe:	f107 39ff 	add.w	r9, r7, #4294967295
 8010b02:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010b06:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8010b0a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8010b0e:	f04f 35ff 	mov.w	r5, #4294967295
 8010b12:	2400      	movs	r4, #0
 8010b14:	9304      	str	r3, [sp, #16]
 8010b16:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8010b1a:	f109 32ff 	add.w	r2, r9, #4294967295
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	4690      	mov	r8, r2
 8010b22:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8010b26:	9303      	str	r3, [sp, #12]
 8010b28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010b2c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010b30:	6818      	ldr	r0, [r3, #0]
 8010b32:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8010b36:	9206      	str	r2, [sp, #24]
 8010b38:	bf16      	itet	ne
 8010b3a:	9904      	ldrne	r1, [sp, #16]
 8010b3c:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8010b40:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8010b44:	9305      	str	r3, [sp, #20]
 8010b46:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8010b4a:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8010b4e:	fb16 f601 	smulbb	r6, r6, r1
 8010b52:	6859      	ldr	r1, [r3, #4]
 8010b54:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010b58:	4671      	mov	r1, lr
 8010b5a:	a80a      	add	r0, sp, #40	; 0x28
 8010b5c:	f7ff fc3a 	bl	80103d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010b60:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8010b64:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8010b68:	9b03      	ldr	r3, [sp, #12]
 8010b6a:	9a00      	ldr	r2, [sp, #0]
 8010b6c:	fb11 f100 	smulbb	r1, r1, r0
 8010b70:	2008      	movs	r0, #8
 8010b72:	fb02 6603 	mla	r6, r2, r3, r6
 8010b76:	1b8e      	subs	r6, r1, r6
 8010b78:	fb91 f1f0 	sdiv	r1, r1, r0
 8010b7c:	42b1      	cmp	r1, r6
 8010b7e:	dc21      	bgt.n	8010bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 8010b80:	4556      	cmp	r6, sl
 8010b82:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8010b86:	da03      	bge.n	8010b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 8010b88:	b1e6      	cbz	r6, 8010bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 8010b8a:	46b2      	mov	sl, r6
 8010b8c:	4645      	mov	r5, r8
 8010b8e:	464c      	mov	r4, r9
 8010b90:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b94:	f118 0f02 	cmn.w	r8, #2
 8010b98:	d1c8      	bne.n	8010b2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 8010b9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b9e:	f1a7 0708 	sub.w	r7, r7, #8
 8010ba2:	4691      	mov	r9, r2
 8010ba4:	d1b7      	bne.n	8010b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x566>
 8010ba6:	9b01      	ldr	r3, [sp, #4]
 8010ba8:	b2a6      	uxth	r6, r4
 8010baa:	00e4      	lsls	r4, r4, #3
 8010bac:	1918      	adds	r0, r3, r4
 8010bae:	1c6b      	adds	r3, r5, #1
 8010bb0:	d10b      	bne.n	8010bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x61a>
 8010bb2:	4601      	mov	r1, r0
 8010bb4:	9802      	ldr	r0, [sp, #8]
 8010bb6:	f7ff fc0d 	bl	80103d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010bba:	4631      	mov	r1, r6
 8010bbc:	9801      	ldr	r0, [sp, #4]
 8010bbe:	f7ff fcb3 	bl	8010528 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010bc2:	e50b      	b.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010bc4:	4645      	mov	r5, r8
 8010bc6:	464c      	mov	r4, r9
 8010bc8:	e7ed      	b.n	8010ba6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f6>
 8010bca:	9b01      	ldr	r3, [sp, #4]
 8010bcc:	00ed      	lsls	r5, r5, #3
 8010bce:	445c      	add	r4, fp
 8010bd0:	1959      	adds	r1, r3, r5
 8010bd2:	445d      	add	r5, fp
 8010bd4:	f7ff fbfe 	bl	80103d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010bd8:	9b02      	ldr	r3, [sp, #8]
 8010bda:	cb03      	ldmia	r3!, {r0, r1}
 8010bdc:	9b02      	ldr	r3, [sp, #8]
 8010bde:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8010be2:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8010be6:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8010bea:	6861      	ldr	r1, [r4, #4]
 8010bec:	c303      	stmia	r3!, {r0, r1}
 8010bee:	e7e4      	b.n	8010bba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60a>

08010bf0 <_ZN8touchgfx11Application10invalidateEv>:
 8010bf0:	4b09      	ldr	r3, [pc, #36]	; (8010c18 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010bfa:	4b08      	ldr	r3, [pc, #32]	; (8010c1c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8010bfc:	9100      	str	r1, [sp, #0]
 8010bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c02:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010c06:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010c0a:	ab02      	add	r3, sp, #8
 8010c0c:	e913 0006 	ldmdb	r3, {r1, r2}
 8010c10:	b002      	add	sp, #8
 8010c12:	f7ff bccd 	b.w	80105b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010c16:	bf00      	nop
 8010c18:	240c3d36 	.word	0x240c3d36
 8010c1c:	240c3d38 	.word	0x240c3d38

08010c20 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8010c28:	b09b      	sub	sp, #108	; 0x6c
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	4630      	mov	r0, r6
 8010c2e:	f7fc fe4a 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010c32:	4605      	mov	r5, r0
 8010c34:	b940      	cbnz	r0, 8010c48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8010c36:	4620      	mov	r0, r4
 8010c38:	e896 0006 	ldmia.w	r6, {r1, r2}
 8010c3c:	f7ff fcb8 	bl	80105b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010c40:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8010c44:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8010c48:	4bc6      	ldr	r3, [pc, #792]	; (8010f64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	b33b      	cbz	r3, 8010c9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 8010c4e:	4dc6      	ldr	r5, [pc, #792]	; (8010f68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8010c50:	4628      	mov	r0, r5
 8010c52:	f7fc fe38 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010c56:	4606      	mov	r6, r0
 8010c58:	bb08      	cbnz	r0, 8010c9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	f7ff f9f0 	bl	8010040 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010c60:	6829      	ldr	r1, [r5, #0]
 8010c62:	686a      	ldr	r2, [r5, #4]
 8010c64:	4620      	mov	r0, r4
 8010c66:	f7ff fca3 	bl	80105b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010c6a:	802e      	strh	r6, [r5, #0]
 8010c6c:	806e      	strh	r6, [r5, #2]
 8010c6e:	80ae      	strh	r6, [r5, #4]
 8010c70:	80ee      	strh	r6, [r5, #6]
 8010c72:	4dbe      	ldr	r5, [pc, #760]	; (8010f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8010c74:	a809      	add	r0, sp, #36	; 0x24
 8010c76:	f7ff fc04 	bl	8010482 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010c7a:	882f      	ldrh	r7, [r5, #0]
 8010c7c:	463e      	mov	r6, r7
 8010c7e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010c82:	42b3      	cmp	r3, r6
 8010c84:	d912      	bls.n	8010cac <_ZN8touchgfx11Application15drawCachedAreasEv+0x8c>
 8010c86:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010c8a:	3601      	adds	r6, #1
 8010c8c:	a809      	add	r0, sp, #36	; 0x24
 8010c8e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8010c92:	b2b6      	uxth	r6, r6
 8010c94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8010c98:	f7ff fc68 	bl	801056c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010c9c:	e7ef      	b.n	8010c7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x5e>
 8010c9e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d1e5      	bne.n	8010c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52>
 8010ca6:	b01b      	add	sp, #108	; 0x6c
 8010ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cac:	463e      	mov	r6, r7
 8010cae:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8010cb2:	42b3      	cmp	r3, r6
 8010cb4:	d90b      	bls.n	8010cce <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8010cb6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010cba:	3601      	adds	r6, #1
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8010cc2:	b2b6      	uxth	r6, r6
 8010cc4:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8010cc8:	f7ff fc72 	bl	80105b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010ccc:	e7ef      	b.n	8010cae <_ZN8touchgfx11Application15drawCachedAreasEv+0x8e>
 8010cce:	4ea8      	ldr	r6, [pc, #672]	; (8010f70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8010cd0:	6833      	ldr	r3, [r6, #0]
 8010cd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	f040 80d2 	bne.w	8010e80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x260>
 8010cdc:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8010ce0:	4639      	mov	r1, r7
 8010ce2:	f8b4 c0e8 	ldrh.w	ip, [r4, #232]	; 0xe8
 8010ce6:	2700      	movs	r7, #0
 8010ce8:	33aa      	adds	r3, #170	; 0xaa
 8010cea:	458c      	cmp	ip, r1
 8010cec:	f103 0308 	add.w	r3, r3, #8
 8010cf0:	dd0a      	ble.n	8010d08 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe8>
 8010cf2:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8010cf6:	3101      	adds	r1, #1
 8010cf8:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8010cfc:	4402      	add	r2, r0
 8010cfe:	b212      	sxth	r2, r2
 8010d00:	4297      	cmp	r7, r2
 8010d02:	bfb8      	it	lt
 8010d04:	4617      	movlt	r7, r2
 8010d06:	e7f0      	b.n	8010cea <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8010d08:	4b9a      	ldr	r3, [pc, #616]	; (8010f74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8010d0a:	f8b3 9000 	ldrh.w	r9, [r3]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f1b9 0f0f 	cmp.w	r9, #15
 8010d14:	bf8c      	ite	hi
 8010d16:	ea4f 09d9 	movhi.w	r9, r9, lsr #3
 8010d1a:	f04f 0901 	movls.w	r9, #1
 8010d1e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010d22:	f8bd 801a 	ldrh.w	r8, [sp, #26]
 8010d26:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010d2a:	4440      	add	r0, r8
 8010d2c:	fa0f f880 	sxth.w	r8, r0
 8010d30:	6830      	ldr	r0, [r6, #0]
 8010d32:	4547      	cmp	r7, r8
 8010d34:	6803      	ldr	r3, [r0, #0]
 8010d36:	f340 8086 	ble.w	8010e46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x226>
 8010d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010d3e:	4798      	blx	r3
 8010d40:	eb08 0309 	add.w	r3, r8, r9
 8010d44:	4298      	cmp	r0, r3
 8010d46:	da08      	bge.n	8010d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8010d48:	4287      	cmp	r7, r0
 8010d4a:	dd06      	ble.n	8010d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8010d4c:	4580      	cmp	r8, r0
 8010d4e:	dd70      	ble.n	8010e32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 8010d50:	f1b8 0f00 	cmp.w	r8, #0
 8010d54:	dd6d      	ble.n	8010e32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 8010d56:	4638      	mov	r0, r7
 8010d58:	e004      	b.n	8010d64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x144>
 8010d5a:	4580      	cmp	r8, r0
 8010d5c:	dcfb      	bgt.n	8010d56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8010d5e:	42b8      	cmp	r0, r7
 8010d60:	bfa8      	it	ge
 8010d62:	4638      	movge	r0, r7
 8010d64:	4b84      	ldr	r3, [pc, #528]	; (8010f78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8010d66:	eba0 0008 	sub.w	r0, r0, r8
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	f8ad 8016 	strh.w	r8, [sp, #22]
 8010d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d74:	f8b5 8000 	ldrh.w	r8, [r5]
 8010d78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010d7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010d80:	f8ad 001a 	strh.w	r0, [sp, #26]
 8010d84:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010d88:	4543      	cmp	r3, r8
 8010d8a:	d9ca      	bls.n	8010d22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 8010d8c:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 8010d90:	ab07      	add	r3, sp, #28
 8010d92:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8010d96:	6851      	ldr	r1, [r2, #4]
 8010d98:	c303      	stmia	r3!, {r0, r1}
 8010d9a:	a905      	add	r1, sp, #20
 8010d9c:	a807      	add	r0, sp, #28
 8010d9e:	f7fe f8f5 	bl	800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	d04c      	beq.n	8010e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x220>
 8010da6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010daa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8010dae:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8010db2:	4686      	mov	lr, r0
 8010db4:	4290      	cmp	r0, r2
 8010db6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8010dba:	4450      	add	r0, sl
 8010dbc:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8010dc0:	bfb8      	it	lt
 8010dc2:	4696      	movlt	lr, r2
 8010dc4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010dc8:	4452      	add	r2, sl
 8010dca:	b280      	uxth	r0, r0
 8010dcc:	4299      	cmp	r1, r3
 8010dce:	468c      	mov	ip, r1
 8010dd0:	b292      	uxth	r2, r2
 8010dd2:	f8ad e01c 	strh.w	lr, [sp, #28]
 8010dd6:	fa0f fb80 	sxth.w	fp, r0
 8010dda:	bfb8      	it	lt
 8010ddc:	469c      	movlt	ip, r3
 8010dde:	fa0f fa82 	sxth.w	sl, r2
 8010de2:	f8ad c01e 	strh.w	ip, [sp, #30]
 8010de6:	45d3      	cmp	fp, sl
 8010de8:	bfb8      	it	lt
 8010dea:	4602      	movlt	r2, r0
 8010dec:	eba2 020e 	sub.w	r2, r2, lr
 8010df0:	f8ad 2020 	strh.w	r2, [sp, #32]
 8010df4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8010df8:	4411      	add	r1, r2
 8010dfa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010dfe:	4413      	add	r3, r2
 8010e00:	b289      	uxth	r1, r1
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	b208      	sxth	r0, r1
 8010e06:	b21a      	sxth	r2, r3
 8010e08:	4290      	cmp	r0, r2
 8010e0a:	bfb8      	it	lt
 8010e0c:	460b      	movlt	r3, r1
 8010e0e:	eba3 030c 	sub.w	r3, r3, ip
 8010e12:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010e16:	a807      	add	r0, sp, #28
 8010e18:	f7fc fd55 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e1c:	b920      	cbnz	r0, 8010e28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x208>
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	a907      	add	r1, sp, #28
 8010e22:	4620      	mov	r0, r4
 8010e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e26:	4798      	blx	r3
 8010e28:	f108 0801 	add.w	r8, r8, #1
 8010e2c:	fa1f f888 	uxth.w	r8, r8
 8010e30:	e7a8      	b.n	8010d84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x164>
 8010e32:	6830      	ldr	r0, [r6, #0]
 8010e34:	2101      	movs	r1, #1
 8010e36:	6803      	ldr	r3, [r0, #0]
 8010e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010e3c:	4798      	blx	r3
 8010e3e:	e770      	b.n	8010d22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 8010e40:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010e44:	e7e7      	b.n	8010e16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1f6>
 8010e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e48:	4798      	blx	r3
 8010e4a:	4b4c      	ldr	r3, [pc, #304]	; (8010f7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f43f af29 	beq.w	8010ca6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8010e54:	2300      	movs	r3, #0
 8010e56:	882d      	ldrh	r5, [r5, #0]
 8010e58:	34ea      	adds	r4, #234	; 0xea
 8010e5a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8010e5e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8010e62:	42ab      	cmp	r3, r5
 8010e64:	f67f af1f 	bls.w	8010ca6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8010e68:	ab1a      	add	r3, sp, #104	; 0x68
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010e70:	3501      	adds	r5, #1
 8010e72:	3b44      	subs	r3, #68	; 0x44
 8010e74:	b2ad      	uxth	r5, r5
 8010e76:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010e7a:	f7ff fb77 	bl	801056c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010e7e:	e7ee      	b.n	8010e5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	f040 8137 	bne.w	80110f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>
 8010e86:	4b3e      	ldr	r3, [pc, #248]	; (8010f80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d02c      	beq.n	8010ee8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c8>
 8010e8e:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
 8010e92:	882a      	ldrh	r2, [r5, #0]
 8010e94:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8010e98:	3201      	adds	r2, #1
 8010e9a:	b292      	uxth	r2, r2
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	d0d4      	beq.n	8010e4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 8010ea0:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	; 0xaa
 8010ea4:	4610      	mov	r0, r2
 8010ea6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8010eaa:	f04f 0900 	mov.w	r9, #0
 8010eae:	441f      	add	r7, r3
 8010eb0:	b23f      	sxth	r7, r7
 8010eb2:	b283      	uxth	r3, r0
 8010eb4:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 8010eb8:	4299      	cmp	r1, r3
 8010eba:	f240 80c5 	bls.w	8011048 <_ZN8touchgfx11Application15drawCachedAreasEv+0x428>
 8010ebe:	44a0      	add	r8, r4
 8010ec0:	eb04 0bc0 	add.w	fp, r4, r0, lsl #3
 8010ec4:	4684      	mov	ip, r0
 8010ec6:	f9b8 30aa 	ldrsh.w	r3, [r8, #170]	; 0xaa
 8010eca:	f9bb e0aa 	ldrsh.w	lr, [fp, #170]	; 0xaa
 8010ece:	4573      	cmp	r3, lr
 8010ed0:	f340 80a7 	ble.w	8011022 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8010ed4:	f8bb 70ae 	ldrh.w	r7, [fp, #174]	; 0xae
 8010ed8:	4477      	add	r7, lr
 8010eda:	b23f      	sxth	r7, r7
 8010edc:	429f      	cmp	r7, r3
 8010ede:	bfa8      	it	ge
 8010ee0:	461f      	movge	r7, r3
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	46e1      	mov	r9, ip
 8010ee6:	e7e4      	b.n	8010eb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x292>
 8010ee8:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8010eec:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8010ef0:	f1bb 0f00 	cmp.w	fp, #0
 8010ef4:	d0a9      	beq.n	8010e4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 8010ef6:	882b      	ldrh	r3, [r5, #0]
 8010ef8:	f04f 0800 	mov.w	r8, #0
 8010efc:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8010f00:	3301      	adds	r3, #1
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	b299      	uxth	r1, r3
 8010f06:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8010f0a:	458b      	cmp	fp, r1
 8010f0c:	d93a      	bls.n	8010f84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 8010f0e:	4427      	add	r7, r4
 8010f10:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8010f14:	469c      	mov	ip, r3
 8010f16:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8010f1a:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 8010f1e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8010f22:	4408      	add	r0, r1
 8010f24:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8010f28:	4471      	add	r1, lr
 8010f2a:	b200      	sxth	r0, r0
 8010f2c:	b209      	sxth	r1, r1
 8010f2e:	4288      	cmp	r0, r1
 8010f30:	da06      	bge.n	8010f40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8010f32:	4586      	cmp	lr, r0
 8010f34:	4672      	mov	r2, lr
 8010f36:	bfb8      	it	lt
 8010f38:	4602      	movlt	r2, r0
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	46e0      	mov	r8, ip
 8010f3e:	e7e1      	b.n	8010f04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e4>
 8010f40:	d10b      	bne.n	8010f5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 8010f42:	f9b7 c0ae 	ldrsh.w	ip, [r7, #174]	; 0xae
 8010f46:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8010f4a:	458c      	cmp	ip, r1
 8010f4c:	bfb4      	ite	lt
 8010f4e:	469c      	movlt	ip, r3
 8010f50:	46c4      	movge	ip, r8
 8010f52:	4572      	cmp	r2, lr
 8010f54:	bfb8      	it	lt
 8010f56:	4672      	movlt	r2, lr
 8010f58:	e7ef      	b.n	8010f3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 8010f5a:	428a      	cmp	r2, r1
 8010f5c:	46c4      	mov	ip, r8
 8010f5e:	bfb8      	it	lt
 8010f60:	460a      	movlt	r2, r1
 8010f62:	e7ea      	b.n	8010f3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 8010f64:	240c3d9c 	.word	0x240c3d9c
 8010f68:	240c3da8 	.word	0x240c3da8
 8010f6c:	24000020 	.word	0x24000020
 8010f70:	240c3d44 	.word	0x240c3d44
 8010f74:	240c3d38 	.word	0x240c3d38
 8010f78:	240c3d36 	.word	0x240c3d36
 8010f7c:	240c3d40 	.word	0x240c3d40
 8010f80:	240c3d3a 	.word	0x240c3d3a
 8010f84:	19e1      	adds	r1, r4, r7
 8010f86:	ab07      	add	r3, sp, #28
 8010f88:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8010f8c:	6849      	ldr	r1, [r1, #4]
 8010f8e:	c303      	stmia	r3!, {r0, r1}
 8010f90:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010f94:	a807      	add	r0, sp, #28
 8010f96:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010f9a:	2b13      	cmp	r3, #19
 8010f9c:	440b      	add	r3, r1
 8010f9e:	bfd8      	it	le
 8010fa0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8010fa4:	1a9b      	subs	r3, r3, r2
 8010fa6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010faa:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010fae:	f7ff f861 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010fb2:	a807      	add	r0, sp, #28
 8010fb4:	f7fc fc87 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	d197      	bne.n	8010eec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 8010fbc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010fc0:	4427      	add	r7, r4
 8010fc2:	6830      	ldr	r0, [r6, #0]
 8010fc4:	f1bc 0f14 	cmp.w	ip, #20
 8010fc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010fcc:	f8d0 e000 	ldr.w	lr, [r0]
 8010fd0:	bfa8      	it	ge
 8010fd2:	f04f 0c14 	movge.w	ip, #20
 8010fd6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010fda:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010fde:	fa1f fc8c 	uxth.w	ip, ip
 8010fe2:	f8cd c000 	str.w	ip, [sp]
 8010fe6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8010fea:	47d0      	blx	sl
 8010fec:	4682      	mov	sl, r0
 8010fee:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010ff2:	a807      	add	r0, sp, #28
 8010ff4:	f7ff f824 	bl	8010040 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010ff8:	6823      	ldr	r3, [r4, #0]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	a907      	add	r1, sp, #28
 8010ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011000:	4798      	blx	r3
 8011002:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8011006:	eba0 000a 	sub.w	r0, r0, sl
 801100a:	b200      	sxth	r0, r0
 801100c:	f8a7 00ac 	strh.w	r0, [r7, #172]	; 0xac
 8011010:	2800      	cmp	r0, #0
 8011012:	f47f af6b 	bne.w	8010eec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 8011016:	fa1f f188 	uxth.w	r1, r8
 801101a:	4648      	mov	r0, r9
 801101c:	f7ff fa84 	bl	8010528 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011020:	e764      	b.n	8010eec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 8011022:	d10c      	bne.n	801103e <_ZN8touchgfx11Application15drawCachedAreasEv+0x41e>
 8011024:	f9b8 e0ac 	ldrsh.w	lr, [r8, #172]	; 0xac
 8011028:	f9bb c0ac 	ldrsh.w	ip, [fp, #172]	; 0xac
 801102c:	45e6      	cmp	lr, ip
 801102e:	bfb4      	ite	lt
 8011030:	4684      	movlt	ip, r0
 8011032:	46cc      	movge	ip, r9
 8011034:	f8bb e0ae 	ldrh.w	lr, [fp, #174]	; 0xae
 8011038:	4473      	add	r3, lr
 801103a:	b21b      	sxth	r3, r3
 801103c:	e74e      	b.n	8010edc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2bc>
 801103e:	4577      	cmp	r7, lr
 8011040:	46cc      	mov	ip, r9
 8011042:	bfa8      	it	ge
 8011044:	4677      	movge	r7, lr
 8011046:	e74c      	b.n	8010ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 8011048:	eb0a 0008 	add.w	r0, sl, r8
 801104c:	44a0      	add	r8, r4
 801104e:	f9b8 b0ae 	ldrsh.w	fp, [r8, #174]	; 0xae
 8011052:	f1bb 0f13 	cmp.w	fp, #19
 8011056:	bfdc      	itt	le
 8011058:	f8b8 70aa 	ldrhle.w	r7, [r8, #170]	; 0xaa
 801105c:	445f      	addle	r7, fp
 801105e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011062:	bfd8      	it	le
 8011064:	b23f      	sxthle	r7, r7
 8011066:	f7fc fc2e 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801106a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801106e:	2800      	cmp	r0, #0
 8011070:	f47f af14 	bne.w	8010e9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x27c>
 8011074:	f9b8 20aa 	ldrsh.w	r2, [r8, #170]	; 0xaa
 8011078:	fa1f fb8b 	uxth.w	fp, fp
 801107c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011080:	1abf      	subs	r7, r7, r2
 8011082:	f9b8 10a8 	ldrsh.w	r1, [r8, #168]	; 0xa8
 8011086:	f9b8 30ac 	ldrsh.w	r3, [r8, #172]	; 0xac
 801108a:	2f14      	cmp	r7, #20
 801108c:	6830      	ldr	r0, [r6, #0]
 801108e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011092:	b289      	uxth	r1, r1
 8011094:	bfa8      	it	ge
 8011096:	2714      	movge	r7, #20
 8011098:	f8ad 201e 	strh.w	r2, [sp, #30]
 801109c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80110a0:	b292      	uxth	r2, r2
 80110a2:	f8d0 c000 	ldr.w	ip, [r0]
 80110a6:	b2bf      	uxth	r7, r7
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	455f      	cmp	r7, fp
 80110ac:	bf94      	ite	ls
 80110ae:	9700      	strls	r7, [sp, #0]
 80110b0:	f8cd b000 	strhi.w	fp, [sp]
 80110b4:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
 80110b8:	47b8      	blx	r7
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80110c0:	a907      	add	r1, sp, #28
 80110c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110c4:	4620      	mov	r0, r4
 80110c6:	4798      	blx	r3
 80110c8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80110cc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80110d0:	f8b8 20aa 	ldrh.w	r2, [r8, #170]	; 0xaa
 80110d4:	1a5b      	subs	r3, r3, r1
 80110d6:	440a      	add	r2, r1
 80110d8:	b21b      	sxth	r3, r3
 80110da:	f8a8 20aa 	strh.w	r2, [r8, #170]	; 0xaa
 80110de:	f8a8 30ae 	strh.w	r3, [r8, #174]	; 0xae
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f47f aed5 	bne.w	8010e92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 80110e8:	fa1f f189 	uxth.w	r1, r9
 80110ec:	4650      	mov	r0, sl
 80110ee:	f7ff fa1b 	bl	8010528 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80110f2:	e6ce      	b.n	8010e92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 80110f4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80110f8:	42bb      	cmp	r3, r7
 80110fa:	f67f aea6 	bls.w	8010e4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 80110fe:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8011102:	ab07      	add	r3, sp, #28
 8011104:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011108:	6851      	ldr	r1, [r2, #4]
 801110a:	c303      	stmia	r3!, {r0, r1}
 801110c:	a807      	add	r0, sp, #28
 801110e:	f7fc fbda 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011112:	b920      	cbnz	r0, 801111e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fe>
 8011114:	6823      	ldr	r3, [r4, #0]
 8011116:	a907      	add	r1, sp, #28
 8011118:	4620      	mov	r0, r4
 801111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801111c:	4798      	blx	r3
 801111e:	3701      	adds	r7, #1
 8011120:	b2bf      	uxth	r7, r7
 8011122:	e7e7      	b.n	80110f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>

08011124 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8011124:	4b03      	ldr	r3, [pc, #12]	; (8011134 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8011126:	2200      	movs	r2, #0
 8011128:	801a      	strh	r2, [r3, #0]
 801112a:	805a      	strh	r2, [r3, #2]
 801112c:	809a      	strh	r2, [r3, #4]
 801112e:	80da      	strh	r2, [r3, #6]
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	240c3da8 	.word	0x240c3da8

08011138 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8011138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113c:	b09d      	sub	sp, #116	; 0x74
 801113e:	4606      	mov	r6, r0
 8011140:	4614      	mov	r4, r2
 8011142:	468a      	mov	sl, r1
 8011144:	a803      	add	r0, sp, #12
 8011146:	461d      	mov	r5, r3
 8011148:	f000 fdf4 	bl	8011d34 <_ZN8touchgfx12TextProviderC1Ev>
 801114c:	6833      	ldr	r3, [r6, #0]
 801114e:	4630      	mov	r0, r6
 8011150:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8011154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011156:	4798      	blx	r3
 8011158:	6833      	ldr	r3, [r6, #0]
 801115a:	4607      	mov	r7, r0
 801115c:	4630      	mov	r0, r6
 801115e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011160:	4798      	blx	r3
 8011162:	462a      	mov	r2, r5
 8011164:	2500      	movs	r5, #0
 8011166:	4621      	mov	r1, r4
 8011168:	9000      	str	r0, [sp, #0]
 801116a:	463b      	mov	r3, r7
 801116c:	462c      	mov	r4, r5
 801116e:	46a9      	mov	r9, r5
 8011170:	46a8      	mov	r8, r5
 8011172:	a803      	add	r0, sp, #12
 8011174:	f000 fe31 	bl	8011dda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011178:	2300      	movs	r3, #0
 801117a:	9302      	str	r3, [sp, #8]
 801117c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011180:	429c      	cmp	r4, r3
 8011182:	d002      	beq.n	801118a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8011184:	455c      	cmp	r4, fp
 8011186:	bf18      	it	ne
 8011188:	4625      	movne	r5, r4
 801118a:	ab02      	add	r3, sp, #8
 801118c:	4632      	mov	r2, r6
 801118e:	4651      	mov	r1, sl
 8011190:	a803      	add	r0, sp, #12
 8011192:	f001 f923 	bl	80123dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011196:	4604      	mov	r4, r0
 8011198:	b108      	cbz	r0, 801119e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801119a:	280a      	cmp	r0, #10
 801119c:	d10a      	bne.n	80111b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801119e:	45c1      	cmp	r9, r8
 80111a0:	bf38      	it	cc
 80111a2:	46c1      	movcc	r9, r8
 80111a4:	f04f 0800 	mov.w	r8, #0
 80111a8:	2c00      	cmp	r4, #0
 80111aa:	d1e5      	bne.n	8011178 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80111ac:	4648      	mov	r0, r9
 80111ae:	b01d      	add	sp, #116	; 0x74
 80111b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b4:	9a02      	ldr	r2, [sp, #8]
 80111b6:	2a00      	cmp	r2, #0
 80111b8:	d0de      	beq.n	8011178 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80111ba:	7b57      	ldrb	r7, [r2, #13]
 80111bc:	4629      	mov	r1, r5
 80111be:	6833      	ldr	r3, [r6, #0]
 80111c0:	007f      	lsls	r7, r7, #1
 80111c2:	8894      	ldrh	r4, [r2, #4]
 80111c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111c6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80111ca:	7a97      	ldrb	r7, [r2, #10]
 80111cc:	4307      	orrs	r7, r0
 80111ce:	4630      	mov	r0, r6
 80111d0:	4798      	blx	r3
 80111d2:	4438      	add	r0, r7
 80111d4:	4480      	add	r8, r0
 80111d6:	fa1f f888 	uxth.w	r8, r8
 80111da:	e7e5      	b.n	80111a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080111dc <_ZNK8touchgfx4Font12getCharWidthEt>:
 80111dc:	b508      	push	{r3, lr}
 80111de:	6803      	ldr	r3, [r0, #0]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	4798      	blx	r3
 80111e4:	b128      	cbz	r0, 80111f2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80111e6:	7b43      	ldrb	r3, [r0, #13]
 80111e8:	7a80      	ldrb	r0, [r0, #10]
 80111ea:	005b      	lsls	r3, r3, #1
 80111ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111f0:	4318      	orrs	r0, r3
 80111f2:	bd08      	pop	{r3, pc}

080111f4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80111f4:	b40e      	push	{r1, r2, r3}
 80111f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111f8:	b09e      	sub	sp, #120	; 0x78
 80111fa:	4605      	mov	r5, r0
 80111fc:	ab23      	add	r3, sp, #140	; 0x8c
 80111fe:	a805      	add	r0, sp, #20
 8011200:	f853 4b04 	ldr.w	r4, [r3], #4
 8011204:	9303      	str	r3, [sp, #12]
 8011206:	f000 fd95 	bl	8011d34 <_ZN8touchgfx12TextProviderC1Ev>
 801120a:	682b      	ldr	r3, [r5, #0]
 801120c:	4628      	mov	r0, r5
 801120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011210:	4798      	blx	r3
 8011212:	682b      	ldr	r3, [r5, #0]
 8011214:	4606      	mov	r6, r0
 8011216:	4628      	mov	r0, r5
 8011218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801121a:	4798      	blx	r3
 801121c:	4633      	mov	r3, r6
 801121e:	4621      	mov	r1, r4
 8011220:	ae1e      	add	r6, sp, #120	; 0x78
 8011222:	2400      	movs	r4, #0
 8011224:	9000      	str	r0, [sp, #0]
 8011226:	9a03      	ldr	r2, [sp, #12]
 8011228:	a805      	add	r0, sp, #20
 801122a:	f000 fdd6 	bl	8011dda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801122e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8011232:	462a      	mov	r2, r5
 8011234:	4633      	mov	r3, r6
 8011236:	4621      	mov	r1, r4
 8011238:	a805      	add	r0, sp, #20
 801123a:	f001 f8cf 	bl	80123dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801123e:	b300      	cbz	r0, 8011282 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8011240:	280a      	cmp	r0, #10
 8011242:	d01a      	beq.n	801127a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011244:	9f04      	ldr	r7, [sp, #16]
 8011246:	b1c7      	cbz	r7, 801127a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011248:	7b78      	ldrb	r0, [r7, #13]
 801124a:	7a3b      	ldrb	r3, [r7, #8]
 801124c:	00c1      	lsls	r1, r0, #3
 801124e:	88aa      	ldrh	r2, [r5, #4]
 8011250:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011254:	4319      	orrs	r1, r3
 8011256:	0643      	lsls	r3, r0, #25
 8011258:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801125c:	bf48      	it	mi
 801125e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8011262:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011266:	bf48      	it	mi
 8011268:	b219      	sxthmi	r1, r3
 801126a:	79fb      	ldrb	r3, [r7, #7]
 801126c:	4303      	orrs	r3, r0
 801126e:	4413      	add	r3, r2
 8011270:	1a5b      	subs	r3, r3, r1
 8011272:	b29b      	uxth	r3, r3
 8011274:	42a3      	cmp	r3, r4
 8011276:	bfc8      	it	gt
 8011278:	b21c      	sxthgt	r4, r3
 801127a:	4633      	mov	r3, r6
 801127c:	462a      	mov	r2, r5
 801127e:	2100      	movs	r1, #0
 8011280:	e7da      	b.n	8011238 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8011282:	b2a0      	uxth	r0, r4
 8011284:	b01e      	add	sp, #120	; 0x78
 8011286:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801128a:	b003      	add	sp, #12
 801128c:	4770      	bx	lr

0801128e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801128e:	b40e      	push	{r1, r2, r3}
 8011290:	b570      	push	{r4, r5, r6, lr}
 8011292:	b09d      	sub	sp, #116	; 0x74
 8011294:	4604      	mov	r4, r0
 8011296:	ab21      	add	r3, sp, #132	; 0x84
 8011298:	a803      	add	r0, sp, #12
 801129a:	f853 5b04 	ldr.w	r5, [r3], #4
 801129e:	9302      	str	r3, [sp, #8]
 80112a0:	f000 fd48 	bl	8011d34 <_ZN8touchgfx12TextProviderC1Ev>
 80112a4:	6823      	ldr	r3, [r4, #0]
 80112a6:	4620      	mov	r0, r4
 80112a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112aa:	4798      	blx	r3
 80112ac:	6823      	ldr	r3, [r4, #0]
 80112ae:	4606      	mov	r6, r0
 80112b0:	4620      	mov	r0, r4
 80112b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80112b4:	2401      	movs	r4, #1
 80112b6:	4798      	blx	r3
 80112b8:	4633      	mov	r3, r6
 80112ba:	9000      	str	r0, [sp, #0]
 80112bc:	4629      	mov	r1, r5
 80112be:	9a02      	ldr	r2, [sp, #8]
 80112c0:	a803      	add	r0, sp, #12
 80112c2:	f000 fd8a 	bl	8011dda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80112c6:	a803      	add	r0, sp, #12
 80112c8:	f001 f928 	bl	801251c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80112cc:	b2a3      	uxth	r3, r4
 80112ce:	b138      	cbz	r0, 80112e0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80112d0:	280a      	cmp	r0, #10
 80112d2:	a803      	add	r0, sp, #12
 80112d4:	bf04      	itt	eq
 80112d6:	3301      	addeq	r3, #1
 80112d8:	b21c      	sxtheq	r4, r3
 80112da:	f001 f91f 	bl	801251c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80112de:	e7f5      	b.n	80112cc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80112e0:	4618      	mov	r0, r3
 80112e2:	b01d      	add	sp, #116	; 0x74
 80112e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112e8:	b003      	add	sp, #12
 80112ea:	4770      	bx	lr

080112ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80112ec:	b40e      	push	{r1, r2, r3}
 80112ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f0:	b09e      	sub	sp, #120	; 0x78
 80112f2:	4604      	mov	r4, r0
 80112f4:	ab23      	add	r3, sp, #140	; 0x8c
 80112f6:	a805      	add	r0, sp, #20
 80112f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80112fc:	9303      	str	r3, [sp, #12]
 80112fe:	f000 fd19 	bl	8011d34 <_ZN8touchgfx12TextProviderC1Ev>
 8011302:	6823      	ldr	r3, [r4, #0]
 8011304:	4620      	mov	r0, r4
 8011306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011308:	4798      	blx	r3
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	4606      	mov	r6, r0
 801130e:	4620      	mov	r0, r4
 8011310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011312:	4798      	blx	r3
 8011314:	4633      	mov	r3, r6
 8011316:	4629      	mov	r1, r5
 8011318:	9000      	str	r0, [sp, #0]
 801131a:	9a03      	ldr	r2, [sp, #12]
 801131c:	a805      	add	r0, sp, #20
 801131e:	f000 fd5c 	bl	8011dda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011322:	ad1e      	add	r5, sp, #120	; 0x78
 8011324:	2100      	movs	r1, #0
 8011326:	26ff      	movs	r6, #255	; 0xff
 8011328:	4622      	mov	r2, r4
 801132a:	a805      	add	r0, sp, #20
 801132c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8011330:	462b      	mov	r3, r5
 8011332:	f001 f853 	bl	80123dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011336:	b1d8      	cbz	r0, 8011370 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8011338:	280a      	cmp	r0, #10
 801133a:	d012      	beq.n	8011362 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801133c:	9804      	ldr	r0, [sp, #16]
 801133e:	b180      	cbz	r0, 8011362 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8011340:	7b47      	ldrb	r7, [r0, #13]
 8011342:	7922      	ldrb	r2, [r4, #4]
 8011344:	00fb      	lsls	r3, r7, #3
 8011346:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801134a:	7a03      	ldrb	r3, [r0, #8]
 801134c:	430b      	orrs	r3, r1
 801134e:	0679      	lsls	r1, r7, #25
 8011350:	bf44      	itt	mi
 8011352:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011356:	b21b      	sxthmi	r3, r3
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	b2db      	uxtb	r3, r3
 801135c:	429e      	cmp	r6, r3
 801135e:	bf28      	it	cs
 8011360:	461e      	movcs	r6, r3
 8011362:	462b      	mov	r3, r5
 8011364:	4622      	mov	r2, r4
 8011366:	2100      	movs	r1, #0
 8011368:	a805      	add	r0, sp, #20
 801136a:	f001 f837 	bl	80123dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801136e:	e7e2      	b.n	8011336 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8011370:	4630      	mov	r0, r6
 8011372:	b01e      	add	sp, #120	; 0x78
 8011374:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011378:	b003      	add	sp, #12
 801137a:	4770      	bx	lr

0801137c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801137c:	b513      	push	{r0, r1, r4, lr}
 801137e:	6803      	ldr	r3, [r0, #0]
 8011380:	2400      	movs	r4, #0
 8011382:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011386:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801138a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801138e:	4669      	mov	r1, sp
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	9400      	str	r4, [sp, #0]
 8011394:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011398:	4798      	blx	r3
 801139a:	b002      	add	sp, #8
 801139c:	bd10      	pop	{r4, pc}

0801139e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801139e:	b538      	push	{r3, r4, r5, lr}
 80113a0:	680b      	ldr	r3, [r1, #0]
 80113a2:	460c      	mov	r4, r1
 80113a4:	4605      	mov	r5, r0
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	4798      	blx	r3
 80113aa:	6823      	ldr	r3, [r4, #0]
 80113ac:	4620      	mov	r0, r4
 80113ae:	4629      	mov	r1, r5
 80113b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b2:	4798      	blx	r3
 80113b4:	4628      	mov	r0, r5
 80113b6:	bd38      	pop	{r3, r4, r5, pc}

080113b8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80113b8:	b410      	push	{r4}
 80113ba:	880a      	ldrh	r2, [r1, #0]
 80113bc:	8884      	ldrh	r4, [r0, #4]
 80113be:	4422      	add	r2, r4
 80113c0:	800a      	strh	r2, [r1, #0]
 80113c2:	884a      	ldrh	r2, [r1, #2]
 80113c4:	88c4      	ldrh	r4, [r0, #6]
 80113c6:	4422      	add	r2, r4
 80113c8:	804a      	strh	r2, [r1, #2]
 80113ca:	6940      	ldr	r0, [r0, #20]
 80113cc:	b120      	cbz	r0, 80113d8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80113ce:	6803      	ldr	r3, [r0, #0]
 80113d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d6:	4718      	bx	r3
 80113d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113dc:	4770      	bx	lr

080113de <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80113de:	b570      	push	{r4, r5, r6, lr}
 80113e0:	8882      	ldrh	r2, [r0, #4]
 80113e2:	460c      	mov	r4, r1
 80113e4:	880b      	ldrh	r3, [r1, #0]
 80113e6:	4605      	mov	r5, r0
 80113e8:	4413      	add	r3, r2
 80113ea:	800b      	strh	r3, [r1, #0]
 80113ec:	884b      	ldrh	r3, [r1, #2]
 80113ee:	88c2      	ldrh	r2, [r0, #6]
 80113f0:	4413      	add	r3, r2
 80113f2:	804b      	strh	r3, [r1, #2]
 80113f4:	1d01      	adds	r1, r0, #4
 80113f6:	4620      	mov	r0, r4
 80113f8:	f7fc fa22 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 80113fc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	dd0b      	ble.n	801141c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8011404:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011408:	2b00      	cmp	r3, #0
 801140a:	dd07      	ble.n	801141c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801140c:	6968      	ldr	r0, [r5, #20]
 801140e:	b128      	cbz	r0, 801141c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8011410:	6803      	ldr	r3, [r0, #0]
 8011412:	4621      	mov	r1, r4
 8011414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801141a:	4718      	bx	r3
 801141c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011420 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8011420:	b570      	push	{r4, r5, r6, lr}
 8011422:	8882      	ldrh	r2, [r0, #4]
 8011424:	460c      	mov	r4, r1
 8011426:	880b      	ldrh	r3, [r1, #0]
 8011428:	4605      	mov	r5, r0
 801142a:	4413      	add	r3, r2
 801142c:	800b      	strh	r3, [r1, #0]
 801142e:	884b      	ldrh	r3, [r1, #2]
 8011430:	88c2      	ldrh	r2, [r0, #6]
 8011432:	4413      	add	r3, r2
 8011434:	804b      	strh	r3, [r1, #2]
 8011436:	1d01      	adds	r1, r0, #4
 8011438:	4620      	mov	r0, r4
 801143a:	f7fc fa01 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 801143e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	dd18      	ble.n	8011478 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8011446:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801144a:	2b00      	cmp	r3, #0
 801144c:	dd14      	ble.n	8011478 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801144e:	6968      	ldr	r0, [r5, #20]
 8011450:	b128      	cbz	r0, 801145e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8011452:	6803      	ldr	r3, [r0, #0]
 8011454:	4621      	mov	r1, r4
 8011456:	691b      	ldr	r3, [r3, #16]
 8011458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801145c:	4718      	bx	r3
 801145e:	4b07      	ldr	r3, [pc, #28]	; (801147c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3304      	adds	r3, #4
 8011464:	429d      	cmp	r5, r3
 8011466:	d107      	bne.n	8011478 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8011468:	f7fe fffa 	bl	8010460 <_ZN8touchgfx11Application11getInstanceEv>
 801146c:	6821      	ldr	r1, [r4, #0]
 801146e:	6862      	ldr	r2, [r4, #4]
 8011470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011474:	f7ff b89c 	b.w	80105b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011478:	bd70      	pop	{r4, r5, r6, pc}
 801147a:	bf00      	nop
 801147c:	240c3da0 	.word	0x240c3da0

08011480 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8011480:	b570      	push	{r4, r5, r6, lr}
 8011482:	4604      	mov	r4, r0
 8011484:	4616      	mov	r6, r2
 8011486:	460d      	mov	r5, r1
 8011488:	b901      	cbnz	r1, 801148c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801148a:	b192      	cbz	r2, 80114b2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801148c:	6823      	ldr	r3, [r4, #0]
 801148e:	4620      	mov	r0, r4
 8011490:	699b      	ldr	r3, [r3, #24]
 8011492:	4798      	blx	r3
 8011494:	88e2      	ldrh	r2, [r4, #6]
 8011496:	88a1      	ldrh	r1, [r4, #4]
 8011498:	4620      	mov	r0, r4
 801149a:	4432      	add	r2, r6
 801149c:	4429      	add	r1, r5
 801149e:	b212      	sxth	r2, r2
 80114a0:	b209      	sxth	r1, r1
 80114a2:	f7f8 fc96 	bl	8009dd2 <_ZN8touchgfx8Drawable5setXYEss>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	4620      	mov	r0, r4
 80114aa:	699b      	ldr	r3, [r3, #24]
 80114ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114b0:	4718      	bx	r3
 80114b2:	bd70      	pop	{r4, r5, r6, pc}

080114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80114b4:	b510      	push	{r4, lr}
 80114b6:	2300      	movs	r3, #0
 80114b8:	4604      	mov	r4, r0
 80114ba:	4608      	mov	r0, r1
 80114bc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80114c0:	8023      	strh	r3, [r4, #0]
 80114c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80114c6:	8063      	strh	r3, [r4, #2]
 80114c8:	6803      	ldr	r3, [r0, #0]
 80114ca:	80a1      	strh	r1, [r4, #4]
 80114cc:	4621      	mov	r1, r4
 80114ce:	80e2      	strh	r2, [r4, #6]
 80114d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d2:	4798      	blx	r3
 80114d4:	4620      	mov	r0, r4
 80114d6:	bd10      	pop	{r4, pc}

080114d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80114d8:	b530      	push	{r4, r5, lr}
 80114da:	8083      	strh	r3, [r0, #4]
 80114dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80114e0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80114e4:	7183      	strb	r3, [r0, #6]
 80114e6:	79c3      	ldrb	r3, [r0, #7]
 80114e8:	6101      	str	r1, [r0, #16]
 80114ea:	f365 0306 	bfi	r3, r5, #0, #7
 80114ee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80114f2:	8282      	strh	r2, [r0, #20]
 80114f4:	f365 13c7 	bfi	r3, r5, #7, #1
 80114f8:	71c3      	strb	r3, [r0, #7]
 80114fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80114fe:	7203      	strb	r3, [r0, #8]
 8011500:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011504:	7243      	strb	r3, [r0, #9]
 8011506:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801150a:	8143      	strh	r3, [r0, #10]
 801150c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8011510:	8183      	strh	r3, [r0, #12]
 8011512:	4b01      	ldr	r3, [pc, #4]	; (8011518 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8011514:	6003      	str	r3, [r0, #0]
 8011516:	bd30      	pop	{r4, r5, pc}
 8011518:	080207b8 	.word	0x080207b8

0801151c <_ZNK8touchgfx9ConstFont4findEt>:
 801151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801151e:	6904      	ldr	r4, [r0, #16]
 8011520:	b3bc      	cbz	r4, 8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011522:	88a3      	ldrh	r3, [r4, #4]
 8011524:	8a82      	ldrh	r2, [r0, #20]
 8011526:	1acb      	subs	r3, r1, r3
 8011528:	f102 32ff 	add.w	r2, r2, #4294967295
 801152c:	d431      	bmi.n	8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801152e:	4293      	cmp	r3, r2
 8011530:	dd0c      	ble.n	801154c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8011532:	230e      	movs	r3, #14
 8011534:	fb03 4302 	mla	r3, r3, r2, r4
 8011538:	889b      	ldrh	r3, [r3, #4]
 801153a:	1a5b      	subs	r3, r3, r1
 801153c:	1ad3      	subs	r3, r2, r3
 801153e:	429a      	cmp	r2, r3
 8011540:	db27      	blt.n	8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011542:	2b00      	cmp	r3, #0
 8011544:	bfbc      	itt	lt
 8011546:	2302      	movlt	r3, #2
 8011548:	fb92 f3f3 	sdivlt	r3, r2, r3
 801154c:	2500      	movs	r5, #0
 801154e:	260e      	movs	r6, #14
 8011550:	4295      	cmp	r5, r2
 8011552:	dc1e      	bgt.n	8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011554:	fb06 4003 	mla	r0, r6, r3, r4
 8011558:	8887      	ldrh	r7, [r0, #4]
 801155a:	42b9      	cmp	r1, r7
 801155c:	d01a      	beq.n	8011594 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801155e:	d20d      	bcs.n	801157c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011560:	1e5a      	subs	r2, r3, #1
 8011562:	4295      	cmp	r5, r2
 8011564:	dc15      	bgt.n	8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011566:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801156a:	1a5b      	subs	r3, r3, r1
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	429a      	cmp	r2, r3
 8011570:	db0f      	blt.n	8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011572:	429d      	cmp	r5, r3
 8011574:	ddec      	ble.n	8011550 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011576:	1953      	adds	r3, r2, r5
 8011578:	105b      	asrs	r3, r3, #1
 801157a:	e7e9      	b.n	8011550 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801157c:	1c5d      	adds	r5, r3, #1
 801157e:	42aa      	cmp	r2, r5
 8011580:	db07      	blt.n	8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011582:	8a43      	ldrh	r3, [r0, #18]
 8011584:	1acb      	subs	r3, r1, r3
 8011586:	442b      	add	r3, r5
 8011588:	429d      	cmp	r5, r3
 801158a:	dc02      	bgt.n	8011592 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801158c:	429a      	cmp	r2, r3
 801158e:	dadf      	bge.n	8011550 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011590:	e7f1      	b.n	8011576 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8011592:	2000      	movs	r0, #0
 8011594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011596 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8011596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011598:	4604      	mov	r4, r0
 801159a:	4617      	mov	r7, r2
 801159c:	461e      	mov	r6, r3
 801159e:	b911      	cbnz	r1, 80115a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80115a0:	2500      	movs	r5, #0
 80115a2:	4628      	mov	r0, r5
 80115a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115a6:	290a      	cmp	r1, #10
 80115a8:	d0fa      	beq.n	80115a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80115aa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80115ae:	4291      	cmp	r1, r2
 80115b0:	d0f6      	beq.n	80115a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80115b2:	f242 020b 	movw	r2, #8203	; 0x200b
 80115b6:	4291      	cmp	r1, r2
 80115b8:	d0f2      	beq.n	80115a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80115ba:	f7ff ffaf 	bl	801151c <_ZNK8touchgfx9ConstFont4findEt>
 80115be:	4605      	mov	r5, r0
 80115c0:	b950      	cbnz	r0, 80115d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	4620      	mov	r0, r4
 80115c6:	691b      	ldr	r3, [r3, #16]
 80115c8:	4798      	blx	r3
 80115ca:	4601      	mov	r1, r0
 80115cc:	4620      	mov	r0, r4
 80115ce:	f7ff ffa5 	bl	801151c <_ZNK8touchgfx9ConstFont4findEt>
 80115d2:	4605      	mov	r5, r0
 80115d4:	2800      	cmp	r0, #0
 80115d6:	d0e3      	beq.n	80115a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	4629      	mov	r1, r5
 80115dc:	4620      	mov	r0, r4
 80115de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115e0:	4798      	blx	r3
 80115e2:	6038      	str	r0, [r7, #0]
 80115e4:	6823      	ldr	r3, [r4, #0]
 80115e6:	4620      	mov	r0, r4
 80115e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115ea:	4798      	blx	r3
 80115ec:	7030      	strb	r0, [r6, #0]
 80115ee:	e7d8      	b.n	80115a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080115f0 <_ZN8touchgfx6memsetEPvhm>:
 80115f0:	4402      	add	r2, r0
 80115f2:	4290      	cmp	r0, r2
 80115f4:	d002      	beq.n	80115fc <_ZN8touchgfx6memsetEPvhm+0xc>
 80115f6:	f800 1b01 	strb.w	r1, [r0], #1
 80115fa:	e7fa      	b.n	80115f2 <_ZN8touchgfx6memsetEPvhm+0x2>
 80115fc:	4770      	bx	lr

080115fe <_ZN8touchgfx4clzuEm>:
 80115fe:	4603      	mov	r3, r0
 8011600:	b1c8      	cbz	r0, 8011636 <_ZN8touchgfx4clzuEm+0x38>
 8011602:	0c02      	lsrs	r2, r0, #16
 8011604:	0412      	lsls	r2, r2, #16
 8011606:	b9a2      	cbnz	r2, 8011632 <_ZN8touchgfx4clzuEm+0x34>
 8011608:	0403      	lsls	r3, r0, #16
 801160a:	2010      	movs	r0, #16
 801160c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011610:	bf04      	itt	eq
 8011612:	021b      	lsleq	r3, r3, #8
 8011614:	3008      	addeq	r0, #8
 8011616:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801161a:	bf04      	itt	eq
 801161c:	011b      	lsleq	r3, r3, #4
 801161e:	3004      	addeq	r0, #4
 8011620:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011624:	bf04      	itt	eq
 8011626:	009b      	lsleq	r3, r3, #2
 8011628:	3002      	addeq	r0, #2
 801162a:	2b00      	cmp	r3, #0
 801162c:	db04      	blt.n	8011638 <_ZN8touchgfx4clzuEm+0x3a>
 801162e:	3001      	adds	r0, #1
 8011630:	4770      	bx	lr
 8011632:	2000      	movs	r0, #0
 8011634:	e7ea      	b.n	801160c <_ZN8touchgfx4clzuEm+0xe>
 8011636:	2020      	movs	r0, #32
 8011638:	4770      	bx	lr

0801163a <_ZN8touchgfx7muldivuEmmmRm>:
 801163a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801163e:	4680      	mov	r8, r0
 8011640:	460f      	mov	r7, r1
 8011642:	4615      	mov	r5, r2
 8011644:	461e      	mov	r6, r3
 8011646:	f7ff ffda 	bl	80115fe <_ZN8touchgfx4clzuEm>
 801164a:	b998      	cbnz	r0, 8011674 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801164c:	4608      	mov	r0, r1
 801164e:	f7ff ffd6 	bl	80115fe <_ZN8touchgfx4clzuEm>
 8011652:	2800      	cmp	r0, #0
 8011654:	dd08      	ble.n	8011668 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8011656:	4633      	mov	r3, r6
 8011658:	462a      	mov	r2, r5
 801165a:	4641      	mov	r1, r8
 801165c:	4638      	mov	r0, r7
 801165e:	f7ff ffec 	bl	801163a <_ZN8touchgfx7muldivuEmmmRm>
 8011662:	b003      	add	sp, #12
 8011664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011668:	f04f 33ff 	mov.w	r3, #4294967295
 801166c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011670:	6033      	str	r3, [r6, #0]
 8011672:	e7f6      	b.n	8011662 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8011674:	fa31 f900 	lsrs.w	r9, r1, r0
 8011678:	fb01 f308 	mul.w	r3, r1, r8
 801167c:	d105      	bne.n	801168a <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801167e:	fbb3 f0f5 	udiv	r0, r3, r5
 8011682:	fb05 3510 	mls	r5, r5, r0, r3
 8011686:	6035      	str	r5, [r6, #0]
 8011688:	e7eb      	b.n	8011662 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801168a:	2301      	movs	r3, #1
 801168c:	fa08 fb00 	lsl.w	fp, r8, r0
 8011690:	462a      	mov	r2, r5
 8011692:	4641      	mov	r1, r8
 8011694:	fa03 f000 	lsl.w	r0, r3, r0
 8011698:	4633      	mov	r3, r6
 801169a:	fbbb faf5 	udiv	sl, fp, r5
 801169e:	3801      	subs	r0, #1
 80116a0:	fb09 f40a 	mul.w	r4, r9, sl
 80116a4:	4038      	ands	r0, r7
 80116a6:	f7ff ffc8 	bl	801163a <_ZN8touchgfx7muldivuEmmmRm>
 80116aa:	462a      	mov	r2, r5
 80116ac:	4607      	mov	r7, r0
 80116ae:	ab01      	add	r3, sp, #4
 80116b0:	fb05 b11a 	mls	r1, r5, sl, fp
 80116b4:	4648      	mov	r0, r9
 80116b6:	f7ff ffc0 	bl	801163a <_ZN8touchgfx7muldivuEmmmRm>
 80116ba:	9b01      	ldr	r3, [sp, #4]
 80116bc:	6832      	ldr	r2, [r6, #0]
 80116be:	441a      	add	r2, r3
 80116c0:	fbb2 f3f5 	udiv	r3, r2, r5
 80116c4:	441c      	add	r4, r3
 80116c6:	fb05 2513 	mls	r5, r5, r3, r2
 80116ca:	443c      	add	r4, r7
 80116cc:	4420      	add	r0, r4
 80116ce:	e7da      	b.n	8011686 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080116d0 <_ZN8touchgfx6muldivElllRl>:
 80116d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116d2:	2800      	cmp	r0, #0
 80116d4:	461e      	mov	r6, r3
 80116d6:	bfba      	itte	lt
 80116d8:	4240      	neglt	r0, r0
 80116da:	f04f 34ff 	movlt.w	r4, #4294967295
 80116de:	2401      	movge	r4, #1
 80116e0:	2900      	cmp	r1, #0
 80116e2:	bfbc      	itt	lt
 80116e4:	4249      	neglt	r1, r1
 80116e6:	4264      	neglt	r4, r4
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	bfb6      	itet	lt
 80116ec:	4265      	neglt	r5, r4
 80116ee:	4625      	movge	r5, r4
 80116f0:	4252      	neglt	r2, r2
 80116f2:	4288      	cmp	r0, r1
 80116f4:	bfc2      	ittt	gt
 80116f6:	4603      	movgt	r3, r0
 80116f8:	4608      	movgt	r0, r1
 80116fa:	4619      	movgt	r1, r3
 80116fc:	ab01      	add	r3, sp, #4
 80116fe:	f7ff ff9c 	bl	801163a <_ZN8touchgfx7muldivuEmmmRm>
 8011702:	9b01      	ldr	r3, [sp, #4]
 8011704:	4368      	muls	r0, r5
 8011706:	435c      	muls	r4, r3
 8011708:	6034      	str	r4, [r6, #0]
 801170a:	b002      	add	sp, #8
 801170c:	bd70      	pop	{r4, r5, r6, pc}

0801170e <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801170e:	2000      	movs	r0, #0
 8011710:	4770      	bx	lr

08011712 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8011712:	2001      	movs	r0, #1
 8011714:	4770      	bx	lr

08011716 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8011716:	2002      	movs	r0, #2
 8011718:	4770      	bx	lr

0801171a <_ZN8touchgfx12GestureEventD1Ev>:
 801171a:	4770      	bx	lr

0801171c <_ZN8touchgfx9DragEventD1Ev>:
 801171c:	4770      	bx	lr

0801171e <_ZN8touchgfx10ClickEventD1Ev>:
 801171e:	4770      	bx	lr

08011720 <_ZN8touchgfx10ClickEventD0Ev>:
 8011720:	b510      	push	{r4, lr}
 8011722:	4604      	mov	r4, r0
 8011724:	210c      	movs	r1, #12
 8011726:	f00b faea 	bl	801ccfe <_ZdlPvj>
 801172a:	4620      	mov	r0, r4
 801172c:	bd10      	pop	{r4, pc}

0801172e <_ZN8touchgfx9DragEventD0Ev>:
 801172e:	b510      	push	{r4, lr}
 8011730:	4604      	mov	r4, r0
 8011732:	2110      	movs	r1, #16
 8011734:	f00b fae3 	bl	801ccfe <_ZdlPvj>
 8011738:	4620      	mov	r0, r4
 801173a:	bd10      	pop	{r4, pc}

0801173c <_ZN8touchgfx12GestureEventD0Ev>:
 801173c:	b510      	push	{r4, lr}
 801173e:	4604      	mov	r4, r0
 8011740:	210c      	movs	r1, #12
 8011742:	f00b fadc 	bl	801ccfe <_ZdlPvj>
 8011746:	4620      	mov	r0, r4
 8011748:	bd10      	pop	{r4, pc}
	...

0801174c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801174c:	b530      	push	{r4, r5, lr}
 801174e:	460d      	mov	r5, r1
 8011750:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011752:	b087      	sub	sp, #28
 8011754:	4604      	mov	r4, r0
 8011756:	b301      	cbz	r1, 801179a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011758:	a801      	add	r0, sp, #4
 801175a:	f7ff feab 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801175e:	892a      	ldrh	r2, [r5, #8]
 8011760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011764:	7928      	ldrb	r0, [r5, #4]
 8011766:	1ad2      	subs	r2, r2, r3
 8011768:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801176a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801176e:	441a      	add	r2, r3
 8011770:	896b      	ldrh	r3, [r5, #10]
 8011772:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8011776:	f88d 0010 	strb.w	r0, [sp, #16]
 801177a:	1b5b      	subs	r3, r3, r5
 801177c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801177e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011780:	442b      	add	r3, r5
 8011782:	4d07      	ldr	r5, [pc, #28]	; (80117a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8011784:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011788:	a903      	add	r1, sp, #12
 801178a:	9503      	str	r5, [sp, #12]
 801178c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011790:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011794:	6803      	ldr	r3, [r0, #0]
 8011796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011798:	4798      	blx	r3
 801179a:	b007      	add	sp, #28
 801179c:	bd30      	pop	{r4, r5, pc}
 801179e:	bf00      	nop
 80117a0:	08020838 	.word	0x08020838

080117a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80117a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80117aa:	b08a      	sub	sp, #40	; 0x28
 80117ac:	4604      	mov	r4, r0
 80117ae:	460d      	mov	r5, r1
 80117b0:	b113      	cbz	r3, 80117b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80117b2:	790b      	ldrb	r3, [r1, #4]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d044      	beq.n	8011842 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80117b8:	f104 0804 	add.w	r8, r4, #4
 80117bc:	a803      	add	r0, sp, #12
 80117be:	4641      	mov	r1, r8
 80117c0:	f7ff fe78 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80117c4:	792b      	ldrb	r3, [r5, #4]
 80117c6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80117ca:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80117ce:	b983      	cbnz	r3, 80117f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80117d0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80117d4:	892a      	ldrh	r2, [r5, #8]
 80117d6:	88e9      	ldrh	r1, [r5, #6]
 80117d8:	4640      	mov	r0, r8
 80117da:	1b92      	subs	r2, r2, r6
 80117dc:	9301      	str	r3, [sp, #4]
 80117de:	1bc9      	subs	r1, r1, r7
 80117e0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80117e4:	b212      	sxth	r2, r2
 80117e6:	9300      	str	r3, [sp, #0]
 80117e8:	b209      	sxth	r1, r1
 80117ea:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80117ee:	f7fb ff45 	bl	800d67c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80117f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80117f4:	b329      	cbz	r1, 8011842 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80117f6:	a805      	add	r0, sp, #20
 80117f8:	f7ff fe5c 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80117fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011800:	792b      	ldrb	r3, [r5, #4]
 8011802:	a907      	add	r1, sp, #28
 8011804:	1abf      	subs	r7, r7, r2
 8011806:	88ea      	ldrh	r2, [r5, #6]
 8011808:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801180a:	4417      	add	r7, r2
 801180c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801180e:	f88d 3020 	strb.w	r3, [sp, #32]
 8011812:	4417      	add	r7, r2
 8011814:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011818:	1ab6      	subs	r6, r6, r2
 801181a:	892a      	ldrh	r2, [r5, #8]
 801181c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8011820:	4416      	add	r6, r2
 8011822:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011824:	4416      	add	r6, r2
 8011826:	4a08      	ldr	r2, [pc, #32]	; (8011848 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8011828:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801182c:	2600      	movs	r6, #0
 801182e:	9207      	str	r2, [sp, #28]
 8011830:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8011834:	6803      	ldr	r3, [r0, #0]
 8011836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011838:	4798      	blx	r3
 801183a:	792b      	ldrb	r3, [r5, #4]
 801183c:	b10b      	cbz	r3, 8011842 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801183e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011842:	b00a      	add	sp, #40	; 0x28
 8011844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011848:	08020810 	.word	0x08020810

0801184c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011850:	460c      	mov	r4, r1
 8011852:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011854:	b088      	sub	sp, #32
 8011856:	4605      	mov	r5, r0
 8011858:	2900      	cmp	r1, #0
 801185a:	d06d      	beq.n	8011938 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801185c:	4668      	mov	r0, sp
 801185e:	f7ff fe29 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011862:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8011864:	88e3      	ldrh	r3, [r4, #6]
 8011866:	f9bd 8000 	ldrsh.w	r8, [sp]
 801186a:	440b      	add	r3, r1
 801186c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8011870:	b21b      	sxth	r3, r3
 8011872:	4543      	cmp	r3, r8
 8011874:	db31      	blt.n	80118da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011876:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801187a:	44c4      	add	ip, r8
 801187c:	fa0f fc8c 	sxth.w	ip, ip
 8011880:	4563      	cmp	r3, ip
 8011882:	da2a      	bge.n	80118da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011884:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8011886:	8926      	ldrh	r6, [r4, #8]
 8011888:	4416      	add	r6, r2
 801188a:	b236      	sxth	r6, r6
 801188c:	42be      	cmp	r6, r7
 801188e:	db24      	blt.n	80118da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011890:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011894:	4438      	add	r0, r7
 8011896:	b200      	sxth	r0, r0
 8011898:	4286      	cmp	r6, r0
 801189a:	da1e      	bge.n	80118da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801189c:	8963      	ldrh	r3, [r4, #10]
 801189e:	4419      	add	r1, r3
 80118a0:	b209      	sxth	r1, r1
 80118a2:	4541      	cmp	r1, r8
 80118a4:	db08      	blt.n	80118b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80118a6:	4561      	cmp	r1, ip
 80118a8:	da06      	bge.n	80118b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80118aa:	89a3      	ldrh	r3, [r4, #12]
 80118ac:	441a      	add	r2, r3
 80118ae:	b212      	sxth	r2, r2
 80118b0:	42ba      	cmp	r2, r7
 80118b2:	db01      	blt.n	80118b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80118b4:	4282      	cmp	r2, r0
 80118b6:	db10      	blt.n	80118da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80118b8:	4b21      	ldr	r3, [pc, #132]	; (8011940 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80118ba:	a904      	add	r1, sp, #16
 80118bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80118be:	9304      	str	r3, [sp, #16]
 80118c0:	2302      	movs	r3, #2
 80118c2:	f88d 3014 	strb.w	r3, [sp, #20]
 80118c6:	2300      	movs	r3, #0
 80118c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80118cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80118d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80118d4:	6803      	ldr	r3, [r0, #0]
 80118d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118d8:	4798      	blx	r3
 80118da:	1d29      	adds	r1, r5, #4
 80118dc:	a802      	add	r0, sp, #8
 80118de:	f7ff fde9 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80118e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80118e6:	88e0      	ldrh	r0, [r4, #6]
 80118e8:	eba3 0808 	sub.w	r8, r3, r8
 80118ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80118f0:	7921      	ldrb	r1, [r4, #4]
 80118f2:	fa1f f888 	uxth.w	r8, r8
 80118f6:	1bdf      	subs	r7, r3, r7
 80118f8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80118fc:	b2bb      	uxth	r3, r7
 80118fe:	4440      	add	r0, r8
 8011900:	8922      	ldrh	r2, [r4, #8]
 8011902:	8967      	ldrh	r7, [r4, #10]
 8011904:	4460      	add	r0, ip
 8011906:	89a4      	ldrh	r4, [r4, #12]
 8011908:	441a      	add	r2, r3
 801190a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801190c:	44b8      	add	r8, r7
 801190e:	4423      	add	r3, r4
 8011910:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011914:	4432      	add	r2, r6
 8011916:	44e0      	add	r8, ip
 8011918:	4433      	add	r3, r6
 801191a:	4c0a      	ldr	r4, [pc, #40]	; (8011944 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801191c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801191e:	f88d 1014 	strb.w	r1, [sp, #20]
 8011922:	a904      	add	r1, sp, #16
 8011924:	9404      	str	r4, [sp, #16]
 8011926:	f8ad 2018 	strh.w	r2, [sp, #24]
 801192a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801192e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011932:	6803      	ldr	r3, [r0, #0]
 8011934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011936:	4798      	blx	r3
 8011938:	b008      	add	sp, #32
 801193a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801193e:	bf00      	nop
 8011940:	08020810 	.word	0x08020810
 8011944:	08020824 	.word	0x08020824

08011948 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801194a:	4604      	mov	r4, r0
 801194c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011950:	3201      	adds	r2, #1
 8011952:	d112      	bne.n	801197a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011954:	2500      	movs	r5, #0
 8011956:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801195a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801195e:	6803      	ldr	r3, [r0, #0]
 8011960:	9500      	str	r5, [sp, #0]
 8011962:	466d      	mov	r5, sp
 8011964:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011968:	f8ad 2006 	strh.w	r2, [sp, #6]
 801196c:	4629      	mov	r1, r5
 801196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011970:	4798      	blx	r3
 8011972:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011976:	e884 0003 	stmia.w	r4, {r0, r1}
 801197a:	4620      	mov	r0, r4
 801197c:	b003      	add	sp, #12
 801197e:	bd30      	pop	{r4, r5, pc}

08011980 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011980:	b513      	push	{r0, r1, r4, lr}
 8011982:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011986:	4604      	mov	r4, r0
 8011988:	3301      	adds	r3, #1
 801198a:	d109      	bne.n	80119a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801198c:	4601      	mov	r1, r0
 801198e:	4668      	mov	r0, sp
 8011990:	f7ff fd90 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011994:	f8bd 3000 	ldrh.w	r3, [sp]
 8011998:	8423      	strh	r3, [r4, #32]
 801199a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801199e:	8463      	strh	r3, [r4, #34]	; 0x22
 80119a0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80119a4:	b002      	add	sp, #8
 80119a6:	bd10      	pop	{r4, pc}

080119a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80119a8:	b513      	push	{r0, r1, r4, lr}
 80119aa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80119ae:	4604      	mov	r4, r0
 80119b0:	3301      	adds	r3, #1
 80119b2:	d109      	bne.n	80119c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80119b4:	4601      	mov	r1, r0
 80119b6:	4668      	mov	r0, sp
 80119b8:	f7ff fd7c 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80119bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80119c0:	8423      	strh	r3, [r4, #32]
 80119c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80119c6:	8463      	strh	r3, [r4, #34]	; 0x22
 80119c8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80119cc:	b002      	add	sp, #8
 80119ce:	bd10      	pop	{r4, pc}

080119d0 <_ZN8touchgfx6ScreenC1Ev>:
 80119d0:	b570      	push	{r4, r5, r6, lr}
 80119d2:	4b17      	ldr	r3, [pc, #92]	; (8011a30 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80119d4:	4605      	mov	r5, r0
 80119d6:	4a17      	ldr	r2, [pc, #92]	; (8011a34 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80119d8:	2101      	movs	r1, #1
 80119da:	f845 3b04 	str.w	r3, [r5], #4
 80119de:	2300      	movs	r3, #0
 80119e0:	6042      	str	r2, [r0, #4]
 80119e2:	4604      	mov	r4, r0
 80119e4:	8103      	strh	r3, [r0, #8]
 80119e6:	8143      	strh	r3, [r0, #10]
 80119e8:	8183      	strh	r3, [r0, #12]
 80119ea:	81c3      	strh	r3, [r0, #14]
 80119ec:	8203      	strh	r3, [r0, #16]
 80119ee:	8243      	strh	r3, [r0, #18]
 80119f0:	8283      	strh	r3, [r0, #20]
 80119f2:	82c3      	strh	r3, [r0, #22]
 80119f4:	6203      	str	r3, [r0, #32]
 80119f6:	8483      	strh	r3, [r0, #36]	; 0x24
 80119f8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80119fa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80119fe:	6343      	str	r3, [r0, #52]	; 0x34
 8011a00:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011a04:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011a08:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011a0c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8011a10:	4b09      	ldr	r3, [pc, #36]	; (8011a38 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8011a12:	4628      	mov	r0, r5
 8011a14:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011a18:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8011a1a:	4a08      	ldr	r2, [pc, #32]	; (8011a3c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011a1c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011a20:	4798      	blx	r3
 8011a22:	6863      	ldr	r3, [r4, #4]
 8011a24:	4628      	mov	r0, r5
 8011a26:	4631      	mov	r1, r6
 8011a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a2a:	4798      	blx	r3
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	bd70      	pop	{r4, r5, r6, pc}
 8011a30:	0802084c 	.word	0x0802084c
 8011a34:	0801f654 	.word	0x0801f654
 8011a38:	240c3d38 	.word	0x240c3d38
 8011a3c:	240c3d36 	.word	0x240c3d36

08011a40 <_ZN8touchgfx6Screen4drawEv>:
 8011a40:	4b09      	ldr	r3, [pc, #36]	; (8011a68 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011a42:	b507      	push	{r0, r1, r2, lr}
 8011a44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a48:	2100      	movs	r1, #0
 8011a4a:	4b08      	ldr	r3, [pc, #32]	; (8011a6c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011a4c:	9100      	str	r1, [sp, #0]
 8011a4e:	4669      	mov	r1, sp
 8011a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a54:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011a58:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011a5c:	6803      	ldr	r3, [r0, #0]
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	4798      	blx	r3
 8011a62:	b003      	add	sp, #12
 8011a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a68:	240c3d36 	.word	0x240c3d36
 8011a6c:	240c3d38 	.word	0x240c3d38

08011a70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011a78:	b089      	sub	sp, #36	; 0x24
 8011a7a:	4680      	mov	r8, r0
 8011a7c:	460c      	mov	r4, r1
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	4615      	mov	r5, r2
 8011a82:	dd0e      	ble.n	8011aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011a84:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	dd0a      	ble.n	8011aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f7ff ff5b 	bl	8011948 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011a92:	4621      	mov	r1, r4
 8011a94:	f7fd fa7a 	bl	800ef8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011a98:	69eb      	ldr	r3, [r5, #28]
 8011a9a:	b928      	cbnz	r0, 8011aa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011a9c:	461d      	mov	r5, r3
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1f4      	bne.n	8011a8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8011aa2:	b009      	add	sp, #36	; 0x24
 8011aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa8:	ae04      	add	r6, sp, #16
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	f000 80b5 	beq.w	8011c1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011ab0:	682b      	ldr	r3, [r5, #0]
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	a802      	add	r0, sp, #8
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	4798      	blx	r3
 8011aba:	4628      	mov	r0, r5
 8011abc:	f7ff ff60 	bl	8011980 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011ac0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011ac4:	4407      	add	r7, r0
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	f7ff ff6e 	bl	80119a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011acc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011ad0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011ad4:	b23f      	sxth	r7, r7
 8011ad6:	4418      	add	r0, r3
 8011ad8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011adc:	4621      	mov	r1, r4
 8011ade:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011ae2:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011aec:	f8ad 7010 	strh.w	r7, [sp, #16]
 8011af0:	f7fb fea6 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 8011af4:	4628      	mov	r0, r5
 8011af6:	f7ff ff27 	bl	8011948 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011afa:	ab06      	add	r3, sp, #24
 8011afc:	4602      	mov	r2, r0
 8011afe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011b02:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fb fe99 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 8011b0e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011b12:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011b16:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011b1a:	4299      	cmp	r1, r3
 8011b1c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011b20:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8011b24:	d10b      	bne.n	8011b3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011b26:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011b2a:	4552      	cmp	r2, sl
 8011b2c:	d107      	bne.n	8011b3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011b2e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011b32:	455a      	cmp	r2, fp
 8011b34:	d103      	bne.n	8011b3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011b36:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011b3a:	454a      	cmp	r2, r9
 8011b3c:	d06d      	beq.n	8011c1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011b3e:	f1bb 0f00 	cmp.w	fp, #0
 8011b42:	dd65      	ble.n	8011c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011b44:	f1b9 0f00 	cmp.w	r9, #0
 8011b48:	dd62      	ble.n	8011c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011b4a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011b4e:	fa1f f08a 	uxth.w	r0, sl
 8011b52:	4552      	cmp	r2, sl
 8011b54:	9000      	str	r0, [sp, #0]
 8011b56:	da12      	bge.n	8011b7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8011b58:	9301      	str	r3, [sp, #4]
 8011b5a:	9b00      	ldr	r3, [sp, #0]
 8011b5c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011b60:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011b64:	1a9a      	subs	r2, r3, r2
 8011b66:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011b6a:	4631      	mov	r1, r6
 8011b6c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011b70:	4640      	mov	r0, r8
 8011b72:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011b76:	69ea      	ldr	r2, [r5, #28]
 8011b78:	f7ff ff7a 	bl	8011a70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011b7c:	9b01      	ldr	r3, [sp, #4]
 8011b7e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011b82:	b29f      	uxth	r7, r3
 8011b84:	429a      	cmp	r2, r3
 8011b86:	da0d      	bge.n	8011ba4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011b88:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011b8c:	1aba      	subs	r2, r7, r2
 8011b8e:	f8ad a012 	strh.w	sl, [sp, #18]
 8011b92:	4631      	mov	r1, r6
 8011b94:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011b98:	4640      	mov	r0, r8
 8011b9a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011b9e:	69ea      	ldr	r2, [r5, #28]
 8011ba0:	f7ff ff66 	bl	8011a70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011ba4:	8822      	ldrh	r2, [r4, #0]
 8011ba6:	445f      	add	r7, fp
 8011ba8:	88a3      	ldrh	r3, [r4, #4]
 8011baa:	b2bf      	uxth	r7, r7
 8011bac:	4413      	add	r3, r2
 8011bae:	b23a      	sxth	r2, r7
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	b219      	sxth	r1, r3
 8011bb4:	4291      	cmp	r1, r2
 8011bb6:	dd0d      	ble.n	8011bd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8011bb8:	1bdb      	subs	r3, r3, r7
 8011bba:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011bbe:	f8ad a012 	strh.w	sl, [sp, #18]
 8011bc2:	4631      	mov	r1, r6
 8011bc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011bc8:	4640      	mov	r0, r8
 8011bca:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011bce:	69ea      	ldr	r2, [r5, #28]
 8011bd0:	f7ff ff4e 	bl	8011a70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011bd4:	88e2      	ldrh	r2, [r4, #6]
 8011bd6:	8863      	ldrh	r3, [r4, #2]
 8011bd8:	4413      	add	r3, r2
 8011bda:	9a00      	ldr	r2, [sp, #0]
 8011bdc:	444a      	add	r2, r9
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	fa1f f982 	uxth.w	r9, r2
 8011be4:	b219      	sxth	r1, r3
 8011be6:	fa0f f289 	sxth.w	r2, r9
 8011bea:	428a      	cmp	r2, r1
 8011bec:	da15      	bge.n	8011c1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011bee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011bf2:	eba3 0309 	sub.w	r3, r3, r9
 8011bf6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011bfa:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011bfe:	4631      	mov	r1, r6
 8011c00:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011c04:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011c08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c0c:	69ea      	ldr	r2, [r5, #28]
 8011c0e:	e001      	b.n	8011c14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8011c10:	69ea      	ldr	r2, [r5, #28]
 8011c12:	4621      	mov	r1, r4
 8011c14:	4640      	mov	r0, r8
 8011c16:	f7ff ff2b 	bl	8011a70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	f7ff fe94 	bl	8011948 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011c20:	6861      	ldr	r1, [r4, #4]
 8011c22:	4602      	mov	r2, r0
 8011c24:	4633      	mov	r3, r6
 8011c26:	6820      	ldr	r0, [r4, #0]
 8011c28:	c303      	stmia	r3!, {r0, r1}
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f7fb fe07 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 8011c32:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	f77f af33 	ble.w	8011aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011c3c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f77f af2e 	ble.w	8011aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011c46:	4628      	mov	r0, r5
 8011c48:	f7ff fe9a 	bl	8011980 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011c4c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011c50:	1a18      	subs	r0, r3, r0
 8011c52:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011c56:	4628      	mov	r0, r5
 8011c58:	f7ff fea6 	bl	80119a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011c5c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011c60:	4631      	mov	r1, r6
 8011c62:	1a18      	subs	r0, r3, r0
 8011c64:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011c68:	4628      	mov	r0, r5
 8011c6a:	682b      	ldr	r3, [r5, #0]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	4798      	blx	r3
 8011c70:	e717      	b.n	8011aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08011c72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8011c72:	b570      	push	{r4, r5, r6, lr}
 8011c74:	1d06      	adds	r6, r0, #4
 8011c76:	b086      	sub	sp, #24
 8011c78:	460c      	mov	r4, r1
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	4631      	mov	r1, r6
 8011c7e:	4605      	mov	r5, r0
 8011c80:	a802      	add	r0, sp, #8
 8011c82:	9301      	str	r3, [sp, #4]
 8011c84:	f7ff fc16 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c88:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011c8c:	8822      	ldrh	r2, [r4, #0]
 8011c8e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8011c92:	1ad2      	subs	r2, r2, r3
 8011c94:	8863      	ldrh	r3, [r4, #2]
 8011c96:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011c9a:	1a5b      	subs	r3, r3, r1
 8011c9c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011ca0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011ca4:	aa01      	add	r2, sp, #4
 8011ca6:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011caa:	4630      	mov	r0, r6
 8011cac:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011cb0:	a904      	add	r1, sp, #16
 8011cb2:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011cb6:	f7fb fe9b 	bl	800d9f0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011cba:	9a01      	ldr	r2, [sp, #4]
 8011cbc:	b11a      	cbz	r2, 8011cc6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	f7ff fed5 	bl	8011a70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011cc6:	b006      	add	sp, #24
 8011cc8:	bd70      	pop	{r4, r5, r6, pc}

08011cca <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011cca:	4602      	mov	r2, r0
 8011ccc:	b530      	push	{r4, r5, lr}
 8011cce:	4604      	mov	r4, r0
 8011cd0:	b085      	sub	sp, #20
 8011cd2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8011cd6:	460d      	mov	r5, r1
 8011cd8:	466b      	mov	r3, sp
 8011cda:	6851      	ldr	r1, [r2, #4]
 8011cdc:	c303      	stmia	r3!, {r0, r1}
 8011cde:	4629      	mov	r1, r5
 8011ce0:	4668      	mov	r0, sp
 8011ce2:	f7fb fdad 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 8011ce6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011cea:	b12b      	cbz	r3, 8011cf8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8011cec:	4669      	mov	r1, sp
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f7ff ffbf 	bl	8011c72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8011cf4:	b005      	add	sp, #20
 8011cf6:	bd30      	pop	{r4, r5, pc}
 8011cf8:	3404      	adds	r4, #4
 8011cfa:	a802      	add	r0, sp, #8
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	f7ff fbd9 	bl	80114b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d02:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d06:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011d0a:	4669      	mov	r1, sp
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	1a9b      	subs	r3, r3, r2
 8011d10:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011d14:	f8ad 3000 	strh.w	r3, [sp]
 8011d18:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011d1c:	1a9b      	subs	r3, r3, r2
 8011d1e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011d22:	f7fb fe2c 	bl	800d97e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8011d26:	e7e5      	b.n	8011cf4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08011d28 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8011d28:	460b      	mov	r3, r1
 8011d2a:	680a      	ldr	r2, [r1, #0]
 8011d2c:	1d01      	adds	r1, r0, #4
 8011d2e:	6992      	ldr	r2, [r2, #24]
 8011d30:	4618      	mov	r0, r3
 8011d32:	4710      	bx	r2

08011d34 <_ZN8touchgfx12TextProviderC1Ev>:
 8011d34:	b538      	push	{r3, r4, r5, lr}
 8011d36:	2500      	movs	r5, #0
 8011d38:	2302      	movs	r3, #2
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	220e      	movs	r2, #14
 8011d3e:	7403      	strb	r3, [r0, #16]
 8011d40:	4629      	mov	r1, r5
 8011d42:	6145      	str	r5, [r0, #20]
 8011d44:	7605      	strb	r5, [r0, #24]
 8011d46:	83c5      	strh	r5, [r0, #30]
 8011d48:	8405      	strh	r5, [r0, #32]
 8011d4a:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011d4c:	8705      	strh	r5, [r0, #56]	; 0x38
 8011d4e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8011d50:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8011d54:	e9c0 5500 	strd	r5, r5, [r0]
 8011d58:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8011d5c:	304c      	adds	r0, #76	; 0x4c
 8011d5e:	f00b f87b 	bl	801ce58 <memset>
 8011d62:	2301      	movs	r3, #1
 8011d64:	4620      	mov	r0, r4
 8011d66:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8011d6a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011d6e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8011d72:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8011d76:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8011d7a:	f7f9 f909 	bl	800af90 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8011d7e:	4620      	mov	r0, r4
 8011d80:	bd38      	pop	{r3, r4, r5, pc}

08011d82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8011d82:	b530      	push	{r4, r5, lr}
 8011d84:	2500      	movs	r5, #0
 8011d86:	2401      	movs	r4, #1
 8011d88:	6843      	ldr	r3, [r0, #4]
 8011d8a:	b913      	cbnz	r3, 8011d92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011d8c:	6803      	ldr	r3, [r0, #0]
 8011d8e:	b313      	cbz	r3, 8011dd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011d90:	6043      	str	r3, [r0, #4]
 8011d92:	7e03      	ldrb	r3, [r0, #24]
 8011d94:	b143      	cbz	r3, 8011da8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8011d96:	6943      	ldr	r3, [r0, #20]
 8011d98:	b12b      	cbz	r3, 8011da6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011d9a:	881a      	ldrh	r2, [r3, #0]
 8011d9c:	b11a      	cbz	r2, 8011da6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011d9e:	1c9a      	adds	r2, r3, #2
 8011da0:	6142      	str	r2, [r0, #20]
 8011da2:	8818      	ldrh	r0, [r3, #0]
 8011da4:	bd30      	pop	{r4, r5, pc}
 8011da6:	7605      	strb	r5, [r0, #24]
 8011da8:	6843      	ldr	r3, [r0, #4]
 8011daa:	8819      	ldrh	r1, [r3, #0]
 8011dac:	b199      	cbz	r1, 8011dd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011dae:	1c9a      	adds	r2, r3, #2
 8011db0:	2902      	cmp	r1, #2
 8011db2:	6042      	str	r2, [r0, #4]
 8011db4:	d1f5      	bne.n	8011da2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8011db6:	7c03      	ldrb	r3, [r0, #16]
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d8e5      	bhi.n	8011d88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011dbc:	1c5a      	adds	r2, r3, #1
 8011dbe:	3302      	adds	r3, #2
 8011dc0:	7402      	strb	r2, [r0, #16]
 8011dc2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011dc6:	6143      	str	r3, [r0, #20]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d0dd      	beq.n	8011d88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d0da      	beq.n	8011d88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011dd2:	7604      	strb	r4, [r0, #24]
 8011dd4:	e7d8      	b.n	8011d88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	e7e4      	b.n	8011da4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08011dda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8011dda:	6001      	str	r1, [r0, #0]
 8011ddc:	2100      	movs	r1, #0
 8011dde:	b430      	push	{r4, r5}
 8011de0:	6041      	str	r1, [r0, #4]
 8011de2:	6815      	ldr	r5, [r2, #0]
 8011de4:	6085      	str	r5, [r0, #8]
 8011de6:	6852      	ldr	r2, [r2, #4]
 8011de8:	6443      	str	r3, [r0, #68]	; 0x44
 8011dea:	9b02      	ldr	r3, [sp, #8]
 8011dec:	60c2      	str	r2, [r0, #12]
 8011dee:	7401      	strb	r1, [r0, #16]
 8011df0:	6141      	str	r1, [r0, #20]
 8011df2:	7601      	strb	r1, [r0, #24]
 8011df4:	8701      	strh	r1, [r0, #56]	; 0x38
 8011df6:	8401      	strh	r1, [r0, #32]
 8011df8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8011dfc:	6483      	str	r3, [r0, #72]	; 0x48
 8011dfe:	bc30      	pop	{r4, r5}
 8011e00:	f7f9 b8c6 	b.w	800af90 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08011e04 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8011e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e06:	4605      	mov	r5, r0
 8011e08:	4608      	mov	r0, r1
 8011e0a:	b1f1      	cbz	r1, 8011e4a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8011e0c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8011e10:	460b      	mov	r3, r1
 8011e12:	f101 0708 	add.w	r7, r1, #8
 8011e16:	4622      	mov	r2, r4
 8011e18:	6818      	ldr	r0, [r3, #0]
 8011e1a:	3308      	adds	r3, #8
 8011e1c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011e20:	4626      	mov	r6, r4
 8011e22:	42bb      	cmp	r3, r7
 8011e24:	c603      	stmia	r6!, {r0, r1}
 8011e26:	4634      	mov	r4, r6
 8011e28:	d1f6      	bne.n	8011e18 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8011e2a:	6818      	ldr	r0, [r3, #0]
 8011e2c:	6030      	str	r0, [r6, #0]
 8011e2e:	4610      	mov	r0, r2
 8011e30:	889b      	ldrh	r3, [r3, #4]
 8011e32:	80b3      	strh	r3, [r6, #4]
 8011e34:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8011e38:	015b      	lsls	r3, r3, #5
 8011e3a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8011e3e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8011e42:	430b      	orrs	r3, r1
 8011e44:	425b      	negs	r3, r3
 8011e46:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8011e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	460c      	mov	r4, r1
 8011e50:	6811      	ldr	r1, [r2, #0]
 8011e52:	4610      	mov	r0, r2
 8011e54:	68cd      	ldr	r5, [r1, #12]
 8011e56:	4619      	mov	r1, r3
 8011e58:	47a8      	blx	r5
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	bf08      	it	eq
 8011e5e:	4620      	moveq	r0, r4
 8011e60:	bd38      	pop	{r3, r4, r5, pc}
	...

08011e64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8011e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e66:	4604      	mov	r4, r0
 8011e68:	4615      	mov	r5, r2
 8011e6a:	4608      	mov	r0, r1
 8011e6c:	b93a      	cbnz	r2, 8011e7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8011e6e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8011e72:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8011e76:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e7e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8011e82:	8893      	ldrh	r3, [r2, #4]
 8011e84:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8011e88:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8011e8c:	79ee      	ldrb	r6, [r5, #7]
 8011e8e:	4316      	orrs	r6, r2
 8011e90:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8011e94:	189a      	adds	r2, r3, r2
 8011e96:	b2b7      	uxth	r7, r6
 8011e98:	b291      	uxth	r1, r2
 8011e9a:	291d      	cmp	r1, #29
 8011e9c:	f200 8084 	bhi.w	8011fa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	10f6      	asrs	r6, r6, #3
 8011ea4:	408a      	lsls	r2, r1
 8011ea6:	4978      	ldr	r1, [pc, #480]	; (8012088 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8011ea8:	420a      	tst	r2, r1
 8011eaa:	d12e      	bne.n	8011f0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8011eac:	f412 7f60 	tst.w	r2, #896	; 0x380
 8011eb0:	d07a      	beq.n	8011fa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8011eb2:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8011eb6:	462b      	mov	r3, r5
 8011eb8:	f105 0e08 	add.w	lr, r5, #8
 8011ebc:	4615      	mov	r5, r2
 8011ebe:	6818      	ldr	r0, [r3, #0]
 8011ec0:	3308      	adds	r3, #8
 8011ec2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011ec6:	4694      	mov	ip, r2
 8011ec8:	4573      	cmp	r3, lr
 8011eca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011ece:	4662      	mov	r2, ip
 8011ed0:	d1f5      	bne.n	8011ebe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8011ed2:	6818      	ldr	r0, [r3, #0]
 8011ed4:	f8cc 0000 	str.w	r0, [ip]
 8011ed8:	889b      	ldrh	r3, [r3, #4]
 8011eda:	f8ac 3004 	strh.w	r3, [ip, #4]
 8011ede:	b2b3      	uxth	r3, r6
 8011ee0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011ee4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8011ee8:	1aca      	subs	r2, r1, r3
 8011eea:	1bcf      	subs	r7, r1, r7
 8011eec:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8011ef0:	b292      	uxth	r2, r2
 8011ef2:	1afb      	subs	r3, r7, r3
 8011ef4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8011ef8:	10d2      	asrs	r2, r2, #3
 8011efa:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8011efe:	4302      	orrs	r2, r0
 8011f00:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8011f04:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8011f08:	e7b7      	b.n	8011e7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8011f0a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011f0c:	b92b      	cbnz	r3, 8011f1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8011f0e:	4b5f      	ldr	r3, [pc, #380]	; (801208c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8011f10:	21c0      	movs	r1, #192	; 0xc0
 8011f12:	4a5f      	ldr	r2, [pc, #380]	; (8012090 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8011f14:	485f      	ldr	r0, [pc, #380]	; (8012094 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8011f16:	f00a ff21 	bl	801cd5c <__assert_func>
 8011f1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8011f1c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011f20:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8011f22:	f640 6333 	movw	r3, #3635	; 0xe33
 8011f26:	4299      	cmp	r1, r3
 8011f28:	d110      	bne.n	8011f4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8011f2a:	6803      	ldr	r3, [r0, #0]
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	4798      	blx	r3
 8011f30:	7b41      	ldrb	r1, [r0, #13]
 8011f32:	00cb      	lsls	r3, r1, #3
 8011f34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011f38:	7a03      	ldrb	r3, [r0, #8]
 8011f3a:	0648      	lsls	r0, r1, #25
 8011f3c:	ea43 0302 	orr.w	r3, r3, r2
 8011f40:	bf44      	itt	mi
 8011f42:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011f46:	b21b      	sxthmi	r3, r3
 8011f48:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011f4c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8011f50:	462a      	mov	r2, r5
 8011f52:	f105 0c08 	add.w	ip, r5, #8
 8011f56:	443b      	add	r3, r7
 8011f58:	4433      	add	r3, r6
 8011f5a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	4635      	mov	r5, r6
 8011f62:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011f66:	6810      	ldr	r0, [r2, #0]
 8011f68:	3208      	adds	r2, #8
 8011f6a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011f6e:	4637      	mov	r7, r6
 8011f70:	4562      	cmp	r2, ip
 8011f72:	c703      	stmia	r7!, {r0, r1}
 8011f74:	463e      	mov	r6, r7
 8011f76:	d1f6      	bne.n	8011f66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8011f78:	6810      	ldr	r0, [r2, #0]
 8011f7a:	6038      	str	r0, [r7, #0]
 8011f7c:	8892      	ldrh	r2, [r2, #4]
 8011f7e:	80ba      	strh	r2, [r7, #4]
 8011f80:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8011f84:	10db      	asrs	r3, r3, #3
 8011f86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011f8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011f92:	4313      	orrs	r3, r2
 8011f94:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8011f98:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8011f9c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8011fa0:	1a9b      	subs	r3, r3, r2
 8011fa2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8011fa6:	e768      	b.n	8011e7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8011fa8:	f023 0204 	bic.w	r2, r3, #4
 8011fac:	f640 611b 	movw	r1, #3611	; 0xe1b
 8011fb0:	428a      	cmp	r2, r1
 8011fb2:	d003      	beq.n	8011fbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8011fb4:	f640 621d 	movw	r2, #3613	; 0xe1d
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d120      	bne.n	8011ffe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8011fbc:	3b01      	subs	r3, #1
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	b29b      	uxth	r3, r3
 8011fc6:	f7ff ff41 	bl	8011e4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011fca:	7b41      	ldrb	r1, [r0, #13]
 8011fcc:	00cb      	lsls	r3, r1, #3
 8011fce:	0649      	lsls	r1, r1, #25
 8011fd0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011fd4:	7a03      	ldrb	r3, [r0, #8]
 8011fd6:	ea43 0302 	orr.w	r3, r3, r2
 8011fda:	bf44      	itt	mi
 8011fdc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011fe0:	b21b      	sxthmi	r3, r3
 8011fe2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011fe6:	7b6b      	ldrb	r3, [r5, #13]
 8011fe8:	7aaa      	ldrb	r2, [r5, #10]
 8011fea:	005b      	lsls	r3, r3, #1
 8011fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	115a      	asrs	r2, r3, #5
 8011ff4:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8011ff8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8011ffc:	e035      	b.n	801206a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8011ffe:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8012002:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8012006:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801200a:	7a2a      	ldrb	r2, [r5, #8]
 801200c:	ea42 0201 	orr.w	r2, r2, r1
 8012010:	f640 6109 	movw	r1, #3593	; 0xe09
 8012014:	bf1c      	itt	ne
 8012016:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801201a:	b212      	sxthne	r2, r2
 801201c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8012020:	f023 0210 	bic.w	r2, r3, #16
 8012024:	428a      	cmp	r2, r1
 8012026:	d003      	beq.n	8012030 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8012028:	f640 6213 	movw	r2, #3603	; 0xe13
 801202c:	4293      	cmp	r3, r2
 801202e:	d129      	bne.n	8012084 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8012030:	7b6e      	ldrb	r6, [r5, #13]
 8012032:	4629      	mov	r1, r5
 8012034:	0076      	lsls	r6, r6, #1
 8012036:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801203a:	7aae      	ldrb	r6, [r5, #10]
 801203c:	4316      	orrs	r6, r2
 801203e:	f640 6213 	movw	r2, #3603	; 0xe13
 8012042:	4293      	cmp	r3, r2
 8012044:	4602      	mov	r2, r0
 8012046:	4620      	mov	r0, r4
 8012048:	bf16      	itet	ne
 801204a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801204e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8012052:	b29b      	uxthne	r3, r3
 8012054:	f7ff fefa 	bl	8011e4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012058:	7b43      	ldrb	r3, [r0, #13]
 801205a:	7a82      	ldrb	r2, [r0, #10]
 801205c:	005b      	lsls	r3, r3, #1
 801205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012062:	4313      	orrs	r3, r2
 8012064:	1af6      	subs	r6, r6, r3
 8012066:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801206a:	7b69      	ldrb	r1, [r5, #13]
 801206c:	00cb      	lsls	r3, r1, #3
 801206e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012072:	7a2b      	ldrb	r3, [r5, #8]
 8012074:	4313      	orrs	r3, r2
 8012076:	064a      	lsls	r2, r1, #25
 8012078:	bf44      	itt	mi
 801207a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801207e:	b21b      	sxthmi	r3, r3
 8012080:	1bdb      	subs	r3, r3, r7
 8012082:	e73f      	b.n	8011f04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8012084:	2300      	movs	r3, #0
 8012086:	e7b7      	b.n	8011ff8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8012088:	3fc00079 	.word	0x3fc00079
 801208c:	08020878 	.word	0x08020878
 8012090:	08020aea 	.word	0x08020aea
 8012094:	08020881 	.word	0x08020881

08012098 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8012098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801209c:	4604      	mov	r4, r0
 801209e:	b942      	cbnz	r2, 80120b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80120a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120a4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80120a8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80120ac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80120b0:	e046      	b.n	8012140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80120b2:	7b51      	ldrb	r1, [r2, #13]
 80120b4:	8893      	ldrh	r3, [r2, #4]
 80120b6:	010f      	lsls	r7, r1, #4
 80120b8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80120bc:	79d7      	ldrb	r7, [r2, #7]
 80120be:	4307      	orrs	r7, r0
 80120c0:	2f04      	cmp	r7, #4
 80120c2:	b2bd      	uxth	r5, r7
 80120c4:	bfcc      	ite	gt
 80120c6:	08bf      	lsrgt	r7, r7, #2
 80120c8:	2701      	movle	r7, #1
 80120ca:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80120ce:	f200 80ab 	bhi.w	8012228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80120d2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80120d6:	4283      	cmp	r3, r0
 80120d8:	d216      	bcs.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80120da:	f240 605b 	movw	r0, #1627	; 0x65b
 80120de:	4283      	cmp	r3, r0
 80120e0:	d859      	bhi.n	8012196 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80120e2:	f240 6057 	movw	r0, #1623	; 0x657
 80120e6:	4283      	cmp	r3, r0
 80120e8:	d20e      	bcs.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80120ea:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80120ee:	d24a      	bcs.n	8012186 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80120f0:	f240 604e 	movw	r0, #1614	; 0x64e
 80120f4:	4283      	cmp	r3, r0
 80120f6:	d207      	bcs.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80120f8:	f240 601a 	movw	r0, #1562	; 0x61a
 80120fc:	4283      	cmp	r3, r0
 80120fe:	d02a      	beq.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012100:	d821      	bhi.n	8012146 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8012102:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8012106:	d35b      	bcc.n	80121c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012108:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801210c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012110:	f040 80d0 	bne.w	80122b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8012114:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8012118:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801211c:	f040 80ca 	bne.w	80122b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8012120:	00cb      	lsls	r3, r1, #3
 8012122:	0649      	lsls	r1, r1, #25
 8012124:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012128:	7a13      	ldrb	r3, [r2, #8]
 801212a:	ea43 0300 	orr.w	r3, r3, r0
 801212e:	bf44      	itt	mi
 8012130:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012134:	b21b      	sxthmi	r3, r3
 8012136:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801213a:	1b5d      	subs	r5, r3, r5
 801213c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8012140:	4610      	mov	r0, r2
 8012142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012146:	f240 604b 	movw	r0, #1611	; 0x64b
 801214a:	4283      	cmp	r3, r0
 801214c:	d338      	bcc.n	80121c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801214e:	f240 604c 	movw	r0, #1612	; 0x64c
 8012152:	4283      	cmp	r3, r0
 8012154:	d9d8      	bls.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012156:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801215a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801215e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012162:	f040 80f2 	bne.w	801234a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8012166:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801216a:	f040 80ee 	bne.w	801234a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801216e:	00cb      	lsls	r3, r1, #3
 8012170:	064e      	lsls	r6, r1, #25
 8012172:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012176:	7a13      	ldrb	r3, [r2, #8]
 8012178:	ea43 0300 	orr.w	r3, r3, r0
 801217c:	bf44      	itt	mi
 801217e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012182:	b21b      	sxthmi	r3, r3
 8012184:	e7d9      	b.n	801213a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8012186:	f240 6054 	movw	r0, #1620	; 0x654
 801218a:	4283      	cmp	r3, r0
 801218c:	d8e3      	bhi.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801218e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8012192:	d9e0      	bls.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012194:	e7b8      	b.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012196:	f240 6074 	movw	r0, #1652	; 0x674
 801219a:	4283      	cmp	r3, r0
 801219c:	d0b4      	beq.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801219e:	d82d      	bhi.n	80121fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80121a0:	f240 605e 	movw	r0, #1630	; 0x65e
 80121a4:	4283      	cmp	r3, r0
 80121a6:	d804      	bhi.n	80121b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80121a8:	f240 605d 	movw	r0, #1629	; 0x65d
 80121ac:	4283      	cmp	r3, r0
 80121ae:	d3d2      	bcc.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80121b0:	e7aa      	b.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80121b2:	f240 605f 	movw	r0, #1631	; 0x65f
 80121b6:	4283      	cmp	r3, r0
 80121b8:	d0cd      	beq.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80121ba:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80121be:	d0a3      	beq.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80121c0:	00cb      	lsls	r3, r1, #3
 80121c2:	0649      	lsls	r1, r1, #25
 80121c4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80121c8:	7a13      	ldrb	r3, [r2, #8]
 80121ca:	ea43 0300 	orr.w	r3, r3, r0
 80121ce:	bf44      	itt	mi
 80121d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80121d4:	b21b      	sxthmi	r3, r3
 80121d6:	1b5d      	subs	r5, r3, r5
 80121d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80121dc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80121e0:	7b53      	ldrb	r3, [r2, #13]
 80121e2:	015b      	lsls	r3, r3, #5
 80121e4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80121e8:	7993      	ldrb	r3, [r2, #6]
 80121ea:	430b      	orrs	r3, r1
 80121ec:	2105      	movs	r1, #5
 80121ee:	005b      	lsls	r3, r3, #1
 80121f0:	fb93 f3f1 	sdiv	r3, r3, r1
 80121f4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80121f8:	440b      	add	r3, r1
 80121fa:	e757      	b.n	80120ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80121fc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8012200:	4283      	cmp	r3, r0
 8012202:	d809      	bhi.n	8012218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8012204:	f240 60df 	movw	r0, #1759	; 0x6df
 8012208:	4283      	cmp	r3, r0
 801220a:	f4bf af7d 	bcs.w	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801220e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8012212:	2b05      	cmp	r3, #5
 8012214:	d8d4      	bhi.n	80121c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012216:	e777      	b.n	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012218:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801221c:	4283      	cmp	r3, r0
 801221e:	d09a      	beq.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012220:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8012224:	4283      	cmp	r3, r0
 8012226:	e7ca      	b.n	80121be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8012228:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801222c:	d22b      	bcs.n	8012286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801222e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8012232:	4283      	cmp	r3, r0
 8012234:	d28f      	bcs.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012236:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801223a:	4283      	cmp	r3, r0
 801223c:	d816      	bhi.n	801226c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801223e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8012242:	4283      	cmp	r3, r0
 8012244:	f4bf af60 	bcs.w	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012248:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801224c:	4283      	cmp	r3, r0
 801224e:	d80a      	bhi.n	8012266 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8012250:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8012254:	4283      	cmp	r3, r0
 8012256:	f4bf af57 	bcs.w	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801225a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801225e:	4283      	cmp	r3, r0
 8012260:	f43f af79 	beq.w	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012264:	e7ac      	b.n	80121c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012266:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801226a:	e7f8      	b.n	801225e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801226c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8012270:	4283      	cmp	r3, r0
 8012272:	d802      	bhi.n	801227a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8012274:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012278:	e798      	b.n	80121ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801227a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801227e:	4283      	cmp	r3, r0
 8012280:	f47f af42 	bne.w	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012284:	e767      	b.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012286:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801228a:	4283      	cmp	r3, r0
 801228c:	f43f af63 	beq.w	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012290:	d802      	bhi.n	8012298 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8012292:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8012296:	e7f2      	b.n	801227e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8012298:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801229c:	4283      	cmp	r3, r0
 801229e:	d805      	bhi.n	80122ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80122a0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80122a4:	4283      	cmp	r3, r0
 80122a6:	f4ff af2f 	bcc.w	8012108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80122aa:	e754      	b.n	8012156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80122ac:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80122b0:	4283      	cmp	r3, r0
 80122b2:	e7af      	b.n	8012214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80122b4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80122b8:	4617      	mov	r7, r2
 80122ba:	f102 0808 	add.w	r8, r2, #8
 80122be:	4666      	mov	r6, ip
 80122c0:	6838      	ldr	r0, [r7, #0]
 80122c2:	3708      	adds	r7, #8
 80122c4:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80122c8:	46e6      	mov	lr, ip
 80122ca:	4547      	cmp	r7, r8
 80122cc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80122d0:	46f4      	mov	ip, lr
 80122d2:	d1f5      	bne.n	80122c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80122d4:	6838      	ldr	r0, [r7, #0]
 80122d6:	f8ce 0000 	str.w	r0, [lr]
 80122da:	88b9      	ldrh	r1, [r7, #4]
 80122dc:	f8ae 1004 	strh.w	r1, [lr, #4]
 80122e0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80122e4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80122e8:	d009      	beq.n	80122fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80122ea:	7b51      	ldrb	r1, [r2, #13]
 80122ec:	7992      	ldrb	r2, [r2, #6]
 80122ee:	0149      	lsls	r1, r1, #5
 80122f0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80122f4:	4311      	orrs	r1, r2
 80122f6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80122fa:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80122fe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012302:	d00d      	beq.n	8012320 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8012304:	442b      	add	r3, r5
 8012306:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801230a:	b29b      	uxth	r3, r3
 801230c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012310:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012314:	10db      	asrs	r3, r3, #3
 8012316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801231a:	4313      	orrs	r3, r2
 801231c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8012320:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012324:	00cb      	lsls	r3, r1, #3
 8012326:	064f      	lsls	r7, r1, #25
 8012328:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801232c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8012330:	ea43 0302 	orr.w	r3, r3, r2
 8012334:	bf44      	itt	mi
 8012336:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801233a:	b21b      	sxthmi	r3, r3
 801233c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012340:	1b5d      	subs	r5, r3, r5
 8012342:	4632      	mov	r2, r6
 8012344:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8012348:	e6fa      	b.n	8012140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801234a:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801234e:	4694      	mov	ip, r2
 8012350:	f102 0908 	add.w	r9, r2, #8
 8012354:	4676      	mov	r6, lr
 8012356:	f8dc 0000 	ldr.w	r0, [ip]
 801235a:	f10c 0c08 	add.w	ip, ip, #8
 801235e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8012362:	46f0      	mov	r8, lr
 8012364:	45cc      	cmp	ip, r9
 8012366:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801236a:	46c6      	mov	lr, r8
 801236c:	d1f3      	bne.n	8012356 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801236e:	f8dc 0000 	ldr.w	r0, [ip]
 8012372:	f8c8 0000 	str.w	r0, [r8]
 8012376:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801237a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801237e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8012382:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012386:	d009      	beq.n	801239c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8012388:	7b51      	ldrb	r1, [r2, #13]
 801238a:	7992      	ldrb	r2, [r2, #6]
 801238c:	0149      	lsls	r1, r1, #5
 801238e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012392:	4311      	orrs	r1, r2
 8012394:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012398:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801239c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80123a0:	d00d      	beq.n	80123be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 80123a2:	1bdb      	subs	r3, r3, r7
 80123a4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80123ae:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80123b2:	10db      	asrs	r3, r3, #3
 80123b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80123b8:	4313      	orrs	r3, r2
 80123ba:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80123be:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80123c2:	00cb      	lsls	r3, r1, #3
 80123c4:	0648      	lsls	r0, r1, #25
 80123c6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80123ca:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80123ce:	ea43 0302 	orr.w	r3, r3, r2
 80123d2:	bf44      	itt	mi
 80123d4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80123d8:	b21b      	sxthmi	r3, r3
 80123da:	e7b1      	b.n	8012340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080123dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80123dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e0:	461e      	mov	r6, r3
 80123e2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80123e4:	4604      	mov	r4, r0
 80123e6:	4617      	mov	r7, r2
 80123e8:	b92b      	cbnz	r3, 80123f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80123ea:	4b25      	ldr	r3, [pc, #148]	; (8012480 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80123ec:	21c0      	movs	r1, #192	; 0xc0
 80123ee:	4a25      	ldr	r2, [pc, #148]	; (8012484 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80123f0:	4825      	ldr	r0, [pc, #148]	; (8012488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80123f2:	f00a fcb3 	bl	801cd5c <__assert_func>
 80123f6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80123f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80123fc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8012400:	f7f8 fd20 	bl	800ae44 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012404:	4605      	mov	r5, r0
 8012406:	b918      	cbnz	r0, 8012410 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8012408:	6030      	str	r0, [r6, #0]
 801240a:	4628      	mov	r0, r5
 801240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	4601      	mov	r1, r0
 8012414:	4638      	mov	r0, r7
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	4798      	blx	r3
 801241a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801241e:	4602      	mov	r2, r0
 8012420:	6030      	str	r0, [r6, #0]
 8012422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012426:	d213      	bcs.n	8012450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8012428:	4643      	mov	r3, r8
 801242a:	4639      	mov	r1, r7
 801242c:	4620      	mov	r0, r4
 801242e:	f7ff fe33 	bl	8012098 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8012432:	6030      	str	r0, [r6, #0]
 8012434:	6833      	ldr	r3, [r6, #0]
 8012436:	b143      	cbz	r3, 801244a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8012438:	7b5a      	ldrb	r2, [r3, #13]
 801243a:	7a9b      	ldrb	r3, [r3, #10]
 801243c:	0052      	lsls	r2, r2, #1
 801243e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012442:	4313      	orrs	r3, r2
 8012444:	bf0c      	ite	eq
 8012446:	2301      	moveq	r3, #1
 8012448:	2300      	movne	r3, #0
 801244a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801244e:	e7dc      	b.n	801240a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8012450:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8012454:	b29b      	uxth	r3, r3
 8012456:	2b7f      	cmp	r3, #127	; 0x7f
 8012458:	d804      	bhi.n	8012464 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801245a:	4639      	mov	r1, r7
 801245c:	4620      	mov	r0, r4
 801245e:	f7ff fd01 	bl	8011e64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8012462:	e7e6      	b.n	8012432 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8012464:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8012468:	2b00      	cmp	r3, #0
 801246a:	d0e3      	beq.n	8012434 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801246c:	f640 1302 	movw	r3, #2306	; 0x902
 8012470:	429d      	cmp	r5, r3
 8012472:	d1df      	bne.n	8012434 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8012474:	4601      	mov	r1, r0
 8012476:	4620      	mov	r0, r4
 8012478:	f7ff fcc4 	bl	8011e04 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801247c:	e7d9      	b.n	8012432 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801247e:	bf00      	nop
 8012480:	08020878 	.word	0x08020878
 8012484:	08020aea 	.word	0x08020aea
 8012488:	08020881 	.word	0x08020881

0801248c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801248c:	b510      	push	{r4, lr}
 801248e:	4604      	mov	r4, r0
 8012490:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8012494:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012496:	b9d9      	cbnz	r1, 80124d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8012498:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801249a:	2b0a      	cmp	r3, #10
 801249c:	d037      	beq.n	801250e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801249e:	4620      	mov	r0, r4
 80124a0:	f7ff fc6f 	bl	8011d82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80124a4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80124a6:	2b09      	cmp	r3, #9
 80124a8:	d906      	bls.n	80124b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80124aa:	4b19      	ldr	r3, [pc, #100]	; (8012510 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80124ac:	f44f 7182 	mov.w	r1, #260	; 0x104
 80124b0:	4a18      	ldr	r2, [pc, #96]	; (8012514 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80124b2:	4819      	ldr	r0, [pc, #100]	; (8012518 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80124b4:	f00a fc52 	bl	801cd5c <__assert_func>
 80124b8:	1c5a      	adds	r2, r3, #1
 80124ba:	8722      	strh	r2, [r4, #56]	; 0x38
 80124bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80124be:	4413      	add	r3, r2
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	2b09      	cmp	r3, #9
 80124c4:	bf88      	it	hi
 80124c6:	3b0a      	subhi	r3, #10
 80124c8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80124cc:	8458      	strh	r0, [r3, #34]	; 0x22
 80124ce:	e7e3      	b.n	8012498 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 80124d0:	2b0a      	cmp	r3, #10
 80124d2:	d01c      	beq.n	801250e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80124d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80124d6:	3901      	subs	r1, #1
 80124d8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80124dc:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80124de:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80124e2:	1c51      	adds	r1, r2, #1
 80124e4:	b289      	uxth	r1, r1
 80124e6:	2901      	cmp	r1, #1
 80124e8:	bf8a      	itet	hi
 80124ea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80124ee:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80124f0:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80124f2:	2b09      	cmp	r3, #9
 80124f4:	d8d9      	bhi.n	80124aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 80124f6:	1c5a      	adds	r2, r3, #1
 80124f8:	8722      	strh	r2, [r4, #56]	; 0x38
 80124fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80124fc:	4413      	add	r3, r2
 80124fe:	b29b      	uxth	r3, r3
 8012500:	2b09      	cmp	r3, #9
 8012502:	bf88      	it	hi
 8012504:	3b0a      	subhi	r3, #10
 8012506:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801250a:	8458      	strh	r0, [r3, #34]	; 0x22
 801250c:	e7c0      	b.n	8012490 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801250e:	bd10      	pop	{r4, pc}
 8012510:	080208ad 	.word	0x080208ad
 8012514:	08020c40 	.word	0x08020c40
 8012518:	08020881 	.word	0x08020881

0801251c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801251c:	b538      	push	{r3, r4, r5, lr}
 801251e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8012520:	4604      	mov	r4, r0
 8012522:	b92a      	cbnz	r2, 8012530 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8012524:	4b13      	ldr	r3, [pc, #76]	; (8012574 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8012526:	21d5      	movs	r1, #213	; 0xd5
 8012528:	4a13      	ldr	r2, [pc, #76]	; (8012578 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801252a:	4814      	ldr	r0, [pc, #80]	; (801257c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801252c:	f00a fc16 	bl	801cd5c <__assert_func>
 8012530:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012532:	3a01      	subs	r2, #1
 8012534:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8012538:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801253a:	8702      	strh	r2, [r0, #56]	; 0x38
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	b292      	uxth	r2, r2
 8012540:	2a09      	cmp	r2, #9
 8012542:	bf8a      	itet	hi
 8012544:	3b09      	subhi	r3, #9
 8012546:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8012548:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801254a:	f7ff ff9f 	bl	801248c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801254e:	8c23      	ldrh	r3, [r4, #32]
 8012550:	2b01      	cmp	r3, #1
 8012552:	bf9c      	itt	ls
 8012554:	3301      	addls	r3, #1
 8012556:	8423      	strhls	r3, [r4, #32]
 8012558:	8be3      	ldrh	r3, [r4, #30]
 801255a:	b90b      	cbnz	r3, 8012560 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801255c:	2302      	movs	r3, #2
 801255e:	83e3      	strh	r3, [r4, #30]
 8012560:	8be3      	ldrh	r3, [r4, #30]
 8012562:	4628      	mov	r0, r5
 8012564:	3b01      	subs	r3, #1
 8012566:	b29b      	uxth	r3, r3
 8012568:	83e3      	strh	r3, [r4, #30]
 801256a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801256e:	8365      	strh	r5, [r4, #26]
 8012570:	bd38      	pop	{r3, r4, r5, pc}
 8012572:	bf00      	nop
 8012574:	08020878 	.word	0x08020878
 8012578:	08020b95 	.word	0x08020b95
 801257c:	08020881 	.word	0x08020881

08012580 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8012580:	428a      	cmp	r2, r1
 8012582:	b538      	push	{r3, r4, r5, lr}
 8012584:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8012586:	d90c      	bls.n	80125a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8012588:	b92c      	cbnz	r4, 8012596 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801258a:	4b1c      	ldr	r3, [pc, #112]	; (80125fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801258c:	21e1      	movs	r1, #225	; 0xe1
 801258e:	4a1c      	ldr	r2, [pc, #112]	; (8012600 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8012590:	481c      	ldr	r0, [pc, #112]	; (8012604 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8012592:	f00a fbe3 	bl	801cd5c <__assert_func>
 8012596:	3c01      	subs	r4, #1
 8012598:	4b1b      	ldr	r3, [pc, #108]	; (8012608 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801259a:	4a1c      	ldr	r2, [pc, #112]	; (801260c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801259c:	21c5      	movs	r1, #197	; 0xc5
 801259e:	8704      	strh	r4, [r0, #56]	; 0x38
 80125a0:	e7f6      	b.n	8012590 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80125a2:	428c      	cmp	r4, r1
 80125a4:	d203      	bcs.n	80125ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80125a6:	4b1a      	ldr	r3, [pc, #104]	; (8012610 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80125a8:	21cb      	movs	r1, #203	; 0xcb
 80125aa:	4a1a      	ldr	r2, [pc, #104]	; (8012614 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80125ac:	e7f0      	b.n	8012590 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80125ae:	1a64      	subs	r4, r4, r1
 80125b0:	250a      	movs	r5, #10
 80125b2:	8704      	strh	r4, [r0, #56]	; 0x38
 80125b4:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80125b6:	4421      	add	r1, r4
 80125b8:	b289      	uxth	r1, r1
 80125ba:	2909      	cmp	r1, #9
 80125bc:	bf88      	it	hi
 80125be:	390a      	subhi	r1, #10
 80125c0:	86c1      	strh	r1, [r0, #54]	; 0x36
 80125c2:	b1ba      	cbz	r2, 80125f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80125c4:	3a01      	subs	r2, #1
 80125c6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80125c8:	b292      	uxth	r2, r2
 80125ca:	2909      	cmp	r1, #9
 80125cc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80125d0:	d903      	bls.n	80125da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 80125d2:	4b11      	ldr	r3, [pc, #68]	; (8012618 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80125d4:	21e6      	movs	r1, #230	; 0xe6
 80125d6:	4a11      	ldr	r2, [pc, #68]	; (801261c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 80125d8:	e7da      	b.n	8012590 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80125da:	3101      	adds	r1, #1
 80125dc:	8701      	strh	r1, [r0, #56]	; 0x38
 80125de:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80125e0:	b901      	cbnz	r1, 80125e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 80125e2:	86c5      	strh	r5, [r0, #54]	; 0x36
 80125e4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80125e6:	3901      	subs	r1, #1
 80125e8:	b289      	uxth	r1, r1
 80125ea:	86c1      	strh	r1, [r0, #54]	; 0x36
 80125ec:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80125f0:	844c      	strh	r4, [r1, #34]	; 0x22
 80125f2:	e7e6      	b.n	80125c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 80125f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125f8:	f7ff bf48 	b.w	801248c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80125fc:	08020878 	.word	0x08020878
 8012600:	0802096e 	.word	0x0802096e
 8012604:	08020881 	.word	0x08020881
 8012608:	080208b9 	.word	0x080208b9
 801260c:	08020a18 	.word	0x08020a18
 8012610:	080208c7 	.word	0x080208c7
 8012614:	08020cef 	.word	0x08020cef
 8012618:	080208d3 	.word	0x080208d3
 801261c:	080208e6 	.word	0x080208e6

08012620 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8012620:	3a01      	subs	r2, #1
 8012622:	b570      	push	{r4, r5, r6, lr}
 8012624:	b292      	uxth	r2, r2
 8012626:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801262a:	42b2      	cmp	r2, r6
 801262c:	d019      	beq.n	8012662 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801262e:	8c04      	ldrh	r4, [r0, #32]
 8012630:	f831 5b02 	ldrh.w	r5, [r1], #2
 8012634:	4294      	cmp	r4, r2
 8012636:	d805      	bhi.n	8012644 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8012638:	4b19      	ldr	r3, [pc, #100]	; (80126a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801263a:	4a1a      	ldr	r2, [pc, #104]	; (80126a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801263c:	21c5      	movs	r1, #197	; 0xc5
 801263e:	481a      	ldr	r0, [pc, #104]	; (80126a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8012640:	f00a fb8c 	bl	801cd5c <__assert_func>
 8012644:	8bc4      	ldrh	r4, [r0, #30]
 8012646:	4414      	add	r4, r2
 8012648:	3a01      	subs	r2, #1
 801264a:	b2a4      	uxth	r4, r4
 801264c:	b292      	uxth	r2, r2
 801264e:	2c01      	cmp	r4, #1
 8012650:	bf88      	it	hi
 8012652:	3c02      	subhi	r4, #2
 8012654:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012658:	8b64      	ldrh	r4, [r4, #26]
 801265a:	42ac      	cmp	r4, r5
 801265c:	d0e5      	beq.n	801262a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801265e:	2000      	movs	r0, #0
 8012660:	bd70      	pop	{r4, r5, r6, pc}
 8012662:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012666:	2400      	movs	r4, #0
 8012668:	4413      	add	r3, r2
 801266a:	b2a2      	uxth	r2, r4
 801266c:	429a      	cmp	r2, r3
 801266e:	da14      	bge.n	801269a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8012670:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8012672:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8012676:	4296      	cmp	r6, r2
 8012678:	d802      	bhi.n	8012680 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801267a:	4b09      	ldr	r3, [pc, #36]	; (80126a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801267c:	4a0b      	ldr	r2, [pc, #44]	; (80126ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801267e:	e7dd      	b.n	801263c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8012680:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8012682:	3401      	adds	r4, #1
 8012684:	4432      	add	r2, r6
 8012686:	b292      	uxth	r2, r2
 8012688:	2a09      	cmp	r2, #9
 801268a:	bf88      	it	hi
 801268c:	3a0a      	subhi	r2, #10
 801268e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8012692:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8012694:	42aa      	cmp	r2, r5
 8012696:	d0e8      	beq.n	801266a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8012698:	e7e1      	b.n	801265e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801269a:	2001      	movs	r0, #1
 801269c:	e7e0      	b.n	8012660 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801269e:	bf00      	nop
 80126a0:	080208b9 	.word	0x080208b9
 80126a4:	08020d73 	.word	0x08020d73
 80126a8:	08020881 	.word	0x08020881
 80126ac:	08020a18 	.word	0x08020a18

080126b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80126b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	4605      	mov	r5, r0
 80126b6:	4616      	mov	r6, r2
 80126b8:	1c8c      	adds	r4, r1, #2
 80126ba:	8809      	ldrh	r1, [r1, #0]
 80126bc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80126c0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80126c4:	42b3      	cmp	r3, r6
 80126c6:	d124      	bne.n	8012712 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80126c8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80126cc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80126d0:	f001 070f 	and.w	r7, r1, #15
 80126d4:	4652      	mov	r2, sl
 80126d6:	f8cd 8000 	str.w	r8, [sp]
 80126da:	464b      	mov	r3, r9
 80126dc:	4621      	mov	r1, r4
 80126de:	4628      	mov	r0, r5
 80126e0:	f7ff ff9e 	bl	8012620 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80126e4:	4683      	mov	fp, r0
 80126e6:	b168      	cbz	r0, 8012704 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80126e8:	eb0a 0109 	add.w	r1, sl, r9
 80126ec:	463a      	mov	r2, r7
 80126ee:	4628      	mov	r0, r5
 80126f0:	4441      	add	r1, r8
 80126f2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80126f6:	4649      	mov	r1, r9
 80126f8:	f7ff ff42 	bl	8012580 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80126fc:	4658      	mov	r0, fp
 80126fe:	b003      	add	sp, #12
 8012700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012704:	eb07 010a 	add.w	r1, r7, sl
 8012708:	4449      	add	r1, r9
 801270a:	4441      	add	r1, r8
 801270c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012710:	e7d2      	b.n	80126b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012712:	f04f 0b00 	mov.w	fp, #0
 8012716:	e7f1      	b.n	80126fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08012718 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8012718:	b570      	push	{r4, r5, r6, lr}
 801271a:	8810      	ldrh	r0, [r2, #0]
 801271c:	4298      	cmp	r0, r3
 801271e:	d817      	bhi.n	8012750 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012720:	1e48      	subs	r0, r1, #1
 8012722:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8012726:	4298      	cmp	r0, r3
 8012728:	d312      	bcc.n	8012750 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801272a:	2400      	movs	r4, #0
 801272c:	428c      	cmp	r4, r1
 801272e:	d20f      	bcs.n	8012750 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012730:	1860      	adds	r0, r4, r1
 8012732:	1040      	asrs	r0, r0, #1
 8012734:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8012738:	0085      	lsls	r5, r0, #2
 801273a:	42b3      	cmp	r3, r6
 801273c:	d902      	bls.n	8012744 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801273e:	3001      	adds	r0, #1
 8012740:	b284      	uxth	r4, r0
 8012742:	e7f3      	b.n	801272c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012744:	d201      	bcs.n	801274a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8012746:	b281      	uxth	r1, r0
 8012748:	e7f0      	b.n	801272c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801274a:	442a      	add	r2, r5
 801274c:	8850      	ldrh	r0, [r2, #2]
 801274e:	bd70      	pop	{r4, r5, r6, pc}
 8012750:	2000      	movs	r0, #0
 8012752:	e7fc      	b.n	801274e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08012754 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012758:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801275a:	4604      	mov	r4, r0
 801275c:	260b      	movs	r6, #11
 801275e:	886f      	ldrh	r7, [r5, #2]
 8012760:	087f      	lsrs	r7, r7, #1
 8012762:	3e01      	subs	r6, #1
 8012764:	d01b      	beq.n	801279e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012766:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012768:	b92b      	cbnz	r3, 8012776 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801276a:	4b0e      	ldr	r3, [pc, #56]	; (80127a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801276c:	21c0      	movs	r1, #192	; 0xc0
 801276e:	4a0e      	ldr	r2, [pc, #56]	; (80127a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8012770:	480e      	ldr	r0, [pc, #56]	; (80127ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8012772:	f00a faf3 	bl	801cd5c <__assert_func>
 8012776:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012778:	462a      	mov	r2, r5
 801277a:	4639      	mov	r1, r7
 801277c:	4620      	mov	r0, r4
 801277e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012782:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8012786:	4643      	mov	r3, r8
 8012788:	f7ff ffc6 	bl	8012718 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801278c:	b138      	cbz	r0, 801279e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801278e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8012792:	4642      	mov	r2, r8
 8012794:	4620      	mov	r0, r4
 8012796:	f7ff ff8b 	bl	80126b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801279a:	2800      	cmp	r0, #0
 801279c:	d1e1      	bne.n	8012762 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a2:	bf00      	nop
 80127a4:	08020878 	.word	0x08020878
 80127a8:	08020aea 	.word	0x08020aea
 80127ac:	08020881 	.word	0x08020881

080127b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	694a      	ldr	r2, [r1, #20]
 80127b4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80127b6:	684b      	ldr	r3, [r1, #4]
 80127b8:	1b54      	subs	r4, r2, r5
 80127ba:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80127bc:	f000 8106 	beq.w	80129cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80127c0:	1b9b      	subs	r3, r3, r6
 80127c2:	d003      	beq.n	80127cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80127c4:	4363      	muls	r3, r4
 80127c6:	2210      	movs	r2, #16
 80127c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80127cc:	680c      	ldr	r4, [r1, #0]
 80127ce:	698a      	ldr	r2, [r1, #24]
 80127d0:	1b65      	subs	r5, r4, r5
 80127d2:	f000 80fd 	beq.w	80129d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80127d6:	1b92      	subs	r2, r2, r6
 80127d8:	d003      	beq.n	80127e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80127da:	436a      	muls	r2, r5
 80127dc:	2410      	movs	r4, #16
 80127de:	fb92 f2f4 	sdiv	r2, r2, r4
 80127e2:	1a9b      	subs	r3, r3, r2
 80127e4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8012a0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80127e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127ec:	460a      	mov	r2, r1
 80127ee:	ee07 3a90 	vmov	s15, r3
 80127f2:	f100 040c 	add.w	r4, r0, #12
 80127f6:	4603      	mov	r3, r0
 80127f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012800:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8012804:	eeb1 6a43 	vneg.f32	s12, s6
 8012808:	edd2 7a02 	vldr	s15, [r2, #8]
 801280c:	3214      	adds	r2, #20
 801280e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012812:	ece3 6a01 	vstmia	r3!, {s13}
 8012816:	429c      	cmp	r4, r3
 8012818:	ed52 7a02 	vldr	s15, [r2, #-8]
 801281c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012820:	edc3 7a02 	vstr	s15, [r3, #8]
 8012824:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012828:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801282c:	edc3 7a05 	vstr	s15, [r3, #20]
 8012830:	d1ea      	bne.n	8012808 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8012832:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012834:	698b      	ldr	r3, [r1, #24]
 8012836:	edd0 4a02 	vldr	s9, [r0, #8]
 801283a:	1a9b      	subs	r3, r3, r2
 801283c:	edd0 3a00 	vldr	s7, [r0]
 8012840:	edd0 6a01 	vldr	s13, [r0, #4]
 8012844:	ee07 3a90 	vmov	s15, r3
 8012848:	684b      	ldr	r3, [r1, #4]
 801284a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801284e:	ed90 5a05 	vldr	s10, [r0, #20]
 8012852:	1a9b      	subs	r3, r3, r2
 8012854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012858:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801285c:	ed90 2a03 	vldr	s4, [r0, #12]
 8012860:	ee07 3a10 	vmov	s14, r3
 8012864:	edd0 5a04 	vldr	s11, [r0, #16]
 8012868:	ee67 7a84 	vmul.f32	s15, s15, s8
 801286c:	ed90 1a07 	vldr	s2, [r0, #28]
 8012870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012874:	edd0 2a06 	vldr	s5, [r0, #24]
 8012878:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801287c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012880:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012884:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012888:	eee6 7a87 	vfma.f32	s15, s13, s14
 801288c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012890:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8012894:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012896:	694a      	ldr	r2, [r1, #20]
 8012898:	1b13      	subs	r3, r2, r4
 801289a:	ee07 3a10 	vmov	s14, r3
 801289e:	680b      	ldr	r3, [r1, #0]
 80128a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128a4:	1b1b      	subs	r3, r3, r4
 80128a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80128aa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80128ae:	ee07 3a10 	vmov	s14, r3
 80128b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80128ba:	eee6 4a87 	vfma.f32	s9, s13, s14
 80128be:	ee64 4a86 	vmul.f32	s9, s9, s12
 80128c2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80128c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80128c8:	698b      	ldr	r3, [r1, #24]
 80128ca:	1a9b      	subs	r3, r3, r2
 80128cc:	ee06 3a90 	vmov	s13, r3
 80128d0:	684b      	ldr	r3, [r1, #4]
 80128d2:	1a9b      	subs	r3, r3, r2
 80128d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80128d8:	ee07 3a10 	vmov	s14, r3
 80128dc:	ee66 6a84 	vmul.f32	s13, s13, s8
 80128e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128e4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80128e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80128ec:	eee5 6a87 	vfma.f32	s13, s11, s14
 80128f0:	ee66 6a83 	vmul.f32	s13, s13, s6
 80128f4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80128f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80128fa:	694a      	ldr	r2, [r1, #20]
 80128fc:	1b13      	subs	r3, r2, r4
 80128fe:	ee07 3a10 	vmov	s14, r3
 8012902:	680b      	ldr	r3, [r1, #0]
 8012904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012908:	1b1b      	subs	r3, r3, r4
 801290a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801290e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012912:	ee07 3a10 	vmov	s14, r3
 8012916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801291a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801291e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012922:	edd0 5a08 	vldr	s11, [r0, #32]
 8012926:	ee31 1a65 	vsub.f32	s2, s2, s11
 801292a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801292e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012932:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8012936:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012938:	698b      	ldr	r3, [r1, #24]
 801293a:	1a9b      	subs	r3, r3, r2
 801293c:	ee07 3a10 	vmov	s14, r3
 8012940:	684b      	ldr	r3, [r1, #4]
 8012942:	1a9b      	subs	r3, r3, r2
 8012944:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012948:	ee01 3a90 	vmov	s3, r3
 801294c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012950:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012954:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8012958:	ee61 1a84 	vmul.f32	s3, s3, s8
 801295c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012960:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012964:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012968:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801296a:	694a      	ldr	r2, [r1, #20]
 801296c:	1b13      	subs	r3, r2, r4
 801296e:	ee03 3a10 	vmov	s6, r3
 8012972:	680b      	ldr	r3, [r1, #0]
 8012974:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012978:	1b1b      	subs	r3, r3, r4
 801297a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801297e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012982:	ee03 3a10 	vmov	s6, r3
 8012986:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801298a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801298e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012992:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012996:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801299a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801299e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80129a2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80129a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129aa:	dd13      	ble.n	80129d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80129ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80129b0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80129b4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80129b6:	eee3 7a87 	vfma.f32	s15, s7, s14
 80129ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c2:	dd15      	ble.n	80129f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80129c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80129c8:	6403      	str	r3, [r0, #64]	; 0x40
 80129ca:	bd70      	pop	{r4, r5, r6, pc}
 80129cc:	4623      	mov	r3, r4
 80129ce:	e6fd      	b.n	80127cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80129d0:	462a      	mov	r2, r5
 80129d2:	e706      	b.n	80127e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80129d4:	d502      	bpl.n	80129dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80129d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80129da:	e7e9      	b.n	80129b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80129dc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80129e0:	eea3 2a85 	vfma.f32	s4, s7, s10
 80129e4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80129e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ec:	dade      	bge.n	80129ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80129ee:	e7f2      	b.n	80129d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80129f0:	d502      	bpl.n	80129f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80129f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80129f6:	e7e7      	b.n	80129c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80129f8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80129fc:	eee3 4a86 	vfma.f32	s9, s7, s12
 8012a00:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8012a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a08:	dadc      	bge.n	80129c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8012a0a:	e7f2      	b.n	80129f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8012a0c:	3d800000 	.word	0x3d800000

08012a10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8012a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a14:	2714      	movs	r7, #20
 8012a16:	435f      	muls	r7, r3
 8012a18:	eb02 0c07 	add.w	ip, r2, r7
 8012a1c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8012a20:	f115 0e0f 	adds.w	lr, r5, #15
 8012a24:	d433      	bmi.n	8012a8e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 8012a26:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8012a2a:	9c08      	ldr	r4, [sp, #32]
 8012a2c:	2614      	movs	r6, #20
 8012a2e:	f8c0 e014 	str.w	lr, [r0, #20]
 8012a32:	4366      	muls	r6, r4
 8012a34:	eb02 0806 	add.w	r8, r2, r6
 8012a38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012a3c:	f115 040f 	adds.w	r4, r5, #15
 8012a40:	d431      	bmi.n	8012aa6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 8012a42:	1124      	asrs	r4, r4, #4
 8012a44:	eba4 040e 	sub.w	r4, r4, lr
 8012a48:	6184      	str	r4, [r0, #24]
 8012a4a:	2c00      	cmp	r4, #0
 8012a4c:	f000 80aa 	beq.w	8012ba4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 8012a50:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8012a54:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012a58:	5995      	ldr	r5, [r2, r6]
 8012a5a:	eba4 0809 	sub.w	r8, r4, r9
 8012a5e:	59d4      	ldr	r4, [r2, r7]
 8012a60:	eba5 0a04 	sub.w	sl, r5, r4
 8012a64:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8012a68:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8012a6c:	2e00      	cmp	r6, #0
 8012a6e:	fb0e fe05 	mul.w	lr, lr, r5
 8012a72:	fb0a ee19 	mls	lr, sl, r9, lr
 8012a76:	fb08 e404 	mla	r4, r8, r4, lr
 8012a7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012a7e:	4434      	add	r4, r6
 8012a80:	dc1d      	bgt.n	8012abe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 8012a82:	4b5b      	ldr	r3, [pc, #364]	; (8012bf0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 8012a84:	21f7      	movs	r1, #247	; 0xf7
 8012a86:	4a5b      	ldr	r2, [pc, #364]	; (8012bf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 8012a88:	485b      	ldr	r0, [pc, #364]	; (8012bf8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 8012a8a:	f00a f967 	bl	801cd5c <__assert_func>
 8012a8e:	2410      	movs	r4, #16
 8012a90:	f1c5 0501 	rsb	r5, r5, #1
 8012a94:	fb9e fef4 	sdiv	lr, lr, r4
 8012a98:	f015 050f 	ands.w	r5, r5, #15
 8012a9c:	bf18      	it	ne
 8012a9e:	2501      	movne	r5, #1
 8012aa0:	ebae 0e05 	sub.w	lr, lr, r5
 8012aa4:	e7c1      	b.n	8012a2a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 8012aa6:	f04f 0910 	mov.w	r9, #16
 8012aaa:	f1c5 0501 	rsb	r5, r5, #1
 8012aae:	fb94 f4f9 	sdiv	r4, r4, r9
 8012ab2:	f015 050f 	ands.w	r5, r5, #15
 8012ab6:	bf18      	it	ne
 8012ab8:	2501      	movne	r5, #1
 8012aba:	1b64      	subs	r4, r4, r5
 8012abc:	e7c2      	b.n	8012a44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 8012abe:	2c00      	cmp	r4, #0
 8012ac0:	db72      	blt.n	8012ba8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 8012ac2:	fb94 fef6 	sdiv	lr, r4, r6
 8012ac6:	fb06 441e 	mls	r4, r6, lr, r4
 8012aca:	f8c0 e000 	str.w	lr, [r0]
 8012ace:	6104      	str	r4, [r0, #16]
 8012ad0:	2d00      	cmp	r5, #0
 8012ad2:	db7b      	blt.n	8012bcc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 8012ad4:	fb95 f4f6 	sdiv	r4, r5, r6
 8012ad8:	fb06 5514 	mls	r5, r6, r4, r5
 8012adc:	6044      	str	r4, [r0, #4]
 8012ade:	6085      	str	r5, [r0, #8]
 8012ae0:	60c6      	str	r6, [r0, #12]
 8012ae2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012ae6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8012aea:	6945      	ldr	r5, [r0, #20]
 8012aec:	59d2      	ldr	r2, [r2, r7]
 8012aee:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8012af2:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 8012af6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8012afa:	ee07 4a10 	vmov	s14, r4
 8012afe:	6804      	ldr	r4, [r0, #0]
 8012b00:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8012b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b08:	ee07 2a90 	vmov	s15, r2
 8012b0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b18:	edd3 6a00 	vldr	s13, [r3]
 8012b1c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012b20:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8012b24:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012b28:	edc0 6a07 	vstr	s13, [r0, #28]
 8012b2c:	edd0 6a01 	vldr	s13, [r0, #4]
 8012b30:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8012b34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012b38:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8012b3c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012b40:	ed80 6a08 	vstr	s12, [r0, #32]
 8012b44:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8012b46:	6242      	str	r2, [r0, #36]	; 0x24
 8012b48:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8012b4c:	ed93 6a03 	vldr	s12, [r3, #12]
 8012b50:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012b54:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8012b58:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012b5c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8012b60:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8012b64:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8012b68:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012b6c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8012b70:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012b72:	6302      	str	r2, [r0, #48]	; 0x30
 8012b74:	ed93 6a06 	vldr	s12, [r3, #24]
 8012b78:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8012b7c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012b80:	eeb0 7a46 	vmov.f32	s14, s12
 8012b84:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8012b88:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012b8c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012b90:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8012b94:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8012b98:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012b9c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8012ba0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8012ba2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba8:	4264      	negs	r4, r4
 8012baa:	fb94 fef6 	sdiv	lr, r4, r6
 8012bae:	f1ce 0800 	rsb	r8, lr, #0
 8012bb2:	fb06 441e 	mls	r4, r6, lr, r4
 8012bb6:	f8c0 8000 	str.w	r8, [r0]
 8012bba:	6104      	str	r4, [r0, #16]
 8012bbc:	2c00      	cmp	r4, #0
 8012bbe:	d087      	beq.n	8012ad0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 8012bc0:	ea6f 0e0e 	mvn.w	lr, lr
 8012bc4:	1b34      	subs	r4, r6, r4
 8012bc6:	f8c0 e000 	str.w	lr, [r0]
 8012bca:	e780      	b.n	8012ace <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 8012bcc:	426d      	negs	r5, r5
 8012bce:	fb95 f4f6 	sdiv	r4, r5, r6
 8012bd2:	f1c4 0e00 	rsb	lr, r4, #0
 8012bd6:	fb06 5514 	mls	r5, r6, r4, r5
 8012bda:	f8c0 e004 	str.w	lr, [r0, #4]
 8012bde:	6085      	str	r5, [r0, #8]
 8012be0:	2d00      	cmp	r5, #0
 8012be2:	f43f af7d 	beq.w	8012ae0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 8012be6:	43e4      	mvns	r4, r4
 8012be8:	1b75      	subs	r5, r6, r5
 8012bea:	6044      	str	r4, [r0, #4]
 8012bec:	e777      	b.n	8012ade <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 8012bee:	bf00      	nop
 8012bf0:	08020e44 	.word	0x08020e44
 8012bf4:	08020e83 	.word	0x08020e83
 8012bf8:	08020e54 	.word	0x08020e54
 8012bfc:	3d800000 	.word	0x3d800000

08012c00 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8012c00:	4b01      	ldr	r3, [pc, #4]	; (8012c08 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8012c02:	6018      	str	r0, [r3, #0]
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	240c3dc4 	.word	0x240c3dc4

08012c0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8012c0c:	4b06      	ldr	r3, [pc, #24]	; (8012c28 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8012c0e:	881a      	ldrh	r2, [r3, #0]
 8012c10:	4282      	cmp	r2, r0
 8012c12:	d807      	bhi.n	8012c24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8012c14:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	4413      	add	r3, r2
 8012c1a:	4298      	cmp	r0, r3
 8012c1c:	bfac      	ite	ge
 8012c1e:	2000      	movge	r0, #0
 8012c20:	2001      	movlt	r0, #1
 8012c22:	4770      	bx	lr
 8012c24:	2000      	movs	r0, #0
 8012c26:	4770      	bx	lr
 8012c28:	240c3de4 	.word	0x240c3de4
 8012c2c:	240c3de8 	.word	0x240c3de8

08012c30 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8012c30:	b508      	push	{r3, lr}
 8012c32:	4601      	mov	r1, r0
 8012c34:	f7ff ffea 	bl	8012c0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8012c38:	b118      	cbz	r0, 8012c42 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8012c3a:	4b02      	ldr	r3, [pc, #8]	; (8012c44 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8012c42:	bd08      	pop	{r3, pc}
 8012c44:	240c3dc8 	.word	0x240c3dc8

08012c48 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	f7ff ffde 	bl	8012c0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8012c50:	b188      	cbz	r0, 8012c76 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8012c52:	4b09      	ldr	r3, [pc, #36]	; (8012c78 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8012c54:	881a      	ldrh	r2, [r3, #0]
 8012c56:	4b09      	ldr	r3, [pc, #36]	; (8012c7c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8012c58:	1aa4      	subs	r4, r4, r2
 8012c5a:	220e      	movs	r2, #14
 8012c5c:	681d      	ldr	r5, [r3, #0]
 8012c5e:	4362      	muls	r2, r4
 8012c60:	18ac      	adds	r4, r5, r2
 8012c62:	7b23      	ldrb	r3, [r4, #12]
 8012c64:	f013 0320 	ands.w	r3, r3, #32
 8012c68:	bf17      	itett	ne
 8012c6a:	680b      	ldrne	r3, [r1, #0]
 8012c6c:	4618      	moveq	r0, r3
 8012c6e:	50ab      	strne	r3, [r5, r2]
 8012c70:	684b      	ldrne	r3, [r1, #4]
 8012c72:	bf18      	it	ne
 8012c74:	6063      	strne	r3, [r4, #4]
 8012c76:	bd38      	pop	{r3, r4, r5, pc}
 8012c78:	240c3de4 	.word	0x240c3de4
 8012c7c:	240c3dcc 	.word	0x240c3dcc

08012c80 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8012c80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c84:	4606      	mov	r6, r0
 8012c86:	460c      	mov	r4, r1
 8012c88:	f7ff ffc0 	bl	8012c0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8012c8c:	b918      	cbnz	r0, 8012c96 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8012c8e:	2000      	movs	r0, #0
 8012c90:	b002      	add	sp, #8
 8012c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c96:	4608      	mov	r0, r1
 8012c98:	f7fa fe15 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c9c:	2800      	cmp	r0, #0
 8012c9e:	d1f6      	bne.n	8012c8e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8012ca0:	4b3f      	ldr	r3, [pc, #252]	; (8012da0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8012ca2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8012da4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8012ca6:	881d      	ldrh	r5, [r3, #0]
 8012ca8:	f8d9 a000 	ldr.w	sl, [r9]
 8012cac:	46c8      	mov	r8, r9
 8012cae:	1b73      	subs	r3, r6, r5
 8012cb0:	250e      	movs	r5, #14
 8012cb2:	435d      	muls	r5, r3
 8012cb4:	eb0a 0705 	add.w	r7, sl, r5
 8012cb8:	7b3b      	ldrb	r3, [r7, #12]
 8012cba:	f013 0f20 	tst.w	r3, #32
 8012cbe:	d0e6      	beq.n	8012c8e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8012cc0:	4621      	mov	r1, r4
 8012cc2:	4638      	mov	r0, r7
 8012cc4:	f7fd fb60 	bl	8010388 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	d1e1      	bne.n	8012c90 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8012ccc:	4639      	mov	r1, r7
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f7fd fb5a 	bl	8010388 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012cd4:	b108      	cbz	r0, 8012cda <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	e020      	b.n	8012d1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8012cda:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012cde:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d11e      	bne.n	8012d24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8012ce6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012cea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d118      	bne.n	8012d24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8012cf2:	6820      	ldr	r0, [r4, #0]
 8012cf4:	466b      	mov	r3, sp
 8012cf6:	6861      	ldr	r1, [r4, #4]
 8012cf8:	c303      	stmia	r3!, {r0, r1}
 8012cfa:	4639      	mov	r1, r7
 8012cfc:	4668      	mov	r0, sp
 8012cfe:	f7fd fb69 	bl	80103d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012d02:	f8d9 3000 	ldr.w	r3, [r9]
 8012d06:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012d0a:	442b      	add	r3, r5
 8012d0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012d10:	4413      	add	r3, r2
 8012d12:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8012d16:	4293      	cmp	r3, r2
 8012d18:	dc04      	bgt.n	8012d24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8012d1a:	4669      	mov	r1, sp
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f7ff ff93 	bl	8012c48 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8012d22:	e7b5      	b.n	8012c90 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8012d24:	f8d8 3000 	ldr.w	r3, [r8]
 8012d28:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012d2c:	442b      	add	r3, r5
 8012d2e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012d32:	4291      	cmp	r1, r2
 8012d34:	d119      	bne.n	8012d6a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8012d36:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8012d3a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012d3e:	4291      	cmp	r1, r2
 8012d40:	d113      	bne.n	8012d6a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8012d42:	6820      	ldr	r0, [r4, #0]
 8012d44:	466a      	mov	r2, sp
 8012d46:	6861      	ldr	r1, [r4, #4]
 8012d48:	c203      	stmia	r2!, {r0, r1}
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	4668      	mov	r0, sp
 8012d4e:	f7fd fb41 	bl	80103d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012d52:	f8d8 3000 	ldr.w	r3, [r8]
 8012d56:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012d5a:	442b      	add	r3, r5
 8012d5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012d60:	4413      	add	r3, r2
 8012d62:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8012d66:	4293      	cmp	r3, r2
 8012d68:	ddd7      	ble.n	8012d1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f7fa fdab 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d70:	b990      	cbnz	r0, 8012d98 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8012d72:	88a7      	ldrh	r7, [r4, #4]
 8012d74:	88e3      	ldrh	r3, [r4, #6]
 8012d76:	fb17 f703 	smulbb	r7, r7, r3
 8012d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8012d7e:	441d      	add	r5, r3
 8012d80:	4628      	mov	r0, r5
 8012d82:	f7fa fda0 	bl	800d8c6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d86:	b948      	cbnz	r0, 8012d9c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8012d88:	88ab      	ldrh	r3, [r5, #4]
 8012d8a:	88ea      	ldrh	r2, [r5, #6]
 8012d8c:	fb13 f302 	smulbb	r3, r3, r2
 8012d90:	42bb      	cmp	r3, r7
 8012d92:	f4bf af7c 	bcs.w	8012c8e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8012d96:	e79e      	b.n	8012cd6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8012d98:	2700      	movs	r7, #0
 8012d9a:	e7ee      	b.n	8012d7a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	e7f7      	b.n	8012d90 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8012da0:	240c3de4 	.word	0x240c3de4
 8012da4:	240c3dcc 	.word	0x240c3dcc

08012da8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8012da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012daa:	4c24      	ldr	r4, [pc, #144]	; (8012e3c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8012dac:	6823      	ldr	r3, [r4, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d042      	beq.n	8012e38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8012db2:	4a23      	ldr	r2, [pc, #140]	; (8012e40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8012db4:	4d23      	ldr	r5, [pc, #140]	; (8012e44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8012db6:	8811      	ldrh	r1, [r2, #0]
 8012db8:	f8b5 c000 	ldrh.w	ip, [r5]
 8012dbc:	4822      	ldr	r0, [pc, #136]	; (8012e48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8012dbe:	4461      	add	r1, ip
 8012dc0:	1c4a      	adds	r2, r1, #1
 8012dc2:	008f      	lsls	r7, r1, #2
 8012dc4:	f022 0201 	bic.w	r2, r2, #1
 8012dc8:	19de      	adds	r6, r3, r7
 8012dca:	0412      	lsls	r2, r2, #16
 8012dcc:	6006      	str	r6, [r0, #0]
 8012dce:	4e1f      	ldr	r6, [pc, #124]	; (8012e4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8012dd0:	0c12      	lsrs	r2, r2, #16
 8012dd2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8012dd6:	19da      	adds	r2, r3, r7
 8012dd8:	6032      	str	r2, [r6, #0]
 8012dda:	220e      	movs	r2, #14
 8012ddc:	fb02 f20c 	mul.w	r2, r2, ip
 8012de0:	3203      	adds	r2, #3
 8012de2:	f022 0203 	bic.w	r2, r2, #3
 8012de6:	443a      	add	r2, r7
 8012de8:	4f19      	ldr	r7, [pc, #100]	; (8012e50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8012dea:	4413      	add	r3, r2
 8012dec:	603b      	str	r3, [r7, #0]
 8012dee:	2300      	movs	r3, #0
 8012df0:	4f18      	ldr	r7, [pc, #96]	; (8012e54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8012df2:	469c      	mov	ip, r3
 8012df4:	803b      	strh	r3, [r7, #0]
 8012df6:	4f18      	ldr	r7, [pc, #96]	; (8012e58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8012df8:	683f      	ldr	r7, [r7, #0]
 8012dfa:	1aba      	subs	r2, r7, r2
 8012dfc:	4f17      	ldr	r7, [pc, #92]	; (8012e5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8012dfe:	603a      	str	r2, [r7, #0]
 8012e00:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012e04:	4a16      	ldr	r2, [pc, #88]	; (8012e60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8012e06:	8013      	strh	r3, [r2, #0]
 8012e08:	428b      	cmp	r3, r1
 8012e0a:	d10d      	bne.n	8012e28 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8012e0c:	882d      	ldrh	r5, [r5, #0]
 8012e0e:	2300      	movs	r3, #0
 8012e10:	6830      	ldr	r0, [r6, #0]
 8012e12:	240e      	movs	r4, #14
 8012e14:	429d      	cmp	r5, r3
 8012e16:	d90f      	bls.n	8012e38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8012e18:	fb04 0203 	mla	r2, r4, r3, r0
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	7b11      	ldrb	r1, [r2, #12]
 8012e20:	f36f 1145 	bfc	r1, #5, #1
 8012e24:	7311      	strb	r1, [r2, #12]
 8012e26:	e7f5      	b.n	8012e14 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8012e28:	6822      	ldr	r2, [r4, #0]
 8012e2a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8012e2e:	6802      	ldr	r2, [r0, #0]
 8012e30:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8012e34:	3301      	adds	r3, #1
 8012e36:	e7e7      	b.n	8012e08 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8012e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	240c3dc8 	.word	0x240c3dc8
 8012e40:	240c3de4 	.word	0x240c3de4
 8012e44:	240c3de8 	.word	0x240c3de8
 8012e48:	240c3ddc 	.word	0x240c3ddc
 8012e4c:	240c3dcc 	.word	0x240c3dcc
 8012e50:	240c3dd4 	.word	0x240c3dd4
 8012e54:	240c3de6 	.word	0x240c3de6
 8012e58:	240c3dd0 	.word	0x240c3dd0
 8012e5c:	240c3de0 	.word	0x240c3de0
 8012e60:	240c3dd8 	.word	0x240c3dd8

08012e64 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8012e64:	4b10      	ldr	r3, [pc, #64]	; (8012ea8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8012e66:	b510      	push	{r4, lr}
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	b9db      	cbnz	r3, 8012ea4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8012e6c:	b1d1      	cbz	r1, 8012ea4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8012e6e:	4b0f      	ldr	r3, [pc, #60]	; (8012eac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8012e70:	240e      	movs	r4, #14
 8012e72:	801a      	strh	r2, [r3, #0]
 8012e74:	b292      	uxth	r2, r2
 8012e76:	4b0e      	ldr	r3, [pc, #56]	; (8012eb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8012e78:	881b      	ldrh	r3, [r3, #0]
 8012e7a:	4413      	add	r3, r2
 8012e7c:	4362      	muls	r2, r4
 8012e7e:	2406      	movs	r4, #6
 8012e80:	fb04 2203 	mla	r2, r4, r3, r2
 8012e84:	428a      	cmp	r2, r1
 8012e86:	d305      	bcc.n	8012e94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8012e88:	4b0a      	ldr	r3, [pc, #40]	; (8012eb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8012e8a:	2134      	movs	r1, #52	; 0x34
 8012e8c:	4a0a      	ldr	r2, [pc, #40]	; (8012eb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8012e8e:	480b      	ldr	r0, [pc, #44]	; (8012ebc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8012e90:	f009 ff64 	bl	801cd5c <__assert_func>
 8012e94:	4b0a      	ldr	r3, [pc, #40]	; (8012ec0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8012e96:	6019      	str	r1, [r3, #0]
 8012e98:	4b0a      	ldr	r3, [pc, #40]	; (8012ec4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8012e9a:	6018      	str	r0, [r3, #0]
 8012e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ea0:	f7ff bf82 	b.w	8012da8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8012ea4:	bd10      	pop	{r4, pc}
 8012ea6:	bf00      	nop
 8012ea8:	240c3dd4 	.word	0x240c3dd4
 8012eac:	240c3de8 	.word	0x240c3de8
 8012eb0:	240c3de4 	.word	0x240c3de4
 8012eb4:	08020f21 	.word	0x08020f21
 8012eb8:	08020fb6 	.word	0x08020fb6
 8012ebc:	08020efc 	.word	0x08020efc
 8012ec0:	240c3dd0 	.word	0x240c3dd0
 8012ec4:	240c3dc8 	.word	0x240c3dc8

08012ec8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8012ec8:	b470      	push	{r4, r5, r6}
 8012eca:	4c07      	ldr	r4, [pc, #28]	; (8012ee8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8012ecc:	4605      	mov	r5, r0
 8012ece:	4610      	mov	r0, r2
 8012ed0:	9a03      	ldr	r2, [sp, #12]
 8012ed2:	6826      	ldr	r6, [r4, #0]
 8012ed4:	b936      	cbnz	r6, 8012ee4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8012ed6:	6025      	str	r5, [r4, #0]
 8012ed8:	4c04      	ldr	r4, [pc, #16]	; (8012eec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8012eda:	8021      	strh	r1, [r4, #0]
 8012edc:	4619      	mov	r1, r3
 8012ede:	bc70      	pop	{r4, r5, r6}
 8012ee0:	f7ff bfc0 	b.w	8012e64 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8012ee4:	bc70      	pop	{r4, r5, r6}
 8012ee6:	4770      	bx	lr
 8012ee8:	240c3dec 	.word	0x240c3dec
 8012eec:	240c3de4 	.word	0x240c3de4

08012ef0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8012ef0:	b508      	push	{r3, lr}
 8012ef2:	4b17      	ldr	r3, [pc, #92]	; (8012f50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8012ef4:	6819      	ldr	r1, [r3, #0]
 8012ef6:	b931      	cbnz	r1, 8012f06 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8012ef8:	4b16      	ldr	r3, [pc, #88]	; (8012f54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8012efa:	f240 4184 	movw	r1, #1156	; 0x484
 8012efe:	4a16      	ldr	r2, [pc, #88]	; (8012f58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8012f00:	4816      	ldr	r0, [pc, #88]	; (8012f5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8012f02:	f009 ff2b 	bl	801cd5c <__assert_func>
 8012f06:	4a16      	ldr	r2, [pc, #88]	; (8012f60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8012f08:	8803      	ldrh	r3, [r0, #0]
 8012f0a:	8812      	ldrh	r2, [r2, #0]
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d204      	bcs.n	8012f1a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8012f10:	2214      	movs	r2, #20
 8012f12:	fb02 1303 	mla	r3, r2, r3, r1
 8012f16:	8918      	ldrh	r0, [r3, #8]
 8012f18:	bd08      	pop	{r3, pc}
 8012f1a:	4912      	ldr	r1, [pc, #72]	; (8012f64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 8012f1c:	8809      	ldrh	r1, [r1, #0]
 8012f1e:	4411      	add	r1, r2
 8012f20:	428b      	cmp	r3, r1
 8012f22:	da06      	bge.n	8012f32 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8012f24:	1a9b      	subs	r3, r3, r2
 8012f26:	4a10      	ldr	r2, [pc, #64]	; (8012f68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 8012f28:	210e      	movs	r1, #14
 8012f2a:	6812      	ldr	r2, [r2, #0]
 8012f2c:	fb01 2303 	mla	r3, r1, r3, r2
 8012f30:	e7f1      	b.n	8012f16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8012f32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d107      	bne.n	8012f4a <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 8012f3a:	4b0c      	ldr	r3, [pc, #48]	; (8012f6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	b913      	cbnz	r3, 8012f46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 8012f40:	4b0b      	ldr	r3, [pc, #44]	; (8012f70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 8012f42:	8818      	ldrh	r0, [r3, #0]
 8012f44:	e7e8      	b.n	8012f18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8012f46:	4b0b      	ldr	r3, [pc, #44]	; (8012f74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 8012f48:	e7fb      	b.n	8012f42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	e7e4      	b.n	8012f18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8012f4e:	bf00      	nop
 8012f50:	240c3dec 	.word	0x240c3dec
 8012f54:	08020f7a 	.word	0x08020f7a
 8012f58:	0802102d 	.word	0x0802102d
 8012f5c:	08020efc 	.word	0x08020efc
 8012f60:	240c3de4 	.word	0x240c3de4
 8012f64:	240c3de8 	.word	0x240c3de8
 8012f68:	240c3dcc 	.word	0x240c3dcc
 8012f6c:	240c3d3a 	.word	0x240c3d3a
 8012f70:	240c3d3c 	.word	0x240c3d3c
 8012f74:	240c3d3e 	.word	0x240c3d3e

08012f78 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8012f78:	b508      	push	{r3, lr}
 8012f7a:	4b17      	ldr	r3, [pc, #92]	; (8012fd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8012f7c:	6819      	ldr	r1, [r3, #0]
 8012f7e:	b931      	cbnz	r1, 8012f8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8012f80:	4b16      	ldr	r3, [pc, #88]	; (8012fdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8012f82:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8012f86:	4a16      	ldr	r2, [pc, #88]	; (8012fe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8012f88:	4816      	ldr	r0, [pc, #88]	; (8012fe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8012f8a:	f009 fee7 	bl	801cd5c <__assert_func>
 8012f8e:	4a16      	ldr	r2, [pc, #88]	; (8012fe8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8012f90:	8803      	ldrh	r3, [r0, #0]
 8012f92:	8812      	ldrh	r2, [r2, #0]
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d204      	bcs.n	8012fa2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8012f98:	2214      	movs	r2, #20
 8012f9a:	fb02 1303 	mla	r3, r2, r3, r1
 8012f9e:	8958      	ldrh	r0, [r3, #10]
 8012fa0:	bd08      	pop	{r3, pc}
 8012fa2:	4912      	ldr	r1, [pc, #72]	; (8012fec <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 8012fa4:	8809      	ldrh	r1, [r1, #0]
 8012fa6:	4411      	add	r1, r2
 8012fa8:	428b      	cmp	r3, r1
 8012faa:	da06      	bge.n	8012fba <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8012fac:	1a9b      	subs	r3, r3, r2
 8012fae:	4a10      	ldr	r2, [pc, #64]	; (8012ff0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 8012fb0:	210e      	movs	r1, #14
 8012fb2:	6812      	ldr	r2, [r2, #0]
 8012fb4:	fb01 2303 	mla	r3, r1, r3, r2
 8012fb8:	e7f1      	b.n	8012f9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8012fba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d107      	bne.n	8012fd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 8012fc2:	4b0c      	ldr	r3, [pc, #48]	; (8012ff4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	b913      	cbnz	r3, 8012fce <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 8012fc8:	4b0b      	ldr	r3, [pc, #44]	; (8012ff8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 8012fca:	8818      	ldrh	r0, [r3, #0]
 8012fcc:	e7e8      	b.n	8012fa0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8012fce:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 8012fd0:	e7fb      	b.n	8012fca <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 8012fd2:	2000      	movs	r0, #0
 8012fd4:	e7e4      	b.n	8012fa0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8012fd6:	bf00      	nop
 8012fd8:	240c3dec 	.word	0x240c3dec
 8012fdc:	08020f7a 	.word	0x08020f7a
 8012fe0:	08021059 	.word	0x08021059
 8012fe4:	08020efc 	.word	0x08020efc
 8012fe8:	240c3de4 	.word	0x240c3de4
 8012fec:	240c3de8 	.word	0x240c3de8
 8012ff0:	240c3dcc 	.word	0x240c3dcc
 8012ff4:	240c3d3a 	.word	0x240c3d3a
 8012ff8:	240c3d3e 	.word	0x240c3d3e
 8012ffc:	240c3d3c 	.word	0x240c3d3c

08013000 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8013000:	b508      	push	{r3, lr}
 8013002:	4b12      	ldr	r3, [pc, #72]	; (801304c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8013004:	6819      	ldr	r1, [r3, #0]
 8013006:	b931      	cbnz	r1, 8013016 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8013008:	4b11      	ldr	r3, [pc, #68]	; (8013050 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801300a:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 801300e:	4a11      	ldr	r2, [pc, #68]	; (8013054 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8013010:	4811      	ldr	r0, [pc, #68]	; (8013058 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8013012:	f009 fea3 	bl	801cd5c <__assert_func>
 8013016:	8803      	ldrh	r3, [r0, #0]
 8013018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801301c:	4293      	cmp	r3, r2
 801301e:	d012      	beq.n	8013046 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8013020:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013024:	4293      	cmp	r3, r2
 8013026:	d103      	bne.n	8013030 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8013028:	4b0c      	ldr	r3, [pc, #48]	; (801305c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801302e:	bd08      	pop	{r3, pc}
 8013030:	4a0b      	ldr	r2, [pc, #44]	; (8013060 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8013032:	6812      	ldr	r2, [r2, #0]
 8013034:	b11a      	cbz	r2, 801303e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8013036:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801303a:	2800      	cmp	r0, #0
 801303c:	d1f7      	bne.n	801302e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801303e:	2214      	movs	r2, #20
 8013040:	4353      	muls	r3, r2
 8013042:	58c8      	ldr	r0, [r1, r3]
 8013044:	e7f3      	b.n	801302e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013046:	2000      	movs	r0, #0
 8013048:	e7f1      	b.n	801302e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801304a:	bf00      	nop
 801304c:	240c3dec 	.word	0x240c3dec
 8013050:	08020f7a 	.word	0x08020f7a
 8013054:	08020ffc 	.word	0x08020ffc
 8013058:	08020efc 	.word	0x08020efc
 801305c:	240c3d44 	.word	0x240c3d44
 8013060:	240c3dc8 	.word	0x240c3dc8

08013064 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8013064:	8802      	ldrh	r2, [r0, #0]
 8013066:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801306a:	429a      	cmp	r2, r3
 801306c:	d845      	bhi.n	80130fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801306e:	4b24      	ldr	r3, [pc, #144]	; (8013100 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013070:	8818      	ldrh	r0, [r3, #0]
 8013072:	4282      	cmp	r2, r0
 8013074:	d221      	bcs.n	80130ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8013076:	4b23      	ldr	r3, [pc, #140]	; (8013104 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8013078:	6819      	ldr	r1, [r3, #0]
 801307a:	2314      	movs	r3, #20
 801307c:	fb03 1302 	mla	r3, r3, r2, r1
 8013080:	6858      	ldr	r0, [r3, #4]
 8013082:	2800      	cmp	r0, #0
 8013084:	d03a      	beq.n	80130fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013086:	4920      	ldr	r1, [pc, #128]	; (8013108 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013088:	6809      	ldr	r1, [r1, #0]
 801308a:	2900      	cmp	r1, #0
 801308c:	d036      	beq.n	80130fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801308e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013092:	2900      	cmp	r1, #0
 8013094:	d032      	beq.n	80130fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013096:	891a      	ldrh	r2, [r3, #8]
 8013098:	8958      	ldrh	r0, [r3, #10]
 801309a:	4350      	muls	r0, r2
 801309c:	7c5a      	ldrb	r2, [r3, #17]
 801309e:	7cdb      	ldrb	r3, [r3, #19]
 80130a0:	0952      	lsrs	r2, r2, #5
 80130a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80130a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80130aa:	2b0b      	cmp	r3, #11
 80130ac:	bf18      	it	ne
 80130ae:	0040      	lslne	r0, r0, #1
 80130b0:	3003      	adds	r0, #3
 80130b2:	f020 0003 	bic.w	r0, r0, #3
 80130b6:	4408      	add	r0, r1
 80130b8:	4770      	bx	lr
 80130ba:	4b14      	ldr	r3, [pc, #80]	; (801310c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	4403      	add	r3, r0
 80130c0:	429a      	cmp	r2, r3
 80130c2:	da1a      	bge.n	80130fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80130c4:	4b12      	ldr	r3, [pc, #72]	; (8013110 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80130c6:	1a10      	subs	r0, r2, r0
 80130c8:	210e      	movs	r1, #14
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	fb01 3000 	mla	r0, r1, r0, r3
 80130d0:	7b03      	ldrb	r3, [r0, #12]
 80130d2:	f003 031f 	and.w	r3, r3, #31
 80130d6:	2b0b      	cmp	r3, #11
 80130d8:	d10b      	bne.n	80130f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80130da:	8903      	ldrh	r3, [r0, #8]
 80130dc:	8940      	ldrh	r0, [r0, #10]
 80130de:	4358      	muls	r0, r3
 80130e0:	4b09      	ldr	r3, [pc, #36]	; (8013108 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80130e2:	3003      	adds	r0, #3
 80130e4:	6819      	ldr	r1, [r3, #0]
 80130e6:	f020 0303 	bic.w	r3, r0, #3
 80130ea:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80130ee:	4418      	add	r0, r3
 80130f0:	4770      	bx	lr
 80130f2:	2b0d      	cmp	r3, #13
 80130f4:	d101      	bne.n	80130fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80130f6:	300d      	adds	r0, #13
 80130f8:	4770      	bx	lr
 80130fa:	2000      	movs	r0, #0
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop
 8013100:	240c3de4 	.word	0x240c3de4
 8013104:	240c3dec 	.word	0x240c3dec
 8013108:	240c3dc8 	.word	0x240c3dc8
 801310c:	240c3de8 	.word	0x240c3de8
 8013110:	240c3dcc 	.word	0x240c3dcc

08013114 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8013114:	4b17      	ldr	r3, [pc, #92]	; (8013174 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8013116:	b510      	push	{r4, lr}
 8013118:	6819      	ldr	r1, [r3, #0]
 801311a:	8803      	ldrh	r3, [r0, #0]
 801311c:	b1e9      	cbz	r1, 801315a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801311e:	4a16      	ldr	r2, [pc, #88]	; (8013178 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8013120:	8812      	ldrh	r2, [r2, #0]
 8013122:	429a      	cmp	r2, r3
 8013124:	d90a      	bls.n	801313c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8013126:	2214      	movs	r2, #20
 8013128:	fb02 1303 	mla	r3, r2, r3, r1
 801312c:	7c58      	ldrb	r0, [r3, #17]
 801312e:	0942      	lsrs	r2, r0, #5
 8013130:	7cd8      	ldrb	r0, [r3, #19]
 8013132:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8013136:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801313a:	bd10      	pop	{r4, pc}
 801313c:	490f      	ldr	r1, [pc, #60]	; (801317c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801313e:	8809      	ldrh	r1, [r1, #0]
 8013140:	4411      	add	r1, r2
 8013142:	428b      	cmp	r3, r1
 8013144:	da09      	bge.n	801315a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8013146:	1a9b      	subs	r3, r3, r2
 8013148:	4a0d      	ldr	r2, [pc, #52]	; (8013180 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801314a:	210e      	movs	r1, #14
 801314c:	6812      	ldr	r2, [r2, #0]
 801314e:	fb01 2303 	mla	r3, r1, r3, r2
 8013152:	7b18      	ldrb	r0, [r3, #12]
 8013154:	f000 001f 	and.w	r0, r0, #31
 8013158:	e7ef      	b.n	801313a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801315a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801315e:	4293      	cmp	r3, r2
 8013160:	d106      	bne.n	8013170 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8013162:	f7f6 f8df 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 8013166:	6803      	ldr	r3, [r0, #0]
 8013168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801316e:	4718      	bx	r3
 8013170:	2000      	movs	r0, #0
 8013172:	e7e2      	b.n	801313a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013174:	240c3dec 	.word	0x240c3dec
 8013178:	240c3de4 	.word	0x240c3de4
 801317c:	240c3de8 	.word	0x240c3de8
 8013180:	240c3dcc 	.word	0x240c3dcc

08013184 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8013184:	2018      	movs	r0, #24
 8013186:	4770      	bx	lr

08013188 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8013188:	2001      	movs	r0, #1
 801318a:	4770      	bx	lr

0801318c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013190:	b085      	sub	sp, #20
 8013192:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013194:	9203      	str	r2, [sp, #12]
 8013196:	6870      	ldr	r0, [r6, #4]
 8013198:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801319c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80131a0:	9101      	str	r1, [sp, #4]
 80131a2:	fa1f f885 	uxth.w	r8, r5
 80131a6:	43ed      	mvns	r5, r5
 80131a8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80131ac:	b2ed      	uxtb	r5, r5
 80131ae:	fb00 2404 	mla	r4, r0, r4, r2
 80131b2:	6832      	ldr	r2, [r6, #0]
 80131b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80131b8:	4414      	add	r4, r2
 80131ba:	f8dc 2000 	ldr.w	r2, [ip]
 80131be:	9202      	str	r2, [sp, #8]
 80131c0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80131c4:	f102 0e04 	add.w	lr, r2, #4
 80131c8:	9a01      	ldr	r2, [sp, #4]
 80131ca:	2a00      	cmp	r2, #0
 80131cc:	dc03      	bgt.n	80131d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80131ce:	9a03      	ldr	r2, [sp, #12]
 80131d0:	2a00      	cmp	r2, #0
 80131d2:	f340 8116 	ble.w	8013402 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80131d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80131d8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80131dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80131e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80131e2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80131e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	dd0e      	ble.n	801320c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80131ee:	1406      	asrs	r6, r0, #16
 80131f0:	d405      	bmi.n	80131fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80131f2:	4556      	cmp	r6, sl
 80131f4:	da03      	bge.n	80131fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80131f6:	1416      	asrs	r6, r2, #16
 80131f8:	d401      	bmi.n	80131fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80131fa:	454e      	cmp	r6, r9
 80131fc:	db07      	blt.n	801320e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80131fe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013200:	3b01      	subs	r3, #1
 8013202:	3403      	adds	r4, #3
 8013204:	4430      	add	r0, r6
 8013206:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013208:	4432      	add	r2, r6
 801320a:	e7ee      	b.n	80131ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801320c:	d063      	beq.n	80132d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801320e:	1e5e      	subs	r6, r3, #1
 8013210:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013212:	fb07 0706 	mla	r7, r7, r6, r0
 8013216:	143f      	asrs	r7, r7, #16
 8013218:	d454      	bmi.n	80132c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801321a:	4557      	cmp	r7, sl
 801321c:	da52      	bge.n	80132c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801321e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013220:	fb07 2606 	mla	r6, r7, r6, r2
 8013224:	1436      	asrs	r6, r6, #16
 8013226:	d44d      	bmi.n	80132c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013228:	454e      	cmp	r6, r9
 801322a:	da4b      	bge.n	80132c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801322c:	1ce6      	adds	r6, r4, #3
 801322e:	4699      	mov	r9, r3
 8013230:	f1b9 0f00 	cmp.w	r9, #0
 8013234:	f106 0603 	add.w	r6, r6, #3
 8013238:	dd48      	ble.n	80132cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801323a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801323e:	1417      	asrs	r7, r2, #16
 8013240:	9902      	ldr	r1, [sp, #8]
 8013242:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013246:	f109 39ff 	add.w	r9, r9, #4294967295
 801324a:	fb0b 1707 	mla	r7, fp, r7, r1
 801324e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013252:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013254:	f817 700a 	ldrb.w	r7, [r7, sl]
 8013258:	fb1b fb05 	smulbb	fp, fp, r5
 801325c:	4408      	add	r0, r1
 801325e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013260:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013264:	440a      	add	r2, r1
 8013266:	eb0e 0a07 	add.w	sl, lr, r7
 801326a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801326e:	fb07 b708 	mla	r7, r7, r8, fp
 8013272:	b2bf      	uxth	r7, r7
 8013274:	f107 0b01 	add.w	fp, r7, #1
 8013278:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801327c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013280:	fb1b fb05 	smulbb	fp, fp, r5
 8013284:	123f      	asrs	r7, r7, #8
 8013286:	f806 7c06 	strb.w	r7, [r6, #-6]
 801328a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801328e:	fb07 b708 	mla	r7, r7, r8, fp
 8013292:	b2bf      	uxth	r7, r7
 8013294:	f107 0b01 	add.w	fp, r7, #1
 8013298:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801329c:	123f      	asrs	r7, r7, #8
 801329e:	f806 7c05 	strb.w	r7, [r6, #-5]
 80132a2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80132a6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80132aa:	fb1a fa05 	smulbb	sl, sl, r5
 80132ae:	fb07 a708 	mla	r7, r7, r8, sl
 80132b2:	b2bf      	uxth	r7, r7
 80132b4:	f107 0a01 	add.w	sl, r7, #1
 80132b8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80132bc:	123f      	asrs	r7, r7, #8
 80132be:	f806 7c04 	strb.w	r7, [r6, #-4]
 80132c2:	e7b5      	b.n	8013230 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80132c4:	2700      	movs	r7, #0
 80132c6:	1bde      	subs	r6, r3, r7
 80132c8:	2e00      	cmp	r6, #0
 80132ca:	dc42      	bgt.n	8013352 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80132cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80132d4:	441c      	add	r4, r3
 80132d6:	9b01      	ldr	r3, [sp, #4]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	f340 8092 	ble.w	8013402 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80132de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80132e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80132e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80132ec:	eef0 6a62 	vmov.f32	s13, s5
 80132f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80132f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80132f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80132fc:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8013300:	eef0 6a43 	vmov.f32	s13, s6
 8013304:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013308:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801330c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013310:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013314:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013318:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801331c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013320:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013324:	ee12 2a90 	vmov	r2, s5
 8013328:	eef0 2a47 	vmov.f32	s5, s14
 801332c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013330:	ee13 2a10 	vmov	r2, s6
 8013334:	9311      	str	r3, [sp, #68]	; 0x44
 8013336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013338:	eeb0 3a67 	vmov.f32	s6, s15
 801333c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013340:	9312      	str	r3, [sp, #72]	; 0x48
 8013342:	9b01      	ldr	r3, [sp, #4]
 8013344:	9a03      	ldr	r2, [sp, #12]
 8013346:	3b01      	subs	r3, #1
 8013348:	9301      	str	r3, [sp, #4]
 801334a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801334c:	bf08      	it	eq
 801334e:	4613      	moveq	r3, r2
 8013350:	e73a      	b.n	80131c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013352:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8013356:	d44e      	bmi.n	80133f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8013358:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801335c:	4556      	cmp	r6, sl
 801335e:	dd4a      	ble.n	80133f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8013360:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8013364:	d447      	bmi.n	80133f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8013366:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801336a:	4559      	cmp	r1, fp
 801336c:	dd43      	ble.n	80133f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801336e:	fa0f f986 	sxth.w	r9, r6
 8013372:	9902      	ldr	r1, [sp, #8]
 8013374:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8013378:	fb0b 1909 	mla	r9, fp, r9, r1
 801337c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8013380:	f819 900a 	ldrb.w	r9, [r9, sl]
 8013384:	fb1b fb05 	smulbb	fp, fp, r5
 8013388:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801338c:	eb0e 0a09 	add.w	sl, lr, r9
 8013390:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8013394:	fb09 b908 	mla	r9, r9, r8, fp
 8013398:	fa1f f989 	uxth.w	r9, r9
 801339c:	f109 0b01 	add.w	fp, r9, #1
 80133a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133a8:	f804 9006 	strb.w	r9, [r4, r6]
 80133ac:	4426      	add	r6, r4
 80133ae:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80133b2:	f896 b001 	ldrb.w	fp, [r6, #1]
 80133b6:	fb1b fb05 	smulbb	fp, fp, r5
 80133ba:	fb09 b908 	mla	r9, r9, r8, fp
 80133be:	fa1f f989 	uxth.w	r9, r9
 80133c2:	f109 0b01 	add.w	fp, r9, #1
 80133c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133ce:	f886 9001 	strb.w	r9, [r6, #1]
 80133d2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80133d6:	f896 a002 	ldrb.w	sl, [r6, #2]
 80133da:	fb1a fa05 	smulbb	sl, sl, r5
 80133de:	fb09 a908 	mla	r9, r9, r8, sl
 80133e2:	fa1f f989 	uxth.w	r9, r9
 80133e6:	f109 0a01 	add.w	sl, r9, #1
 80133ea:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80133ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133f2:	f886 9002 	strb.w	r9, [r6, #2]
 80133f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80133f8:	3701      	adds	r7, #1
 80133fa:	4408      	add	r0, r1
 80133fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80133fe:	440a      	add	r2, r1
 8013400:	e761      	b.n	80132c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013402:	b005      	add	sp, #20
 8013404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013408 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801340c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801340e:	4693      	mov	fp, r2
 8013410:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013416:	6868      	ldr	r0, [r5, #4]
 8013418:	6877      	ldr	r7, [r6, #4]
 801341a:	9100      	str	r1, [sp, #0]
 801341c:	3704      	adds	r7, #4
 801341e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8013422:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8013426:	fb00 2404 	mla	r4, r0, r4, r2
 801342a:	682a      	ldr	r2, [r5, #0]
 801342c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013430:	4414      	add	r4, r2
 8013432:	6832      	ldr	r2, [r6, #0]
 8013434:	9201      	str	r2, [sp, #4]
 8013436:	9a00      	ldr	r2, [sp, #0]
 8013438:	2a00      	cmp	r2, #0
 801343a:	dc03      	bgt.n	8013444 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801343c:	f1bb 0f00 	cmp.w	fp, #0
 8013440:	f340 80bc 	ble.w	80135bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8013444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013446:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801344a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801344e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013450:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8013454:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013458:	2b00      	cmp	r3, #0
 801345a:	dd0c      	ble.n	8013476 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801345c:	1405      	asrs	r5, r0, #16
 801345e:	d405      	bmi.n	801346c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013460:	4555      	cmp	r5, sl
 8013462:	da03      	bge.n	801346c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013464:	1415      	asrs	r5, r2, #16
 8013466:	d401      	bmi.n	801346c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013468:	454d      	cmp	r5, r9
 801346a:	db05      	blt.n	8013478 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801346c:	4440      	add	r0, r8
 801346e:	4472      	add	r2, lr
 8013470:	3b01      	subs	r3, #1
 8013472:	3403      	adds	r4, #3
 8013474:	e7f0      	b.n	8013458 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8013476:	d03f      	beq.n	80134f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8013478:	1e5d      	subs	r5, r3, #1
 801347a:	fb08 0c05 	mla	ip, r8, r5, r0
 801347e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8013482:	d42e      	bmi.n	80134e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013484:	45d4      	cmp	ip, sl
 8013486:	da2c      	bge.n	80134e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013488:	fb0e 2505 	mla	r5, lr, r5, r2
 801348c:	142d      	asrs	r5, r5, #16
 801348e:	d428      	bmi.n	80134e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013490:	454d      	cmp	r5, r9
 8013492:	da26      	bge.n	80134e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013494:	1ce5      	adds	r5, r4, #3
 8013496:	469c      	mov	ip, r3
 8013498:	f1bc 0f00 	cmp.w	ip, #0
 801349c:	f105 0503 	add.w	r5, r5, #3
 80134a0:	dd25      	ble.n	80134ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80134a2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80134a6:	ea4f 4922 	mov.w	r9, r2, asr #16
 80134aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80134ae:	4472      	add	r2, lr
 80134b0:	468a      	mov	sl, r1
 80134b2:	9901      	ldr	r1, [sp, #4]
 80134b4:	fb0a 1909 	mla	r9, sl, r9, r1
 80134b8:	1401      	asrs	r1, r0, #16
 80134ba:	4440      	add	r0, r8
 80134bc:	f819 9001 	ldrb.w	r9, [r9, r1]
 80134c0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80134c4:	eb07 0a09 	add.w	sl, r7, r9
 80134c8:	f817 9009 	ldrb.w	r9, [r7, r9]
 80134cc:	f805 9c06 	strb.w	r9, [r5, #-6]
 80134d0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80134d4:	f805 9c05 	strb.w	r9, [r5, #-5]
 80134d8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80134dc:	f805 9c04 	strb.w	r9, [r5, #-4]
 80134e0:	e7da      	b.n	8013498 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80134e2:	2500      	movs	r5, #0
 80134e4:	eba3 0c05 	sub.w	ip, r3, r5
 80134e8:	f1bc 0f00 	cmp.w	ip, #0
 80134ec:	dc3b      	bgt.n	8013566 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80134ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80134f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80134f6:	441c      	add	r4, r3
 80134f8:	9b00      	ldr	r3, [sp, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	dd5e      	ble.n	80135bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80134fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013504:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013508:	eeb0 6a62 	vmov.f32	s12, s5
 801350c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013510:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013514:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013518:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801351c:	eeb0 6a43 	vmov.f32	s12, s6
 8013520:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013524:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013528:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801352c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013530:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013534:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013538:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801353c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013540:	ee12 2a90 	vmov	r2, s5
 8013544:	eef0 2a47 	vmov.f32	s5, s14
 8013548:	fb92 f8f3 	sdiv	r8, r2, r3
 801354c:	ee13 2a10 	vmov	r2, s6
 8013550:	eeb0 3a67 	vmov.f32	s6, s15
 8013554:	fb92 fef3 	sdiv	lr, r2, r3
 8013558:	9b00      	ldr	r3, [sp, #0]
 801355a:	3b01      	subs	r3, #1
 801355c:	9300      	str	r3, [sp, #0]
 801355e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013560:	bf08      	it	eq
 8013562:	465b      	moveq	r3, fp
 8013564:	e767      	b.n	8013436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8013566:	ea5f 4920 	movs.w	r9, r0, asr #16
 801356a:	d423      	bmi.n	80135b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801356c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8013570:	45cc      	cmp	ip, r9
 8013572:	dd1f      	ble.n	80135b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8013574:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013578:	d41c      	bmi.n	80135b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801357a:	68f1      	ldr	r1, [r6, #12]
 801357c:	4551      	cmp	r1, sl
 801357e:	dd19      	ble.n	80135b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8013580:	fa0f fc8c 	sxth.w	ip, ip
 8013584:	9901      	ldr	r1, [sp, #4]
 8013586:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801358a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801358e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013592:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8013596:	eb07 090c 	add.w	r9, r7, ip
 801359a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801359e:	f804 a00c 	strb.w	sl, [r4, ip]
 80135a2:	44a4      	add	ip, r4
 80135a4:	f899 a001 	ldrb.w	sl, [r9, #1]
 80135a8:	f88c a001 	strb.w	sl, [ip, #1]
 80135ac:	f899 9002 	ldrb.w	r9, [r9, #2]
 80135b0:	f88c 9002 	strb.w	r9, [ip, #2]
 80135b4:	4440      	add	r0, r8
 80135b6:	4472      	add	r2, lr
 80135b8:	3501      	adds	r5, #1
 80135ba:	e793      	b.n	80134e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80135bc:	b003      	add	sp, #12
 80135be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80135c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c6:	b085      	sub	sp, #20
 80135c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80135cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80135ce:	9202      	str	r2, [sp, #8]
 80135d0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80135d4:	6860      	ldr	r0, [r4, #4]
 80135d6:	9203      	str	r2, [sp, #12]
 80135d8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80135dc:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80135e0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80135e4:	fb00 2505 	mla	r5, r0, r5, r2
 80135e8:	6822      	ldr	r2, [r4, #0]
 80135ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135ee:	4415      	add	r5, r2
 80135f0:	f8dc 2000 	ldr.w	r2, [ip]
 80135f4:	9200      	str	r2, [sp, #0]
 80135f6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80135fa:	3204      	adds	r2, #4
 80135fc:	9201      	str	r2, [sp, #4]
 80135fe:	2900      	cmp	r1, #0
 8013600:	dc03      	bgt.n	801360a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013602:	9a02      	ldr	r2, [sp, #8]
 8013604:	2a00      	cmp	r2, #0
 8013606:	f340 8127 	ble.w	8013858 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801360a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801360c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013610:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013616:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801361a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801361e:	2b00      	cmp	r3, #0
 8013620:	dd0d      	ble.n	801363e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013622:	1422      	asrs	r2, r4, #16
 8013624:	d405      	bmi.n	8013632 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013626:	4542      	cmp	r2, r8
 8013628:	da03      	bge.n	8013632 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801362a:	1402      	asrs	r2, r0, #16
 801362c:	d401      	bmi.n	8013632 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801362e:	42ba      	cmp	r2, r7
 8013630:	db06      	blt.n	8013640 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013632:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013634:	4474      	add	r4, lr
 8013636:	3b01      	subs	r3, #1
 8013638:	3503      	adds	r5, #3
 801363a:	4410      	add	r0, r2
 801363c:	e7ef      	b.n	801361e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801363e:	d075      	beq.n	801372c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8013640:	1e5a      	subs	r2, r3, #1
 8013642:	fb0e 4602 	mla	r6, lr, r2, r4
 8013646:	1436      	asrs	r6, r6, #16
 8013648:	d465      	bmi.n	8013716 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801364a:	4546      	cmp	r6, r8
 801364c:	da63      	bge.n	8013716 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801364e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013650:	fb06 0202 	mla	r2, r6, r2, r0
 8013654:	1412      	asrs	r2, r2, #16
 8013656:	d45e      	bmi.n	8013716 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013658:	42ba      	cmp	r2, r7
 801365a:	da5c      	bge.n	8013716 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801365c:	1cef      	adds	r7, r5, #3
 801365e:	4699      	mov	r9, r3
 8013660:	f1b9 0f00 	cmp.w	r9, #0
 8013664:	dd5d      	ble.n	8013722 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8013666:	1402      	asrs	r2, r0, #16
 8013668:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801366c:	1426      	asrs	r6, r4, #16
 801366e:	4692      	mov	sl, r2
 8013670:	9a00      	ldr	r2, [sp, #0]
 8013672:	fb08 220a 	mla	r2, r8, sl, r2
 8013676:	5d92      	ldrb	r2, [r2, r6]
 8013678:	9e01      	ldr	r6, [sp, #4]
 801367a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801367e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8013682:	d041      	beq.n	8013708 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013684:	9a03      	ldr	r2, [sp, #12]
 8013686:	fa5f fb86 	uxtb.w	fp, r6
 801368a:	fb02 f808 	mul.w	r8, r2, r8
 801368e:	f108 0201 	add.w	r2, r8, #1
 8013692:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8013696:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801369a:	1212      	asrs	r2, r2, #8
 801369c:	fa1f fa82 	uxth.w	sl, r2
 80136a0:	43d2      	mvns	r2, r2
 80136a2:	fb1b fb0a 	smulbb	fp, fp, sl
 80136a6:	b2d2      	uxtb	r2, r2
 80136a8:	fb08 b802 	mla	r8, r8, r2, fp
 80136ac:	fa1f f888 	uxth.w	r8, r8
 80136b0:	f108 0b01 	add.w	fp, r8, #1
 80136b4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80136b8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80136bc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80136c0:	fb1b fb0a 	smulbb	fp, fp, sl
 80136c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80136c8:	fb16 fa0a 	smulbb	sl, r6, sl
 80136cc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80136d0:	f807 8c03 	strb.w	r8, [r7, #-3]
 80136d4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80136d8:	fb06 aa02 	mla	sl, r6, r2, sl
 80136dc:	fb08 b802 	mla	r8, r8, r2, fp
 80136e0:	fa1f fa8a 	uxth.w	sl, sl
 80136e4:	fa1f f888 	uxth.w	r8, r8
 80136e8:	f10a 0601 	add.w	r6, sl, #1
 80136ec:	f108 0b01 	add.w	fp, r8, #1
 80136f0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80136f4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80136f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80136fc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013700:	f807 ac01 	strb.w	sl, [r7, #-1]
 8013704:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013708:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801370a:	4474      	add	r4, lr
 801370c:	3703      	adds	r7, #3
 801370e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013712:	4410      	add	r0, r2
 8013714:	e7a4      	b.n	8013660 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013716:	f04f 0800 	mov.w	r8, #0
 801371a:	eba3 0208 	sub.w	r2, r3, r8
 801371e:	2a00      	cmp	r2, #0
 8013720:	dc3b      	bgt.n	801379a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8013722:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801372a:	441d      	add	r5, r3
 801372c:	2900      	cmp	r1, #0
 801372e:	f340 8093 	ble.w	8013858 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8013732:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013738:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801373c:	3901      	subs	r1, #1
 801373e:	eeb0 6a62 	vmov.f32	s12, s5
 8013742:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013746:	ee31 1a05 	vadd.f32	s2, s2, s10
 801374a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801374e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013752:	eeb0 6a43 	vmov.f32	s12, s6
 8013756:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801375a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801375e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013762:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013766:	ee77 2a62 	vsub.f32	s5, s14, s5
 801376a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801376e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013772:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013776:	ee12 2a90 	vmov	r2, s5
 801377a:	eef0 2a47 	vmov.f32	s5, s14
 801377e:	fb92 fef3 	sdiv	lr, r2, r3
 8013782:	ee13 2a10 	vmov	r2, s6
 8013786:	eeb0 3a67 	vmov.f32	s6, s15
 801378a:	fb92 f3f3 	sdiv	r3, r2, r3
 801378e:	9a02      	ldr	r2, [sp, #8]
 8013790:	9312      	str	r3, [sp, #72]	; 0x48
 8013792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013794:	bf08      	it	eq
 8013796:	4613      	moveq	r3, r2
 8013798:	e731      	b.n	80135fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801379a:	1427      	asrs	r7, r4, #16
 801379c:	d456      	bmi.n	801384c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801379e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80137a2:	42be      	cmp	r6, r7
 80137a4:	dd52      	ble.n	801384c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80137a6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80137aa:	d44f      	bmi.n	801384c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80137ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80137b0:	454a      	cmp	r2, r9
 80137b2:	dd4b      	ble.n	801384c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80137b4:	9a00      	ldr	r2, [sp, #0]
 80137b6:	b236      	sxth	r6, r6
 80137b8:	fb09 2606 	mla	r6, r9, r6, r2
 80137bc:	5df2      	ldrb	r2, [r6, r7]
 80137be:	9e01      	ldr	r6, [sp, #4]
 80137c0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80137c4:	0e3a      	lsrs	r2, r7, #24
 80137c6:	d041      	beq.n	801384c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80137c8:	9e03      	ldr	r6, [sp, #12]
 80137ca:	fa5f fb87 	uxtb.w	fp, r7
 80137ce:	4372      	muls	r2, r6
 80137d0:	1c56      	adds	r6, r2, #1
 80137d2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80137d6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80137da:	1212      	asrs	r2, r2, #8
 80137dc:	f815 9006 	ldrb.w	r9, [r5, r6]
 80137e0:	fa1f fa82 	uxth.w	sl, r2
 80137e4:	43d2      	mvns	r2, r2
 80137e6:	fb1b fb0a 	smulbb	fp, fp, sl
 80137ea:	b2d2      	uxtb	r2, r2
 80137ec:	fb09 b902 	mla	r9, r9, r2, fp
 80137f0:	fa1f f989 	uxth.w	r9, r9
 80137f4:	f109 0b01 	add.w	fp, r9, #1
 80137f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80137fc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013800:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013804:	fb1b fb0a 	smulbb	fp, fp, sl
 8013808:	ea4f 2929 	mov.w	r9, r9, asr #8
 801380c:	fb17 fa0a 	smulbb	sl, r7, sl
 8013810:	f805 9006 	strb.w	r9, [r5, r6]
 8013814:	442e      	add	r6, r5
 8013816:	78b7      	ldrb	r7, [r6, #2]
 8013818:	f896 9001 	ldrb.w	r9, [r6, #1]
 801381c:	fb07 aa02 	mla	sl, r7, r2, sl
 8013820:	fb09 b902 	mla	r9, r9, r2, fp
 8013824:	fa1f fa8a 	uxth.w	sl, sl
 8013828:	fa1f f989 	uxth.w	r9, r9
 801382c:	f10a 0701 	add.w	r7, sl, #1
 8013830:	f109 0b01 	add.w	fp, r9, #1
 8013834:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013838:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801383c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013840:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013844:	f886 a002 	strb.w	sl, [r6, #2]
 8013848:	f886 9001 	strb.w	r9, [r6, #1]
 801384c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801384e:	4474      	add	r4, lr
 8013850:	f108 0801 	add.w	r8, r8, #1
 8013854:	4410      	add	r0, r2
 8013856:	e760      	b.n	801371a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8013858:	b005      	add	sp, #20
 801385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801385e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801385e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013862:	b085      	sub	sp, #20
 8013864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013868:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801386a:	9203      	str	r2, [sp, #12]
 801386c:	6868      	ldr	r0, [r5, #4]
 801386e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013872:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8013876:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801387a:	fb00 2404 	mla	r4, r0, r4, r2
 801387e:	682a      	ldr	r2, [r5, #0]
 8013880:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013884:	4414      	add	r4, r2
 8013886:	f8dc 2000 	ldr.w	r2, [ip]
 801388a:	9201      	str	r2, [sp, #4]
 801388c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013890:	3204      	adds	r2, #4
 8013892:	9202      	str	r2, [sp, #8]
 8013894:	2900      	cmp	r1, #0
 8013896:	dc03      	bgt.n	80138a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8013898:	9a03      	ldr	r2, [sp, #12]
 801389a:	2a00      	cmp	r2, #0
 801389c:	f340 8137 	ble.w	8013b0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80138a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138a2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80138a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80138aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80138ac:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80138b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	dd0d      	ble.n	80138d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80138b8:	1405      	asrs	r5, r0, #16
 80138ba:	d405      	bmi.n	80138c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80138bc:	4545      	cmp	r5, r8
 80138be:	da03      	bge.n	80138c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80138c0:	1415      	asrs	r5, r2, #16
 80138c2:	d401      	bmi.n	80138c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80138c4:	42bd      	cmp	r5, r7
 80138c6:	db06      	blt.n	80138d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80138c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80138ca:	4470      	add	r0, lr
 80138cc:	3b01      	subs	r3, #1
 80138ce:	3403      	adds	r4, #3
 80138d0:	442a      	add	r2, r5
 80138d2:	e7ef      	b.n	80138b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80138d4:	d070      	beq.n	80139b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80138d6:	1e5d      	subs	r5, r3, #1
 80138d8:	fb0e 0605 	mla	r6, lr, r5, r0
 80138dc:	1436      	asrs	r6, r6, #16
 80138de:	d462      	bmi.n	80139a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80138e0:	4546      	cmp	r6, r8
 80138e2:	da60      	bge.n	80139a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80138e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80138e6:	fb06 2505 	mla	r5, r6, r5, r2
 80138ea:	142d      	asrs	r5, r5, #16
 80138ec:	d45b      	bmi.n	80139a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80138ee:	42bd      	cmp	r5, r7
 80138f0:	da59      	bge.n	80139a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80138f2:	1ce5      	adds	r5, r4, #3
 80138f4:	469a      	mov	sl, r3
 80138f6:	f1ba 0f00 	cmp.w	sl, #0
 80138fa:	dd58      	ble.n	80139ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80138fc:	1416      	asrs	r6, r2, #16
 80138fe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013902:	1407      	asrs	r7, r0, #16
 8013904:	46b1      	mov	r9, r6
 8013906:	9e01      	ldr	r6, [sp, #4]
 8013908:	fb08 6609 	mla	r6, r8, r9, r6
 801390c:	5df6      	ldrb	r6, [r6, r7]
 801390e:	9f02      	ldr	r7, [sp, #8]
 8013910:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8013914:	0e37      	lsrs	r7, r6, #24
 8013916:	2fff      	cmp	r7, #255	; 0xff
 8013918:	f000 80f0 	beq.w	8013afc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801391c:	fa5f f887 	uxtb.w	r8, r7
 8013920:	b3d7      	cbz	r7, 8013998 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013922:	fa1f f788 	uxth.w	r7, r8
 8013926:	ea6f 0808 	mvn.w	r8, r8
 801392a:	fa5f fb86 	uxtb.w	fp, r6
 801392e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8013932:	fa5f f888 	uxtb.w	r8, r8
 8013936:	fb1b fb07 	smulbb	fp, fp, r7
 801393a:	fb09 b908 	mla	r9, r9, r8, fp
 801393e:	fa1f f989 	uxth.w	r9, r9
 8013942:	f109 0b01 	add.w	fp, r9, #1
 8013946:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801394a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801394e:	fb1b fb08 	smulbb	fp, fp, r8
 8013952:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013956:	f805 9c03 	strb.w	r9, [r5, #-3]
 801395a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801395e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013962:	fb09 b907 	mla	r9, r9, r7, fp
 8013966:	fa1f f989 	uxth.w	r9, r9
 801396a:	f109 0b01 	add.w	fp, r9, #1
 801396e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013972:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013976:	f805 9c02 	strb.w	r9, [r5, #-2]
 801397a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801397e:	fb19 f808 	smulbb	r8, r9, r8
 8013982:	fb06 8607 	mla	r6, r6, r7, r8
 8013986:	b2b6      	uxth	r6, r6
 8013988:	f106 0801 	add.w	r8, r6, #1
 801398c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8013990:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013994:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013998:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801399a:	4470      	add	r0, lr
 801399c:	3503      	adds	r5, #3
 801399e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80139a2:	4432      	add	r2, r6
 80139a4:	e7a7      	b.n	80138f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80139a6:	2600      	movs	r6, #0
 80139a8:	1b9d      	subs	r5, r3, r6
 80139aa:	2d00      	cmp	r5, #0
 80139ac:	dc3b      	bgt.n	8013a26 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80139ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80139b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80139b6:	441c      	add	r4, r3
 80139b8:	2900      	cmp	r1, #0
 80139ba:	f340 80a8 	ble.w	8013b0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80139be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80139c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80139c8:	3901      	subs	r1, #1
 80139ca:	eeb0 6a62 	vmov.f32	s12, s5
 80139ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80139d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80139d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139da:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80139de:	eeb0 6a43 	vmov.f32	s12, s6
 80139e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139e6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80139ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80139ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80139f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80139f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80139fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80139fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013a02:	ee12 2a90 	vmov	r2, s5
 8013a06:	eef0 2a47 	vmov.f32	s5, s14
 8013a0a:	fb92 fef3 	sdiv	lr, r2, r3
 8013a0e:	ee13 2a10 	vmov	r2, s6
 8013a12:	eeb0 3a67 	vmov.f32	s6, s15
 8013a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a1a:	9a03      	ldr	r2, [sp, #12]
 8013a1c:	9312      	str	r3, [sp, #72]	; 0x48
 8013a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a20:	bf08      	it	eq
 8013a22:	4613      	moveq	r3, r2
 8013a24:	e736      	b.n	8013894 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8013a26:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013a2a:	d457      	bmi.n	8013adc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013a2c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8013a30:	4547      	cmp	r7, r8
 8013a32:	dd53      	ble.n	8013adc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013a34:	ea5f 4922 	movs.w	r9, r2, asr #16
 8013a38:	d450      	bmi.n	8013adc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013a3a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8013a3e:	454d      	cmp	r5, r9
 8013a40:	dd4c      	ble.n	8013adc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013a42:	9d01      	ldr	r5, [sp, #4]
 8013a44:	b23f      	sxth	r7, r7
 8013a46:	fb09 5707 	mla	r7, r9, r7, r5
 8013a4a:	f817 5008 	ldrb.w	r5, [r7, r8]
 8013a4e:	9f02      	ldr	r7, [sp, #8]
 8013a50:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8013a54:	0e2f      	lsrs	r7, r5, #24
 8013a56:	2fff      	cmp	r7, #255	; 0xff
 8013a58:	d045      	beq.n	8013ae6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8013a5a:	fa5f f987 	uxtb.w	r9, r7
 8013a5e:	b3ef      	cbz	r7, 8013adc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013a60:	fa1f f889 	uxth.w	r8, r9
 8013a64:	ea6f 0909 	mvn.w	r9, r9
 8013a68:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8013a6c:	fa5f fb85 	uxtb.w	fp, r5
 8013a70:	f814 a007 	ldrb.w	sl, [r4, r7]
 8013a74:	fa5f f989 	uxtb.w	r9, r9
 8013a78:	fb1b fb08 	smulbb	fp, fp, r8
 8013a7c:	fb0a ba09 	mla	sl, sl, r9, fp
 8013a80:	fa1f fa8a 	uxth.w	sl, sl
 8013a84:	f10a 0b01 	add.w	fp, sl, #1
 8013a88:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8013a8c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013a90:	f804 a007 	strb.w	sl, [r4, r7]
 8013a94:	4427      	add	r7, r4
 8013a96:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013a9a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8013a9e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8013aa2:	fb1b fb09 	smulbb	fp, fp, r9
 8013aa6:	fb0a ba08 	mla	sl, sl, r8, fp
 8013aaa:	fa1f fa8a 	uxth.w	sl, sl
 8013aae:	f10a 0b01 	add.w	fp, sl, #1
 8013ab2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8013ab6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013aba:	f887 a001 	strb.w	sl, [r7, #1]
 8013abe:	f897 a002 	ldrb.w	sl, [r7, #2]
 8013ac2:	fb1a f909 	smulbb	r9, sl, r9
 8013ac6:	fb05 9508 	mla	r5, r5, r8, r9
 8013aca:	b2ad      	uxth	r5, r5
 8013acc:	f105 0901 	add.w	r9, r5, #1
 8013ad0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8013ad4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013ad8:	f887 9002 	strb.w	r9, [r7, #2]
 8013adc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013ade:	4470      	add	r0, lr
 8013ae0:	3601      	adds	r6, #1
 8013ae2:	442a      	add	r2, r5
 8013ae4:	e760      	b.n	80139a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013ae6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8013aea:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8013aee:	55e5      	strb	r5, [r4, r7]
 8013af0:	4427      	add	r7, r4
 8013af2:	0c2d      	lsrs	r5, r5, #16
 8013af4:	f887 8001 	strb.w	r8, [r7, #1]
 8013af8:	70bd      	strb	r5, [r7, #2]
 8013afa:	e7ef      	b.n	8013adc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013afc:	0a37      	lsrs	r7, r6, #8
 8013afe:	f805 6c03 	strb.w	r6, [r5, #-3]
 8013b02:	0c36      	lsrs	r6, r6, #16
 8013b04:	f805 7c02 	strb.w	r7, [r5, #-2]
 8013b08:	f805 6c01 	strb.w	r6, [r5, #-1]
 8013b0c:	e744      	b.n	8013998 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013b0e:	b005      	add	sp, #20
 8013b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b14 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b18:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013b1a:	9201      	str	r2, [sp, #4]
 8013b1c:	6870      	ldr	r0, [r6, #4]
 8013b1e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8013b22:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8013b26:	fa1f fe85 	uxth.w	lr, r5
 8013b2a:	43ed      	mvns	r5, r5
 8013b2c:	f8dc 8000 	ldr.w	r8, [ip]
 8013b30:	b2ed      	uxtb	r5, r5
 8013b32:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8013b36:	fb00 2404 	mla	r4, r0, r4, r2
 8013b3a:	6832      	ldr	r2, [r6, #0]
 8013b3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013b40:	4414      	add	r4, r2
 8013b42:	2900      	cmp	r1, #0
 8013b44:	dc03      	bgt.n	8013b4e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8013b46:	9a01      	ldr	r2, [sp, #4]
 8013b48:	2a00      	cmp	r2, #0
 8013b4a:	f340 810d 	ble.w	8013d68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8013b4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013b50:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8013b54:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b5a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8013b5e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	dd0e      	ble.n	8013b84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013b66:	1406      	asrs	r6, r0, #16
 8013b68:	d405      	bmi.n	8013b76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8013b6a:	4556      	cmp	r6, sl
 8013b6c:	da03      	bge.n	8013b76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8013b6e:	1416      	asrs	r6, r2, #16
 8013b70:	d401      	bmi.n	8013b76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8013b72:	454e      	cmp	r6, r9
 8013b74:	db07      	blt.n	8013b86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013b76:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	3403      	adds	r4, #3
 8013b7c:	4430      	add	r0, r6
 8013b7e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013b80:	4432      	add	r2, r6
 8013b82:	e7ee      	b.n	8013b62 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8013b84:	d060      	beq.n	8013c48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8013b86:	1e5e      	subs	r6, r3, #1
 8013b88:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013b8a:	fb07 0706 	mla	r7, r7, r6, r0
 8013b8e:	143f      	asrs	r7, r7, #16
 8013b90:	d451      	bmi.n	8013c36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8013b92:	4557      	cmp	r7, sl
 8013b94:	da4f      	bge.n	8013c36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8013b96:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013b98:	fb07 2606 	mla	r6, r7, r6, r2
 8013b9c:	1436      	asrs	r6, r6, #16
 8013b9e:	d44a      	bmi.n	8013c36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8013ba0:	454e      	cmp	r6, r9
 8013ba2:	da48      	bge.n	8013c36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8013ba4:	1ce6      	adds	r6, r4, #3
 8013ba6:	4699      	mov	r9, r3
 8013ba8:	f1b9 0f00 	cmp.w	r9, #0
 8013bac:	f106 0603 	add.w	r6, r6, #3
 8013bb0:	dd45      	ble.n	8013c3e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8013bb2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8013bb6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013bba:	1417      	asrs	r7, r2, #16
 8013bbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8013bc0:	fb0b a707 	mla	r7, fp, r7, sl
 8013bc4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013bc8:	fb1b fb05 	smulbb	fp, fp, r5
 8013bcc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013bd0:	eb08 0a07 	add.w	sl, r8, r7
 8013bd4:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013bd8:	fb07 b70e 	mla	r7, r7, lr, fp
 8013bdc:	b2bf      	uxth	r7, r7
 8013bde:	f107 0b01 	add.w	fp, r7, #1
 8013be2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013be6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013bea:	fb1b fb05 	smulbb	fp, fp, r5
 8013bee:	123f      	asrs	r7, r7, #8
 8013bf0:	f806 7c06 	strb.w	r7, [r6, #-6]
 8013bf4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8013bf8:	fb07 b70e 	mla	r7, r7, lr, fp
 8013bfc:	b2bf      	uxth	r7, r7
 8013bfe:	f107 0b01 	add.w	fp, r7, #1
 8013c02:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013c06:	123f      	asrs	r7, r7, #8
 8013c08:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013c0c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013c10:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8013c14:	fb1a fa05 	smulbb	sl, sl, r5
 8013c18:	fb07 a70e 	mla	r7, r7, lr, sl
 8013c1c:	b2bf      	uxth	r7, r7
 8013c1e:	f107 0a01 	add.w	sl, r7, #1
 8013c22:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8013c26:	123f      	asrs	r7, r7, #8
 8013c28:	f806 7c04 	strb.w	r7, [r6, #-4]
 8013c2c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013c2e:	4438      	add	r0, r7
 8013c30:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013c32:	443a      	add	r2, r7
 8013c34:	e7b8      	b.n	8013ba8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8013c36:	2700      	movs	r7, #0
 8013c38:	1bde      	subs	r6, r3, r7
 8013c3a:	2e00      	cmp	r6, #0
 8013c3c:	dc3f      	bgt.n	8013cbe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8013c3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013c46:	441c      	add	r4, r3
 8013c48:	2900      	cmp	r1, #0
 8013c4a:	f340 808d 	ble.w	8013d68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8013c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013c58:	3901      	subs	r1, #1
 8013c5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013c5e:	eef0 6a62 	vmov.f32	s13, s5
 8013c62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013c66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013c6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013c6e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8013c72:	eef0 6a43 	vmov.f32	s13, s6
 8013c76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013c7a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8013c7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013c82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013c86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013c8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013c8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013c92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013c96:	ee12 2a90 	vmov	r2, s5
 8013c9a:	eef0 2a47 	vmov.f32	s5, s14
 8013c9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013ca2:	ee13 2a10 	vmov	r2, s6
 8013ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013caa:	eeb0 3a67 	vmov.f32	s6, s15
 8013cae:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cb2:	9a01      	ldr	r2, [sp, #4]
 8013cb4:	9310      	str	r3, [sp, #64]	; 0x40
 8013cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cb8:	bf08      	it	eq
 8013cba:	4613      	moveq	r3, r2
 8013cbc:	e741      	b.n	8013b42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8013cbe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013cc2:	d44b      	bmi.n	8013d5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013cc4:	f8dc b008 	ldr.w	fp, [ip, #8]
 8013cc8:	45cb      	cmp	fp, r9
 8013cca:	dd47      	ble.n	8013d5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013ccc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013cd0:	d444      	bmi.n	8013d5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013cd2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8013cd6:	4556      	cmp	r6, sl
 8013cd8:	dd40      	ble.n	8013d5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013cda:	fa0f f68b 	sxth.w	r6, fp
 8013cde:	fb0a 9906 	mla	r9, sl, r6, r9
 8013ce2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8013ce6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013cea:	f814 b006 	ldrb.w	fp, [r4, r6]
 8013cee:	fb1b fb05 	smulbb	fp, fp, r5
 8013cf2:	eb08 0a09 	add.w	sl, r8, r9
 8013cf6:	f818 9009 	ldrb.w	r9, [r8, r9]
 8013cfa:	fb09 b90e 	mla	r9, r9, lr, fp
 8013cfe:	fa1f f989 	uxth.w	r9, r9
 8013d02:	f109 0b01 	add.w	fp, r9, #1
 8013d06:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013d0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013d0e:	f804 9006 	strb.w	r9, [r4, r6]
 8013d12:	4426      	add	r6, r4
 8013d14:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8013d18:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013d1c:	fb1b fb05 	smulbb	fp, fp, r5
 8013d20:	fb09 b90e 	mla	r9, r9, lr, fp
 8013d24:	fa1f f989 	uxth.w	r9, r9
 8013d28:	f109 0b01 	add.w	fp, r9, #1
 8013d2c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013d30:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013d34:	f886 9001 	strb.w	r9, [r6, #1]
 8013d38:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013d3c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8013d40:	fb1a fa05 	smulbb	sl, sl, r5
 8013d44:	fb09 a90e 	mla	r9, r9, lr, sl
 8013d48:	fa1f f989 	uxth.w	r9, r9
 8013d4c:	f109 0a01 	add.w	sl, r9, #1
 8013d50:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8013d54:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013d58:	f886 9002 	strb.w	r9, [r6, #2]
 8013d5c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013d5e:	3701      	adds	r7, #1
 8013d60:	4430      	add	r0, r6
 8013d62:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013d64:	4432      	add	r2, r6
 8013d66:	e767      	b.n	8013c38 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8013d68:	b003      	add	sp, #12
 8013d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d72:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8013d74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d78:	9201      	str	r2, [sp, #4]
 8013d7a:	6868      	ldr	r0, [r5, #4]
 8013d7c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013d7e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8013d82:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8013d86:	fb00 2404 	mla	r4, r0, r4, r2
 8013d8a:	682a      	ldr	r2, [r5, #0]
 8013d8c:	f8d7 8000 	ldr.w	r8, [r7]
 8013d90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013d94:	4414      	add	r4, r2
 8013d96:	2900      	cmp	r1, #0
 8013d98:	dc03      	bgt.n	8013da2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013d9a:	9a01      	ldr	r2, [sp, #4]
 8013d9c:	2a00      	cmp	r2, #0
 8013d9e:	f340 80af 	ble.w	8013f00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8013da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013da4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8013da8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013dac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dae:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8013db2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	dd0c      	ble.n	8013dd4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013dba:	1405      	asrs	r5, r0, #16
 8013dbc:	d405      	bmi.n	8013dca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013dbe:	4555      	cmp	r5, sl
 8013dc0:	da03      	bge.n	8013dca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013dc2:	1415      	asrs	r5, r2, #16
 8013dc4:	d401      	bmi.n	8013dca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013dc6:	454d      	cmp	r5, r9
 8013dc8:	db05      	blt.n	8013dd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013dca:	4470      	add	r0, lr
 8013dcc:	4462      	add	r2, ip
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	3403      	adds	r4, #3
 8013dd2:	e7f0      	b.n	8013db6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013dd4:	d038      	beq.n	8013e48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8013dd6:	1e5d      	subs	r5, r3, #1
 8013dd8:	fb0e 0605 	mla	r6, lr, r5, r0
 8013ddc:	1436      	asrs	r6, r6, #16
 8013dde:	d42a      	bmi.n	8013e36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013de0:	4556      	cmp	r6, sl
 8013de2:	da28      	bge.n	8013e36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013de4:	fb0c 2505 	mla	r5, ip, r5, r2
 8013de8:	142d      	asrs	r5, r5, #16
 8013dea:	d424      	bmi.n	8013e36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013dec:	454d      	cmp	r5, r9
 8013dee:	da22      	bge.n	8013e36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013df0:	1ce6      	adds	r6, r4, #3
 8013df2:	4699      	mov	r9, r3
 8013df4:	f1b9 0f00 	cmp.w	r9, #0
 8013df8:	f106 0603 	add.w	r6, r6, #3
 8013dfc:	dd1f      	ble.n	8013e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8013dfe:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8013e02:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013e06:	1415      	asrs	r5, r2, #16
 8013e08:	4470      	add	r0, lr
 8013e0a:	4462      	add	r2, ip
 8013e0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013e10:	fb0b a505 	mla	r5, fp, r5, sl
 8013e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e18:	eb08 0a05 	add.w	sl, r8, r5
 8013e1c:	f818 5005 	ldrb.w	r5, [r8, r5]
 8013e20:	f806 5c06 	strb.w	r5, [r6, #-6]
 8013e24:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8013e28:	f806 5c05 	strb.w	r5, [r6, #-5]
 8013e2c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8013e30:	f806 5c04 	strb.w	r5, [r6, #-4]
 8013e34:	e7de      	b.n	8013df4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8013e36:	2600      	movs	r6, #0
 8013e38:	1b9d      	subs	r5, r3, r6
 8013e3a:	2d00      	cmp	r5, #0
 8013e3c:	dc38      	bgt.n	8013eb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8013e3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013e46:	441c      	add	r4, r3
 8013e48:	2900      	cmp	r1, #0
 8013e4a:	dd59      	ble.n	8013f00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8013e4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013e56:	3901      	subs	r1, #1
 8013e58:	eeb0 6a62 	vmov.f32	s12, s5
 8013e5c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013e60:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013e64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e68:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8013e6c:	eeb0 6a43 	vmov.f32	s12, s6
 8013e70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e74:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013e78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013e7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013e80:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013e84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013e88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013e8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013e90:	ee12 2a90 	vmov	r2, s5
 8013e94:	eef0 2a47 	vmov.f32	s5, s14
 8013e98:	fb92 fef3 	sdiv	lr, r2, r3
 8013e9c:	ee13 2a10 	vmov	r2, s6
 8013ea0:	eeb0 3a67 	vmov.f32	s6, s15
 8013ea4:	fb92 fcf3 	sdiv	ip, r2, r3
 8013ea8:	9a01      	ldr	r2, [sp, #4]
 8013eaa:	bf08      	it	eq
 8013eac:	4613      	moveq	r3, r2
 8013eae:	e772      	b.n	8013d96 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013eb0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013eb4:	d420      	bmi.n	8013ef8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013eb6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8013eba:	45cb      	cmp	fp, r9
 8013ebc:	dd1c      	ble.n	8013ef8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013ebe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013ec2:	d419      	bmi.n	8013ef8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013ec4:	68fd      	ldr	r5, [r7, #12]
 8013ec6:	4555      	cmp	r5, sl
 8013ec8:	dd16      	ble.n	8013ef8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013eca:	fa0f f58b 	sxth.w	r5, fp
 8013ece:	fb0a 9505 	mla	r5, sl, r5, r9
 8013ed2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ed6:	f818 9005 	ldrb.w	r9, [r8, r5]
 8013eda:	eb08 0b05 	add.w	fp, r8, r5
 8013ede:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8013ee2:	f804 9005 	strb.w	r9, [r4, r5]
 8013ee6:	4425      	add	r5, r4
 8013ee8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8013eec:	f885 9001 	strb.w	r9, [r5, #1]
 8013ef0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8013ef4:	f885 9002 	strb.w	r9, [r5, #2]
 8013ef8:	4470      	add	r0, lr
 8013efa:	4462      	add	r2, ip
 8013efc:	3601      	adds	r6, #1
 8013efe:	e79b      	b.n	8013e38 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8013f00:	b003      	add	sp, #12
 8013f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f0a:	b085      	sub	sp, #20
 8013f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f10:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013f12:	9202      	str	r2, [sp, #8]
 8013f14:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8013f18:	6860      	ldr	r0, [r4, #4]
 8013f1a:	9203      	str	r2, [sp, #12]
 8013f1c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013f20:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8013f24:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8013f28:	fb00 2505 	mla	r5, r0, r5, r2
 8013f2c:	6822      	ldr	r2, [r4, #0]
 8013f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f32:	4415      	add	r5, r2
 8013f34:	f8dc 2000 	ldr.w	r2, [ip]
 8013f38:	9201      	str	r2, [sp, #4]
 8013f3a:	2900      	cmp	r1, #0
 8013f3c:	dc03      	bgt.n	8013f46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8013f3e:	9a02      	ldr	r2, [sp, #8]
 8013f40:	2a00      	cmp	r2, #0
 8013f42:	f340 8122 	ble.w	801418a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8013f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f48:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013f4c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013f50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013f52:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013f56:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	dd0d      	ble.n	8013f7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8013f5e:	1422      	asrs	r2, r4, #16
 8013f60:	d405      	bmi.n	8013f6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013f62:	4542      	cmp	r2, r8
 8013f64:	da03      	bge.n	8013f6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013f66:	1402      	asrs	r2, r0, #16
 8013f68:	d401      	bmi.n	8013f6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013f6a:	42ba      	cmp	r2, r7
 8013f6c:	db06      	blt.n	8013f7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013f6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f70:	4474      	add	r4, lr
 8013f72:	3b01      	subs	r3, #1
 8013f74:	3503      	adds	r5, #3
 8013f76:	4410      	add	r0, r2
 8013f78:	e7ef      	b.n	8013f5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8013f7a:	d072      	beq.n	8014062 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8013f7c:	1e5a      	subs	r2, r3, #1
 8013f7e:	fb0e 4602 	mla	r6, lr, r2, r4
 8013f82:	1436      	asrs	r6, r6, #16
 8013f84:	d462      	bmi.n	801404c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013f86:	4546      	cmp	r6, r8
 8013f88:	da60      	bge.n	801404c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013f8a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013f8c:	fb06 0202 	mla	r2, r6, r2, r0
 8013f90:	1412      	asrs	r2, r2, #16
 8013f92:	d45b      	bmi.n	801404c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013f94:	42ba      	cmp	r2, r7
 8013f96:	da59      	bge.n	801404c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013f98:	1cef      	adds	r7, r5, #3
 8013f9a:	4699      	mov	r9, r3
 8013f9c:	f1b9 0f00 	cmp.w	r9, #0
 8013fa0:	dd5a      	ble.n	8014058 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8013fa2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013fa6:	1426      	asrs	r6, r4, #16
 8013fa8:	1402      	asrs	r2, r0, #16
 8013faa:	fb08 6202 	mla	r2, r8, r2, r6
 8013fae:	9e01      	ldr	r6, [sp, #4]
 8013fb0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8013fb4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8013fb8:	d041      	beq.n	801403e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013fba:	9a03      	ldr	r2, [sp, #12]
 8013fbc:	fa5f fb86 	uxtb.w	fp, r6
 8013fc0:	fb02 f808 	mul.w	r8, r2, r8
 8013fc4:	f108 0201 	add.w	r2, r8, #1
 8013fc8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8013fcc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013fd0:	1212      	asrs	r2, r2, #8
 8013fd2:	fa1f fa82 	uxth.w	sl, r2
 8013fd6:	43d2      	mvns	r2, r2
 8013fd8:	fb1b fb0a 	smulbb	fp, fp, sl
 8013fdc:	b2d2      	uxtb	r2, r2
 8013fde:	fb08 b802 	mla	r8, r8, r2, fp
 8013fe2:	fa1f f888 	uxth.w	r8, r8
 8013fe6:	f108 0b01 	add.w	fp, r8, #1
 8013fea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013fee:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013ff2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013ff6:	fb1b fb0a 	smulbb	fp, fp, sl
 8013ffa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013ffe:	fb16 fa0a 	smulbb	sl, r6, sl
 8014002:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014006:	f807 8c03 	strb.w	r8, [r7, #-3]
 801400a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801400e:	fb06 aa02 	mla	sl, r6, r2, sl
 8014012:	fb08 b802 	mla	r8, r8, r2, fp
 8014016:	fa1f fa8a 	uxth.w	sl, sl
 801401a:	fa1f f888 	uxth.w	r8, r8
 801401e:	f10a 0601 	add.w	r6, sl, #1
 8014022:	f108 0b01 	add.w	fp, r8, #1
 8014026:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801402a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801402e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014032:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014036:	f807 ac01 	strb.w	sl, [r7, #-1]
 801403a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801403e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014040:	4474      	add	r4, lr
 8014042:	3703      	adds	r7, #3
 8014044:	f109 39ff 	add.w	r9, r9, #4294967295
 8014048:	4410      	add	r0, r2
 801404a:	e7a7      	b.n	8013f9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801404c:	f04f 0800 	mov.w	r8, #0
 8014050:	eba3 0208 	sub.w	r2, r3, r8
 8014054:	2a00      	cmp	r2, #0
 8014056:	dc3b      	bgt.n	80140d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014058:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801405c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014060:	441d      	add	r5, r3
 8014062:	2900      	cmp	r1, #0
 8014064:	f340 8091 	ble.w	801418a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8014068:	ee30 0a04 	vadd.f32	s0, s0, s8
 801406c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801406e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014072:	3901      	subs	r1, #1
 8014074:	eeb0 6a62 	vmov.f32	s12, s5
 8014078:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801407c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014080:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014084:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014088:	eeb0 6a43 	vmov.f32	s12, s6
 801408c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014090:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014094:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014098:	ee61 7a27 	vmul.f32	s15, s2, s15
 801409c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80140a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80140a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80140a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80140ac:	ee12 2a90 	vmov	r2, s5
 80140b0:	eef0 2a47 	vmov.f32	s5, s14
 80140b4:	fb92 fef3 	sdiv	lr, r2, r3
 80140b8:	ee13 2a10 	vmov	r2, s6
 80140bc:	eeb0 3a67 	vmov.f32	s6, s15
 80140c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80140c4:	9a02      	ldr	r2, [sp, #8]
 80140c6:	9312      	str	r3, [sp, #72]	; 0x48
 80140c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140ca:	bf08      	it	eq
 80140cc:	4613      	moveq	r3, r2
 80140ce:	e734      	b.n	8013f3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80140d0:	1427      	asrs	r7, r4, #16
 80140d2:	d454      	bmi.n	801417e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80140d4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80140d8:	42be      	cmp	r6, r7
 80140da:	dd50      	ble.n	801417e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80140dc:	ea5f 4920 	movs.w	r9, r0, asr #16
 80140e0:	d44d      	bmi.n	801417e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80140e2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80140e6:	454a      	cmp	r2, r9
 80140e8:	dd49      	ble.n	801417e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80140ea:	b236      	sxth	r6, r6
 80140ec:	9a01      	ldr	r2, [sp, #4]
 80140ee:	fb09 7606 	mla	r6, r9, r6, r7
 80140f2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80140f6:	0e3a      	lsrs	r2, r7, #24
 80140f8:	d041      	beq.n	801417e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80140fa:	9e03      	ldr	r6, [sp, #12]
 80140fc:	fa5f fb87 	uxtb.w	fp, r7
 8014100:	4372      	muls	r2, r6
 8014102:	1c56      	adds	r6, r2, #1
 8014104:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014108:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801410c:	1212      	asrs	r2, r2, #8
 801410e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014112:	fa1f fa82 	uxth.w	sl, r2
 8014116:	43d2      	mvns	r2, r2
 8014118:	fb1b fb0a 	smulbb	fp, fp, sl
 801411c:	b2d2      	uxtb	r2, r2
 801411e:	fb09 b902 	mla	r9, r9, r2, fp
 8014122:	fa1f f989 	uxth.w	r9, r9
 8014126:	f109 0b01 	add.w	fp, r9, #1
 801412a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801412e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014132:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014136:	fb1b fb0a 	smulbb	fp, fp, sl
 801413a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801413e:	fb17 fa0a 	smulbb	sl, r7, sl
 8014142:	f805 9006 	strb.w	r9, [r5, r6]
 8014146:	442e      	add	r6, r5
 8014148:	78b7      	ldrb	r7, [r6, #2]
 801414a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801414e:	fb07 aa02 	mla	sl, r7, r2, sl
 8014152:	fb09 b902 	mla	r9, r9, r2, fp
 8014156:	fa1f fa8a 	uxth.w	sl, sl
 801415a:	fa1f f989 	uxth.w	r9, r9
 801415e:	f10a 0701 	add.w	r7, sl, #1
 8014162:	f109 0b01 	add.w	fp, r9, #1
 8014166:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801416a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801416e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014172:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014176:	f886 a002 	strb.w	sl, [r6, #2]
 801417a:	f886 9001 	strb.w	r9, [r6, #1]
 801417e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014180:	4474      	add	r4, lr
 8014182:	f108 0801 	add.w	r8, r8, #1
 8014186:	4410      	add	r0, r2
 8014188:	e762      	b.n	8014050 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801418a:	b005      	add	sp, #20
 801418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014190 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014194:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801419a:	9201      	str	r2, [sp, #4]
 801419c:	6860      	ldr	r0, [r4, #4]
 801419e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80141a2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 80141a6:	fb00 2505 	mla	r5, r0, r5, r2
 80141aa:	6822      	ldr	r2, [r4, #0]
 80141ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141b0:	4415      	add	r5, r2
 80141b2:	f8dc 2000 	ldr.w	r2, [ip]
 80141b6:	9200      	str	r2, [sp, #0]
 80141b8:	2900      	cmp	r1, #0
 80141ba:	dc03      	bgt.n	80141c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80141bc:	9a01      	ldr	r2, [sp, #4]
 80141be:	2a00      	cmp	r2, #0
 80141c0:	f340 812b 	ble.w	801441a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80141c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141c6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80141ca:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80141ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141d0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80141d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80141d8:	2b00      	cmp	r3, #0
 80141da:	dd0e      	ble.n	80141fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80141dc:	1422      	asrs	r2, r4, #16
 80141de:	d405      	bmi.n	80141ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80141e0:	4572      	cmp	r2, lr
 80141e2:	da03      	bge.n	80141ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80141e4:	1402      	asrs	r2, r0, #16
 80141e6:	d401      	bmi.n	80141ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80141e8:	42ba      	cmp	r2, r7
 80141ea:	db07      	blt.n	80141fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80141ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141ee:	3b01      	subs	r3, #1
 80141f0:	3503      	adds	r5, #3
 80141f2:	4414      	add	r4, r2
 80141f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141f6:	4410      	add	r0, r2
 80141f8:	e7ee      	b.n	80141d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80141fa:	d06f      	beq.n	80142dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80141fc:	1e5a      	subs	r2, r3, #1
 80141fe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014200:	fb06 4602 	mla	r6, r6, r2, r4
 8014204:	1436      	asrs	r6, r6, #16
 8014206:	d45e      	bmi.n	80142c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014208:	4576      	cmp	r6, lr
 801420a:	da5c      	bge.n	80142c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801420c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801420e:	fb06 0202 	mla	r2, r6, r2, r0
 8014212:	1412      	asrs	r2, r2, #16
 8014214:	d457      	bmi.n	80142c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014216:	42ba      	cmp	r2, r7
 8014218:	da55      	bge.n	80142c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801421a:	1cee      	adds	r6, r5, #3
 801421c:	469a      	mov	sl, r3
 801421e:	f1ba 0f00 	cmp.w	sl, #0
 8014222:	dd56      	ble.n	80142d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014224:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014228:	1427      	asrs	r7, r4, #16
 801422a:	1402      	asrs	r2, r0, #16
 801422c:	fb0e 7202 	mla	r2, lr, r2, r7
 8014230:	9f00      	ldr	r7, [sp, #0]
 8014232:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8014236:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801423a:	d03c      	beq.n	80142b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801423c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014240:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014244:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014248:	fa5f f28e 	uxtb.w	r2, lr
 801424c:	b2ff      	uxtb	r7, r7
 801424e:	f000 80dd 	beq.w	801440c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8014252:	fa1f f882 	uxth.w	r8, r2
 8014256:	43d2      	mvns	r2, r2
 8014258:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801425c:	fb17 f708 	smulbb	r7, r7, r8
 8014260:	b2d2      	uxtb	r2, r2
 8014262:	fb19 f908 	smulbb	r9, r9, r8
 8014266:	fb0e 7702 	mla	r7, lr, r2, r7
 801426a:	fb1b f808 	smulbb	r8, fp, r8
 801426e:	b2bf      	uxth	r7, r7
 8014270:	f107 0e01 	add.w	lr, r7, #1
 8014274:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014278:	123f      	asrs	r7, r7, #8
 801427a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801427e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8014282:	fb07 9902 	mla	r9, r7, r2, r9
 8014286:	fa1f f989 	uxth.w	r9, r9
 801428a:	f109 0701 	add.w	r7, r9, #1
 801428e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014292:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8014296:	fb07 8802 	mla	r8, r7, r2, r8
 801429a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801429e:	fa1f f888 	uxth.w	r8, r8
 80142a2:	f806 9c02 	strb.w	r9, [r6, #-2]
 80142a6:	f108 0201 	add.w	r2, r8, #1
 80142aa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80142ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 80142b2:	f806 8c01 	strb.w	r8, [r6, #-1]
 80142b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142b8:	3603      	adds	r6, #3
 80142ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80142be:	4414      	add	r4, r2
 80142c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142c2:	4410      	add	r0, r2
 80142c4:	e7ab      	b.n	801421e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80142c6:	f04f 0e00 	mov.w	lr, #0
 80142ca:	eba3 020e 	sub.w	r2, r3, lr
 80142ce:	2a00      	cmp	r2, #0
 80142d0:	dc3d      	bgt.n	801434e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80142d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80142d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80142da:	441d      	add	r5, r3
 80142dc:	2900      	cmp	r1, #0
 80142de:	f340 809c 	ble.w	801441a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80142e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80142e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80142ec:	3901      	subs	r1, #1
 80142ee:	eeb0 6a62 	vmov.f32	s12, s5
 80142f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80142f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80142fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142fe:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014302:	eeb0 6a43 	vmov.f32	s12, s6
 8014306:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801430a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801430e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014312:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014316:	ee77 2a62 	vsub.f32	s5, s14, s5
 801431a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801431e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014322:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014326:	ee12 2a90 	vmov	r2, s5
 801432a:	eef0 2a47 	vmov.f32	s5, s14
 801432e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014332:	ee13 2a10 	vmov	r2, s6
 8014336:	930f      	str	r3, [sp, #60]	; 0x3c
 8014338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801433a:	eeb0 3a67 	vmov.f32	s6, s15
 801433e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014342:	9a01      	ldr	r2, [sp, #4]
 8014344:	9310      	str	r3, [sp, #64]	; 0x40
 8014346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014348:	bf08      	it	eq
 801434a:	4613      	moveq	r3, r2
 801434c:	e734      	b.n	80141b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801434e:	1427      	asrs	r7, r4, #16
 8014350:	d44d      	bmi.n	80143ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014352:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014356:	42be      	cmp	r6, r7
 8014358:	dd49      	ble.n	80143ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801435a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801435e:	d446      	bmi.n	80143ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014360:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014364:	4542      	cmp	r2, r8
 8014366:	dd42      	ble.n	80143ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014368:	b236      	sxth	r6, r6
 801436a:	9a00      	ldr	r2, [sp, #0]
 801436c:	fb08 7606 	mla	r6, r8, r6, r7
 8014370:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8014374:	0e3a      	lsrs	r2, r7, #24
 8014376:	d03a      	beq.n	80143ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014378:	2aff      	cmp	r2, #255	; 0xff
 801437a:	b2d6      	uxtb	r6, r2
 801437c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014380:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8014384:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8014388:	b2ff      	uxtb	r7, r7
 801438a:	d037      	beq.n	80143fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801438c:	fa1f f986 	uxth.w	r9, r6
 8014390:	4472      	add	r2, lr
 8014392:	43f6      	mvns	r6, r6
 8014394:	f815 8002 	ldrb.w	r8, [r5, r2]
 8014398:	fb17 f709 	smulbb	r7, r7, r9
 801439c:	fb1a fa09 	smulbb	sl, sl, r9
 80143a0:	b2f6      	uxtb	r6, r6
 80143a2:	fb1b f909 	smulbb	r9, fp, r9
 80143a6:	fb08 7706 	mla	r7, r8, r6, r7
 80143aa:	b2bf      	uxth	r7, r7
 80143ac:	f107 0801 	add.w	r8, r7, #1
 80143b0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80143b4:	123f      	asrs	r7, r7, #8
 80143b6:	54af      	strb	r7, [r5, r2]
 80143b8:	442a      	add	r2, r5
 80143ba:	7857      	ldrb	r7, [r2, #1]
 80143bc:	fb07 aa06 	mla	sl, r7, r6, sl
 80143c0:	fa1f fa8a 	uxth.w	sl, sl
 80143c4:	f10a 0701 	add.w	r7, sl, #1
 80143c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80143cc:	7897      	ldrb	r7, [r2, #2]
 80143ce:	fb07 9906 	mla	r9, r7, r6, r9
 80143d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80143d6:	fa1f f989 	uxth.w	r9, r9
 80143da:	f882 a001 	strb.w	sl, [r2, #1]
 80143de:	f109 0601 	add.w	r6, r9, #1
 80143e2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80143e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80143ea:	f882 9002 	strb.w	r9, [r2, #2]
 80143ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80143f0:	f10e 0e01 	add.w	lr, lr, #1
 80143f4:	4414      	add	r4, r2
 80143f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143f8:	4410      	add	r0, r2
 80143fa:	e766      	b.n	80142ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80143fc:	4472      	add	r2, lr
 80143fe:	54af      	strb	r7, [r5, r2]
 8014400:	442a      	add	r2, r5
 8014402:	f882 a001 	strb.w	sl, [r2, #1]
 8014406:	f882 b002 	strb.w	fp, [r2, #2]
 801440a:	e7f0      	b.n	80143ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801440c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8014410:	f806 9c02 	strb.w	r9, [r6, #-2]
 8014414:	f806 bc01 	strb.w	fp, [r6, #-1]
 8014418:	e74d      	b.n	80142b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801441a:	b003      	add	sp, #12
 801441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014420 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014424:	b087      	sub	sp, #28
 8014426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801442a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801442c:	9204      	str	r2, [sp, #16]
 801442e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014432:	6860      	ldr	r0, [r4, #4]
 8014434:	9205      	str	r2, [sp, #20]
 8014436:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801443a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801443e:	9101      	str	r1, [sp, #4]
 8014440:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8014444:	fb00 2505 	mla	r5, r0, r5, r2
 8014448:	6822      	ldr	r2, [r4, #0]
 801444a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801444e:	4415      	add	r5, r2
 8014450:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014454:	3201      	adds	r2, #1
 8014456:	f022 0201 	bic.w	r2, r2, #1
 801445a:	9202      	str	r2, [sp, #8]
 801445c:	f8dc 2000 	ldr.w	r2, [ip]
 8014460:	9203      	str	r2, [sp, #12]
 8014462:	9a01      	ldr	r2, [sp, #4]
 8014464:	2a00      	cmp	r2, #0
 8014466:	dc03      	bgt.n	8014470 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8014468:	9a04      	ldr	r2, [sp, #16]
 801446a:	2a00      	cmp	r2, #0
 801446c:	f340 8135 	ble.w	80146da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014472:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014476:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801447a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801447c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014480:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014484:	2b00      	cmp	r3, #0
 8014486:	dd0d      	ble.n	80144a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8014488:	1422      	asrs	r2, r4, #16
 801448a:	d405      	bmi.n	8014498 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801448c:	4542      	cmp	r2, r8
 801448e:	da03      	bge.n	8014498 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014490:	1402      	asrs	r2, r0, #16
 8014492:	d401      	bmi.n	8014498 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014494:	42ba      	cmp	r2, r7
 8014496:	db06      	blt.n	80144a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8014498:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801449a:	4474      	add	r4, lr
 801449c:	3b01      	subs	r3, #1
 801449e:	3503      	adds	r5, #3
 80144a0:	4410      	add	r0, r2
 80144a2:	e7ef      	b.n	8014484 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80144a4:	d077      	beq.n	8014596 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80144a6:	1e5a      	subs	r2, r3, #1
 80144a8:	fb0e 4602 	mla	r6, lr, r2, r4
 80144ac:	1436      	asrs	r6, r6, #16
 80144ae:	d469      	bmi.n	8014584 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80144b0:	4546      	cmp	r6, r8
 80144b2:	da67      	bge.n	8014584 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80144b4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80144b6:	fb06 0202 	mla	r2, r6, r2, r0
 80144ba:	1412      	asrs	r2, r2, #16
 80144bc:	d462      	bmi.n	8014584 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80144be:	42ba      	cmp	r2, r7
 80144c0:	da60      	bge.n	8014584 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80144c2:	1cee      	adds	r6, r5, #3
 80144c4:	4699      	mov	r9, r3
 80144c6:	f1b9 0f00 	cmp.w	r9, #0
 80144ca:	dd5f      	ble.n	801458c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80144cc:	1422      	asrs	r2, r4, #16
 80144ce:	9902      	ldr	r1, [sp, #8]
 80144d0:	1407      	asrs	r7, r0, #16
 80144d2:	fb01 2707 	mla	r7, r1, r7, r2
 80144d6:	9903      	ldr	r1, [sp, #12]
 80144d8:	087a      	lsrs	r2, r7, #1
 80144da:	5c8a      	ldrb	r2, [r1, r2]
 80144dc:	07f9      	lsls	r1, r7, #31
 80144de:	bf54      	ite	pl
 80144e0:	f002 020f 	andpl.w	r2, r2, #15
 80144e4:	1112      	asrmi	r2, r2, #4
 80144e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80144ea:	b2d2      	uxtb	r2, r2
 80144ec:	2a00      	cmp	r2, #0
 80144ee:	d042      	beq.n	8014576 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80144f0:	497b      	ldr	r1, [pc, #492]	; (80146e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80144f2:	680f      	ldr	r7, [r1, #0]
 80144f4:	9905      	ldr	r1, [sp, #20]
 80144f6:	fa5f fb87 	uxtb.w	fp, r7
 80144fa:	434a      	muls	r2, r1
 80144fc:	f102 0801 	add.w	r8, r2, #1
 8014500:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8014504:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8014508:	1212      	asrs	r2, r2, #8
 801450a:	fa1f fa82 	uxth.w	sl, r2
 801450e:	43d2      	mvns	r2, r2
 8014510:	fb1b fb0a 	smulbb	fp, fp, sl
 8014514:	b2d2      	uxtb	r2, r2
 8014516:	fb08 b802 	mla	r8, r8, r2, fp
 801451a:	fa1f f888 	uxth.w	r8, r8
 801451e:	f108 0b01 	add.w	fp, r8, #1
 8014522:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014526:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801452a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801452e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014532:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014536:	fb17 fa0a 	smulbb	sl, r7, sl
 801453a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801453e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8014542:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8014546:	fb07 aa02 	mla	sl, r7, r2, sl
 801454a:	fb08 b802 	mla	r8, r8, r2, fp
 801454e:	fa1f fa8a 	uxth.w	sl, sl
 8014552:	fa1f f888 	uxth.w	r8, r8
 8014556:	f10a 0701 	add.w	r7, sl, #1
 801455a:	f108 0b01 	add.w	fp, r8, #1
 801455e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014562:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014566:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801456a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801456e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8014572:	f806 8c02 	strb.w	r8, [r6, #-2]
 8014576:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014578:	4474      	add	r4, lr
 801457a:	3603      	adds	r6, #3
 801457c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014580:	4410      	add	r0, r2
 8014582:	e7a0      	b.n	80144c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014584:	2700      	movs	r7, #0
 8014586:	1bda      	subs	r2, r3, r7
 8014588:	2a00      	cmp	r2, #0
 801458a:	dc3e      	bgt.n	801460a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801458c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014590:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014594:	441d      	add	r5, r3
 8014596:	9b01      	ldr	r3, [sp, #4]
 8014598:	2b00      	cmp	r3, #0
 801459a:	f340 809e 	ble.w	80146da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801459e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80145a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80145a8:	eeb0 6a62 	vmov.f32	s12, s5
 80145ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80145b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80145b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80145b8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80145bc:	eeb0 6a43 	vmov.f32	s12, s6
 80145c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80145c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80145c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80145cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80145d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80145d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80145d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80145dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80145e0:	ee12 2a90 	vmov	r2, s5
 80145e4:	eef0 2a47 	vmov.f32	s5, s14
 80145e8:	fb92 fef3 	sdiv	lr, r2, r3
 80145ec:	ee13 2a10 	vmov	r2, s6
 80145f0:	eeb0 3a67 	vmov.f32	s6, s15
 80145f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80145f8:	9314      	str	r3, [sp, #80]	; 0x50
 80145fa:	9b01      	ldr	r3, [sp, #4]
 80145fc:	9a04      	ldr	r2, [sp, #16]
 80145fe:	3b01      	subs	r3, #1
 8014600:	9301      	str	r3, [sp, #4]
 8014602:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014604:	bf08      	it	eq
 8014606:	4613      	moveq	r3, r2
 8014608:	e72b      	b.n	8014462 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801460a:	1426      	asrs	r6, r4, #16
 801460c:	d460      	bmi.n	80146d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801460e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014612:	42b2      	cmp	r2, r6
 8014614:	dd5c      	ble.n	80146d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014616:	ea5f 4820 	movs.w	r8, r0, asr #16
 801461a:	d459      	bmi.n	80146d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801461c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014620:	4542      	cmp	r2, r8
 8014622:	dd55      	ble.n	80146d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014624:	9a02      	ldr	r2, [sp, #8]
 8014626:	9903      	ldr	r1, [sp, #12]
 8014628:	fb08 6602 	mla	r6, r8, r2, r6
 801462c:	0872      	lsrs	r2, r6, #1
 801462e:	07f6      	lsls	r6, r6, #31
 8014630:	5c8a      	ldrb	r2, [r1, r2]
 8014632:	bf54      	ite	pl
 8014634:	f002 020f 	andpl.w	r2, r2, #15
 8014638:	1112      	asrmi	r2, r2, #4
 801463a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801463e:	b2d2      	uxtb	r2, r2
 8014640:	2a00      	cmp	r2, #0
 8014642:	d045      	beq.n	80146d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014644:	4926      	ldr	r1, [pc, #152]	; (80146e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8014646:	f8d1 8000 	ldr.w	r8, [r1]
 801464a:	9905      	ldr	r1, [sp, #20]
 801464c:	fa5f fb88 	uxtb.w	fp, r8
 8014650:	434a      	muls	r2, r1
 8014652:	1c56      	adds	r6, r2, #1
 8014654:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014658:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801465c:	1212      	asrs	r2, r2, #8
 801465e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014662:	fa1f fa82 	uxth.w	sl, r2
 8014666:	43d2      	mvns	r2, r2
 8014668:	fb1b fb0a 	smulbb	fp, fp, sl
 801466c:	b2d2      	uxtb	r2, r2
 801466e:	fb09 b902 	mla	r9, r9, r2, fp
 8014672:	fa1f f989 	uxth.w	r9, r9
 8014676:	f109 0b01 	add.w	fp, r9, #1
 801467a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801467e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8014682:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8014686:	fb1b fb0a 	smulbb	fp, fp, sl
 801468a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801468e:	fb18 fa0a 	smulbb	sl, r8, sl
 8014692:	f805 9006 	strb.w	r9, [r5, r6]
 8014696:	442e      	add	r6, r5
 8014698:	f896 8002 	ldrb.w	r8, [r6, #2]
 801469c:	f896 9001 	ldrb.w	r9, [r6, #1]
 80146a0:	fb08 aa02 	mla	sl, r8, r2, sl
 80146a4:	fb09 b902 	mla	r9, r9, r2, fp
 80146a8:	fa1f fa8a 	uxth.w	sl, sl
 80146ac:	fa1f f989 	uxth.w	r9, r9
 80146b0:	f10a 0801 	add.w	r8, sl, #1
 80146b4:	f109 0b01 	add.w	fp, r9, #1
 80146b8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80146bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80146c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80146c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80146c8:	f886 a002 	strb.w	sl, [r6, #2]
 80146cc:	f886 9001 	strb.w	r9, [r6, #1]
 80146d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146d2:	4474      	add	r4, lr
 80146d4:	3701      	adds	r7, #1
 80146d6:	4410      	add	r0, r2
 80146d8:	e755      	b.n	8014586 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80146da:	b007      	add	sp, #28
 80146dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e0:	240c3d6c 	.word	0x240c3d6c

080146e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80146e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e8:	b085      	sub	sp, #20
 80146ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80146ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80146f0:	9203      	str	r2, [sp, #12]
 80146f2:	6860      	ldr	r0, [r4, #4]
 80146f4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80146f8:	9100      	str	r1, [sp, #0]
 80146fa:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80146fe:	fb00 2606 	mla	r6, r0, r6, r2
 8014702:	6822      	ldr	r2, [r4, #0]
 8014704:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014708:	4416      	add	r6, r2
 801470a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801470e:	3201      	adds	r2, #1
 8014710:	f022 0201 	bic.w	r2, r2, #1
 8014714:	9201      	str	r2, [sp, #4]
 8014716:	f8dc 2000 	ldr.w	r2, [ip]
 801471a:	9202      	str	r2, [sp, #8]
 801471c:	9a00      	ldr	r2, [sp, #0]
 801471e:	2a00      	cmp	r2, #0
 8014720:	dc03      	bgt.n	801472a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8014722:	9a03      	ldr	r2, [sp, #12]
 8014724:	2a00      	cmp	r2, #0
 8014726:	f340 8140 	ble.w	80149aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801472a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801472c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014730:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8014734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014736:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801473a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801473e:	2b00      	cmp	r3, #0
 8014740:	dd0e      	ble.n	8014760 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8014742:	142a      	asrs	r2, r5, #16
 8014744:	d405      	bmi.n	8014752 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014746:	4572      	cmp	r2, lr
 8014748:	da03      	bge.n	8014752 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801474a:	1422      	asrs	r2, r4, #16
 801474c:	d401      	bmi.n	8014752 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801474e:	42ba      	cmp	r2, r7
 8014750:	db07      	blt.n	8014762 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014752:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014754:	3b01      	subs	r3, #1
 8014756:	3603      	adds	r6, #3
 8014758:	4415      	add	r5, r2
 801475a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801475c:	4414      	add	r4, r2
 801475e:	e7ee      	b.n	801473e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8014760:	d072      	beq.n	8014848 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014762:	1e5a      	subs	r2, r3, #1
 8014764:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014766:	fb00 5002 	mla	r0, r0, r2, r5
 801476a:	1400      	asrs	r0, r0, #16
 801476c:	d463      	bmi.n	8014836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801476e:	4570      	cmp	r0, lr
 8014770:	da61      	bge.n	8014836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014772:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014774:	fb00 4202 	mla	r2, r0, r2, r4
 8014778:	1412      	asrs	r2, r2, #16
 801477a:	d45c      	bmi.n	8014836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801477c:	42ba      	cmp	r2, r7
 801477e:	da5a      	bge.n	8014836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014780:	1cf0      	adds	r0, r6, #3
 8014782:	469a      	mov	sl, r3
 8014784:	f1ba 0f00 	cmp.w	sl, #0
 8014788:	dd59      	ble.n	801483e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801478a:	142a      	asrs	r2, r5, #16
 801478c:	9901      	ldr	r1, [sp, #4]
 801478e:	1427      	asrs	r7, r4, #16
 8014790:	fb01 2707 	mla	r7, r1, r7, r2
 8014794:	9902      	ldr	r1, [sp, #8]
 8014796:	087a      	lsrs	r2, r7, #1
 8014798:	5c8a      	ldrb	r2, [r1, r2]
 801479a:	07f9      	lsls	r1, r7, #31
 801479c:	bf54      	ite	pl
 801479e:	f002 020f 	andpl.w	r2, r2, #15
 80147a2:	1112      	asrmi	r2, r2, #4
 80147a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80147a8:	b2d2      	uxtb	r2, r2
 80147aa:	2a00      	cmp	r2, #0
 80147ac:	d03b      	beq.n	8014826 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80147ae:	4980      	ldr	r1, [pc, #512]	; (80149b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80147b0:	2aff      	cmp	r2, #255	; 0xff
 80147b2:	680f      	ldr	r7, [r1, #0]
 80147b4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80147b8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80147bc:	b2ff      	uxtb	r7, r7
 80147be:	f000 80ed 	beq.w	801499c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80147c2:	fa1f f882 	uxth.w	r8, r2
 80147c6:	43d2      	mvns	r2, r2
 80147c8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80147cc:	fb17 f708 	smulbb	r7, r7, r8
 80147d0:	b2d2      	uxtb	r2, r2
 80147d2:	fb19 f908 	smulbb	r9, r9, r8
 80147d6:	fb0e 7702 	mla	r7, lr, r2, r7
 80147da:	fb1b f808 	smulbb	r8, fp, r8
 80147de:	b2bf      	uxth	r7, r7
 80147e0:	f107 0e01 	add.w	lr, r7, #1
 80147e4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80147e8:	123f      	asrs	r7, r7, #8
 80147ea:	f800 7c03 	strb.w	r7, [r0, #-3]
 80147ee:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80147f2:	fb07 9902 	mla	r9, r7, r2, r9
 80147f6:	fa1f f989 	uxth.w	r9, r9
 80147fa:	f109 0701 	add.w	r7, r9, #1
 80147fe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014802:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8014806:	fb07 8802 	mla	r8, r7, r2, r8
 801480a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801480e:	fa1f f888 	uxth.w	r8, r8
 8014812:	f800 9c02 	strb.w	r9, [r0, #-2]
 8014816:	f108 0201 	add.w	r2, r8, #1
 801481a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801481e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014822:	f800 8c01 	strb.w	r8, [r0, #-1]
 8014826:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014828:	3003      	adds	r0, #3
 801482a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801482e:	4415      	add	r5, r2
 8014830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014832:	4414      	add	r4, r2
 8014834:	e7a6      	b.n	8014784 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014836:	2700      	movs	r7, #0
 8014838:	1bda      	subs	r2, r3, r7
 801483a:	2a00      	cmp	r2, #0
 801483c:	dc40      	bgt.n	80148c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801483e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014846:	441e      	add	r6, r3
 8014848:	9b00      	ldr	r3, [sp, #0]
 801484a:	2b00      	cmp	r3, #0
 801484c:	f340 80ad 	ble.w	80149aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8014850:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014856:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801485a:	eeb0 6a62 	vmov.f32	s12, s5
 801485e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014862:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014866:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801486a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801486e:	eeb0 6a43 	vmov.f32	s12, s6
 8014872:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014876:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801487a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801487e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014882:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014886:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801488a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801488e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014892:	ee12 2a90 	vmov	r2, s5
 8014896:	eef0 2a47 	vmov.f32	s5, s14
 801489a:	fb92 f3f3 	sdiv	r3, r2, r3
 801489e:	ee13 2a10 	vmov	r2, s6
 80148a2:	9311      	str	r3, [sp, #68]	; 0x44
 80148a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148a6:	eeb0 3a67 	vmov.f32	s6, s15
 80148aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80148ae:	9312      	str	r3, [sp, #72]	; 0x48
 80148b0:	9b00      	ldr	r3, [sp, #0]
 80148b2:	9a03      	ldr	r2, [sp, #12]
 80148b4:	3b01      	subs	r3, #1
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148ba:	bf08      	it	eq
 80148bc:	4613      	moveq	r3, r2
 80148be:	e72d      	b.n	801471c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80148c0:	1428      	asrs	r0, r5, #16
 80148c2:	d45c      	bmi.n	801497e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80148c4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80148c8:	4282      	cmp	r2, r0
 80148ca:	dd58      	ble.n	801497e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80148cc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80148d0:	d455      	bmi.n	801497e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80148d2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80148d6:	4572      	cmp	r2, lr
 80148d8:	dd51      	ble.n	801497e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80148da:	9a01      	ldr	r2, [sp, #4]
 80148dc:	9902      	ldr	r1, [sp, #8]
 80148de:	fb0e 0002 	mla	r0, lr, r2, r0
 80148e2:	0842      	lsrs	r2, r0, #1
 80148e4:	07c0      	lsls	r0, r0, #31
 80148e6:	5c8a      	ldrb	r2, [r1, r2]
 80148e8:	bf54      	ite	pl
 80148ea:	f002 020f 	andpl.w	r2, r2, #15
 80148ee:	1112      	asrmi	r2, r2, #4
 80148f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80148f4:	b2d2      	uxtb	r2, r2
 80148f6:	2a00      	cmp	r2, #0
 80148f8:	d041      	beq.n	801497e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80148fa:	492d      	ldr	r1, [pc, #180]	; (80149b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80148fc:	2aff      	cmp	r2, #255	; 0xff
 80148fe:	6808      	ldr	r0, [r1, #0]
 8014900:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8014904:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014908:	fa5f fe80 	uxtb.w	lr, r0
 801490c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8014910:	d03b      	beq.n	801498a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8014912:	fa1f f982 	uxth.w	r9, r2
 8014916:	4438      	add	r0, r7
 8014918:	43d2      	mvns	r2, r2
 801491a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801491e:	fb1e fe09 	smulbb	lr, lr, r9
 8014922:	fb1a fa09 	smulbb	sl, sl, r9
 8014926:	b2d2      	uxtb	r2, r2
 8014928:	fb1b f909 	smulbb	r9, fp, r9
 801492c:	fb08 ee02 	mla	lr, r8, r2, lr
 8014930:	fa1f fe8e 	uxth.w	lr, lr
 8014934:	f10e 0801 	add.w	r8, lr, #1
 8014938:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801493c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014940:	f806 e000 	strb.w	lr, [r6, r0]
 8014944:	4430      	add	r0, r6
 8014946:	f890 e001 	ldrb.w	lr, [r0, #1]
 801494a:	fb0e aa02 	mla	sl, lr, r2, sl
 801494e:	fa1f fa8a 	uxth.w	sl, sl
 8014952:	f10a 0e01 	add.w	lr, sl, #1
 8014956:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801495a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801495e:	fb0e 9902 	mla	r9, lr, r2, r9
 8014962:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014966:	fa1f f989 	uxth.w	r9, r9
 801496a:	f880 a001 	strb.w	sl, [r0, #1]
 801496e:	f109 0201 	add.w	r2, r9, #1
 8014972:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8014976:	ea4f 2929 	mov.w	r9, r9, asr #8
 801497a:	f880 9002 	strb.w	r9, [r0, #2]
 801497e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014980:	3701      	adds	r7, #1
 8014982:	4415      	add	r5, r2
 8014984:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014986:	4414      	add	r4, r2
 8014988:	e756      	b.n	8014838 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801498a:	4438      	add	r0, r7
 801498c:	f806 e000 	strb.w	lr, [r6, r0]
 8014990:	4430      	add	r0, r6
 8014992:	f880 a001 	strb.w	sl, [r0, #1]
 8014996:	f880 b002 	strb.w	fp, [r0, #2]
 801499a:	e7f0      	b.n	801497e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801499c:	f800 7c03 	strb.w	r7, [r0, #-3]
 80149a0:	f800 9c02 	strb.w	r9, [r0, #-2]
 80149a4:	f800 bc01 	strb.w	fp, [r0, #-1]
 80149a8:	e73d      	b.n	8014826 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80149aa:	b005      	add	sp, #20
 80149ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b0:	240c3d6c 	.word	0x240c3d6c

080149b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80149b4:	4770      	bx	lr

080149b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80149b6:	4770      	bx	lr

080149b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80149b8:	4770      	bx	lr

080149ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80149ba:	4770      	bx	lr

080149bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80149bc:	4770      	bx	lr

080149be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80149be:	4770      	bx	lr

080149c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80149c0:	4770      	bx	lr

080149c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80149c2:	4770      	bx	lr

080149c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80149c4:	4770      	bx	lr

080149c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80149c6:	4770      	bx	lr

080149c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80149c8:	4770      	bx	lr

080149ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80149ca:	4770      	bx	lr

080149cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80149cc:	4770      	bx	lr

080149ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80149ce:	4770      	bx	lr

080149d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80149d0:	4770      	bx	lr

080149d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80149d2:	4770      	bx	lr

080149d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80149d4:	4770      	bx	lr

080149d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80149d6:	4770      	bx	lr

080149d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80149d8:	4770      	bx	lr

080149da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80149da:	4770      	bx	lr

080149dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80149dc:	2bff      	cmp	r3, #255	; 0xff
 80149de:	b508      	push	{r3, lr}
 80149e0:	d04f      	beq.n	8014a82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80149e2:	2a2c      	cmp	r2, #44	; 0x2c
 80149e4:	d032      	beq.n	8014a4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80149e6:	d80f      	bhi.n	8014a08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80149e8:	2a08      	cmp	r2, #8
 80149ea:	d046      	beq.n	8014a7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80149ec:	d805      	bhi.n	80149fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80149ee:	2a04      	cmp	r2, #4
 80149f0:	d041      	beq.n	8014a76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80149f2:	2a05      	cmp	r2, #5
 80149f4:	d03d      	beq.n	8014a72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80149f6:	2000      	movs	r0, #0
 80149f8:	e027      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80149fa:	2a0a      	cmp	r2, #10
 80149fc:	d03d      	beq.n	8014a7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80149fe:	d301      	bcc.n	8014a04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8014a00:	2a0b      	cmp	r2, #11
 8014a02:	d1f8      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a04:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014a06:	e020      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a08:	2a30      	cmp	r2, #48	; 0x30
 8014a0a:	d038      	beq.n	8014a7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014a0c:	d808      	bhi.n	8014a20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8014a0e:	2a2e      	cmp	r2, #46	; 0x2e
 8014a10:	684b      	ldr	r3, [r1, #4]
 8014a12:	d029      	beq.n	8014a68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8014a14:	d90b      	bls.n	8014a2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d1ec      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a1c:	6a00      	ldr	r0, [r0, #32]
 8014a1e:	e014      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a20:	2a32      	cmp	r2, #50	; 0x32
 8014a22:	d02c      	beq.n	8014a7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014a24:	d301      	bcc.n	8014a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8014a26:	2a33      	cmp	r2, #51	; 0x33
 8014a28:	d1e5      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a2a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8014a2c:	e00d      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d009      	beq.n	8014a48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8014a34:	d3f2      	bcc.n	8014a1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d1dd      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a3a:	4b39      	ldr	r3, [pc, #228]	; (8014b20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014a3c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8014a40:	4a38      	ldr	r2, [pc, #224]	; (8014b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014a42:	4839      	ldr	r0, [pc, #228]	; (8014b28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8014a44:	f008 f98a 	bl	801cd5c <__assert_func>
 8014a48:	6900      	ldr	r0, [r0, #16]
 8014a4a:	bd08      	pop	{r3, pc}
 8014a4c:	684b      	ldr	r3, [r1, #4]
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	d007      	beq.n	8014a64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8014a54:	d30b      	bcc.n	8014a6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8014a56:	2b02      	cmp	r3, #2
 8014a58:	d1cd      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a5a:	4b31      	ldr	r3, [pc, #196]	; (8014b20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014a5c:	f240 412c 	movw	r1, #1068	; 0x42c
 8014a60:	4a30      	ldr	r2, [pc, #192]	; (8014b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014a62:	e7ee      	b.n	8014a42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014a64:	6880      	ldr	r0, [r0, #8]
 8014a66:	e7f0      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d1c3      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a6e:	6980      	ldr	r0, [r0, #24]
 8014a70:	e7eb      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a72:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014a74:	e7e9      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a76:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014a78:	e7e7      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014a7c:	e7e5      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a7e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014a80:	e7e3      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a82:	2a2c      	cmp	r2, #44	; 0x2c
 8014a84:	d030      	beq.n	8014ae8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8014a86:	d80f      	bhi.n	8014aa8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8014a88:	2a08      	cmp	r2, #8
 8014a8a:	d044      	beq.n	8014b16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8014a8c:	d805      	bhi.n	8014a9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8014a8e:	2a04      	cmp	r2, #4
 8014a90:	d03f      	beq.n	8014b12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8014a92:	2a05      	cmp	r2, #5
 8014a94:	d1af      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a96:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014a98:	e7d7      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a9a:	2a0a      	cmp	r2, #10
 8014a9c:	d03b      	beq.n	8014b16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8014a9e:	d301      	bcc.n	8014aa4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8014aa0:	2a0b      	cmp	r2, #11
 8014aa2:	d1a8      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014aa4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014aa6:	e7d0      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014aa8:	2a30      	cmp	r2, #48	; 0x30
 8014aaa:	d036      	beq.n	8014b1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014aac:	d808      	bhi.n	8014ac0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8014aae:	2a2e      	cmp	r2, #46	; 0x2e
 8014ab0:	684b      	ldr	r3, [r1, #4]
 8014ab2:	d028      	beq.n	8014b06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8014ab4:	d90b      	bls.n	8014ace <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d19c      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014abc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014abe:	e7c4      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014ac0:	2a32      	cmp	r2, #50	; 0x32
 8014ac2:	d02a      	beq.n	8014b1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014ac4:	d301      	bcc.n	8014aca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8014ac6:	2a33      	cmp	r2, #51	; 0x33
 8014ac8:	d195      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014aca:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014acc:	e7bd      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d007      	beq.n	8014ae4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8014ad4:	d3f2      	bcc.n	8014abc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8014ad6:	2b02      	cmp	r3, #2
 8014ad8:	d18d      	bne.n	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014ada:	4b11      	ldr	r3, [pc, #68]	; (8014b20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014adc:	f240 415d 	movw	r1, #1117	; 0x45d
 8014ae0:	4a10      	ldr	r2, [pc, #64]	; (8014b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014ae2:	e7ae      	b.n	8014a42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014ae4:	6940      	ldr	r0, [r0, #20]
 8014ae6:	e7b0      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014ae8:	684b      	ldr	r3, [r1, #4]
 8014aea:	781b      	ldrb	r3, [r3, #0]
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d008      	beq.n	8014b02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8014af0:	d30d      	bcc.n	8014b0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8014af2:	2b02      	cmp	r3, #2
 8014af4:	f47f af7f 	bne.w	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014af8:	4b09      	ldr	r3, [pc, #36]	; (8014b20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014afa:	f240 4169 	movw	r1, #1129	; 0x469
 8014afe:	4a09      	ldr	r2, [pc, #36]	; (8014b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8014b00:	e79f      	b.n	8014a42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014b02:	68c0      	ldr	r0, [r0, #12]
 8014b04:	e7a1      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014b06:	781b      	ldrb	r3, [r3, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	f47f af74 	bne.w	80149f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014b0e:	69c0      	ldr	r0, [r0, #28]
 8014b10:	e79b      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014b12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014b14:	e799      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014b16:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8014b18:	e797      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014b1a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014b1c:	e795      	b.n	8014a4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014b1e:	bf00      	nop
 8014b20:	080211a2 	.word	0x080211a2
 8014b24:	0802191b 	.word	0x0802191b
 8014b28:	080211ee 	.word	0x080211ee

08014b2c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8014b2c:	b508      	push	{r3, lr}
 8014b2e:	4b06      	ldr	r3, [pc, #24]	; (8014b48 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8014b30:	8818      	ldrh	r0, [r3, #0]
 8014b32:	b928      	cbnz	r0, 8014b40 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8014b34:	4b05      	ldr	r3, [pc, #20]	; (8014b4c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8014b36:	2151      	movs	r1, #81	; 0x51
 8014b38:	4a05      	ldr	r2, [pc, #20]	; (8014b50 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8014b3a:	4806      	ldr	r0, [pc, #24]	; (8014b54 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8014b3c:	f008 f90e 	bl	801cd5c <__assert_func>
 8014b40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014b44:	b280      	uxth	r0, r0
 8014b46:	bd08      	pop	{r3, pc}
 8014b48:	240c3d3c 	.word	0x240c3d3c
 8014b4c:	080213e8 	.word	0x080213e8
 8014b50:	080218e0 	.word	0x080218e0
 8014b54:	0802142a 	.word	0x0802142a

08014b58 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8014b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b5a:	4606      	mov	r6, r0
 8014b5c:	b087      	sub	sp, #28
 8014b5e:	4615      	mov	r5, r2
 8014b60:	461f      	mov	r7, r3
 8014b62:	b353      	cbz	r3, 8014bba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014b64:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	dd26      	ble.n	8014bba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014b6c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	dd22      	ble.n	8014bba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014b74:	6808      	ldr	r0, [r1, #0]
 8014b76:	aa04      	add	r2, sp, #16
 8014b78:	6849      	ldr	r1, [r1, #4]
 8014b7a:	4c1b      	ldr	r4, [pc, #108]	; (8014be8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8014b7c:	c203      	stmia	r2!, {r0, r1}
 8014b7e:	a804      	add	r0, sp, #16
 8014b80:	f7fb fa78 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014b84:	6820      	ldr	r0, [r4, #0]
 8014b86:	6803      	ldr	r3, [r0, #0]
 8014b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b8a:	4798      	blx	r3
 8014b8c:	2fff      	cmp	r7, #255	; 0xff
 8014b8e:	d016      	beq.n	8014bbe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8014b90:	f010 0f08 	tst.w	r0, #8
 8014b94:	6820      	ldr	r0, [r4, #0]
 8014b96:	d015      	beq.n	8014bc4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8014b98:	2400      	movs	r4, #0
 8014b9a:	6801      	ldr	r1, [r0, #0]
 8014b9c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014ba0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014ba4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8014ba8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8014bac:	9401      	str	r4, [sp, #4]
 8014bae:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8014bb2:	9400      	str	r4, [sp, #0]
 8014bb4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	47a0      	blx	r4
 8014bba:	b007      	add	sp, #28
 8014bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bbe:	f010 0f02 	tst.w	r0, #2
 8014bc2:	e7e7      	b.n	8014b94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8014bc4:	6803      	ldr	r3, [r0, #0]
 8014bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bc8:	4798      	blx	r3
 8014bca:	4b08      	ldr	r3, [pc, #32]	; (8014bec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8014bcc:	4601      	mov	r1, r0
 8014bce:	4630      	mov	r0, r6
 8014bd0:	881a      	ldrh	r2, [r3, #0]
 8014bd2:	6833      	ldr	r3, [r6, #0]
 8014bd4:	e9cd 5700 	strd	r5, r7, [sp]
 8014bd8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8014bda:	ab04      	add	r3, sp, #16
 8014bdc:	47a8      	blx	r5
 8014bde:	6820      	ldr	r0, [r4, #0]
 8014be0:	6803      	ldr	r3, [r0, #0]
 8014be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014be4:	4798      	blx	r3
 8014be6:	e7e8      	b.n	8014bba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014be8:	240c3d44 	.word	0x240c3d44
 8014bec:	240c3d3c 	.word	0x240c3d3c

08014bf0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8014bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bf4:	b08b      	sub	sp, #44	; 0x2c
 8014bf6:	460d      	mov	r5, r1
 8014bf8:	4616      	mov	r6, r2
 8014bfa:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8014bfe:	f1b8 0f00 	cmp.w	r8, #0
 8014c02:	d047      	beq.n	8014c94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8014c04:	6810      	ldr	r0, [r2, #0]
 8014c06:	ac06      	add	r4, sp, #24
 8014c08:	6851      	ldr	r1, [r2, #4]
 8014c0a:	4f51      	ldr	r7, [pc, #324]	; (8014d50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8014c0c:	c403      	stmia	r4!, {r0, r1}
 8014c0e:	6818      	ldr	r0, [r3, #0]
 8014c10:	ac08      	add	r4, sp, #32
 8014c12:	6859      	ldr	r1, [r3, #4]
 8014c14:	c403      	stmia	r4!, {r0, r1}
 8014c16:	a806      	add	r0, sp, #24
 8014c18:	f7fb fa2c 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014c1c:	4631      	mov	r1, r6
 8014c1e:	a808      	add	r0, sp, #32
 8014c20:	f7fb fa50 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014c24:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014c28:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014c2c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014c30:	6838      	ldr	r0, [r7, #0]
 8014c32:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014c36:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8014c3a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8014c3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014c42:	440d      	add	r5, r1
 8014c44:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8014c48:	440a      	add	r2, r1
 8014c4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014c4e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014c52:	4413      	add	r3, r2
 8014c54:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014c58:	6803      	ldr	r3, [r0, #0]
 8014c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c5c:	4798      	blx	r3
 8014c5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8014c62:	d01a      	beq.n	8014c9a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8014c64:	f010 0f04 	tst.w	r0, #4
 8014c68:	6838      	ldr	r0, [r7, #0]
 8014c6a:	d019      	beq.n	8014ca0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	6807      	ldr	r7, [r0, #0]
 8014c70:	b2a4      	uxth	r4, r4
 8014c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c76:	b2b6      	uxth	r6, r6
 8014c78:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014c7c:	9401      	str	r4, [sp, #4]
 8014c7e:	9600      	str	r6, [sp, #0]
 8014c80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014c84:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8014c88:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014c8c:	9102      	str	r1, [sp, #8]
 8014c8e:	4629      	mov	r1, r5
 8014c90:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8014c92:	47a0      	blx	r4
 8014c94:	b00b      	add	sp, #44	; 0x2c
 8014c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c9a:	f010 0f01 	tst.w	r0, #1
 8014c9e:	e7e3      	b.n	8014c68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8014ca0:	6803      	ldr	r3, [r0, #0]
 8014ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ca4:	4798      	blx	r3
 8014ca6:	4a2b      	ldr	r2, [pc, #172]	; (8014d54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8014ca8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8014cac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8014cb0:	8813      	ldrh	r3, [r2, #0]
 8014cb2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8014cb6:	fb03 f404 	mul.w	r4, r3, r4
 8014cba:	fb03 c101 	mla	r1, r3, r1, ip
 8014cbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014cc2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014cc6:	4408      	add	r0, r1
 8014cc8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014ccc:	4404      	add	r4, r0
 8014cce:	d02e      	beq.n	8014d2e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8014cd0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8014cd4:	1b9b      	subs	r3, r3, r6
 8014cd6:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8014cda:	1b96      	subs	r6, r2, r6
 8014cdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ce0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014ce4:	42a0      	cmp	r0, r4
 8014ce6:	d22d      	bcs.n	8014d44 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8014ce8:	eb00 0e01 	add.w	lr, r0, r1
 8014cec:	4570      	cmp	r0, lr
 8014cee:	d210      	bcs.n	8014d12 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8014cf0:	f890 9000 	ldrb.w	r9, [r0]
 8014cf4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8014cf8:	fb19 f90c 	smulbb	r9, r9, ip
 8014cfc:	fb02 9208 	mla	r2, r2, r8, r9
 8014d00:	b292      	uxth	r2, r2
 8014d02:	f102 0901 	add.w	r9, r2, #1
 8014d06:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8014d0a:	1212      	asrs	r2, r2, #8
 8014d0c:	f800 2b01 	strb.w	r2, [r0], #1
 8014d10:	e7ec      	b.n	8014cec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8014d12:	4418      	add	r0, r3
 8014d14:	4435      	add	r5, r6
 8014d16:	e7e5      	b.n	8014ce4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8014d18:	8813      	ldrh	r3, [r2, #0]
 8014d1a:	1b9b      	subs	r3, r3, r6
 8014d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d20:	4418      	add	r0, r3
 8014d22:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014d26:	1b9b      	subs	r3, r3, r6
 8014d28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d2c:	441d      	add	r5, r3
 8014d2e:	42a0      	cmp	r0, r4
 8014d30:	d208      	bcs.n	8014d44 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8014d32:	eb00 0c01 	add.w	ip, r0, r1
 8014d36:	4560      	cmp	r0, ip
 8014d38:	d2ee      	bcs.n	8014d18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8014d3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014d3e:	f800 3b01 	strb.w	r3, [r0], #1
 8014d42:	e7f8      	b.n	8014d36 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8014d44:	6838      	ldr	r0, [r7, #0]
 8014d46:	6803      	ldr	r3, [r0, #0]
 8014d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d4a:	4798      	blx	r3
 8014d4c:	e7a2      	b.n	8014c94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8014d4e:	bf00      	nop
 8014d50:	240c3d44 	.word	0x240c3d44
 8014d54:	240c3d3c 	.word	0x240c3d3c

08014d58 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8014d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	b085      	sub	sp, #20
 8014d5e:	9300      	str	r3, [sp, #0]
 8014d60:	4b41      	ldr	r3, [pc, #260]	; (8014e68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d136      	bne.n	8014dd6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8014d68:	4a40      	ldr	r2, [pc, #256]	; (8014e6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8014d6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014d6e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d131      	bne.n	8014dda <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8014d76:	4b3e      	ldr	r3, [pc, #248]	; (8014e70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8014d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d7c:	ac02      	add	r4, sp, #8
 8014d7e:	6808      	ldr	r0, [r1, #0]
 8014d80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014d84:	ab02      	add	r3, sp, #8
 8014d86:	6849      	ldr	r1, [r1, #4]
 8014d88:	4d3a      	ldr	r5, [pc, #232]	; (8014e74 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8014d8a:	c303      	stmia	r3!, {r0, r1}
 8014d8c:	4669      	mov	r1, sp
 8014d8e:	4620      	mov	r0, r4
 8014d90:	f7fb f998 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014d94:	4668      	mov	r0, sp
 8014d96:	f7fb f96d 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014d9a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014d9e:	f8bd 2000 	ldrh.w	r2, [sp]
 8014da2:	462e      	mov	r6, r5
 8014da4:	6828      	ldr	r0, [r5, #0]
 8014da6:	4413      	add	r3, r2
 8014da8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014dac:	f8ad 3008 	strh.w	r3, [sp, #8]
 8014db0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014db4:	4413      	add	r3, r2
 8014db6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014dba:	6803      	ldr	r3, [r0, #0]
 8014dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dbe:	4798      	blx	r3
 8014dc0:	f010 0f01 	tst.w	r0, #1
 8014dc4:	d00b      	beq.n	8014dde <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8014dc6:	6828      	ldr	r0, [r5, #0]
 8014dc8:	6803      	ldr	r3, [r0, #0]
 8014dca:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014dd0:	4798      	blx	r3
 8014dd2:	b005      	add	sp, #20
 8014dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dd6:	4a26      	ldr	r2, [pc, #152]	; (8014e70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8014dd8:	e7c7      	b.n	8014d6a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8014dda:	4b24      	ldr	r3, [pc, #144]	; (8014e6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8014ddc:	e7cc      	b.n	8014d78 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8014dde:	6830      	ldr	r0, [r6, #0]
 8014de0:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8014de4:	6803      	ldr	r3, [r0, #0]
 8014de6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8014dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dec:	4798      	blx	r3
 8014dee:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8014df2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014df6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8014dfa:	fb14 3402 	smlabb	r4, r4, r2, r3
 8014dfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014e02:	4404      	add	r4, r0
 8014e04:	6830      	ldr	r0, [r6, #0]
 8014e06:	6803      	ldr	r3, [r0, #0]
 8014e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e0a:	4798      	blx	r3
 8014e0c:	4917      	ldr	r1, [pc, #92]	; (8014e6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8014e0e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8014e12:	880b      	ldrh	r3, [r1, #0]
 8014e14:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8014e18:	fb03 c202 	mla	r2, r3, r2, ip
 8014e1c:	437b      	muls	r3, r7
 8014e1e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8014e22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014e26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e2a:	4410      	add	r0, r2
 8014e2c:	18c2      	adds	r2, r0, r3
 8014e2e:	4290      	cmp	r0, r2
 8014e30:	d214      	bcs.n	8014e5c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8014e32:	eb00 0c07 	add.w	ip, r0, r7
 8014e36:	4560      	cmp	r0, ip
 8014e38:	d204      	bcs.n	8014e44 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8014e3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014e3e:	f800 3b01 	strb.w	r3, [r0], #1
 8014e42:	e7f8      	b.n	8014e36 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8014e44:	880b      	ldrh	r3, [r1, #0]
 8014e46:	1b5b      	subs	r3, r3, r5
 8014e48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e4c:	4418      	add	r0, r3
 8014e4e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014e52:	1b5b      	subs	r3, r3, r5
 8014e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e58:	441c      	add	r4, r3
 8014e5a:	e7e8      	b.n	8014e2e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8014e5c:	6830      	ldr	r0, [r6, #0]
 8014e5e:	6803      	ldr	r3, [r0, #0]
 8014e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e62:	4798      	blx	r3
 8014e64:	e7b5      	b.n	8014dd2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8014e66:	bf00      	nop
 8014e68:	240c3d3a 	.word	0x240c3d3a
 8014e6c:	240c3d3c 	.word	0x240c3d3c
 8014e70:	240c3d3e 	.word	0x240c3d3e
 8014e74:	240c3d44 	.word	0x240c3d44

08014e78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8014e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7c:	4698      	mov	r8, r3
 8014e7e:	4b24      	ldr	r3, [pc, #144]	; (8014f10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8014e80:	b089      	sub	sp, #36	; 0x24
 8014e82:	4605      	mov	r5, r0
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	468a      	mov	sl, r1
 8014e88:	4693      	mov	fp, r2
 8014e8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e8e:	2b02      	cmp	r3, #2
 8014e90:	d106      	bne.n	8014ea0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28>
 8014e92:	4b20      	ldr	r3, [pc, #128]	; (8014f14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 8014e94:	f240 11eb 	movw	r1, #491	; 0x1eb
 8014e98:	4a1f      	ldr	r2, [pc, #124]	; (8014f18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8014e9a:	4820      	ldr	r0, [pc, #128]	; (8014f1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 8014e9c:	f007 ff5e 	bl	801cd5c <__assert_func>
 8014ea0:	ac08      	add	r4, sp, #32
 8014ea2:	f824 8d0c 	strh.w	r8, [r4, #-12]!
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	f7fe f934 	bl	8013114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014eac:	682b      	ldr	r3, [r5, #0]
 8014eae:	4606      	mov	r6, r0
 8014eb0:	4628      	mov	r0, r5
 8014eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb4:	4798      	blx	r3
 8014eb6:	4286      	cmp	r6, r0
 8014eb8:	d004      	beq.n	8014ec4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4c>
 8014eba:	4b19      	ldr	r3, [pc, #100]	; (8014f20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa8>)
 8014ebc:	f240 11ed 	movw	r1, #493	; 0x1ed
 8014ec0:	4a15      	ldr	r2, [pc, #84]	; (8014f18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8014ec2:	e7ea      	b.n	8014e9a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	f7fe f89b 	bl	8013000 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014eca:	4606      	mov	r6, r0
 8014ecc:	b920      	cbnz	r0, 8014ed8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x60>
 8014ece:	4b15      	ldr	r3, [pc, #84]	; (8014f24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xac>)
 8014ed0:	f240 11ef 	movw	r1, #495	; 0x1ef
 8014ed4:	4a10      	ldr	r2, [pc, #64]	; (8014f18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8014ed6:	e7e0      	b.n	8014e9a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8014ed8:	682b      	ldr	r3, [r5, #0]
 8014eda:	4620      	mov	r0, r4
 8014edc:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8014ee0:	f7fe f806 	bl	8012ef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014ee4:	4607      	mov	r7, r0
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f7fe f846 	bl	8012f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014eec:	465b      	mov	r3, fp
 8014eee:	b200      	sxth	r0, r0
 8014ef0:	4652      	mov	r2, sl
 8014ef2:	b23f      	sxth	r7, r7
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	9002      	str	r0, [sp, #8]
 8014ef8:	a806      	add	r0, sp, #24
 8014efa:	e9cd 6700 	strd	r6, r7, [sp]
 8014efe:	47c8      	blx	r9
 8014f00:	a906      	add	r1, sp, #24
 8014f02:	4640      	mov	r0, r8
 8014f04:	f7fd febc 	bl	8012c80 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8014f08:	4630      	mov	r0, r6
 8014f0a:	b009      	add	sp, #36	; 0x24
 8014f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f10:	240c3d44 	.word	0x240c3d44
 8014f14:	0802126e 	.word	0x0802126e
 8014f18:	08021a58 	.word	0x08021a58
 8014f1c:	080211ee 	.word	0x080211ee
 8014f20:	08021320 	.word	0x08021320
 8014f24:	08021375 	.word	0x08021375

08014f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014f28:	b510      	push	{r4, lr}
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	2104      	movs	r1, #4
 8014f2e:	f007 fee6 	bl	801ccfe <_ZdlPvj>
 8014f32:	4620      	mov	r0, r4
 8014f34:	bd10      	pop	{r4, pc}

08014f36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014f36:	b510      	push	{r4, lr}
 8014f38:	4604      	mov	r4, r0
 8014f3a:	2104      	movs	r1, #4
 8014f3c:	f007 fedf 	bl	801ccfe <_ZdlPvj>
 8014f40:	4620      	mov	r0, r4
 8014f42:	bd10      	pop	{r4, pc}

08014f44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014f44:	b510      	push	{r4, lr}
 8014f46:	4604      	mov	r4, r0
 8014f48:	2104      	movs	r1, #4
 8014f4a:	f007 fed8 	bl	801ccfe <_ZdlPvj>
 8014f4e:	4620      	mov	r0, r4
 8014f50:	bd10      	pop	{r4, pc}

08014f52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8014f52:	b510      	push	{r4, lr}
 8014f54:	4604      	mov	r4, r0
 8014f56:	2104      	movs	r1, #4
 8014f58:	f007 fed1 	bl	801ccfe <_ZdlPvj>
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	bd10      	pop	{r4, pc}

08014f60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014f60:	b510      	push	{r4, lr}
 8014f62:	4604      	mov	r4, r0
 8014f64:	2104      	movs	r1, #4
 8014f66:	f007 feca 	bl	801ccfe <_ZdlPvj>
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	bd10      	pop	{r4, pc}

08014f6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014f6e:	b510      	push	{r4, lr}
 8014f70:	4604      	mov	r4, r0
 8014f72:	2104      	movs	r1, #4
 8014f74:	f007 fec3 	bl	801ccfe <_ZdlPvj>
 8014f78:	4620      	mov	r0, r4
 8014f7a:	bd10      	pop	{r4, pc}

08014f7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014f7c:	b510      	push	{r4, lr}
 8014f7e:	4604      	mov	r4, r0
 8014f80:	2104      	movs	r1, #4
 8014f82:	f007 febc 	bl	801ccfe <_ZdlPvj>
 8014f86:	4620      	mov	r0, r4
 8014f88:	bd10      	pop	{r4, pc}

08014f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014f8a:	b510      	push	{r4, lr}
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	2104      	movs	r1, #4
 8014f90:	f007 feb5 	bl	801ccfe <_ZdlPvj>
 8014f94:	4620      	mov	r0, r4
 8014f96:	bd10      	pop	{r4, pc}

08014f98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014f98:	b510      	push	{r4, lr}
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	2104      	movs	r1, #4
 8014f9e:	f007 feae 	bl	801ccfe <_ZdlPvj>
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	bd10      	pop	{r4, pc}

08014fa6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014fa6:	b510      	push	{r4, lr}
 8014fa8:	4604      	mov	r4, r0
 8014faa:	2104      	movs	r1, #4
 8014fac:	f007 fea7 	bl	801ccfe <_ZdlPvj>
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	bd10      	pop	{r4, pc}

08014fb4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014fb4:	b510      	push	{r4, lr}
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	2104      	movs	r1, #4
 8014fba:	f007 fea0 	bl	801ccfe <_ZdlPvj>
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	bd10      	pop	{r4, pc}

08014fc2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8014fc2:	b510      	push	{r4, lr}
 8014fc4:	4604      	mov	r4, r0
 8014fc6:	2104      	movs	r1, #4
 8014fc8:	f007 fe99 	bl	801ccfe <_ZdlPvj>
 8014fcc:	4620      	mov	r0, r4
 8014fce:	bd10      	pop	{r4, pc}

08014fd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014fd0:	b510      	push	{r4, lr}
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	2104      	movs	r1, #4
 8014fd6:	f007 fe92 	bl	801ccfe <_ZdlPvj>
 8014fda:	4620      	mov	r0, r4
 8014fdc:	bd10      	pop	{r4, pc}

08014fde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014fde:	b510      	push	{r4, lr}
 8014fe0:	4604      	mov	r4, r0
 8014fe2:	2104      	movs	r1, #4
 8014fe4:	f007 fe8b 	bl	801ccfe <_ZdlPvj>
 8014fe8:	4620      	mov	r0, r4
 8014fea:	bd10      	pop	{r4, pc}

08014fec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014fec:	b510      	push	{r4, lr}
 8014fee:	4604      	mov	r4, r0
 8014ff0:	2104      	movs	r1, #4
 8014ff2:	f007 fe84 	bl	801ccfe <_ZdlPvj>
 8014ff6:	4620      	mov	r0, r4
 8014ff8:	bd10      	pop	{r4, pc}

08014ffa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	4604      	mov	r4, r0
 8014ffe:	2104      	movs	r1, #4
 8015000:	f007 fe7d 	bl	801ccfe <_ZdlPvj>
 8015004:	4620      	mov	r0, r4
 8015006:	bd10      	pop	{r4, pc}

08015008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8015008:	b510      	push	{r4, lr}
 801500a:	4604      	mov	r4, r0
 801500c:	2104      	movs	r1, #4
 801500e:	f007 fe76 	bl	801ccfe <_ZdlPvj>
 8015012:	4620      	mov	r0, r4
 8015014:	bd10      	pop	{r4, pc}

08015016 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8015016:	b510      	push	{r4, lr}
 8015018:	4604      	mov	r4, r0
 801501a:	2104      	movs	r1, #4
 801501c:	f007 fe6f 	bl	801ccfe <_ZdlPvj>
 8015020:	4620      	mov	r0, r4
 8015022:	bd10      	pop	{r4, pc}

08015024 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015024:	b510      	push	{r4, lr}
 8015026:	4604      	mov	r4, r0
 8015028:	2104      	movs	r1, #4
 801502a:	f007 fe68 	bl	801ccfe <_ZdlPvj>
 801502e:	4620      	mov	r0, r4
 8015030:	bd10      	pop	{r4, pc}

08015032 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8015032:	b510      	push	{r4, lr}
 8015034:	4604      	mov	r4, r0
 8015036:	2104      	movs	r1, #4
 8015038:	f007 fe61 	bl	801ccfe <_ZdlPvj>
 801503c:	4620      	mov	r0, r4
 801503e:	bd10      	pop	{r4, pc}

08015040 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8015040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015044:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8015048:	9c06      	ldr	r4, [sp, #24]
 801504a:	2800      	cmp	r0, #0
 801504c:	d06e      	beq.n	801512c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801504e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8015052:	2d00      	cmp	r5, #0
 8015054:	dd6a      	ble.n	801512c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015056:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801505a:	f1bc 0f00 	cmp.w	ip, #0
 801505e:	dd65      	ble.n	801512c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015060:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8015064:	28ff      	cmp	r0, #255	; 0xff
 8015066:	f9b3 3000 	ldrsh.w	r3, [r3]
 801506a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801506e:	fb02 3306 	mla	r3, r2, r6, r3
 8015072:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015076:	b2e4      	uxtb	r4, r4
 8015078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801507c:	4419      	add	r1, r3
 801507e:	fb02 f30c 	mul.w	r3, r2, ip
 8015082:	eba2 0205 	sub.w	r2, r2, r5
 8015086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801508a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801508e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015092:	440b      	add	r3, r1
 8015094:	d03e      	beq.n	8015114 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8015096:	fa1f fc80 	uxth.w	ip, r0
 801509a:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801509e:	fb06 f60c 	mul.w	r6, r6, ip
 80150a2:	b280      	uxth	r0, r0
 80150a4:	fb07 f70c 	mul.w	r7, r7, ip
 80150a8:	fb04 f40c 	mul.w	r4, r4, ip
 80150ac:	4299      	cmp	r1, r3
 80150ae:	d23d      	bcs.n	801512c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80150b0:	eb01 0c05 	add.w	ip, r1, r5
 80150b4:	458c      	cmp	ip, r1
 80150b6:	f101 0e03 	add.w	lr, r1, #3
 80150ba:	d928      	bls.n	801510e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80150bc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80150c0:	fb11 f100 	smulbb	r1, r1, r0
 80150c4:	4421      	add	r1, r4
 80150c6:	b289      	uxth	r1, r1
 80150c8:	f101 0801 	add.w	r8, r1, #1
 80150cc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80150d0:	1209      	asrs	r1, r1, #8
 80150d2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80150d6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80150da:	fb11 f100 	smulbb	r1, r1, r0
 80150de:	4439      	add	r1, r7
 80150e0:	b289      	uxth	r1, r1
 80150e2:	f101 0801 	add.w	r8, r1, #1
 80150e6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80150ea:	1209      	asrs	r1, r1, #8
 80150ec:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80150f0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80150f4:	fb11 f100 	smulbb	r1, r1, r0
 80150f8:	4431      	add	r1, r6
 80150fa:	b289      	uxth	r1, r1
 80150fc:	f101 0801 	add.w	r8, r1, #1
 8015100:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015104:	1209      	asrs	r1, r1, #8
 8015106:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801510a:	4671      	mov	r1, lr
 801510c:	e7d2      	b.n	80150b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801510e:	4411      	add	r1, r2
 8015110:	e7cc      	b.n	80150ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8015112:	4411      	add	r1, r2
 8015114:	4299      	cmp	r1, r3
 8015116:	d209      	bcs.n	801512c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015118:	1948      	adds	r0, r1, r5
 801511a:	4281      	cmp	r1, r0
 801511c:	d2f9      	bcs.n	8015112 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801511e:	700c      	strb	r4, [r1, #0]
 8015120:	3103      	adds	r1, #3
 8015122:	f801 7c02 	strb.w	r7, [r1, #-2]
 8015126:	f801 6c01 	strb.w	r6, [r1, #-1]
 801512a:	e7f6      	b.n	801511a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015130 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8015130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015134:	b093      	sub	sp, #76	; 0x4c
 8015136:	4699      	mov	r9, r3
 8015138:	4605      	mov	r5, r0
 801513a:	460e      	mov	r6, r1
 801513c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8015140:	4617      	mov	r7, r2
 8015142:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015144:	9304      	str	r3, [sp, #16]
 8015146:	4b8c      	ldr	r3, [pc, #560]	; (8015378 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 8015148:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015152:	2b02      	cmp	r3, #2
 8015154:	d106      	bne.n	8015164 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34>
 8015156:	4b89      	ldr	r3, [pc, #548]	; (801537c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 8015158:	f240 11f7 	movw	r1, #503	; 0x1f7
 801515c:	4a88      	ldr	r2, [pc, #544]	; (8015380 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 801515e:	4889      	ldr	r0, [pc, #548]	; (8015384 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 8015160:	f007 fdfc 	bl	801cd5c <__assert_func>
 8015164:	b924      	cbnz	r4, 8015170 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40>
 8015166:	4b88      	ldr	r3, [pc, #544]	; (8015388 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 8015168:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 801516c:	4a84      	ldr	r2, [pc, #528]	; (8015380 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 801516e:	e7f6      	b.n	801515e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2e>
 8015170:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8015174:	4649      	mov	r1, r9
 8015176:	f9b9 2000 	ldrsh.w	r2, [r9]
 801517a:	a80c      	add	r0, sp, #48	; 0x30
 801517c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015180:	9b04      	ldr	r3, [sp, #16]
 8015182:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8015186:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801518a:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
 801518e:	f7f8 fb57 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 8015192:	4639      	mov	r1, r7
 8015194:	a80c      	add	r0, sp, #48	; 0x30
 8015196:	f7f8 fb53 	bl	800d840 <_ZN8touchgfx4RectaNERKS0_>
 801519a:	4b7c      	ldr	r3, [pc, #496]	; (801538c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 801519c:	8818      	ldrh	r0, [r3, #0]
 801519e:	4b7c      	ldr	r3, [pc, #496]	; (8015390 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x260>)
 80151a0:	fa0f fc80 	sxth.w	ip, r0
 80151a4:	8819      	ldrh	r1, [r3, #0]
 80151a6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80151aa:	b20f      	sxth	r7, r1
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	da07      	bge.n	80151c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x90>
 80151b0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80151b4:	4413      	add	r3, r2
 80151b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80151ba:	2300      	movs	r3, #0
 80151bc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80151c0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80151c4:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
 80151c8:	ebac 0302 	sub.w	r3, ip, r2
 80151cc:	459e      	cmp	lr, r3
 80151ce:	bfc4      	itt	gt
 80151d0:	1a83      	subgt	r3, r0, r2
 80151d2:	f8ad 3034 	strhgt.w	r3, [sp, #52]	; 0x34
 80151d6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80151da:	2b00      	cmp	r3, #0
 80151dc:	da07      	bge.n	80151ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xbe>
 80151de:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 80151e2:	4463      	add	r3, ip
 80151e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80151e8:	2300      	movs	r3, #0
 80151ea:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80151ee:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80151f2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80151f6:	1aff      	subs	r7, r7, r3
 80151f8:	45bc      	cmp	ip, r7
 80151fa:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8015398 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x268>
 80151fe:	bfc8      	it	gt
 8015200:	1acf      	subgt	r7, r1, r3
 8015202:	f89c c000 	ldrb.w	ip, [ip]
 8015206:	bfc8      	it	gt
 8015208:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801520c:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8015210:	f1bc 0f00 	cmp.w	ip, #0
 8015214:	d174      	bne.n	8015300 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 8015216:	4287      	cmp	r7, r0
 8015218:	bf14      	ite	ne
 801521a:	2100      	movne	r1, #0
 801521c:	2101      	moveq	r1, #1
 801521e:	2f00      	cmp	r7, #0
 8015220:	9107      	str	r1, [sp, #28]
 8015222:	dd71      	ble.n	8015308 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 8015224:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8015228:	2900      	cmp	r1, #0
 801522a:	9103      	str	r1, [sp, #12]
 801522c:	dd6c      	ble.n	8015308 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 801522e:	f8b9 1000 	ldrh.w	r1, [r9]
 8015232:	a80e      	add	r0, sp, #56	; 0x38
 8015234:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 8015238:	f04f 0803 	mov.w	r8, #3
 801523c:	1a52      	subs	r2, r2, r1
 801523e:	a910      	add	r1, sp, #64	; 0x40
 8015240:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8015244:	b212      	sxth	r2, r2
 8015246:	9205      	str	r2, [sp, #20]
 8015248:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801524c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8015378 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 8015250:	1a9b      	subs	r3, r3, r2
 8015252:	b21b      	sxth	r3, r3
 8015254:	9306      	str	r3, [sp, #24]
 8015256:	9b05      	ldr	r3, [sp, #20]
 8015258:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801525c:	9b06      	ldr	r3, [sp, #24]
 801525e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015262:	9b03      	ldr	r3, [sp, #12]
 8015264:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015268:	2300      	movs	r3, #0
 801526a:	9310      	str	r3, [sp, #64]	; 0x40
 801526c:	9b04      	ldr	r3, [sp, #16]
 801526e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8015272:	f7fa ff27 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015276:	a90c      	add	r1, sp, #48	; 0x30
 8015278:	4608      	mov	r0, r1
 801527a:	910b      	str	r1, [sp, #44]	; 0x2c
 801527c:	f7fa fefa 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015280:	a810      	add	r0, sp, #64	; 0x40
 8015282:	f7fa fef7 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015286:	4b43      	ldr	r3, [pc, #268]	; (8015394 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>)
 8015288:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801528c:	4630      	mov	r0, r6
 801528e:	881b      	ldrh	r3, [r3, #0]
 8015290:	9308      	str	r3, [sp, #32]
 8015292:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8015296:	b21b      	sxth	r3, r3
 8015298:	9302      	str	r3, [sp, #8]
 801529a:	6833      	ldr	r3, [r6, #0]
 801529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801529e:	4798      	blx	r3
 80152a0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80152a4:	9a02      	ldr	r2, [sp, #8]
 80152a6:	4682      	mov	sl, r0
 80152a8:	f8d9 0000 	ldr.w	r0, [r9]
 80152ac:	fb13 f202 	smulbb	r2, r3, r2
 80152b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80152b4:	fb13 2308 	smlabb	r3, r3, r8, r2
 80152b8:	441c      	add	r4, r3
 80152ba:	6803      	ldr	r3, [r0, #0]
 80152bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152be:	4798      	blx	r3
 80152c0:	900a      	str	r0, [sp, #40]	; 0x28
 80152c2:	f8d9 0000 	ldr.w	r0, [r9]
 80152c6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80152ca:	6802      	ldr	r2, [r0, #0]
 80152cc:	9309      	str	r3, [sp, #36]	; 0x24
 80152ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80152d0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 80152d4:	4790      	blx	r2
 80152d6:	f010 0f01 	tst.w	r0, #1
 80152da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152dc:	d01d      	beq.n	801531a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ea>
 80152de:	f8d9 0000 	ldr.w	r0, [r9]
 80152e2:	9a04      	ldr	r2, [sp, #16]
 80152e4:	6803      	ldr	r3, [r0, #0]
 80152e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152e8:	9200      	str	r2, [sp, #0]
 80152ea:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80152ec:	4623      	mov	r3, r4
 80152ee:	c906      	ldmia	r1, {r1, r2}
 80152f0:	47b0      	blx	r6
 80152f2:	9b05      	ldr	r3, [sp, #20]
 80152f4:	80af      	strh	r7, [r5, #4]
 80152f6:	802b      	strh	r3, [r5, #0]
 80152f8:	9b06      	ldr	r3, [sp, #24]
 80152fa:	806b      	strh	r3, [r5, #2]
 80152fc:	9b03      	ldr	r3, [sp, #12]
 80152fe:	e007      	b.n	8015310 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 8015300:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8015304:	4288      	cmp	r0, r1
 8015306:	e787      	b.n	8015218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe8>
 8015308:	2300      	movs	r3, #0
 801530a:	802b      	strh	r3, [r5, #0]
 801530c:	806b      	strh	r3, [r5, #2]
 801530e:	80ab      	strh	r3, [r5, #4]
 8015310:	4628      	mov	r0, r5
 8015312:	80eb      	strh	r3, [r5, #6]
 8015314:	b013      	add	sp, #76	; 0x4c
 8015316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801531a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801531c:	fb0a f606 	mul.w	r6, sl, r6
 8015320:	fb12 6608 	smlabb	r6, r2, r8, r6
 8015324:	9a07      	ldr	r2, [sp, #28]
 8015326:	441e      	add	r6, r3
 8015328:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801532c:	b16a      	cbz	r2, 801534a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 801532e:	9a08      	ldr	r2, [sp, #32]
 8015330:	4593      	cmp	fp, r2
 8015332:	d10a      	bne.n	801534a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8015334:	f8d9 0000 	ldr.w	r0, [r9]
 8015338:	fb03 f30a 	mul.w	r3, r3, sl
 801533c:	4621      	mov	r1, r4
 801533e:	6802      	ldr	r2, [r0, #0]
 8015340:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8015344:	4632      	mov	r2, r6
 8015346:	47c8      	blx	r9
 8015348:	e7d3      	b.n	80152f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 801534a:	9a02      	ldr	r2, [sp, #8]
 801534c:	f8df b028 	ldr.w	fp, [pc, #40]	; 8015378 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 8015350:	fb02 4803 	mla	r8, r2, r3, r4
 8015354:	4544      	cmp	r4, r8
 8015356:	d2cc      	bcs.n	80152f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8015358:	f8db 0000 	ldr.w	r0, [fp]
 801535c:	4621      	mov	r1, r4
 801535e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8015362:	6802      	ldr	r2, [r0, #0]
 8015364:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015368:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 801536c:	4632      	mov	r2, r6
 801536e:	47c8      	blx	r9
 8015370:	9b02      	ldr	r3, [sp, #8]
 8015372:	4456      	add	r6, sl
 8015374:	441c      	add	r4, r3
 8015376:	e7ed      	b.n	8015354 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8015378:	240c3d44 	.word	0x240c3d44
 801537c:	0802126e 	.word	0x0802126e
 8015380:	080219c5 	.word	0x080219c5
 8015384:	080211ee 	.word	0x080211ee
 8015388:	08021220 	.word	0x08021220
 801538c:	240c3d36 	.word	0x240c3d36
 8015390:	240c3d38 	.word	0x240c3d38
 8015394:	240c3d3c 	.word	0x240c3d3c
 8015398:	240c3d3a 	.word	0x240c3d3a

0801539c <_ZN8touchgfx8LCD24bppC1Ev>:
 801539c:	2200      	movs	r2, #0
 801539e:	490c      	ldr	r1, [pc, #48]	; (80153d0 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 80153a0:	6042      	str	r2, [r0, #4]
 80153a2:	6001      	str	r1, [r0, #0]
 80153a4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80153a8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80153ac:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80153b0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80153b4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80153b8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80153bc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80153c0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80153c4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80153c8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80153cc:	4770      	bx	lr
 80153ce:	bf00      	nop
 80153d0:	08021608 	.word	0x08021608

080153d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80153d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d8:	b091      	sub	sp, #68	; 0x44
 80153da:	880d      	ldrh	r5, [r1, #0]
 80153dc:	4607      	mov	r7, r0
 80153de:	4688      	mov	r8, r1
 80153e0:	4616      	mov	r6, r2
 80153e2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80153e6:	b12d      	cbz	r5, 80153f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80153e8:	4b69      	ldr	r3, [pc, #420]	; (8015590 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 80153ea:	215e      	movs	r1, #94	; 0x5e
 80153ec:	4a69      	ldr	r2, [pc, #420]	; (8015594 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80153ee:	486a      	ldr	r0, [pc, #424]	; (8015598 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80153f0:	f007 fcb4 	bl	801cd5c <__assert_func>
 80153f4:	6810      	ldr	r0, [r2, #0]
 80153f6:	ac0c      	add	r4, sp, #48	; 0x30
 80153f8:	6851      	ldr	r1, [r2, #4]
 80153fa:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 801559c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 80153fe:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 80155a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8015402:	c403      	stmia	r4!, {r0, r1}
 8015404:	6818      	ldr	r0, [r3, #0]
 8015406:	ac0e      	add	r4, sp, #56	; 0x38
 8015408:	6859      	ldr	r1, [r3, #4]
 801540a:	c403      	stmia	r4!, {r0, r1}
 801540c:	a80c      	add	r0, sp, #48	; 0x30
 801540e:	f7fa fe31 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015412:	4631      	mov	r1, r6
 8015414:	a80e      	add	r0, sp, #56	; 0x38
 8015416:	f7fa fe55 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801541a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801541e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015422:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015426:	f8da 0000 	ldr.w	r0, [sl]
 801542a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801542e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8015432:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8015436:	440f      	add	r7, r1
 8015438:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801543c:	440a      	add	r2, r1
 801543e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015442:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015446:	4413      	add	r3, r2
 8015448:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801544c:	6803      	ldr	r3, [r0, #0]
 801544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015450:	4798      	blx	r3
 8015452:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015456:	f8da 0000 	ldr.w	r0, [sl]
 801545a:	d01e      	beq.n	801549a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 801545c:	6801      	ldr	r1, [r0, #0]
 801545e:	2201      	movs	r2, #1
 8015460:	9509      	str	r5, [sp, #36]	; 0x24
 8015462:	250b      	movs	r5, #11
 8015464:	b2a4      	uxth	r4, r4
 8015466:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801546a:	b2b6      	uxth	r6, r6
 801546c:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8015470:	f8bb 5000 	ldrh.w	r5, [fp]
 8015474:	f8cd 9010 	str.w	r9, [sp, #16]
 8015478:	9602      	str	r6, [sp, #8]
 801547a:	9401      	str	r4, [sp, #4]
 801547c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8015480:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8015484:	9203      	str	r2, [sp, #12]
 8015486:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801548a:	9200      	str	r2, [sp, #0]
 801548c:	4642      	mov	r2, r8
 801548e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8015490:	4639      	mov	r1, r7
 8015492:	47a0      	blx	r4
 8015494:	b011      	add	sp, #68	; 0x44
 8015496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801549a:	6803      	ldr	r3, [r0, #0]
 801549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801549e:	4798      	blx	r3
 80154a0:	f8bb 5000 	ldrh.w	r5, [fp]
 80154a4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80154a8:	f04f 0e04 	mov.w	lr, #4
 80154ac:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80154b0:	436e      	muls	r6, r5
 80154b2:	fb05 2303 	mla	r3, r5, r3, r2
 80154b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80154ba:	1b2d      	subs	r5, r5, r4
 80154bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80154c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154c4:	4418      	add	r0, r3
 80154c6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80154ca:	1982      	adds	r2, r0, r6
 80154cc:	1b1b      	subs	r3, r3, r4
 80154ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80154d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80154d4:	4290      	cmp	r0, r2
 80154d6:	d254      	bcs.n	8015582 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 80154d8:	eb00 0a04 	add.w	sl, r0, r4
 80154dc:	4550      	cmp	r0, sl
 80154de:	d24c      	bcs.n	801557a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 80154e0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80154e4:	fb1e e101 	smlabb	r1, lr, r1, lr
 80154e8:	eb08 0c01 	add.w	ip, r8, r1
 80154ec:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80154f0:	b173      	cbz	r3, 8015510 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80154f2:	2bff      	cmp	r3, #255	; 0xff
 80154f4:	f818 b001 	ldrb.w	fp, [r8, r1]
 80154f8:	d10c      	bne.n	8015514 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80154fa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80154fe:	d109      	bne.n	8015514 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8015500:	f880 b000 	strb.w	fp, [r0]
 8015504:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8015508:	7043      	strb	r3, [r0, #1]
 801550a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801550e:	7083      	strb	r3, [r0, #2]
 8015510:	3003      	adds	r0, #3
 8015512:	e7e3      	b.n	80154dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8015514:	fb09 f103 	mul.w	r1, r9, r3
 8015518:	1c4b      	adds	r3, r1, #1
 801551a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801551e:	7801      	ldrb	r1, [r0, #0]
 8015520:	121b      	asrs	r3, r3, #8
 8015522:	b29e      	uxth	r6, r3
 8015524:	43db      	mvns	r3, r3
 8015526:	fb1b fb06 	smulbb	fp, fp, r6
 801552a:	b2db      	uxtb	r3, r3
 801552c:	fb01 b103 	mla	r1, r1, r3, fp
 8015530:	b289      	uxth	r1, r1
 8015532:	f101 0b01 	add.w	fp, r1, #1
 8015536:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801553a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801553e:	fb1b fb03 	smulbb	fp, fp, r3
 8015542:	1209      	asrs	r1, r1, #8
 8015544:	7001      	strb	r1, [r0, #0]
 8015546:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801554a:	fb01 b106 	mla	r1, r1, r6, fp
 801554e:	b289      	uxth	r1, r1
 8015550:	f101 0b01 	add.w	fp, r1, #1
 8015554:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8015558:	1209      	asrs	r1, r1, #8
 801555a:	7041      	strb	r1, [r0, #1]
 801555c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8015560:	f890 c002 	ldrb.w	ip, [r0, #2]
 8015564:	fb1c f303 	smulbb	r3, ip, r3
 8015568:	fb01 3606 	mla	r6, r1, r6, r3
 801556c:	b2b6      	uxth	r6, r6
 801556e:	1c73      	adds	r3, r6, #1
 8015570:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8015574:	1236      	asrs	r6, r6, #8
 8015576:	7086      	strb	r6, [r0, #2]
 8015578:	e7ca      	b.n	8015510 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801557a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801557c:	4428      	add	r0, r5
 801557e:	441f      	add	r7, r3
 8015580:	e7a8      	b.n	80154d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8015582:	4b06      	ldr	r3, [pc, #24]	; (801559c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8015584:	6818      	ldr	r0, [r3, #0]
 8015586:	6803      	ldr	r3, [r0, #0]
 8015588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801558a:	4798      	blx	r3
 801558c:	e782      	b.n	8015494 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801558e:	bf00      	nop
 8015590:	08021152 	.word	0x08021152
 8015594:	080217e7 	.word	0x080217e7
 8015598:	080211ee 	.word	0x080211ee
 801559c:	240c3d44 	.word	0x240c3d44
 80155a0:	240c3d3c 	.word	0x240c3d3c

080155a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80155a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155a8:	f8b1 9000 	ldrh.w	r9, [r1]
 80155ac:	b091      	sub	sp, #68	; 0x44
 80155ae:	4604      	mov	r4, r0
 80155b0:	460e      	mov	r6, r1
 80155b2:	f1b9 0f01 	cmp.w	r9, #1
 80155b6:	4690      	mov	r8, r2
 80155b8:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80155bc:	d005      	beq.n	80155ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 80155be:	4b69      	ldr	r3, [pc, #420]	; (8015764 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80155c0:	21ac      	movs	r1, #172	; 0xac
 80155c2:	4a69      	ldr	r2, [pc, #420]	; (8015768 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80155c4:	4869      	ldr	r0, [pc, #420]	; (801576c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80155c6:	f007 fbc9 	bl	801cd5c <__assert_func>
 80155ca:	6810      	ldr	r0, [r2, #0]
 80155cc:	ad0c      	add	r5, sp, #48	; 0x30
 80155ce:	6851      	ldr	r1, [r2, #4]
 80155d0:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8015770 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80155d4:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8015774 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80155d8:	c503      	stmia	r5!, {r0, r1}
 80155da:	6818      	ldr	r0, [r3, #0]
 80155dc:	ad0e      	add	r5, sp, #56	; 0x38
 80155de:	6859      	ldr	r1, [r3, #4]
 80155e0:	c503      	stmia	r5!, {r0, r1}
 80155e2:	a80c      	add	r0, sp, #48	; 0x30
 80155e4:	f7fa fd46 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80155e8:	4641      	mov	r1, r8
 80155ea:	a80e      	add	r0, sp, #56	; 0x38
 80155ec:	f7fa fd6a 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80155f0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80155f4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80155f8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80155fc:	f8da 0000 	ldr.w	r0, [sl]
 8015600:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015604:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8015608:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801560c:	440c      	add	r4, r1
 801560e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015612:	440a      	add	r2, r1
 8015614:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015618:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801561c:	4413      	add	r3, r2
 801561e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015622:	6803      	ldr	r3, [r0, #0]
 8015624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015626:	4798      	blx	r3
 8015628:	f010 0f80 	tst.w	r0, #128	; 0x80
 801562c:	f8da 0000 	ldr.w	r0, [sl]
 8015630:	d020      	beq.n	8015674 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8015632:	2200      	movs	r2, #0
 8015634:	f04f 0c0b 	mov.w	ip, #11
 8015638:	6801      	ldr	r1, [r0, #0]
 801563a:	b2ad      	uxth	r5, r5
 801563c:	f8cd c01c 	str.w	ip, [sp, #28]
 8015640:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015644:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8015648:	f8bb c000 	ldrh.w	ip, [fp]
 801564c:	9704      	str	r7, [sp, #16]
 801564e:	9502      	str	r5, [sp, #8]
 8015650:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8015654:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8015658:	9203      	str	r2, [sp, #12]
 801565a:	fa1f f288 	uxth.w	r2, r8
 801565e:	9201      	str	r2, [sp, #4]
 8015660:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015664:	9200      	str	r2, [sp, #0]
 8015666:	4632      	mov	r2, r6
 8015668:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801566a:	4621      	mov	r1, r4
 801566c:	47a8      	blx	r5
 801566e:	b011      	add	sp, #68	; 0x44
 8015670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015674:	6803      	ldr	r3, [r0, #0]
 8015676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015678:	4798      	blx	r3
 801567a:	f8bb 2000 	ldrh.w	r2, [fp]
 801567e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015682:	f04f 0e03 	mov.w	lr, #3
 8015686:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801568a:	4355      	muls	r5, r2
 801568c:	fa1f fc87 	uxth.w	ip, r7
 8015690:	fb02 1303 	mla	r3, r2, r3, r1
 8015694:	eba2 0208 	sub.w	r2, r2, r8
 8015698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801569c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80156a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80156a4:	4418      	add	r0, r3
 80156a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80156a8:	1943      	adds	r3, r0, r5
 80156aa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80156ae:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80156b2:	eba2 0208 	sub.w	r2, r2, r8
 80156b6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80156ba:	b2ad      	uxth	r5, r5
 80156bc:	4298      	cmp	r0, r3
 80156be:	d24a      	bcs.n	8015756 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80156c0:	eb00 0908 	add.w	r9, r0, r8
 80156c4:	4621      	mov	r1, r4
 80156c6:	4548      	cmp	r0, r9
 80156c8:	460c      	mov	r4, r1
 80156ca:	d240      	bcs.n	801574e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80156cc:	f04f 0a04 	mov.w	sl, #4
 80156d0:	7824      	ldrb	r4, [r4, #0]
 80156d2:	2fff      	cmp	r7, #255	; 0xff
 80156d4:	f101 0101 	add.w	r1, r1, #1
 80156d8:	fb1e a404 	smlabb	r4, lr, r4, sl
 80156dc:	eb06 0a04 	add.w	sl, r6, r4
 80156e0:	f816 b004 	ldrb.w	fp, [r6, r4]
 80156e4:	d02b      	beq.n	801573e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80156e6:	7804      	ldrb	r4, [r0, #0]
 80156e8:	fb14 f405 	smulbb	r4, r4, r5
 80156ec:	fb0b 440c 	mla	r4, fp, ip, r4
 80156f0:	b2a4      	uxth	r4, r4
 80156f2:	f104 0b01 	add.w	fp, r4, #1
 80156f6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80156fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 80156fe:	fb1b fb05 	smulbb	fp, fp, r5
 8015702:	1224      	asrs	r4, r4, #8
 8015704:	7004      	strb	r4, [r0, #0]
 8015706:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801570a:	fb04 b40c 	mla	r4, r4, ip, fp
 801570e:	b2a4      	uxth	r4, r4
 8015710:	f104 0b01 	add.w	fp, r4, #1
 8015714:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015718:	1224      	asrs	r4, r4, #8
 801571a:	7044      	strb	r4, [r0, #1]
 801571c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015720:	f890 a002 	ldrb.w	sl, [r0, #2]
 8015724:	fb1a fa05 	smulbb	sl, sl, r5
 8015728:	fb04 a40c 	mla	r4, r4, ip, sl
 801572c:	b2a4      	uxth	r4, r4
 801572e:	f104 0a01 	add.w	sl, r4, #1
 8015732:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8015736:	1224      	asrs	r4, r4, #8
 8015738:	7084      	strb	r4, [r0, #2]
 801573a:	3003      	adds	r0, #3
 801573c:	e7c3      	b.n	80156c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 801573e:	f880 b000 	strb.w	fp, [r0]
 8015742:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015746:	7044      	strb	r4, [r0, #1]
 8015748:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801574c:	e7f4      	b.n	8015738 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 801574e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015750:	4420      	add	r0, r4
 8015752:	188c      	adds	r4, r1, r2
 8015754:	e7b2      	b.n	80156bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8015756:	4b06      	ldr	r3, [pc, #24]	; (8015770 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8015758:	6818      	ldr	r0, [r3, #0]
 801575a:	6803      	ldr	r3, [r0, #0]
 801575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801575e:	4798      	blx	r3
 8015760:	e785      	b.n	801566e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8015762:	bf00      	nop
 8015764:	080210d1 	.word	0x080210d1
 8015768:	080216da 	.word	0x080216da
 801576c:	080211ee 	.word	0x080211ee
 8015770:	240c3d44 	.word	0x240c3d44
 8015774:	240c3d3c 	.word	0x240c3d3c

08015778 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015778:	b570      	push	{r4, r5, r6, lr}
 801577a:	780d      	ldrb	r5, [r1, #0]
 801577c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8015780:	2d01      	cmp	r5, #1
 8015782:	d00d      	beq.n	80157a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8015784:	d307      	bcc.n	8015796 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8015786:	2d02      	cmp	r5, #2
 8015788:	d10f      	bne.n	80157aa <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801578a:	4b08      	ldr	r3, [pc, #32]	; (80157ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801578c:	2151      	movs	r1, #81	; 0x51
 801578e:	4a08      	ldr	r2, [pc, #32]	; (80157b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8015790:	4808      	ldr	r0, [pc, #32]	; (80157b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8015792:	f007 fae3 	bl	801cd5c <__assert_func>
 8015796:	9404      	str	r4, [sp, #16]
 8015798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801579c:	f7ff be1a 	b.w	80153d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80157a0:	9404      	str	r4, [sp, #16]
 80157a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157a6:	f7ff befd 	b.w	80155a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80157aa:	bd70      	pop	{r4, r5, r6, pc}
 80157ac:	08021086 	.word	0x08021086
 80157b0:	08021658 	.word	0x08021658
 80157b4:	080211ee 	.word	0x080211ee

080157b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80157b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157bc:	4605      	mov	r5, r0
 80157be:	b08f      	sub	sp, #60	; 0x3c
 80157c0:	460c      	mov	r4, r1
 80157c2:	461f      	mov	r7, r3
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d052      	beq.n	801586e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80157c8:	6808      	ldr	r0, [r1, #0]
 80157ca:	ab0a      	add	r3, sp, #40	; 0x28
 80157cc:	6849      	ldr	r1, [r1, #4]
 80157ce:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8015998 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80157d2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801599c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80157d6:	c303      	stmia	r3!, {r0, r1}
 80157d8:	6810      	ldr	r0, [r2, #0]
 80157da:	ab0c      	add	r3, sp, #48	; 0x30
 80157dc:	6851      	ldr	r1, [r2, #4]
 80157de:	c303      	stmia	r3!, {r0, r1}
 80157e0:	a80a      	add	r0, sp, #40	; 0x28
 80157e2:	f7fa fc47 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80157e6:	4621      	mov	r1, r4
 80157e8:	a80c      	add	r0, sp, #48	; 0x30
 80157ea:	f7fa fc6b 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80157ee:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80157f2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80157f6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80157fa:	f8d8 0000 	ldr.w	r0, [r8]
 80157fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015802:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8015806:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801580a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801580e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8015812:	440a      	add	r2, r1
 8015814:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8015818:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801581c:	4413      	add	r3, r2
 801581e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015822:	6803      	ldr	r3, [r0, #0]
 8015824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015826:	4798      	blx	r3
 8015828:	2fff      	cmp	r7, #255	; 0xff
 801582a:	d023      	beq.n	8015874 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801582c:	f010 0f04 	tst.w	r0, #4
 8015830:	f8d8 0000 	ldr.w	r0, [r8]
 8015834:	d021      	beq.n	801587a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8015836:	2100      	movs	r1, #0
 8015838:	f04f 0e01 	mov.w	lr, #1
 801583c:	f8d0 c000 	ldr.w	ip, [r0]
 8015840:	b2a4      	uxth	r4, r4
 8015842:	9106      	str	r1, [sp, #24]
 8015844:	b2b6      	uxth	r6, r6
 8015846:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801584a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801584e:	e9cd e107 	strd	lr, r1, [sp, #28]
 8015852:	f8b9 e000 	ldrh.w	lr, [r9]
 8015856:	9703      	str	r7, [sp, #12]
 8015858:	9401      	str	r4, [sp, #4]
 801585a:	9600      	str	r6, [sp, #0]
 801585c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8015860:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015864:	9102      	str	r1, [sp, #8]
 8015866:	4629      	mov	r1, r5
 8015868:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801586c:	47a0      	blx	r4
 801586e:	b00f      	add	sp, #60	; 0x3c
 8015870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015874:	f010 0f01 	tst.w	r0, #1
 8015878:	e7da      	b.n	8015830 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801587a:	6803      	ldr	r3, [r0, #0]
 801587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801587e:	4798      	blx	r3
 8015880:	f8b9 1000 	ldrh.w	r1, [r9]
 8015884:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015888:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801588c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8015890:	434c      	muls	r4, r1
 8015892:	2fff      	cmp	r7, #255	; 0xff
 8015894:	fb01 2303 	mla	r3, r1, r3, r2
 8015898:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801589c:	eba1 0106 	sub.w	r1, r1, r6
 80158a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80158a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158a8:	4418      	add	r0, r3
 80158aa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80158ae:	eba3 0606 	sub.w	r6, r3, r6
 80158b2:	4404      	add	r4, r0
 80158b4:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80158b8:	d04a      	beq.n	8015950 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80158ba:	43fa      	mvns	r2, r7
 80158bc:	b2bb      	uxth	r3, r7
 80158be:	b2d7      	uxtb	r7, r2
 80158c0:	42a0      	cmp	r0, r4
 80158c2:	d263      	bcs.n	801598c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80158c4:	eb00 0e0c 	add.w	lr, r0, ip
 80158c8:	4586      	cmp	lr, r0
 80158ca:	f100 0803 	add.w	r8, r0, #3
 80158ce:	d93a      	bls.n	8015946 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80158d0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80158d4:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80158d8:	00d0      	lsls	r0, r2, #3
 80158da:	fb19 f907 	smulbb	r9, r9, r7
 80158de:	b2c0      	uxtb	r0, r0
 80158e0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80158e4:	fb00 9003 	mla	r0, r0, r3, r9
 80158e8:	b280      	uxth	r0, r0
 80158ea:	f100 0901 	add.w	r9, r0, #1
 80158ee:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80158f2:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80158f6:	fb19 f907 	smulbb	r9, r9, r7
 80158fa:	1200      	asrs	r0, r0, #8
 80158fc:	f808 0c03 	strb.w	r0, [r8, #-3]
 8015900:	10d0      	asrs	r0, r2, #3
 8015902:	1212      	asrs	r2, r2, #8
 8015904:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015908:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801590c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8015910:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8015914:	fb00 9003 	mla	r0, r0, r3, r9
 8015918:	b280      	uxth	r0, r0
 801591a:	f100 0901 	add.w	r9, r0, #1
 801591e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8015922:	1200      	asrs	r0, r0, #8
 8015924:	f808 0c02 	strb.w	r0, [r8, #-2]
 8015928:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801592c:	fb10 f007 	smulbb	r0, r0, r7
 8015930:	fb02 0203 	mla	r2, r2, r3, r0
 8015934:	b292      	uxth	r2, r2
 8015936:	1c50      	adds	r0, r2, #1
 8015938:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801593c:	4640      	mov	r0, r8
 801593e:	1212      	asrs	r2, r2, #8
 8015940:	f808 2c01 	strb.w	r2, [r8, #-1]
 8015944:	e7c0      	b.n	80158c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8015946:	4408      	add	r0, r1
 8015948:	4435      	add	r5, r6
 801594a:	e7b9      	b.n	80158c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801594c:	4408      	add	r0, r1
 801594e:	4435      	add	r5, r6
 8015950:	42a0      	cmp	r0, r4
 8015952:	d21b      	bcs.n	801598c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8015954:	eb00 070c 	add.w	r7, r0, ip
 8015958:	42b8      	cmp	r0, r7
 801595a:	d2f7      	bcs.n	801594c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801595c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8015960:	3003      	adds	r0, #3
 8015962:	00da      	lsls	r2, r3, #3
 8015964:	b2d2      	uxtb	r2, r2
 8015966:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801596a:	f800 2c03 	strb.w	r2, [r0, #-3]
 801596e:	10da      	asrs	r2, r3, #3
 8015970:	121b      	asrs	r3, r3, #8
 8015972:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8015976:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801597a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801597e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8015982:	f800 2c02 	strb.w	r2, [r0, #-2]
 8015986:	f800 3c01 	strb.w	r3, [r0, #-1]
 801598a:	e7e5      	b.n	8015958 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801598c:	4b02      	ldr	r3, [pc, #8]	; (8015998 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801598e:	6818      	ldr	r0, [r3, #0]
 8015990:	6803      	ldr	r3, [r0, #0]
 8015992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015994:	4798      	blx	r3
 8015996:	e76a      	b.n	801586e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8015998:	240c3d44 	.word	0x240c3d44
 801599c:	240c3d3c 	.word	0x240c3d3c

080159a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80159a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159a4:	b08a      	sub	sp, #40	; 0x28
 80159a6:	460d      	mov	r5, r1
 80159a8:	4604      	mov	r4, r0
 80159aa:	461e      	mov	r6, r3
 80159ac:	6808      	ldr	r0, [r1, #0]
 80159ae:	ab06      	add	r3, sp, #24
 80159b0:	6849      	ldr	r1, [r1, #4]
 80159b2:	4f5d      	ldr	r7, [pc, #372]	; (8015b28 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80159b4:	c303      	stmia	r3!, {r0, r1}
 80159b6:	6810      	ldr	r0, [r2, #0]
 80159b8:	ab08      	add	r3, sp, #32
 80159ba:	6851      	ldr	r1, [r2, #4]
 80159bc:	c303      	stmia	r3!, {r0, r1}
 80159be:	a806      	add	r0, sp, #24
 80159c0:	f7fa fb58 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80159c4:	4629      	mov	r1, r5
 80159c6:	a808      	add	r0, sp, #32
 80159c8:	f7fa fb7c 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80159cc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80159d0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80159d4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80159d8:	6838      	ldr	r0, [r7, #0]
 80159da:	fb11 2103 	smlabb	r1, r1, r3, r2
 80159de:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80159e2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80159e6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80159ea:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80159ee:	440a      	add	r2, r1
 80159f0:	f8ad 2020 	strh.w	r2, [sp, #32]
 80159f4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80159f8:	4413      	add	r3, r2
 80159fa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80159fe:	6803      	ldr	r3, [r0, #0]
 8015a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a02:	4798      	blx	r3
 8015a04:	2eff      	cmp	r6, #255	; 0xff
 8015a06:	d119      	bne.n	8015a3c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8015a08:	f010 0f20 	tst.w	r0, #32
 8015a0c:	6838      	ldr	r0, [r7, #0]
 8015a0e:	d018      	beq.n	8015a42 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8015a10:	b2ad      	uxth	r5, r5
 8015a12:	2700      	movs	r7, #0
 8015a14:	6801      	ldr	r1, [r0, #0]
 8015a16:	9501      	str	r5, [sp, #4]
 8015a18:	fa1f f588 	uxth.w	r5, r8
 8015a1c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015a20:	9500      	str	r5, [sp, #0]
 8015a22:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015a26:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8015a2a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8015a2e:	9602      	str	r6, [sp, #8]
 8015a30:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8015a32:	4621      	mov	r1, r4
 8015a34:	47a8      	blx	r5
 8015a36:	b00a      	add	sp, #40	; 0x28
 8015a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a40:	e7e4      	b.n	8015a0c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8015a42:	6803      	ldr	r3, [r0, #0]
 8015a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a46:	4798      	blx	r3
 8015a48:	4b38      	ldr	r3, [pc, #224]	; (8015b2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8015a4a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015a4e:	f8b3 c000 	ldrh.w	ip, [r3]
 8015a52:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015a56:	fb0c f505 	mul.w	r5, ip, r5
 8015a5a:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8015a5e:	fb0c 2303 	mla	r3, ip, r3, r2
 8015a62:	ebac 0c08 	sub.w	ip, ip, r8
 8015a66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a6a:	ebae 0e08 	sub.w	lr, lr, r8
 8015a6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015a72:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015a76:	4418      	add	r0, r3
 8015a78:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8015a7c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8015a80:	4405      	add	r5, r0
 8015a82:	42a8      	cmp	r0, r5
 8015a84:	d24a      	bcs.n	8015b1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8015a86:	eb00 0803 	add.w	r8, r0, r3
 8015a8a:	4540      	cmp	r0, r8
 8015a8c:	d243      	bcs.n	8015b16 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8015a8e:	78e2      	ldrb	r2, [r4, #3]
 8015a90:	b15a      	cbz	r2, 8015aaa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8015a92:	2aff      	cmp	r2, #255	; 0xff
 8015a94:	f894 9000 	ldrb.w	r9, [r4]
 8015a98:	d10a      	bne.n	8015ab0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8015a9a:	2eff      	cmp	r6, #255	; 0xff
 8015a9c:	d108      	bne.n	8015ab0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8015a9e:	f880 9000 	strb.w	r9, [r0]
 8015aa2:	7862      	ldrb	r2, [r4, #1]
 8015aa4:	7042      	strb	r2, [r0, #1]
 8015aa6:	78a2      	ldrb	r2, [r4, #2]
 8015aa8:	7082      	strb	r2, [r0, #2]
 8015aaa:	3003      	adds	r0, #3
 8015aac:	3404      	adds	r4, #4
 8015aae:	e7ec      	b.n	8015a8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8015ab0:	4372      	muls	r2, r6
 8015ab2:	1c51      	adds	r1, r2, #1
 8015ab4:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8015ab8:	1209      	asrs	r1, r1, #8
 8015aba:	fa1f fa81 	uxth.w	sl, r1
 8015abe:	43c9      	mvns	r1, r1
 8015ac0:	fb19 f90a 	smulbb	r9, r9, sl
 8015ac4:	b2ca      	uxtb	r2, r1
 8015ac6:	7801      	ldrb	r1, [r0, #0]
 8015ac8:	fb01 9902 	mla	r9, r1, r2, r9
 8015acc:	fa1f f989 	uxth.w	r9, r9
 8015ad0:	f109 0101 	add.w	r1, r9, #1
 8015ad4:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8015ad8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015adc:	f880 9000 	strb.w	r9, [r0]
 8015ae0:	f890 9001 	ldrb.w	r9, [r0, #1]
 8015ae4:	7861      	ldrb	r1, [r4, #1]
 8015ae6:	fb19 f902 	smulbb	r9, r9, r2
 8015aea:	fb01 910a 	mla	r1, r1, sl, r9
 8015aee:	b289      	uxth	r1, r1
 8015af0:	f101 0901 	add.w	r9, r1, #1
 8015af4:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8015af8:	1209      	asrs	r1, r1, #8
 8015afa:	7041      	strb	r1, [r0, #1]
 8015afc:	7881      	ldrb	r1, [r0, #2]
 8015afe:	f894 9002 	ldrb.w	r9, [r4, #2]
 8015b02:	fb11 f202 	smulbb	r2, r1, r2
 8015b06:	fb09 220a 	mla	r2, r9, sl, r2
 8015b0a:	b292      	uxth	r2, r2
 8015b0c:	1c51      	adds	r1, r2, #1
 8015b0e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015b12:	1212      	asrs	r2, r2, #8
 8015b14:	e7c8      	b.n	8015aa8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8015b16:	4460      	add	r0, ip
 8015b18:	4474      	add	r4, lr
 8015b1a:	e7b2      	b.n	8015a82 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8015b1c:	6838      	ldr	r0, [r7, #0]
 8015b1e:	6803      	ldr	r3, [r0, #0]
 8015b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b22:	4798      	blx	r3
 8015b24:	e787      	b.n	8015a36 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8015b26:	bf00      	nop
 8015b28:	240c3d44 	.word	0x240c3d44
 8015b2c:	240c3d3c 	.word	0x240c3d3c

08015b30 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8015b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b34:	b085      	sub	sp, #20
 8015b36:	4606      	mov	r6, r0
 8015b38:	460c      	mov	r4, r1
 8015b3a:	4691      	mov	r9, r2
 8015b3c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8015b40:	4698      	mov	r8, r3
 8015b42:	b31d      	cbz	r5, 8015b8c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015b44:	4608      	mov	r0, r1
 8015b46:	f7fd f9d3 	bl	8012ef0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015b4a:	4607      	mov	r7, r0
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	f7fd fa13 	bl	8012f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015b52:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015b56:	4620      	mov	r0, r4
 8015b58:	f8ad 9008 	strh.w	r9, [sp, #8]
 8015b5c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8015b60:	f8ad 700c 	strh.w	r7, [sp, #12]
 8015b64:	f7fd fad6 	bl	8013114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015b68:	280b      	cmp	r0, #11
 8015b6a:	d838      	bhi.n	8015bde <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8015b6c:	e8df f000 	tbb	[pc, r0]
 8015b70:	37062920 	.word	0x37062920
 8015b74:	37373737 	.word	0x37373737
 8015b78:	11373737 	.word	0x11373737
 8015b7c:	4620      	mov	r0, r4
 8015b7e:	f7fd fa3f 	bl	8013000 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015b82:	462b      	mov	r3, r5
 8015b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b86:	a902      	add	r1, sp, #8
 8015b88:	f7ff ff0a 	bl	80159a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8015b8c:	b005      	add	sp, #20
 8015b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b92:	4620      	mov	r0, r4
 8015b94:	f7fd fa34 	bl	8013000 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015b98:	4606      	mov	r6, r0
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	f7fd fa62 	bl	8013064 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8015ba0:	9500      	str	r5, [sp, #0]
 8015ba2:	4601      	mov	r1, r0
 8015ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ba6:	aa02      	add	r2, sp, #8
 8015ba8:	4630      	mov	r0, r6
 8015baa:	f7ff fde5 	bl	8015778 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8015bae:	e7ed      	b.n	8015b8c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	f7fd fa25 	bl	8013000 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015bb6:	462b      	mov	r3, r5
 8015bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015bba:	a902      	add	r1, sp, #8
 8015bbc:	f7ff fdfc 	bl	80157b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8015bc0:	e7e4      	b.n	8015b8c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015bc2:	6833      	ldr	r3, [r6, #0]
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	68df      	ldr	r7, [r3, #12]
 8015bc8:	f7fd fa1a 	bl	8013000 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015bcc:	2300      	movs	r3, #0
 8015bce:	4601      	mov	r1, r0
 8015bd0:	aa02      	add	r2, sp, #8
 8015bd2:	4630      	mov	r0, r6
 8015bd4:	e9cd 5300 	strd	r5, r3, [sp]
 8015bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bda:	47b8      	blx	r7
 8015bdc:	e7d6      	b.n	8015b8c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015bde:	4b03      	ldr	r3, [pc, #12]	; (8015bec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 8015be0:	2145      	movs	r1, #69	; 0x45
 8015be2:	4a03      	ldr	r2, [pc, #12]	; (8015bf0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8015be4:	4803      	ldr	r0, [pc, #12]	; (8015bf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8015be6:	f007 f8b9 	bl	801cd5c <__assert_func>
 8015bea:	bf00      	nop
 8015bec:	0802111f 	.word	0x0802111f
 8015bf0:	08021763 	.word	0x08021763
 8015bf4:	080211ee 	.word	0x080211ee

08015bf8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8015bf8:	b570      	push	{r4, r5, r6, lr}
 8015bfa:	9c04      	ldr	r4, [sp, #16]
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	4608      	mov	r0, r1
 8015c00:	4619      	mov	r1, r3
 8015c02:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015c06:	2a0d      	cmp	r2, #13
 8015c08:	d826      	bhi.n	8015c58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8015c0a:	e8df f002 	tbb	[pc, r2]
 8015c0e:	1107      	.short	0x1107
 8015c10:	1e1e1e0c 	.word	0x1e1e1e0c
 8015c14:	1e1e1e1e 	.word	0x1e1e1e1e
 8015c18:	1e1e1e1e 	.word	0x1e1e1e1e
 8015c1c:	4622      	mov	r2, r4
 8015c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c22:	f7ff bdc9 	b.w	80157b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8015c26:	4622      	mov	r2, r4
 8015c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c2c:	f7ff beb8 	b.w	80159a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8015c30:	682a      	ldr	r2, [r5, #0]
 8015c32:	2600      	movs	r6, #0
 8015c34:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8015c38:	68d6      	ldr	r6, [r2, #12]
 8015c3a:	4623      	mov	r3, r4
 8015c3c:	460a      	mov	r2, r1
 8015c3e:	4601      	mov	r1, r0
 8015c40:	46b4      	mov	ip, r6
 8015c42:	4628      	mov	r0, r5
 8015c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c48:	4760      	bx	ip
 8015c4a:	4b04      	ldr	r3, [pc, #16]	; (8015c5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8015c4c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8015c50:	4a03      	ldr	r2, [pc, #12]	; (8015c60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8015c52:	4804      	ldr	r0, [pc, #16]	; (8015c64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8015c54:	f007 f882 	bl	801cd5c <__assert_func>
 8015c58:	bd70      	pop	{r4, r5, r6, pc}
 8015c5a:	bf00      	nop
 8015c5c:	080213b3 	.word	0x080213b3
 8015c60:	08021ade 	.word	0x08021ade
 8015c64:	080211ee 	.word	0x080211ee

08015c68 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8015c68:	b158      	cbz	r0, 8015c82 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8015c6a:	2902      	cmp	r1, #2
 8015c6c:	d00f      	beq.n	8015c8e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8015c6e:	2903      	cmp	r1, #3
 8015c70:	d010      	beq.n	8015c94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8015c72:	2901      	cmp	r1, #1
 8015c74:	d101      	bne.n	8015c7a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015c76:	2001      	movs	r0, #1
 8015c78:	4770      	bx	lr
 8015c7a:	4b08      	ldr	r3, [pc, #32]	; (8015c9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8015c7c:	8819      	ldrh	r1, [r3, #0]
 8015c7e:	4248      	negs	r0, r1
 8015c80:	4770      	bx	lr
 8015c82:	2902      	cmp	r1, #2
 8015c84:	d006      	beq.n	8015c94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8015c86:	2903      	cmp	r1, #3
 8015c88:	d0f7      	beq.n	8015c7a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015c8a:	2901      	cmp	r1, #1
 8015c8c:	d1f3      	bne.n	8015c76 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8015c8e:	4b03      	ldr	r3, [pc, #12]	; (8015c9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8015c90:	8818      	ldrh	r0, [r3, #0]
 8015c92:	4770      	bx	lr
 8015c94:	f04f 30ff 	mov.w	r0, #4294967295
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop
 8015c9c:	240c3d3c 	.word	0x240c3d3c

08015ca0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8015ca0:	b170      	cbz	r0, 8015cc0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8015ca2:	2902      	cmp	r1, #2
 8015ca4:	d012      	beq.n	8015ccc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8015ca6:	2903      	cmp	r1, #3
 8015ca8:	d006      	beq.n	8015cb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8015caa:	2901      	cmp	r1, #1
 8015cac:	d001      	beq.n	8015cb2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8015cae:	2001      	movs	r0, #1
 8015cb0:	4770      	bx	lr
 8015cb2:	4b08      	ldr	r3, [pc, #32]	; (8015cd4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8015cb4:	8818      	ldrh	r0, [r3, #0]
 8015cb6:	4770      	bx	lr
 8015cb8:	4b06      	ldr	r3, [pc, #24]	; (8015cd4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8015cba:	8818      	ldrh	r0, [r3, #0]
 8015cbc:	4240      	negs	r0, r0
 8015cbe:	4770      	bx	lr
 8015cc0:	2902      	cmp	r1, #2
 8015cc2:	d0f9      	beq.n	8015cb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8015cc4:	2903      	cmp	r1, #3
 8015cc6:	d0f2      	beq.n	8015cae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8015cc8:	2901      	cmp	r1, #1
 8015cca:	d1f2      	bne.n	8015cb2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8015ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8015cd0:	4770      	bx	lr
 8015cd2:	bf00      	nop
 8015cd4:	240c3d3c 	.word	0x240c3d3c

08015cd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8015cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cdc:	b097      	sub	sp, #92	; 0x5c
 8015cde:	910b      	str	r1, [sp, #44]	; 0x2c
 8015ce0:	a912      	add	r1, sp, #72	; 0x48
 8015ce2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8015ce6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8015cea:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8015cee:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8015cf2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8015cf6:	e881 000c 	stmia.w	r1, {r2, r3}
 8015cfa:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8015cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8015d00:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8015d04:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8015d08:	9311      	str	r3, [sp, #68]	; 0x44
 8015d0a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8015d0e:	798d      	ldrb	r5, [r1, #6]
 8015d10:	930c      	str	r3, [sp, #48]	; 0x30
 8015d12:	7b4b      	ldrb	r3, [r1, #13]
 8015d14:	0158      	lsls	r0, r3, #5
 8015d16:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015d1a:	4328      	orrs	r0, r5
 8015d1c:	9009      	str	r0, [sp, #36]	; 0x24
 8015d1e:	f000 817d 	beq.w	801601c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8015d22:	011b      	lsls	r3, r3, #4
 8015d24:	79c8      	ldrb	r0, [r1, #7]
 8015d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d2a:	4303      	orrs	r3, r0
 8015d2c:	930e      	str	r3, [sp, #56]	; 0x38
 8015d2e:	f000 8175 	beq.w	801601c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8015d32:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8015d36:	b29b      	uxth	r3, r3
 8015d38:	2f00      	cmp	r7, #0
 8015d3a:	f000 8117 	beq.w	8015f6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 8015d3e:	1aff      	subs	r7, r7, r3
 8015d40:	b2bf      	uxth	r7, r7
 8015d42:	043b      	lsls	r3, r7, #16
 8015d44:	d502      	bpl.n	8015d4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8015d46:	1bf6      	subs	r6, r6, r7
 8015d48:	2700      	movs	r7, #0
 8015d4a:	b236      	sxth	r6, r6
 8015d4c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015d50:	a812      	add	r0, sp, #72	; 0x48
 8015d52:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8015d56:	428e      	cmp	r6, r1
 8015d58:	b28b      	uxth	r3, r1
 8015d5a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8015d5e:	bfbf      	itttt	lt
 8015d60:	18ff      	addlt	r7, r7, r3
 8015d62:	1bbe      	sublt	r6, r7, r6
 8015d64:	b2b7      	uxthlt	r7, r6
 8015d66:	460e      	movlt	r6, r1
 8015d68:	8891      	ldrh	r1, [r2, #4]
 8015d6a:	440b      	add	r3, r1
 8015d6c:	4631      	mov	r1, r6
 8015d6e:	b21b      	sxth	r3, r3
 8015d70:	9310      	str	r3, [sp, #64]	; 0x40
 8015d72:	88d3      	ldrh	r3, [r2, #6]
 8015d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d76:	449a      	add	sl, r3
 8015d78:	fa0f f38a 	sxth.w	r3, sl
 8015d7c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8015d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d82:	4bb6      	ldr	r3, [pc, #728]	; (801605c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8015d84:	f893 b000 	ldrb.w	fp, [r3]
 8015d88:	f10b 3cff 	add.w	ip, fp, #4294967295
 8015d8c:	f1dc 0300 	rsbs	r3, ip, #0
 8015d90:	eb43 030c 	adc.w	r3, r3, ip
 8015d94:	930d      	str	r3, [sp, #52]	; 0x34
 8015d96:	464b      	mov	r3, r9
 8015d98:	f7f9 fff0 	bl	800fd7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8015d9c:	4631      	mov	r1, r6
 8015d9e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8015da2:	464b      	mov	r3, r9
 8015da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015da6:	a812      	add	r0, sp, #72	; 0x48
 8015da8:	f7fa f800 	bl	800fdac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8015dac:	a916      	add	r1, sp, #88	; 0x58
 8015dae:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8015db2:	a815      	add	r0, sp, #84	; 0x54
 8015db4:	f7fa f91c 	bl	800fff0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8015db8:	f1b9 0f00 	cmp.w	r9, #0
 8015dbc:	f040 80d9 	bne.w	8015f72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 8015dc0:	f1bb 0f01 	cmp.w	fp, #1
 8015dc4:	f040 80dd 	bne.w	8015f82 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8015dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015dca:	b153      	cbz	r3, 8015de2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8015dcc:	2508      	movs	r5, #8
 8015dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dd0:	fb95 f3f8 	sdiv	r3, r5, r8
 8015dd4:	1e5d      	subs	r5, r3, #1
 8015dd6:	4415      	add	r5, r2
 8015dd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8015ddc:	fb15 f503 	smulbb	r5, r5, r3
 8015de0:	b2ad      	uxth	r5, r5
 8015de2:	b907      	cbnz	r7, 8015de6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8015de4:	b16c      	cbz	r4, 8015e02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8015de6:	fb04 7305 	mla	r3, r4, r5, r7
 8015dea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015dec:	ebaa 0a04 	sub.w	sl, sl, r4
 8015df0:	fb08 f303 	mul.w	r3, r8, r3
 8015df4:	fa1f fa8a 	uxth.w	sl, sl
 8015df8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8015dfc:	f003 0407 	and.w	r4, r3, #7
 8015e00:	9226      	str	r2, [sp, #152]	; 0x98
 8015e02:	4649      	mov	r1, r9
 8015e04:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015e06:	f7ff ff2f 	bl	8015c68 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8015e0a:	4649      	mov	r1, r9
 8015e0c:	4683      	mov	fp, r0
 8015e0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015e10:	f7ff ff46 	bl	8015ca0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8015e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e18:	4681      	mov	r9, r0
 8015e1a:	1a9b      	subs	r3, r3, r2
 8015e1c:	459a      	cmp	sl, r3
 8015e1e:	bfa8      	it	ge
 8015e20:	469a      	movge	sl, r3
 8015e22:	f1ba 0f00 	cmp.w	sl, #0
 8015e26:	f340 80f9 	ble.w	801601c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8015e2a:	1bf6      	subs	r6, r6, r7
 8015e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e2e:	1b9e      	subs	r6, r3, r6
 8015e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e32:	429e      	cmp	r6, r3
 8015e34:	bfd4      	ite	le
 8015e36:	ebc7 0706 	rsble	r7, r7, r6
 8015e3a:	ebc7 0703 	rsbgt	r7, r7, r3
 8015e3e:	2f00      	cmp	r7, #0
 8015e40:	f340 80ec 	ble.w	801601c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8015e44:	1bed      	subs	r5, r5, r7
 8015e46:	fb08 f305 	mul.w	r3, r8, r5
 8015e4a:	930d      	str	r3, [sp, #52]	; 0x34
 8015e4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e4e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015e52:	930e      	str	r3, [sp, #56]	; 0x38
 8015e54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015e5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	9310      	str	r3, [sp, #64]	; 0x40
 8015e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	f040 80de 	bne.w	8016026 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8015e6a:	4b7d      	ldr	r3, [pc, #500]	; (8016060 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8015e6c:	6818      	ldr	r0, [r3, #0]
 8015e6e:	6803      	ldr	r3, [r0, #0]
 8015e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e72:	4798      	blx	r3
 8015e74:	2301      	movs	r3, #1
 8015e76:	4a7b      	ldr	r2, [pc, #492]	; (8016064 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8015e78:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8015e7c:	fb07 9b1b 	mls	fp, r7, fp, r9
 8015e80:	fa03 f308 	lsl.w	r3, r3, r8
 8015e84:	8811      	ldrh	r1, [r2, #0]
 8015e86:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8015e8a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8015e8e:	3b01      	subs	r3, #1
 8015e90:	fb06 bb07 	mla	fp, r6, r7, fp
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	930a      	str	r3, [sp, #40]	; 0x28
 8015e98:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8015e9c:	fb01 2303 	mla	r3, r1, r3, r2
 8015ea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ea4:	18c3      	adds	r3, r0, r3
 8015ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8015ea8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015eaa:	781a      	ldrb	r2, [r3, #0]
 8015eac:	4122      	asrs	r2, r4
 8015eae:	b2d2      	uxtb	r2, r2
 8015eb0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8015eb4:	f0c0 80d8 	bcc.w	8016068 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8015eb8:	46be      	mov	lr, r7
 8015eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ebc:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8015ec0:	f0c0 80ba 	bcc.w	8016038 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8015ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ec6:	4013      	ands	r3, r2
 8015ec8:	d041      	beq.n	8015f4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8015eca:	20ff      	movs	r0, #255	; 0xff
 8015ecc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015ece:	fb90 f5f5 	sdiv	r5, r0, r5
 8015ed2:	436b      	muls	r3, r5
 8015ed4:	2bfe      	cmp	r3, #254	; 0xfe
 8015ed6:	dd03      	ble.n	8015ee0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8015ed8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015eda:	4285      	cmp	r5, r0
 8015edc:	f000 80a5 	beq.w	801602a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8015ee0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015ee2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015ee4:	fb15 f303 	smulbb	r3, r5, r3
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	1c5d      	adds	r5, r3, #1
 8015eec:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8015ef0:	780d      	ldrb	r5, [r1, #0]
 8015ef2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015ef6:	fa1f fc83 	uxth.w	ip, r3
 8015efa:	43db      	mvns	r3, r3
 8015efc:	fb10 f90c 	smulbb	r9, r0, ip
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015f04:	fb05 9503 	mla	r5, r5, r3, r9
 8015f08:	b2ad      	uxth	r5, r5
 8015f0a:	f105 0901 	add.w	r9, r5, #1
 8015f0e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8015f12:	fb10 f90c 	smulbb	r9, r0, ip
 8015f16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015f18:	122d      	asrs	r5, r5, #8
 8015f1a:	fb10 fc0c 	smulbb	ip, r0, ip
 8015f1e:	700d      	strb	r5, [r1, #0]
 8015f20:	784d      	ldrb	r5, [r1, #1]
 8015f22:	fb05 9503 	mla	r5, r5, r3, r9
 8015f26:	b2ad      	uxth	r5, r5
 8015f28:	f105 0901 	add.w	r9, r5, #1
 8015f2c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8015f30:	122d      	asrs	r5, r5, #8
 8015f32:	704d      	strb	r5, [r1, #1]
 8015f34:	788d      	ldrb	r5, [r1, #2]
 8015f36:	fb05 cc03 	mla	ip, r5, r3, ip
 8015f3a:	fa1f fc8c 	uxth.w	ip, ip
 8015f3e:	f10c 0301 	add.w	r3, ip, #1
 8015f42:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015f46:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015f4a:	f881 c002 	strb.w	ip, [r1, #2]
 8015f4e:	4444      	add	r4, r8
 8015f50:	4431      	add	r1, r6
 8015f52:	b2a4      	uxth	r4, r4
 8015f54:	2c07      	cmp	r4, #7
 8015f56:	bf89      	itett	hi
 8015f58:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8015f5a:	fa42 f208 	asrls.w	r2, r2, r8
 8015f5e:	2400      	movhi	r4, #0
 8015f60:	785a      	ldrbhi	r2, [r3, #1]
 8015f62:	bf8a      	itet	hi
 8015f64:	3301      	addhi	r3, #1
 8015f66:	b2d2      	uxtbls	r2, r2
 8015f68:	9326      	strhi	r3, [sp, #152]	; 0x98
 8015f6a:	e7a7      	b.n	8015ebc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8015f6c:	441e      	add	r6, r3
 8015f6e:	b236      	sxth	r6, r6
 8015f70:	e6ec      	b.n	8015d4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8015f72:	f1b9 0f01 	cmp.w	r9, #1
 8015f76:	f47f af27 	bne.w	8015dc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015f7a:	f1bb 0f01 	cmp.w	fp, #1
 8015f7e:	f47f af23 	bne.w	8015dc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015f82:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8016060 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8015f86:	f8db 0000 	ldr.w	r0, [fp]
 8015f8a:	6803      	ldr	r3, [r0, #0]
 8015f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f8e:	4798      	blx	r3
 8015f90:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8015f94:	465a      	mov	r2, fp
 8015f96:	d006      	beq.n	8015fa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8015f98:	f1b8 0f04 	cmp.w	r8, #4
 8015f9c:	d141      	bne.n	8016022 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 8015f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fa0:	3300      	adds	r3, #0
 8015fa2:	bf18      	it	ne
 8015fa4:	2301      	movne	r3, #1
 8015fa6:	0580      	lsls	r0, r0, #22
 8015fa8:	d567      	bpl.n	801607a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8015faa:	f1b8 0f08 	cmp.w	r8, #8
 8015fae:	d164      	bne.n	801607a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	bf0c      	ite	eq
 8015fb4:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8015fb8:	f44f 7180 	movne.w	r1, #256	; 0x100
 8015fbc:	2f00      	cmp	r7, #0
 8015fbe:	f47f af03 	bne.w	8015dc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015fc2:	2c00      	cmp	r4, #0
 8015fc4:	f47f af00 	bne.w	8015dc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fca:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015fcc:	18f3      	adds	r3, r6, r3
 8015fce:	4283      	cmp	r3, r0
 8015fd0:	f73f aefa 	bgt.w	8015dc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015fd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fd8:	4403      	add	r3, r0
 8015fda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015fdc:	4283      	cmp	r3, r0
 8015fde:	f73f aef3 	bgt.w	8015dc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015fe2:	f1b8 0f08 	cmp.w	r8, #8
 8015fe6:	6810      	ldr	r0, [r2, #0]
 8015fe8:	f04f 0600 	mov.w	r6, #0
 8015fec:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8015ff0:	bf18      	it	ne
 8015ff2:	3501      	addne	r5, #1
 8015ff4:	6804      	ldr	r4, [r0, #0]
 8015ff6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015ffa:	bf18      	it	ne
 8015ffc:	f025 0501 	bicne.w	r5, r5, #1
 8016000:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8016004:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016006:	bf18      	it	ne
 8016008:	b2ad      	uxthne	r5, r5
 801600a:	9104      	str	r1, [sp, #16]
 801600c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801600e:	e9cd 5a00 	strd	r5, sl, [sp]
 8016012:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8016016:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016018:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801601a:	47a0      	blx	r4
 801601c:	b017      	add	sp, #92	; 0x5c
 801601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016022:	2300      	movs	r3, #0
 8016024:	e7bf      	b.n	8015fa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016026:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016028:	e724      	b.n	8015e74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801602a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801602c:	700b      	strb	r3, [r1, #0]
 801602e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016030:	704b      	strb	r3, [r1, #1]
 8016032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016034:	708b      	strb	r3, [r1, #2]
 8016036:	e78a      	b.n	8015f4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801603a:	b153      	cbz	r3, 8016052 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801603c:	441c      	add	r4, r3
 801603e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016040:	b2a4      	uxth	r4, r4
 8016042:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8016046:	f004 0407 	and.w	r4, r4, #7
 801604a:	781a      	ldrb	r2, [r3, #0]
 801604c:	9326      	str	r3, [sp, #152]	; 0x98
 801604e:	4122      	asrs	r2, r4
 8016050:	b2d2      	uxtb	r2, r2
 8016052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016054:	445b      	add	r3, fp
 8016056:	9309      	str	r3, [sp, #36]	; 0x24
 8016058:	e72a      	b.n	8015eb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801605a:	bf00      	nop
 801605c:	240c3d3a 	.word	0x240c3d3a
 8016060:	240c3d44 	.word	0x240c3d44
 8016064:	240c3d3c 	.word	0x240c3d3c
 8016068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801606a:	2b00      	cmp	r3, #0
 801606c:	d1d6      	bne.n	801601c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801606e:	4b06      	ldr	r3, [pc, #24]	; (8016088 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8016070:	6818      	ldr	r0, [r3, #0]
 8016072:	6803      	ldr	r3, [r0, #0]
 8016074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016076:	4798      	blx	r3
 8016078:	e7d0      	b.n	801601c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801607a:	2b00      	cmp	r3, #0
 801607c:	f43f aea4 	beq.w	8015dc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016084:	e79a      	b.n	8015fbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8016086:	bf00      	nop
 8016088:	240c3d44 	.word	0x240c3d44

0801608c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801608c:	b538      	push	{r3, r4, r5, lr}
 801608e:	4c15      	ldr	r4, [pc, #84]	; (80160e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016090:	4605      	mov	r5, r0
 8016092:	7823      	ldrb	r3, [r4, #0]
 8016094:	f3bf 8f5b 	dmb	ish
 8016098:	07da      	lsls	r2, r3, #31
 801609a:	d40b      	bmi.n	80160b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801609c:	4620      	mov	r0, r4
 801609e:	f006 fe30 	bl	801cd02 <__cxa_guard_acquire>
 80160a2:	b138      	cbz	r0, 80160b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80160a4:	4620      	mov	r0, r4
 80160a6:	f006 fe38 	bl	801cd1a <__cxa_guard_release>
 80160aa:	4a0f      	ldr	r2, [pc, #60]	; (80160e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80160ac:	490f      	ldr	r1, [pc, #60]	; (80160ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80160ae:	4810      	ldr	r0, [pc, #64]	; (80160f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80160b0:	f006 fe20 	bl	801ccf4 <__aeabi_atexit>
 80160b4:	4c0f      	ldr	r4, [pc, #60]	; (80160f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80160b6:	7823      	ldrb	r3, [r4, #0]
 80160b8:	f3bf 8f5b 	dmb	ish
 80160bc:	07db      	lsls	r3, r3, #31
 80160be:	d40b      	bmi.n	80160d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80160c0:	4620      	mov	r0, r4
 80160c2:	f006 fe1e 	bl	801cd02 <__cxa_guard_acquire>
 80160c6:	b138      	cbz	r0, 80160d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80160c8:	4620      	mov	r0, r4
 80160ca:	f006 fe26 	bl	801cd1a <__cxa_guard_release>
 80160ce:	4a06      	ldr	r2, [pc, #24]	; (80160e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80160d0:	4909      	ldr	r1, [pc, #36]	; (80160f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80160d2:	480a      	ldr	r0, [pc, #40]	; (80160fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80160d4:	f006 fe0e 	bl	801ccf4 <__aeabi_atexit>
 80160d8:	4b05      	ldr	r3, [pc, #20]	; (80160f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80160da:	612b      	str	r3, [r5, #16]
 80160dc:	4b07      	ldr	r3, [pc, #28]	; (80160fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80160de:	616b      	str	r3, [r5, #20]
 80160e0:	bd38      	pop	{r3, r4, r5, pc}
 80160e2:	bf00      	nop
 80160e4:	240c3e30 	.word	0x240c3e30
 80160e8:	24000000 	.word	0x24000000
 80160ec:	080149d7 	.word	0x080149d7
 80160f0:	24000064 	.word	0x24000064
 80160f4:	240c3e34 	.word	0x240c3e34
 80160f8:	080149d5 	.word	0x080149d5
 80160fc:	24000068 	.word	0x24000068

08016100 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	4c15      	ldr	r4, [pc, #84]	; (8016158 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016104:	4605      	mov	r5, r0
 8016106:	7823      	ldrb	r3, [r4, #0]
 8016108:	f3bf 8f5b 	dmb	ish
 801610c:	07da      	lsls	r2, r3, #31
 801610e:	d40b      	bmi.n	8016128 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016110:	4620      	mov	r0, r4
 8016112:	f006 fdf6 	bl	801cd02 <__cxa_guard_acquire>
 8016116:	b138      	cbz	r0, 8016128 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016118:	4620      	mov	r0, r4
 801611a:	f006 fdfe 	bl	801cd1a <__cxa_guard_release>
 801611e:	4a0f      	ldr	r2, [pc, #60]	; (801615c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016120:	490f      	ldr	r1, [pc, #60]	; (8016160 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8016122:	4810      	ldr	r0, [pc, #64]	; (8016164 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016124:	f006 fde6 	bl	801ccf4 <__aeabi_atexit>
 8016128:	4c0f      	ldr	r4, [pc, #60]	; (8016168 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801612a:	7823      	ldrb	r3, [r4, #0]
 801612c:	f3bf 8f5b 	dmb	ish
 8016130:	07db      	lsls	r3, r3, #31
 8016132:	d40b      	bmi.n	801614c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016134:	4620      	mov	r0, r4
 8016136:	f006 fde4 	bl	801cd02 <__cxa_guard_acquire>
 801613a:	b138      	cbz	r0, 801614c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801613c:	4620      	mov	r0, r4
 801613e:	f006 fdec 	bl	801cd1a <__cxa_guard_release>
 8016142:	4a06      	ldr	r2, [pc, #24]	; (801615c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016144:	4909      	ldr	r1, [pc, #36]	; (801616c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8016146:	480a      	ldr	r0, [pc, #40]	; (8016170 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016148:	f006 fdd4 	bl	801ccf4 <__aeabi_atexit>
 801614c:	4b05      	ldr	r3, [pc, #20]	; (8016164 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801614e:	60ab      	str	r3, [r5, #8]
 8016150:	4b07      	ldr	r3, [pc, #28]	; (8016170 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016152:	60eb      	str	r3, [r5, #12]
 8016154:	bd38      	pop	{r3, r4, r5, pc}
 8016156:	bf00      	nop
 8016158:	240c3e10 	.word	0x240c3e10
 801615c:	24000000 	.word	0x24000000
 8016160:	080149db 	.word	0x080149db
 8016164:	24000044 	.word	0x24000044
 8016168:	240c3e14 	.word	0x240c3e14
 801616c:	080149d9 	.word	0x080149d9
 8016170:	24000048 	.word	0x24000048

08016174 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8016174:	b510      	push	{r4, lr}
 8016176:	4604      	mov	r4, r0
 8016178:	f7ff ff88 	bl	801608c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801617c:	4620      	mov	r0, r4
 801617e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016182:	f7ff bfbd 	b.w	8016100 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016188 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016188:	b538      	push	{r3, r4, r5, lr}
 801618a:	4c15      	ldr	r4, [pc, #84]	; (80161e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801618c:	4605      	mov	r5, r0
 801618e:	7823      	ldrb	r3, [r4, #0]
 8016190:	f3bf 8f5b 	dmb	ish
 8016194:	07da      	lsls	r2, r3, #31
 8016196:	d40b      	bmi.n	80161b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016198:	4620      	mov	r0, r4
 801619a:	f006 fdb2 	bl	801cd02 <__cxa_guard_acquire>
 801619e:	b138      	cbz	r0, 80161b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80161a0:	4620      	mov	r0, r4
 80161a2:	f006 fdba 	bl	801cd1a <__cxa_guard_release>
 80161a6:	4a0f      	ldr	r2, [pc, #60]	; (80161e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80161a8:	490f      	ldr	r1, [pc, #60]	; (80161e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80161aa:	4810      	ldr	r0, [pc, #64]	; (80161ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80161ac:	f006 fda2 	bl	801ccf4 <__aeabi_atexit>
 80161b0:	4c0f      	ldr	r4, [pc, #60]	; (80161f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80161b2:	7823      	ldrb	r3, [r4, #0]
 80161b4:	f3bf 8f5b 	dmb	ish
 80161b8:	07db      	lsls	r3, r3, #31
 80161ba:	d40b      	bmi.n	80161d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80161bc:	4620      	mov	r0, r4
 80161be:	f006 fda0 	bl	801cd02 <__cxa_guard_acquire>
 80161c2:	b138      	cbz	r0, 80161d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80161c4:	4620      	mov	r0, r4
 80161c6:	f006 fda8 	bl	801cd1a <__cxa_guard_release>
 80161ca:	4a06      	ldr	r2, [pc, #24]	; (80161e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80161cc:	4909      	ldr	r1, [pc, #36]	; (80161f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80161ce:	480a      	ldr	r0, [pc, #40]	; (80161f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80161d0:	f006 fd90 	bl	801ccf4 <__aeabi_atexit>
 80161d4:	4b05      	ldr	r3, [pc, #20]	; (80161ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80161d6:	622b      	str	r3, [r5, #32]
 80161d8:	4b07      	ldr	r3, [pc, #28]	; (80161f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80161da:	626b      	str	r3, [r5, #36]	; 0x24
 80161dc:	bd38      	pop	{r3, r4, r5, pc}
 80161de:	bf00      	nop
 80161e0:	240c3e38 	.word	0x240c3e38
 80161e4:	24000000 	.word	0x24000000
 80161e8:	080149cf 	.word	0x080149cf
 80161ec:	2400006c 	.word	0x2400006c
 80161f0:	240c3e3c 	.word	0x240c3e3c
 80161f4:	080149cd 	.word	0x080149cd
 80161f8:	24000070 	.word	0x24000070

080161fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80161fc:	b538      	push	{r3, r4, r5, lr}
 80161fe:	4c15      	ldr	r4, [pc, #84]	; (8016254 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016200:	4605      	mov	r5, r0
 8016202:	7823      	ldrb	r3, [r4, #0]
 8016204:	f3bf 8f5b 	dmb	ish
 8016208:	07da      	lsls	r2, r3, #31
 801620a:	d40b      	bmi.n	8016224 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801620c:	4620      	mov	r0, r4
 801620e:	f006 fd78 	bl	801cd02 <__cxa_guard_acquire>
 8016212:	b138      	cbz	r0, 8016224 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016214:	4620      	mov	r0, r4
 8016216:	f006 fd80 	bl	801cd1a <__cxa_guard_release>
 801621a:	4a0f      	ldr	r2, [pc, #60]	; (8016258 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801621c:	490f      	ldr	r1, [pc, #60]	; (801625c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801621e:	4810      	ldr	r0, [pc, #64]	; (8016260 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016220:	f006 fd68 	bl	801ccf4 <__aeabi_atexit>
 8016224:	4c0f      	ldr	r4, [pc, #60]	; (8016264 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8016226:	7823      	ldrb	r3, [r4, #0]
 8016228:	f3bf 8f5b 	dmb	ish
 801622c:	07db      	lsls	r3, r3, #31
 801622e:	d40b      	bmi.n	8016248 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016230:	4620      	mov	r0, r4
 8016232:	f006 fd66 	bl	801cd02 <__cxa_guard_acquire>
 8016236:	b138      	cbz	r0, 8016248 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016238:	4620      	mov	r0, r4
 801623a:	f006 fd6e 	bl	801cd1a <__cxa_guard_release>
 801623e:	4a06      	ldr	r2, [pc, #24]	; (8016258 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016240:	4909      	ldr	r1, [pc, #36]	; (8016268 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8016242:	480a      	ldr	r0, [pc, #40]	; (801626c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016244:	f006 fd56 	bl	801ccf4 <__aeabi_atexit>
 8016248:	4b05      	ldr	r3, [pc, #20]	; (8016260 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801624a:	61ab      	str	r3, [r5, #24]
 801624c:	4b07      	ldr	r3, [pc, #28]	; (801626c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801624e:	61eb      	str	r3, [r5, #28]
 8016250:	bd38      	pop	{r3, r4, r5, pc}
 8016252:	bf00      	nop
 8016254:	240c3e18 	.word	0x240c3e18
 8016258:	24000000 	.word	0x24000000
 801625c:	080149d3 	.word	0x080149d3
 8016260:	2400004c 	.word	0x2400004c
 8016264:	240c3e1c 	.word	0x240c3e1c
 8016268:	080149d1 	.word	0x080149d1
 801626c:	24000050 	.word	0x24000050

08016270 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016270:	b510      	push	{r4, lr}
 8016272:	4604      	mov	r4, r0
 8016274:	f7ff ff88 	bl	8016188 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016278:	4620      	mov	r0, r4
 801627a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801627e:	f7ff bfbd 	b.w	80161fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016284 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8016284:	b538      	push	{r3, r4, r5, lr}
 8016286:	4c15      	ldr	r4, [pc, #84]	; (80162dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8016288:	4605      	mov	r5, r0
 801628a:	7823      	ldrb	r3, [r4, #0]
 801628c:	f3bf 8f5b 	dmb	ish
 8016290:	07da      	lsls	r2, r3, #31
 8016292:	d40b      	bmi.n	80162ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016294:	4620      	mov	r0, r4
 8016296:	f006 fd34 	bl	801cd02 <__cxa_guard_acquire>
 801629a:	b138      	cbz	r0, 80162ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801629c:	4620      	mov	r0, r4
 801629e:	f006 fd3c 	bl	801cd1a <__cxa_guard_release>
 80162a2:	4a0f      	ldr	r2, [pc, #60]	; (80162e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80162a4:	490f      	ldr	r1, [pc, #60]	; (80162e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80162a6:	4810      	ldr	r0, [pc, #64]	; (80162e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80162a8:	f006 fd24 	bl	801ccf4 <__aeabi_atexit>
 80162ac:	4c0f      	ldr	r4, [pc, #60]	; (80162ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80162ae:	7823      	ldrb	r3, [r4, #0]
 80162b0:	f3bf 8f5b 	dmb	ish
 80162b4:	07db      	lsls	r3, r3, #31
 80162b6:	d40b      	bmi.n	80162d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80162b8:	4620      	mov	r0, r4
 80162ba:	f006 fd22 	bl	801cd02 <__cxa_guard_acquire>
 80162be:	b138      	cbz	r0, 80162d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80162c0:	4620      	mov	r0, r4
 80162c2:	f006 fd2a 	bl	801cd1a <__cxa_guard_release>
 80162c6:	4a06      	ldr	r2, [pc, #24]	; (80162e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80162c8:	4909      	ldr	r1, [pc, #36]	; (80162f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80162ca:	480a      	ldr	r0, [pc, #40]	; (80162f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80162cc:	f006 fd12 	bl	801ccf4 <__aeabi_atexit>
 80162d0:	4b05      	ldr	r3, [pc, #20]	; (80162e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80162d2:	632b      	str	r3, [r5, #48]	; 0x30
 80162d4:	4b07      	ldr	r3, [pc, #28]	; (80162f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80162d6:	636b      	str	r3, [r5, #52]	; 0x34
 80162d8:	bd38      	pop	{r3, r4, r5, pc}
 80162da:	bf00      	nop
 80162dc:	240c3e20 	.word	0x240c3e20
 80162e0:	24000000 	.word	0x24000000
 80162e4:	080149c7 	.word	0x080149c7
 80162e8:	24000054 	.word	0x24000054
 80162ec:	240c3e24 	.word	0x240c3e24
 80162f0:	080149c5 	.word	0x080149c5
 80162f4:	24000058 	.word	0x24000058

080162f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 80162f8:	b538      	push	{r3, r4, r5, lr}
 80162fa:	4c15      	ldr	r4, [pc, #84]	; (8016350 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80162fc:	4605      	mov	r5, r0
 80162fe:	7823      	ldrb	r3, [r4, #0]
 8016300:	f3bf 8f5b 	dmb	ish
 8016304:	07da      	lsls	r2, r3, #31
 8016306:	d40b      	bmi.n	8016320 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016308:	4620      	mov	r0, r4
 801630a:	f006 fcfa 	bl	801cd02 <__cxa_guard_acquire>
 801630e:	b138      	cbz	r0, 8016320 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016310:	4620      	mov	r0, r4
 8016312:	f006 fd02 	bl	801cd1a <__cxa_guard_release>
 8016316:	4a0f      	ldr	r2, [pc, #60]	; (8016354 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016318:	490f      	ldr	r1, [pc, #60]	; (8016358 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801631a:	4810      	ldr	r0, [pc, #64]	; (801635c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801631c:	f006 fcea 	bl	801ccf4 <__aeabi_atexit>
 8016320:	4c0f      	ldr	r4, [pc, #60]	; (8016360 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8016322:	7823      	ldrb	r3, [r4, #0]
 8016324:	f3bf 8f5b 	dmb	ish
 8016328:	07db      	lsls	r3, r3, #31
 801632a:	d40b      	bmi.n	8016344 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801632c:	4620      	mov	r0, r4
 801632e:	f006 fce8 	bl	801cd02 <__cxa_guard_acquire>
 8016332:	b138      	cbz	r0, 8016344 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016334:	4620      	mov	r0, r4
 8016336:	f006 fcf0 	bl	801cd1a <__cxa_guard_release>
 801633a:	4a06      	ldr	r2, [pc, #24]	; (8016354 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801633c:	4909      	ldr	r1, [pc, #36]	; (8016364 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801633e:	480a      	ldr	r0, [pc, #40]	; (8016368 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016340:	f006 fcd8 	bl	801ccf4 <__aeabi_atexit>
 8016344:	4b05      	ldr	r3, [pc, #20]	; (801635c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016346:	62ab      	str	r3, [r5, #40]	; 0x28
 8016348:	4b07      	ldr	r3, [pc, #28]	; (8016368 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801634a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801634c:	bd38      	pop	{r3, r4, r5, pc}
 801634e:	bf00      	nop
 8016350:	240c3df8 	.word	0x240c3df8
 8016354:	24000000 	.word	0x24000000
 8016358:	080149cb 	.word	0x080149cb
 801635c:	2400002c 	.word	0x2400002c
 8016360:	240c3dfc 	.word	0x240c3dfc
 8016364:	080149c9 	.word	0x080149c9
 8016368:	24000030 	.word	0x24000030

0801636c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801636c:	b510      	push	{r4, lr}
 801636e:	4604      	mov	r4, r0
 8016370:	f7ff ff88 	bl	8016284 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8016374:	4620      	mov	r0, r4
 8016376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801637a:	f7ff bfbd 	b.w	80162f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08016380 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8016380:	b538      	push	{r3, r4, r5, lr}
 8016382:	4c15      	ldr	r4, [pc, #84]	; (80163d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016384:	4605      	mov	r5, r0
 8016386:	7823      	ldrb	r3, [r4, #0]
 8016388:	f3bf 8f5b 	dmb	ish
 801638c:	07da      	lsls	r2, r3, #31
 801638e:	d40b      	bmi.n	80163a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016390:	4620      	mov	r0, r4
 8016392:	f006 fcb6 	bl	801cd02 <__cxa_guard_acquire>
 8016396:	b138      	cbz	r0, 80163a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016398:	4620      	mov	r0, r4
 801639a:	f006 fcbe 	bl	801cd1a <__cxa_guard_release>
 801639e:	4a0f      	ldr	r2, [pc, #60]	; (80163dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80163a0:	490f      	ldr	r1, [pc, #60]	; (80163e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80163a2:	4810      	ldr	r0, [pc, #64]	; (80163e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80163a4:	f006 fca6 	bl	801ccf4 <__aeabi_atexit>
 80163a8:	4c0f      	ldr	r4, [pc, #60]	; (80163e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80163aa:	7823      	ldrb	r3, [r4, #0]
 80163ac:	f3bf 8f5b 	dmb	ish
 80163b0:	07db      	lsls	r3, r3, #31
 80163b2:	d40b      	bmi.n	80163cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80163b4:	4620      	mov	r0, r4
 80163b6:	f006 fca4 	bl	801cd02 <__cxa_guard_acquire>
 80163ba:	b138      	cbz	r0, 80163cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80163bc:	4620      	mov	r0, r4
 80163be:	f006 fcac 	bl	801cd1a <__cxa_guard_release>
 80163c2:	4a06      	ldr	r2, [pc, #24]	; (80163dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80163c4:	4909      	ldr	r1, [pc, #36]	; (80163ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80163c6:	480a      	ldr	r0, [pc, #40]	; (80163f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80163c8:	f006 fc94 	bl	801ccf4 <__aeabi_atexit>
 80163cc:	4b05      	ldr	r3, [pc, #20]	; (80163e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80163ce:	642b      	str	r3, [r5, #64]	; 0x40
 80163d0:	4b07      	ldr	r3, [pc, #28]	; (80163f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80163d2:	646b      	str	r3, [r5, #68]	; 0x44
 80163d4:	bd38      	pop	{r3, r4, r5, pc}
 80163d6:	bf00      	nop
 80163d8:	240c3e28 	.word	0x240c3e28
 80163dc:	24000000 	.word	0x24000000
 80163e0:	080149bf 	.word	0x080149bf
 80163e4:	2400005c 	.word	0x2400005c
 80163e8:	240c3e2c 	.word	0x240c3e2c
 80163ec:	080149bd 	.word	0x080149bd
 80163f0:	24000060 	.word	0x24000060

080163f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80163f4:	b538      	push	{r3, r4, r5, lr}
 80163f6:	4c15      	ldr	r4, [pc, #84]	; (801644c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80163f8:	4605      	mov	r5, r0
 80163fa:	7823      	ldrb	r3, [r4, #0]
 80163fc:	f3bf 8f5b 	dmb	ish
 8016400:	07da      	lsls	r2, r3, #31
 8016402:	d40b      	bmi.n	801641c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016404:	4620      	mov	r0, r4
 8016406:	f006 fc7c 	bl	801cd02 <__cxa_guard_acquire>
 801640a:	b138      	cbz	r0, 801641c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801640c:	4620      	mov	r0, r4
 801640e:	f006 fc84 	bl	801cd1a <__cxa_guard_release>
 8016412:	4a0f      	ldr	r2, [pc, #60]	; (8016450 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016414:	490f      	ldr	r1, [pc, #60]	; (8016454 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8016416:	4810      	ldr	r0, [pc, #64]	; (8016458 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016418:	f006 fc6c 	bl	801ccf4 <__aeabi_atexit>
 801641c:	4c0f      	ldr	r4, [pc, #60]	; (801645c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801641e:	7823      	ldrb	r3, [r4, #0]
 8016420:	f3bf 8f5b 	dmb	ish
 8016424:	07db      	lsls	r3, r3, #31
 8016426:	d40b      	bmi.n	8016440 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016428:	4620      	mov	r0, r4
 801642a:	f006 fc6a 	bl	801cd02 <__cxa_guard_acquire>
 801642e:	b138      	cbz	r0, 8016440 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016430:	4620      	mov	r0, r4
 8016432:	f006 fc72 	bl	801cd1a <__cxa_guard_release>
 8016436:	4a06      	ldr	r2, [pc, #24]	; (8016450 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016438:	4909      	ldr	r1, [pc, #36]	; (8016460 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801643a:	480a      	ldr	r0, [pc, #40]	; (8016464 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801643c:	f006 fc5a 	bl	801ccf4 <__aeabi_atexit>
 8016440:	4b05      	ldr	r3, [pc, #20]	; (8016458 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016442:	63ab      	str	r3, [r5, #56]	; 0x38
 8016444:	4b07      	ldr	r3, [pc, #28]	; (8016464 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016446:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016448:	bd38      	pop	{r3, r4, r5, pc}
 801644a:	bf00      	nop
 801644c:	240c3e08 	.word	0x240c3e08
 8016450:	24000000 	.word	0x24000000
 8016454:	080149c3 	.word	0x080149c3
 8016458:	2400003c 	.word	0x2400003c
 801645c:	240c3e0c 	.word	0x240c3e0c
 8016460:	080149c1 	.word	0x080149c1
 8016464:	24000040 	.word	0x24000040

08016468 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8016468:	b510      	push	{r4, lr}
 801646a:	4604      	mov	r4, r0
 801646c:	f7ff ff88 	bl	8016380 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8016470:	4620      	mov	r0, r4
 8016472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016476:	f7ff bfbd 	b.w	80163f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801647c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801647c:	b538      	push	{r3, r4, r5, lr}
 801647e:	4c15      	ldr	r4, [pc, #84]	; (80164d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8016480:	4605      	mov	r5, r0
 8016482:	7823      	ldrb	r3, [r4, #0]
 8016484:	f3bf 8f5b 	dmb	ish
 8016488:	07da      	lsls	r2, r3, #31
 801648a:	d40b      	bmi.n	80164a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801648c:	4620      	mov	r0, r4
 801648e:	f006 fc38 	bl	801cd02 <__cxa_guard_acquire>
 8016492:	b138      	cbz	r0, 80164a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016494:	4620      	mov	r0, r4
 8016496:	f006 fc40 	bl	801cd1a <__cxa_guard_release>
 801649a:	4a0f      	ldr	r2, [pc, #60]	; (80164d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801649c:	490f      	ldr	r1, [pc, #60]	; (80164dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801649e:	4810      	ldr	r0, [pc, #64]	; (80164e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80164a0:	f006 fc28 	bl	801ccf4 <__aeabi_atexit>
 80164a4:	4c0f      	ldr	r4, [pc, #60]	; (80164e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80164a6:	7823      	ldrb	r3, [r4, #0]
 80164a8:	f3bf 8f5b 	dmb	ish
 80164ac:	07db      	lsls	r3, r3, #31
 80164ae:	d40b      	bmi.n	80164c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80164b0:	4620      	mov	r0, r4
 80164b2:	f006 fc26 	bl	801cd02 <__cxa_guard_acquire>
 80164b6:	b138      	cbz	r0, 80164c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80164b8:	4620      	mov	r0, r4
 80164ba:	f006 fc2e 	bl	801cd1a <__cxa_guard_release>
 80164be:	4a06      	ldr	r2, [pc, #24]	; (80164d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80164c0:	4909      	ldr	r1, [pc, #36]	; (80164e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80164c2:	480a      	ldr	r0, [pc, #40]	; (80164ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80164c4:	f006 fc16 	bl	801ccf4 <__aeabi_atexit>
 80164c8:	4b05      	ldr	r3, [pc, #20]	; (80164e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80164ca:	652b      	str	r3, [r5, #80]	; 0x50
 80164cc:	4b07      	ldr	r3, [pc, #28]	; (80164ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80164ce:	656b      	str	r3, [r5, #84]	; 0x54
 80164d0:	bd38      	pop	{r3, r4, r5, pc}
 80164d2:	bf00      	nop
 80164d4:	240c3e00 	.word	0x240c3e00
 80164d8:	24000000 	.word	0x24000000
 80164dc:	080149b7 	.word	0x080149b7
 80164e0:	24000034 	.word	0x24000034
 80164e4:	240c3e04 	.word	0x240c3e04
 80164e8:	080149b5 	.word	0x080149b5
 80164ec:	24000038 	.word	0x24000038

080164f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 80164f0:	b538      	push	{r3, r4, r5, lr}
 80164f2:	4c15      	ldr	r4, [pc, #84]	; (8016548 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80164f4:	4605      	mov	r5, r0
 80164f6:	7823      	ldrb	r3, [r4, #0]
 80164f8:	f3bf 8f5b 	dmb	ish
 80164fc:	07da      	lsls	r2, r3, #31
 80164fe:	d40b      	bmi.n	8016518 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016500:	4620      	mov	r0, r4
 8016502:	f006 fbfe 	bl	801cd02 <__cxa_guard_acquire>
 8016506:	b138      	cbz	r0, 8016518 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016508:	4620      	mov	r0, r4
 801650a:	f006 fc06 	bl	801cd1a <__cxa_guard_release>
 801650e:	4a0f      	ldr	r2, [pc, #60]	; (801654c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016510:	490f      	ldr	r1, [pc, #60]	; (8016550 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8016512:	4810      	ldr	r0, [pc, #64]	; (8016554 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016514:	f006 fbee 	bl	801ccf4 <__aeabi_atexit>
 8016518:	4c0f      	ldr	r4, [pc, #60]	; (8016558 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801651a:	7823      	ldrb	r3, [r4, #0]
 801651c:	f3bf 8f5b 	dmb	ish
 8016520:	07db      	lsls	r3, r3, #31
 8016522:	d40b      	bmi.n	801653c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016524:	4620      	mov	r0, r4
 8016526:	f006 fbec 	bl	801cd02 <__cxa_guard_acquire>
 801652a:	b138      	cbz	r0, 801653c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801652c:	4620      	mov	r0, r4
 801652e:	f006 fbf4 	bl	801cd1a <__cxa_guard_release>
 8016532:	4a06      	ldr	r2, [pc, #24]	; (801654c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016534:	4909      	ldr	r1, [pc, #36]	; (801655c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8016536:	480a      	ldr	r0, [pc, #40]	; (8016560 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016538:	f006 fbdc 	bl	801ccf4 <__aeabi_atexit>
 801653c:	4b05      	ldr	r3, [pc, #20]	; (8016554 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801653e:	64ab      	str	r3, [r5, #72]	; 0x48
 8016540:	4b07      	ldr	r3, [pc, #28]	; (8016560 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016542:	64eb      	str	r3, [r5, #76]	; 0x4c
 8016544:	bd38      	pop	{r3, r4, r5, pc}
 8016546:	bf00      	nop
 8016548:	240c3df0 	.word	0x240c3df0
 801654c:	24000000 	.word	0x24000000
 8016550:	080149bb 	.word	0x080149bb
 8016554:	24000024 	.word	0x24000024
 8016558:	240c3df4 	.word	0x240c3df4
 801655c:	080149b9 	.word	0x080149b9
 8016560:	24000028 	.word	0x24000028

08016564 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8016564:	b510      	push	{r4, lr}
 8016566:	4604      	mov	r4, r0
 8016568:	f7ff ff88 	bl	801647c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801656c:	4620      	mov	r0, r4
 801656e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016572:	f7ff bfbd 	b.w	80164f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08016576 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8016576:	b510      	push	{r4, lr}
 8016578:	4604      	mov	r4, r0
 801657a:	f7ff fff3 	bl	8016564 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801657e:	4620      	mov	r0, r4
 8016580:	f7ff ff72 	bl	8016468 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8016584:	4620      	mov	r0, r4
 8016586:	f7ff fe73 	bl	8016270 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801658a:	4620      	mov	r0, r4
 801658c:	f7ff fdf2 	bl	8016174 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8016590:	4620      	mov	r0, r4
 8016592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016596:	f7ff bee9 	b.w	801636c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801659c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a0:	b087      	sub	sp, #28
 80165a2:	7888      	ldrb	r0, [r1, #2]
 80165a4:	4616      	mov	r6, r2
 80165a6:	9001      	str	r0, [sp, #4]
 80165a8:	7848      	ldrb	r0, [r1, #1]
 80165aa:	9100      	str	r1, [sp, #0]
 80165ac:	9002      	str	r0, [sp, #8]
 80165ae:	7808      	ldrb	r0, [r1, #0]
 80165b0:	9901      	ldr	r1, [sp, #4]
 80165b2:	9003      	str	r0, [sp, #12]
 80165b4:	9802      	ldr	r0, [sp, #8]
 80165b6:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 80165ba:	0200      	lsls	r0, r0, #8
 80165bc:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80165c0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80165c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80165c8:	9903      	ldr	r1, [sp, #12]
 80165ca:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80165ce:	4308      	orrs	r0, r1
 80165d0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80165d4:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 80165d8:	9005      	str	r0, [sp, #20]
 80165da:	fb05 ca0e 	mla	sl, r5, lr, ip
 80165de:	2d00      	cmp	r5, #0
 80165e0:	eb06 080a 	add.w	r8, r6, sl
 80165e4:	db4a      	blt.n	801667c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 80165e6:	45a9      	cmp	r9, r5
 80165e8:	dd48      	ble.n	801667c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 80165ea:	f1bc 0f00 	cmp.w	ip, #0
 80165ee:	db43      	blt.n	8016678 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 80165f0:	45e6      	cmp	lr, ip
 80165f2:	dd41      	ble.n	8016678 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 80165f4:	f816 600a 	ldrb.w	r6, [r6, sl]
 80165f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80165fc:	441e      	add	r6, r3
 80165fe:	f11c 0001 	adds.w	r0, ip, #1
 8016602:	d43e      	bmi.n	8016682 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8016604:	4586      	cmp	lr, r0
 8016606:	dd3c      	ble.n	8016682 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8016608:	2a00      	cmp	r2, #0
 801660a:	d03a      	beq.n	8016682 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801660c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016610:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016614:	4418      	add	r0, r3
 8016616:	3501      	adds	r5, #1
 8016618:	d437      	bmi.n	801668a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801661a:	45a9      	cmp	r9, r5
 801661c:	dd35      	ble.n	801668a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801661e:	b3a4      	cbz	r4, 801668a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8016620:	f1bc 0f00 	cmp.w	ip, #0
 8016624:	db2f      	blt.n	8016686 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8016626:	45e6      	cmp	lr, ip
 8016628:	dd2d      	ble.n	8016686 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801662a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801662e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016632:	441d      	add	r5, r3
 8016634:	f11c 0c01 	adds.w	ip, ip, #1
 8016638:	d42a      	bmi.n	8016690 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801663a:	45e6      	cmp	lr, ip
 801663c:	dd28      	ble.n	8016690 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801663e:	b33a      	cbz	r2, 8016690 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8016640:	44c6      	add	lr, r8
 8016642:	f89e c001 	ldrb.w	ip, [lr, #1]
 8016646:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801664a:	4463      	add	r3, ip
 801664c:	ea6f 0c07 	mvn.w	ip, r7
 8016650:	2a0f      	cmp	r2, #15
 8016652:	f896 a000 	ldrb.w	sl, [r6]
 8016656:	fa5f fc8c 	uxtb.w	ip, ip
 801665a:	f890 b000 	ldrb.w	fp, [r0]
 801665e:	f895 9000 	ldrb.w	r9, [r5]
 8016662:	7819      	ldrb	r1, [r3, #0]
 8016664:	d801      	bhi.n	801666a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8016666:	2c0f      	cmp	r4, #15
 8016668:	d914      	bls.n	8016694 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801666a:	4b40      	ldr	r3, [pc, #256]	; (801676c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801666c:	f240 115b 	movw	r1, #347	; 0x15b
 8016670:	4a3f      	ldr	r2, [pc, #252]	; (8016770 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8016672:	4840      	ldr	r0, [pc, #256]	; (8016774 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8016674:	f006 fb72 	bl	801cd5c <__assert_func>
 8016678:	ae05      	add	r6, sp, #20
 801667a:	e7c0      	b.n	80165fe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801667c:	a805      	add	r0, sp, #20
 801667e:	4606      	mov	r6, r0
 8016680:	e7c9      	b.n	8016616 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8016682:	a805      	add	r0, sp, #20
 8016684:	e7c7      	b.n	8016616 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8016686:	ad05      	add	r5, sp, #20
 8016688:	e7d4      	b.n	8016634 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801668a:	ab05      	add	r3, sp, #20
 801668c:	461d      	mov	r5, r3
 801668e:	e7dd      	b.n	801664c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8016690:	ab05      	add	r3, sp, #20
 8016692:	e7db      	b.n	801664c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8016694:	b292      	uxth	r2, r2
 8016696:	b2a4      	uxth	r4, r4
 8016698:	fa1f fc8c 	uxth.w	ip, ip
 801669c:	fb02 f804 	mul.w	r8, r2, r4
 80166a0:	0112      	lsls	r2, r2, #4
 80166a2:	b2bf      	uxth	r7, r7
 80166a4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80166a8:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80166ac:	eba2 0208 	sub.w	r2, r2, r8
 80166b0:	b2a4      	uxth	r4, r4
 80166b2:	b292      	uxth	r2, r2
 80166b4:	ebae 0e04 	sub.w	lr, lr, r4
 80166b8:	fb02 fb0b 	mul.w	fp, r2, fp
 80166bc:	fa1f fe8e 	uxth.w	lr, lr
 80166c0:	fb0e ba0a 	mla	sl, lr, sl, fp
 80166c4:	fb04 aa09 	mla	sl, r4, r9, sl
 80166c8:	fb08 aa01 	mla	sl, r8, r1, sl
 80166cc:	9903      	ldr	r1, [sp, #12]
 80166ce:	fb11 f90c 	smulbb	r9, r1, ip
 80166d2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80166d6:	9900      	ldr	r1, [sp, #0]
 80166d8:	fb0a 9a07 	mla	sl, sl, r7, r9
 80166dc:	fa1f fa8a 	uxth.w	sl, sl
 80166e0:	f10a 0901 	add.w	r9, sl, #1
 80166e4:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 80166e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80166ec:	f881 a000 	strb.w	sl, [r1]
 80166f0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80166f4:	f896 9001 	ldrb.w	r9, [r6, #1]
 80166f8:	fb02 fa0a 	mul.w	sl, r2, sl
 80166fc:	9902      	ldr	r1, [sp, #8]
 80166fe:	fb0e aa09 	mla	sl, lr, r9, sl
 8016702:	f895 9001 	ldrb.w	r9, [r5, #1]
 8016706:	fb04 aa09 	mla	sl, r4, r9, sl
 801670a:	f893 9001 	ldrb.w	r9, [r3, #1]
 801670e:	fb08 a909 	mla	r9, r8, r9, sl
 8016712:	fb11 fa0c 	smulbb	sl, r1, ip
 8016716:	9900      	ldr	r1, [sp, #0]
 8016718:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801671c:	fb09 a907 	mla	r9, r9, r7, sl
 8016720:	fa1f f989 	uxth.w	r9, r9
 8016724:	f109 0a01 	add.w	sl, r9, #1
 8016728:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801672c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016730:	f881 9001 	strb.w	r9, [r1, #1]
 8016734:	7880      	ldrb	r0, [r0, #2]
 8016736:	78b6      	ldrb	r6, [r6, #2]
 8016738:	4342      	muls	r2, r0
 801673a:	78a8      	ldrb	r0, [r5, #2]
 801673c:	789b      	ldrb	r3, [r3, #2]
 801673e:	fb0e 2206 	mla	r2, lr, r6, r2
 8016742:	fb04 2400 	mla	r4, r4, r0, r2
 8016746:	fb08 4803 	mla	r8, r8, r3, r4
 801674a:	9b01      	ldr	r3, [sp, #4]
 801674c:	fb13 fc0c 	smulbb	ip, r3, ip
 8016750:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016754:	fb08 c707 	mla	r7, r8, r7, ip
 8016758:	b2bf      	uxth	r7, r7
 801675a:	f107 0c01 	add.w	ip, r7, #1
 801675e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8016762:	123f      	asrs	r7, r7, #8
 8016764:	708f      	strb	r7, [r1, #2]
 8016766:	b007      	add	sp, #28
 8016768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676c:	0802145d 	.word	0x0802145d
 8016770:	08021872 	.word	0x08021872
 8016774:	0802142a 	.word	0x0802142a

08016778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801677c:	ed2d 8b08 	vpush	{d8-d11}
 8016780:	b093      	sub	sp, #76	; 0x4c
 8016782:	eeb0 aa40 	vmov.f32	s20, s0
 8016786:	eef0 9a60 	vmov.f32	s19, s1
 801678a:	9210      	str	r2, [sp, #64]	; 0x40
 801678c:	eeb0 9a41 	vmov.f32	s18, s2
 8016790:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016792:	eeb0 8a62 	vmov.f32	s16, s5
 8016796:	9309      	str	r3, [sp, #36]	; 0x24
 8016798:	eef0 8a43 	vmov.f32	s17, s6
 801679c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 80167a0:	eef0 ba44 	vmov.f32	s23, s8
 80167a4:	9011      	str	r0, [sp, #68]	; 0x44
 80167a6:	eeb0 ba64 	vmov.f32	s22, s9
 80167aa:	930e      	str	r3, [sp, #56]	; 0x38
 80167ac:	eef0 aa45 	vmov.f32	s21, s10
 80167b0:	6850      	ldr	r0, [r2, #4]
 80167b2:	910d      	str	r1, [sp, #52]	; 0x34
 80167b4:	6812      	ldr	r2, [r2, #0]
 80167b6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80167ba:	fb00 1303 	mla	r3, r0, r3, r1
 80167be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80167c2:	18d3      	adds	r3, r2, r3
 80167c4:	930a      	str	r3, [sp, #40]	; 0x28
 80167c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	930c      	str	r3, [sp, #48]	; 0x30
 80167cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80167ce:	685c      	ldr	r4, [r3, #4]
 80167d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167d2:	3404      	adds	r4, #4
 80167d4:	43db      	mvns	r3, r3
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80167da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167dc:	2b00      	cmp	r3, #0
 80167de:	dc03      	bgt.n	80167e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80167e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	f340 8250 	ble.w	8016c88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80167e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80167ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80167ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80167f2:	1e48      	subs	r0, r1, #1
 80167f4:	1e55      	subs	r5, r2, #1
 80167f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	f340 80ee 	ble.w	80169da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80167fe:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8016800:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016802:	1436      	asrs	r6, r6, #16
 8016804:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016808:	d406      	bmi.n	8016818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801680a:	4286      	cmp	r6, r0
 801680c:	da04      	bge.n	8016818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801680e:	2b00      	cmp	r3, #0
 8016810:	db02      	blt.n	8016818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016812:	42ab      	cmp	r3, r5
 8016814:	f2c0 80e2 	blt.w	80169dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8016818:	3601      	adds	r6, #1
 801681a:	f100 80cf 	bmi.w	80169bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801681e:	42b1      	cmp	r1, r6
 8016820:	f2c0 80cc 	blt.w	80169bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016824:	3301      	adds	r3, #1
 8016826:	f100 80c9 	bmi.w	80169bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801682a:	429a      	cmp	r2, r3
 801682c:	f2c0 80c6 	blt.w	80169bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016830:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8016834:	f1bb 0f00 	cmp.w	fp, #0
 8016838:	f340 80f1 	ble.w	8016a1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801683c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801683e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016840:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016842:	141d      	asrs	r5, r3, #16
 8016844:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016846:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801684a:	68c7      	ldr	r7, [r0, #12]
 801684c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801684e:	1418      	asrs	r0, r3, #16
 8016850:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8016854:	6892      	ldr	r2, [r2, #8]
 8016856:	f100 8137 	bmi.w	8016ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801685a:	f102 3cff 	add.w	ip, r2, #4294967295
 801685e:	4560      	cmp	r0, ip
 8016860:	f280 8132 	bge.w	8016ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8016864:	2d00      	cmp	r5, #0
 8016866:	f2c0 812f 	blt.w	8016ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801686a:	f107 3cff 	add.w	ip, r7, #4294967295
 801686e:	4565      	cmp	r5, ip
 8016870:	f280 812a 	bge.w	8016ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8016874:	b212      	sxth	r2, r2
 8016876:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016878:	fb05 0002 	mla	r0, r5, r2, r0
 801687c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801687e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8016882:	4405      	add	r5, r0
 8016884:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016888:	eb04 0e0c 	add.w	lr, r4, ip
 801688c:	f1b8 0f00 	cmp.w	r8, #0
 8016890:	f000 810c 	beq.w	8016aac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8016894:	786f      	ldrb	r7, [r5, #1]
 8016896:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801689a:	4427      	add	r7, r4
 801689c:	2900      	cmp	r1, #0
 801689e:	f000 810d 	beq.w	8016abc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80168a2:	18a8      	adds	r0, r5, r2
 80168a4:	5caa      	ldrb	r2, [r5, r2]
 80168a6:	7840      	ldrb	r0, [r0, #1]
 80168a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80168ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80168b0:	4422      	add	r2, r4
 80168b2:	4420      	add	r0, r4
 80168b4:	fa1f f388 	uxth.w	r3, r8
 80168b8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80168bc:	b289      	uxth	r1, r1
 80168be:	f897 c000 	ldrb.w	ip, [r7]
 80168c2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80168c6:	fb03 f901 	mul.w	r9, r3, r1
 80168ca:	011b      	lsls	r3, r3, #4
 80168cc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80168d0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80168d4:	eba3 0309 	sub.w	r3, r3, r9
 80168d8:	b289      	uxth	r1, r1
 80168da:	b29b      	uxth	r3, r3
 80168dc:	eba8 0801 	sub.w	r8, r8, r1
 80168e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80168e4:	fa1f f888 	uxth.w	r8, r8
 80168e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80168ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168ec:	fb08 cc0a 	mla	ip, r8, sl, ip
 80168f0:	f892 a000 	ldrb.w	sl, [r2]
 80168f4:	fb01 cc0a 	mla	ip, r1, sl, ip
 80168f8:	f890 a000 	ldrb.w	sl, [r0]
 80168fc:	fb09 cc0a 	mla	ip, r9, sl, ip
 8016900:	f896 a000 	ldrb.w	sl, [r6]
 8016904:	fb1a fa03 	smulbb	sl, sl, r3
 8016908:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801690c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801690e:	fb0c ac05 	mla	ip, ip, r5, sl
 8016912:	fa1f fc8c 	uxth.w	ip, ip
 8016916:	f10c 0a01 	add.w	sl, ip, #1
 801691a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801691e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016922:	f886 a000 	strb.w	sl, [r6]
 8016926:	f897 c001 	ldrb.w	ip, [r7, #1]
 801692a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801692e:	fb03 fc0c 	mul.w	ip, r3, ip
 8016932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016934:	fb08 cc0a 	mla	ip, r8, sl, ip
 8016938:	f892 a001 	ldrb.w	sl, [r2, #1]
 801693c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8016940:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016944:	fb09 cc0a 	mla	ip, r9, sl, ip
 8016948:	f896 a001 	ldrb.w	sl, [r6, #1]
 801694c:	fb1a fa03 	smulbb	sl, sl, r3
 8016950:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016956:	fb0c ac05 	mla	ip, ip, r5, sl
 801695a:	fa1f fc8c 	uxth.w	ip, ip
 801695e:	f10c 0a01 	add.w	sl, ip, #1
 8016962:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8016966:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801696a:	f886 c001 	strb.w	ip, [r6, #1]
 801696e:	78bf      	ldrb	r7, [r7, #2]
 8016970:	f89e c002 	ldrb.w	ip, [lr, #2]
 8016974:	437b      	muls	r3, r7
 8016976:	fb08 330c 	mla	r3, r8, ip, r3
 801697a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801697e:	7882      	ldrb	r2, [r0, #2]
 8016980:	fb01 310c 	mla	r1, r1, ip, r3
 8016984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016986:	fb09 1902 	mla	r9, r9, r2, r1
 801698a:	78b1      	ldrb	r1, [r6, #2]
 801698c:	fb11 f103 	smulbb	r1, r1, r3
 8016990:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016994:	fb09 1505 	mla	r5, r9, r5, r1
 8016998:	b2ad      	uxth	r5, r5
 801699a:	1c6b      	adds	r3, r5, #1
 801699c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80169a0:	122d      	asrs	r5, r5, #8
 80169a2:	70b5      	strb	r5, [r6, #2]
 80169a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80169a6:	3603      	adds	r6, #3
 80169a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80169aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80169ae:	4413      	add	r3, r2
 80169b0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80169b2:	9325      	str	r3, [sp, #148]	; 0x94
 80169b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80169b6:	4413      	add	r3, r2
 80169b8:	9326      	str	r3, [sp, #152]	; 0x98
 80169ba:	e73b      	b.n	8016834 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80169bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80169be:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80169c0:	4433      	add	r3, r6
 80169c2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80169c4:	9325      	str	r3, [sp, #148]	; 0x94
 80169c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80169c8:	4433      	add	r3, r6
 80169ca:	9326      	str	r3, [sp, #152]	; 0x98
 80169cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ce:	3b01      	subs	r3, #1
 80169d0:	9309      	str	r3, [sp, #36]	; 0x24
 80169d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169d4:	3303      	adds	r3, #3
 80169d6:	930a      	str	r3, [sp, #40]	; 0x28
 80169d8:	e70d      	b.n	80167f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80169da:	d028      	beq.n	8016a2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80169dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169de:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80169e0:	3b01      	subs	r3, #1
 80169e2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80169e4:	fb00 5003 	mla	r0, r0, r3, r5
 80169e8:	1400      	asrs	r0, r0, #16
 80169ea:	f53f af21 	bmi.w	8016830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80169ee:	3901      	subs	r1, #1
 80169f0:	4288      	cmp	r0, r1
 80169f2:	f6bf af1d 	bge.w	8016830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80169f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80169f8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80169fa:	fb01 0303 	mla	r3, r1, r3, r0
 80169fe:	141b      	asrs	r3, r3, #16
 8016a00:	f53f af16 	bmi.w	8016830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016a04:	3a01      	subs	r2, #1
 8016a06:	4293      	cmp	r3, r2
 8016a08:	f6bf af12 	bge.w	8016830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a0e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016a12:	1cdf      	adds	r7, r3, #3
 8016a14:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8016a18:	f1b9 0f00 	cmp.w	r9, #0
 8016a1c:	dc73      	bgt.n	8016b06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8016a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a2a:	441a      	add	r2, r3
 8016a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8016a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f340 8129 	ble.w	8016c88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8016a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016a3c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016a40:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016a44:	eef0 6a48 	vmov.f32	s13, s16
 8016a48:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016a4c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016a50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a54:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8016a58:	eef0 6a68 	vmov.f32	s13, s17
 8016a5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a60:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8016a64:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016a68:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016a6c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016a70:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016a74:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016a78:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016a7c:	ee18 2a10 	vmov	r2, s16
 8016a80:	eeb0 8a47 	vmov.f32	s16, s14
 8016a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a88:	ee18 2a90 	vmov	r2, s17
 8016a8c:	9327      	str	r3, [sp, #156]	; 0x9c
 8016a8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016a90:	eef0 8a67 	vmov.f32	s17, s15
 8016a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a98:	9328      	str	r3, [sp, #160]	; 0xa0
 8016a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a9e:	3b01      	subs	r3, #1
 8016aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8016aa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016aa4:	bf08      	it	eq
 8016aa6:	4613      	moveq	r3, r2
 8016aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8016aaa:	e696      	b.n	80167da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016aac:	b149      	cbz	r1, 8016ac2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8016aae:	5caa      	ldrb	r2, [r5, r2]
 8016ab0:	4670      	mov	r0, lr
 8016ab2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016ab6:	4422      	add	r2, r4
 8016ab8:	4677      	mov	r7, lr
 8016aba:	e6fb      	b.n	80168b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8016abc:	4670      	mov	r0, lr
 8016abe:	4672      	mov	r2, lr
 8016ac0:	e6f8      	b.n	80168b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8016ac2:	4670      	mov	r0, lr
 8016ac4:	4672      	mov	r2, lr
 8016ac6:	e7f7      	b.n	8016ab8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8016ac8:	f110 0c01 	adds.w	ip, r0, #1
 8016acc:	f53f af6a 	bmi.w	80169a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016ad0:	4562      	cmp	r2, ip
 8016ad2:	f6ff af67 	blt.w	80169a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016ad6:	f115 0c01 	adds.w	ip, r5, #1
 8016ada:	f53f af63 	bmi.w	80169a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016ade:	4567      	cmp	r7, ip
 8016ae0:	f6ff af60 	blt.w	80169a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ae6:	b23f      	sxth	r7, r7
 8016ae8:	b212      	sxth	r2, r2
 8016aea:	9002      	str	r0, [sp, #8]
 8016aec:	9701      	str	r7, [sp, #4]
 8016aee:	9200      	str	r2, [sp, #0]
 8016af0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016af2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016af4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8016af8:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8016afc:	4623      	mov	r3, r4
 8016afe:	4631      	mov	r1, r6
 8016b00:	f7ff fd4c 	bl	801659c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8016b04:	e74e      	b.n	80169a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016b06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016b08:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016b0a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016b0e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8016b10:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016b12:	1400      	asrs	r0, r0, #16
 8016b14:	142d      	asrs	r5, r5, #16
 8016b16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016b18:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8016b1c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016b20:	fb02 5000 	mla	r0, r2, r0, r5
 8016b24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016b26:	f815 e000 	ldrb.w	lr, [r5, r0]
 8016b2a:	eb05 0c00 	add.w	ip, r5, r0
 8016b2e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016b32:	eb04 060e 	add.w	r6, r4, lr
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	f000 8097 	beq.w	8016c6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8016b3c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8016b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b44:	4425      	add	r5, r4
 8016b46:	2900      	cmp	r1, #0
 8016b48:	f000 8098 	beq.w	8016c7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8016b4c:	eb0c 0002 	add.w	r0, ip, r2
 8016b50:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016b54:	7840      	ldrb	r0, [r0, #1]
 8016b56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016b5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016b5e:	4422      	add	r2, r4
 8016b60:	4420      	add	r0, r4
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8016b68:	b289      	uxth	r1, r1
 8016b6a:	f895 e000 	ldrb.w	lr, [r5]
 8016b6e:	3703      	adds	r7, #3
 8016b70:	f109 39ff 	add.w	r9, r9, #4294967295
 8016b74:	fb03 f801 	mul.w	r8, r3, r1
 8016b78:	011b      	lsls	r3, r3, #4
 8016b7a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8016b7e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8016b82:	eba3 0308 	sub.w	r3, r3, r8
 8016b86:	b289      	uxth	r1, r1
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	ebac 0c01 	sub.w	ip, ip, r1
 8016b8e:	fb03 fe0e 	mul.w	lr, r3, lr
 8016b92:	fa1f fc8c 	uxth.w	ip, ip
 8016b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b9a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016b9e:	f892 b000 	ldrb.w	fp, [r2]
 8016ba2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016ba6:	f890 b000 	ldrb.w	fp, [r0]
 8016baa:	fb08 ee0b 	mla	lr, r8, fp, lr
 8016bae:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8016bb2:	fb1b fb03 	smulbb	fp, fp, r3
 8016bb6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8016bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bbc:	fb0e be0a 	mla	lr, lr, sl, fp
 8016bc0:	fa1f fe8e 	uxth.w	lr, lr
 8016bc4:	f10e 0b01 	add.w	fp, lr, #1
 8016bc8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8016bcc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016bd0:	f807 ec06 	strb.w	lr, [r7, #-6]
 8016bd4:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016bd8:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016bdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8016be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016be2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016be6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016bea:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016bee:	f890 b001 	ldrb.w	fp, [r0, #1]
 8016bf2:	fb08 ee0b 	mla	lr, r8, fp, lr
 8016bf6:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8016bfa:	fb1b fb03 	smulbb	fp, fp, r3
 8016bfe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8016c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c04:	fb0e be0a 	mla	lr, lr, sl, fp
 8016c08:	fa1f fe8e 	uxth.w	lr, lr
 8016c0c:	f10e 0b01 	add.w	fp, lr, #1
 8016c10:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8016c14:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016c18:	f807 ec05 	strb.w	lr, [r7, #-5]
 8016c1c:	78ad      	ldrb	r5, [r5, #2]
 8016c1e:	78b6      	ldrb	r6, [r6, #2]
 8016c20:	436b      	muls	r3, r5
 8016c22:	7895      	ldrb	r5, [r2, #2]
 8016c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c26:	fb0c 3306 	mla	r3, ip, r6, r3
 8016c2a:	fb01 3305 	mla	r3, r1, r5, r3
 8016c2e:	7885      	ldrb	r5, [r0, #2]
 8016c30:	fb08 3805 	mla	r8, r8, r5, r3
 8016c34:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8016c38:	fb13 f302 	smulbb	r3, r3, r2
 8016c3c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016c40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016c42:	fb08 380a 	mla	r8, r8, sl, r3
 8016c46:	fa1f f888 	uxth.w	r8, r8
 8016c4a:	f108 0301 	add.w	r3, r8, #1
 8016c4e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8016c52:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016c54:	4413      	add	r3, r2
 8016c56:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016c58:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016c5c:	9325      	str	r3, [sp, #148]	; 0x94
 8016c5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c60:	f807 8c04 	strb.w	r8, [r7, #-4]
 8016c64:	4413      	add	r3, r2
 8016c66:	9326      	str	r3, [sp, #152]	; 0x98
 8016c68:	e6d6      	b.n	8016a18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8016c6a:	b151      	cbz	r1, 8016c82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8016c6c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016c70:	4630      	mov	r0, r6
 8016c72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016c76:	4422      	add	r2, r4
 8016c78:	4635      	mov	r5, r6
 8016c7a:	e772      	b.n	8016b62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8016c7c:	4630      	mov	r0, r6
 8016c7e:	4632      	mov	r2, r6
 8016c80:	e76f      	b.n	8016b62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8016c82:	4630      	mov	r0, r6
 8016c84:	4632      	mov	r2, r6
 8016c86:	e7f7      	b.n	8016c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8016c88:	b013      	add	sp, #76	; 0x4c
 8016c8a:	ecbd 8b08 	vpop	{d8-d11}
 8016c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016c94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8016c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c98:	784d      	ldrb	r5, [r1, #1]
 8016c9a:	f891 9002 	ldrb.w	r9, [r1, #2]
 8016c9e:	022d      	lsls	r5, r5, #8
 8016ca0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8016ca4:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8016ca8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8016cac:	f891 9000 	ldrb.w	r9, [r1]
 8016cb0:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8016cb4:	ea45 0509 	orr.w	r5, r5, r9
 8016cb8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8016cbc:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8016cc0:	9501      	str	r5, [sp, #4]
 8016cc2:	fb06 470c 	mla	r7, r6, ip, r4
 8016cc6:	2e00      	cmp	r6, #0
 8016cc8:	eb02 0e07 	add.w	lr, r2, r7
 8016ccc:	db46      	blt.n	8016d5c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8016cce:	45b0      	cmp	r8, r6
 8016cd0:	dd44      	ble.n	8016d5c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8016cd2:	2c00      	cmp	r4, #0
 8016cd4:	db40      	blt.n	8016d58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8016cd6:	45a4      	cmp	ip, r4
 8016cd8:	dd3e      	ble.n	8016d58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8016cda:	5dd7      	ldrb	r7, [r2, r7]
 8016cdc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016ce0:	441f      	add	r7, r3
 8016ce2:	1c62      	adds	r2, r4, #1
 8016ce4:	d43d      	bmi.n	8016d62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8016ce6:	4594      	cmp	ip, r2
 8016ce8:	dd3b      	ble.n	8016d62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8016cea:	f1ba 0f00 	cmp.w	sl, #0
 8016cee:	d038      	beq.n	8016d62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8016cf0:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8016cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016cf8:	441d      	add	r5, r3
 8016cfa:	3601      	adds	r6, #1
 8016cfc:	d435      	bmi.n	8016d6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8016cfe:	45b0      	cmp	r8, r6
 8016d00:	dd33      	ble.n	8016d6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8016d02:	b390      	cbz	r0, 8016d6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8016d04:	2c00      	cmp	r4, #0
 8016d06:	db2e      	blt.n	8016d66 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8016d08:	45a4      	cmp	ip, r4
 8016d0a:	dd2c      	ble.n	8016d66 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8016d0c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8016d10:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016d14:	441e      	add	r6, r3
 8016d16:	1c62      	adds	r2, r4, #1
 8016d18:	d42a      	bmi.n	8016d70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8016d1a:	4594      	cmp	ip, r2
 8016d1c:	dd28      	ble.n	8016d70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8016d1e:	f1ba 0f00 	cmp.w	sl, #0
 8016d22:	d025      	beq.n	8016d70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8016d24:	44f4      	add	ip, lr
 8016d26:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8016d2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016d2e:	4413      	add	r3, r2
 8016d30:	f1ba 0f0f 	cmp.w	sl, #15
 8016d34:	f897 8000 	ldrb.w	r8, [r7]
 8016d38:	f895 9000 	ldrb.w	r9, [r5]
 8016d3c:	f896 e000 	ldrb.w	lr, [r6]
 8016d40:	f893 c000 	ldrb.w	ip, [r3]
 8016d44:	d801      	bhi.n	8016d4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8016d46:	280f      	cmp	r0, #15
 8016d48:	d914      	bls.n	8016d74 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8016d4a:	4b29      	ldr	r3, [pc, #164]	; (8016df0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8016d4c:	f240 115b 	movw	r1, #347	; 0x15b
 8016d50:	4a28      	ldr	r2, [pc, #160]	; (8016df4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8016d52:	4829      	ldr	r0, [pc, #164]	; (8016df8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8016d54:	f006 f802 	bl	801cd5c <__assert_func>
 8016d58:	af01      	add	r7, sp, #4
 8016d5a:	e7c2      	b.n	8016ce2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8016d5c:	ad01      	add	r5, sp, #4
 8016d5e:	462f      	mov	r7, r5
 8016d60:	e7cb      	b.n	8016cfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8016d62:	ad01      	add	r5, sp, #4
 8016d64:	e7c9      	b.n	8016cfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8016d66:	ae01      	add	r6, sp, #4
 8016d68:	e7d5      	b.n	8016d16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 8016d6a:	ab01      	add	r3, sp, #4
 8016d6c:	461e      	mov	r6, r3
 8016d6e:	e7df      	b.n	8016d30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8016d70:	ab01      	add	r3, sp, #4
 8016d72:	e7dd      	b.n	8016d30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8016d74:	fa1f f48a 	uxth.w	r4, sl
 8016d78:	b280      	uxth	r0, r0
 8016d7a:	fb04 fa00 	mul.w	sl, r4, r0
 8016d7e:	0124      	lsls	r4, r4, #4
 8016d80:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8016d84:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8016d88:	b282      	uxth	r2, r0
 8016d8a:	eba4 000a 	sub.w	r0, r4, sl
 8016d8e:	ebab 0b02 	sub.w	fp, fp, r2
 8016d92:	b280      	uxth	r0, r0
 8016d94:	fa1f fb8b 	uxth.w	fp, fp
 8016d98:	fb00 f909 	mul.w	r9, r0, r9
 8016d9c:	fb0b 9808 	mla	r8, fp, r8, r9
 8016da0:	fb02 8e0e 	mla	lr, r2, lr, r8
 8016da4:	fb0a ec0c 	mla	ip, sl, ip, lr
 8016da8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016dac:	f881 c000 	strb.w	ip, [r1]
 8016db0:	786c      	ldrb	r4, [r5, #1]
 8016db2:	f897 c001 	ldrb.w	ip, [r7, #1]
 8016db6:	4344      	muls	r4, r0
 8016db8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8016dbc:	7874      	ldrb	r4, [r6, #1]
 8016dbe:	fb02 cc04 	mla	ip, r2, r4, ip
 8016dc2:	785c      	ldrb	r4, [r3, #1]
 8016dc4:	fb0a c404 	mla	r4, sl, r4, ip
 8016dc8:	1224      	asrs	r4, r4, #8
 8016dca:	704c      	strb	r4, [r1, #1]
 8016dcc:	78ad      	ldrb	r5, [r5, #2]
 8016dce:	78bc      	ldrb	r4, [r7, #2]
 8016dd0:	4368      	muls	r0, r5
 8016dd2:	fb0b 0b04 	mla	fp, fp, r4, r0
 8016dd6:	78b0      	ldrb	r0, [r6, #2]
 8016dd8:	fb02 b000 	mla	r0, r2, r0, fp
 8016ddc:	789a      	ldrb	r2, [r3, #2]
 8016dde:	fb0a 0a02 	mla	sl, sl, r2, r0
 8016de2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016de6:	f881 a002 	strb.w	sl, [r1, #2]
 8016dea:	b003      	add	sp, #12
 8016dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016df0:	0802145d 	.word	0x0802145d
 8016df4:	08021872 	.word	0x08021872
 8016df8:	0802142a 	.word	0x0802142a

08016dfc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e00:	ed2d 8b0a 	vpush	{d8-d12}
 8016e04:	b08d      	sub	sp, #52	; 0x34
 8016e06:	eeb0 aa40 	vmov.f32	s20, s0
 8016e0a:	eef0 9a60 	vmov.f32	s19, s1
 8016e0e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e10:	eeb0 9a41 	vmov.f32	s18, s2
 8016e14:	9306      	str	r3, [sp, #24]
 8016e16:	eeb0 8a62 	vmov.f32	s16, s5
 8016e1a:	eef0 8a43 	vmov.f32	s17, s6
 8016e1e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8016e20:	eeb0 ca44 	vmov.f32	s24, s8
 8016e24:	eef0 ba64 	vmov.f32	s23, s9
 8016e28:	eeb0 ba45 	vmov.f32	s22, s10
 8016e2c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8016e30:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8016e34:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016e36:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8016e3a:	6850      	ldr	r0, [r2, #4]
 8016e3c:	6812      	ldr	r2, [r2, #0]
 8016e3e:	fb00 1303 	mla	r3, r0, r3, r1
 8016e42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e46:	18d3      	adds	r3, r2, r3
 8016e48:	9307      	str	r3, [sp, #28]
 8016e4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	9308      	str	r3, [sp, #32]
 8016e50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e52:	685d      	ldr	r5, [r3, #4]
 8016e54:	3504      	adds	r5, #4
 8016e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	dc03      	bgt.n	8016e64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f340 81e6 	ble.w	8017230 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8016e64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016e6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016e6e:	1e48      	subs	r0, r1, #1
 8016e70:	1e56      	subs	r6, r2, #1
 8016e72:	9b06      	ldr	r3, [sp, #24]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	f340 80bd 	ble.w	8016ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8016e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016e7c:	1427      	asrs	r7, r4, #16
 8016e7e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016e82:	d406      	bmi.n	8016e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016e84:	4287      	cmp	r7, r0
 8016e86:	da04      	bge.n	8016e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	db02      	blt.n	8016e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016e8c:	42b3      	cmp	r3, r6
 8016e8e:	f2c0 80b2 	blt.w	8016ff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8016e92:	3701      	adds	r7, #1
 8016e94:	f100 80a1 	bmi.w	8016fda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8016e98:	42b9      	cmp	r1, r7
 8016e9a:	f2c0 809e 	blt.w	8016fda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8016e9e:	3301      	adds	r3, #1
 8016ea0:	f100 809b 	bmi.w	8016fda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	f2c0 8098 	blt.w	8016fda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8016eaa:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8016eae:	f1bb 0f00 	cmp.w	fp, #0
 8016eb2:	f340 80bf 	ble.w	8017034 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8016eb6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016eb8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8016eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016ebc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016ec0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8016ec4:	1420      	asrs	r0, r4, #16
 8016ec6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016ec8:	ea4f 4723 	mov.w	r7, r3, asr #16
 8016ecc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8016ed0:	6892      	ldr	r2, [r2, #8]
 8016ed2:	f100 8103 	bmi.w	80170dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016ed6:	f102 3eff 	add.w	lr, r2, #4294967295
 8016eda:	4570      	cmp	r0, lr
 8016edc:	f280 80fe 	bge.w	80170dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016ee0:	2f00      	cmp	r7, #0
 8016ee2:	f2c0 80fb 	blt.w	80170dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016ee6:	f10c 3eff 	add.w	lr, ip, #4294967295
 8016eea:	4577      	cmp	r7, lr
 8016eec:	f280 80f6 	bge.w	80170dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016ef0:	b212      	sxth	r2, r2
 8016ef2:	fb07 0002 	mla	r0, r7, r2, r0
 8016ef6:	9f08      	ldr	r7, [sp, #32]
 8016ef8:	f817 8000 	ldrb.w	r8, [r7, r0]
 8016efc:	eb07 0e00 	add.w	lr, r7, r0
 8016f00:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016f04:	eb05 0c08 	add.w	ip, r5, r8
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	f000 80d8 	beq.w	80170be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8016f0e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8016f12:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016f16:	442f      	add	r7, r5
 8016f18:	2900      	cmp	r1, #0
 8016f1a:	f000 80d9 	beq.w	80170d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8016f1e:	eb0e 0002 	add.w	r0, lr, r2
 8016f22:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8016f26:	7840      	ldrb	r0, [r0, #1]
 8016f28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016f30:	442a      	add	r2, r5
 8016f32:	4428      	add	r0, r5
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	f815 a008 	ldrb.w	sl, [r5, r8]
 8016f3a:	b289      	uxth	r1, r1
 8016f3c:	f897 8000 	ldrb.w	r8, [r7]
 8016f40:	fb03 f901 	mul.w	r9, r3, r1
 8016f44:	011b      	lsls	r3, r3, #4
 8016f46:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016f4a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8016f4e:	eba3 0309 	sub.w	r3, r3, r9
 8016f52:	b289      	uxth	r1, r1
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	ebae 0e01 	sub.w	lr, lr, r1
 8016f5a:	fb03 f808 	mul.w	r8, r3, r8
 8016f5e:	fa1f fe8e 	uxth.w	lr, lr
 8016f62:	fb0e 880a 	mla	r8, lr, sl, r8
 8016f66:	f892 a000 	ldrb.w	sl, [r2]
 8016f6a:	fb01 880a 	mla	r8, r1, sl, r8
 8016f6e:	f890 a000 	ldrb.w	sl, [r0]
 8016f72:	fb09 880a 	mla	r8, r9, sl, r8
 8016f76:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016f7a:	f886 8000 	strb.w	r8, [r6]
 8016f7e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8016f82:	f89c a001 	ldrb.w	sl, [ip, #1]
 8016f86:	fb03 f808 	mul.w	r8, r3, r8
 8016f8a:	fb0e 880a 	mla	r8, lr, sl, r8
 8016f8e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8016f92:	fb01 880a 	mla	r8, r1, sl, r8
 8016f96:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016f9a:	fb09 880a 	mla	r8, r9, sl, r8
 8016f9e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016fa2:	f886 8001 	strb.w	r8, [r6, #1]
 8016fa6:	78bf      	ldrb	r7, [r7, #2]
 8016fa8:	f89c c002 	ldrb.w	ip, [ip, #2]
 8016fac:	437b      	muls	r3, r7
 8016fae:	7892      	ldrb	r2, [r2, #2]
 8016fb0:	fb0e 330c 	mla	r3, lr, ip, r3
 8016fb4:	fb01 3102 	mla	r1, r1, r2, r3
 8016fb8:	7882      	ldrb	r2, [r0, #2]
 8016fba:	fb09 1902 	mla	r9, r9, r2, r1
 8016fbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016fc2:	f886 9002 	strb.w	r9, [r6, #2]
 8016fc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016fc8:	3603      	adds	r6, #3
 8016fca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016fcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016fd0:	441c      	add	r4, r3
 8016fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016fd4:	4413      	add	r3, r2
 8016fd6:	9322      	str	r3, [sp, #136]	; 0x88
 8016fd8:	e769      	b.n	8016eae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016fda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016fdc:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8016fde:	441c      	add	r4, r3
 8016fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016fe2:	443b      	add	r3, r7
 8016fe4:	9322      	str	r3, [sp, #136]	; 0x88
 8016fe6:	9b06      	ldr	r3, [sp, #24]
 8016fe8:	3b01      	subs	r3, #1
 8016fea:	9306      	str	r3, [sp, #24]
 8016fec:	9b07      	ldr	r3, [sp, #28]
 8016fee:	3303      	adds	r3, #3
 8016ff0:	9307      	str	r3, [sp, #28]
 8016ff2:	e73e      	b.n	8016e72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016ff4:	d026      	beq.n	8017044 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016ff6:	9b06      	ldr	r3, [sp, #24]
 8016ff8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8016ffa:	3b01      	subs	r3, #1
 8016ffc:	fb00 4003 	mla	r0, r0, r3, r4
 8017000:	1400      	asrs	r0, r0, #16
 8017002:	f53f af52 	bmi.w	8016eaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017006:	3901      	subs	r1, #1
 8017008:	4288      	cmp	r0, r1
 801700a:	f6bf af4e 	bge.w	8016eaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801700e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017012:	fb01 0303 	mla	r3, r1, r3, r0
 8017016:	141b      	asrs	r3, r3, #16
 8017018:	f53f af47 	bmi.w	8016eaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801701c:	3a01      	subs	r2, #1
 801701e:	4293      	cmp	r3, r2
 8017020:	f6bf af43 	bge.w	8016eaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017024:	9b07      	ldr	r3, [sp, #28]
 8017026:	f8dd a018 	ldr.w	sl, [sp, #24]
 801702a:	f103 0803 	add.w	r8, r3, #3
 801702e:	f1ba 0f00 	cmp.w	sl, #0
 8017032:	dc71      	bgt.n	8017118 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8017034:	9b06      	ldr	r3, [sp, #24]
 8017036:	9a07      	ldr	r2, [sp, #28]
 8017038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801703c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017040:	441a      	add	r2, r3
 8017042:	9207      	str	r2, [sp, #28]
 8017044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017046:	2b00      	cmp	r3, #0
 8017048:	f340 80f2 	ble.w	8017230 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801704c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017050:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017052:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017056:	eef0 6a48 	vmov.f32	s13, s16
 801705a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801705e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017062:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017066:	ee16 4a90 	vmov	r4, s13
 801706a:	eef0 6a68 	vmov.f32	s13, s17
 801706e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017072:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8017076:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801707a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801707e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017082:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017086:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801708a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801708e:	ee18 2a10 	vmov	r2, s16
 8017092:	eeb0 8a47 	vmov.f32	s16, s14
 8017096:	fb92 f3f3 	sdiv	r3, r2, r3
 801709a:	ee18 2a90 	vmov	r2, s17
 801709e:	9323      	str	r3, [sp, #140]	; 0x8c
 80170a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170a2:	eef0 8a67 	vmov.f32	s17, s15
 80170a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80170aa:	9324      	str	r3, [sp, #144]	; 0x90
 80170ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170b0:	3b01      	subs	r3, #1
 80170b2:	9309      	str	r3, [sp, #36]	; 0x24
 80170b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170b6:	bf08      	it	eq
 80170b8:	4613      	moveq	r3, r2
 80170ba:	9306      	str	r3, [sp, #24]
 80170bc:	e6cb      	b.n	8016e56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80170be:	b151      	cbz	r1, 80170d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80170c0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80170c4:	4660      	mov	r0, ip
 80170c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80170ca:	442a      	add	r2, r5
 80170cc:	4667      	mov	r7, ip
 80170ce:	e731      	b.n	8016f34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80170d0:	4660      	mov	r0, ip
 80170d2:	4662      	mov	r2, ip
 80170d4:	e72e      	b.n	8016f34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80170d6:	4660      	mov	r0, ip
 80170d8:	4662      	mov	r2, ip
 80170da:	e7f7      	b.n	80170cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80170dc:	f110 0e01 	adds.w	lr, r0, #1
 80170e0:	f53f af71 	bmi.w	8016fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80170e4:	4572      	cmp	r2, lr
 80170e6:	f6ff af6e 	blt.w	8016fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80170ea:	f117 0e01 	adds.w	lr, r7, #1
 80170ee:	f53f af6a 	bmi.w	8016fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80170f2:	45f4      	cmp	ip, lr
 80170f4:	f6ff af67 	blt.w	8016fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80170f8:	b212      	sxth	r2, r2
 80170fa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80170fe:	fa0f f38c 	sxth.w	r3, ip
 8017102:	9200      	str	r2, [sp, #0]
 8017104:	4631      	mov	r1, r6
 8017106:	9a08      	ldr	r2, [sp, #32]
 8017108:	9301      	str	r3, [sp, #4]
 801710a:	462b      	mov	r3, r5
 801710c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8017110:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017112:	f7ff fdbf 	bl	8016c94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8017116:	e756      	b.n	8016fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017118:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801711a:	1426      	asrs	r6, r4, #16
 801711c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801711e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017122:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017126:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017128:	1400      	asrs	r0, r0, #16
 801712a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801712e:	fb02 6000 	mla	r0, r2, r0, r6
 8017132:	9e08      	ldr	r6, [sp, #32]
 8017134:	f816 e000 	ldrb.w	lr, [r6, r0]
 8017138:	eb06 0c00 	add.w	ip, r6, r0
 801713c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017140:	eb05 070e 	add.w	r7, r5, lr
 8017144:	2b00      	cmp	r3, #0
 8017146:	d064      	beq.n	8017212 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8017148:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801714c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017150:	442e      	add	r6, r5
 8017152:	2900      	cmp	r1, #0
 8017154:	d066      	beq.n	8017224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8017156:	eb0c 0002 	add.w	r0, ip, r2
 801715a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801715e:	7840      	ldrb	r0, [r0, #1]
 8017160:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017164:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017168:	442a      	add	r2, r5
 801716a:	4428      	add	r0, r5
 801716c:	b29b      	uxth	r3, r3
 801716e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8017172:	b289      	uxth	r1, r1
 8017174:	f896 e000 	ldrb.w	lr, [r6]
 8017178:	f108 0803 	add.w	r8, r8, #3
 801717c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017180:	fb03 f901 	mul.w	r9, r3, r1
 8017184:	011b      	lsls	r3, r3, #4
 8017186:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801718a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801718e:	eba3 0309 	sub.w	r3, r3, r9
 8017192:	b289      	uxth	r1, r1
 8017194:	b29b      	uxth	r3, r3
 8017196:	ebac 0c01 	sub.w	ip, ip, r1
 801719a:	fb03 fe0e 	mul.w	lr, r3, lr
 801719e:	fa1f fc8c 	uxth.w	ip, ip
 80171a2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80171a6:	f892 b000 	ldrb.w	fp, [r2]
 80171aa:	fb01 ee0b 	mla	lr, r1, fp, lr
 80171ae:	f890 b000 	ldrb.w	fp, [r0]
 80171b2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80171b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80171ba:	f808 ec06 	strb.w	lr, [r8, #-6]
 80171be:	f896 e001 	ldrb.w	lr, [r6, #1]
 80171c2:	f897 b001 	ldrb.w	fp, [r7, #1]
 80171c6:	fb03 fe0e 	mul.w	lr, r3, lr
 80171ca:	fb0c ee0b 	mla	lr, ip, fp, lr
 80171ce:	f892 b001 	ldrb.w	fp, [r2, #1]
 80171d2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80171d6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80171da:	fb09 ee0b 	mla	lr, r9, fp, lr
 80171de:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80171e2:	f808 ec05 	strb.w	lr, [r8, #-5]
 80171e6:	78b6      	ldrb	r6, [r6, #2]
 80171e8:	78bf      	ldrb	r7, [r7, #2]
 80171ea:	4373      	muls	r3, r6
 80171ec:	7896      	ldrb	r6, [r2, #2]
 80171ee:	7882      	ldrb	r2, [r0, #2]
 80171f0:	fb0c 3307 	mla	r3, ip, r7, r3
 80171f4:	fb01 3306 	mla	r3, r1, r6, r3
 80171f8:	fb09 3902 	mla	r9, r9, r2, r3
 80171fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80171fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017200:	441c      	add	r4, r3
 8017202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017204:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017208:	4413      	add	r3, r2
 801720a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801720e:	9322      	str	r3, [sp, #136]	; 0x88
 8017210:	e70d      	b.n	801702e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8017212:	b151      	cbz	r1, 801722a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8017214:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017218:	4638      	mov	r0, r7
 801721a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801721e:	442a      	add	r2, r5
 8017220:	463e      	mov	r6, r7
 8017222:	e7a3      	b.n	801716c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017224:	4638      	mov	r0, r7
 8017226:	463a      	mov	r2, r7
 8017228:	e7a0      	b.n	801716c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801722a:	4638      	mov	r0, r7
 801722c:	463a      	mov	r2, r7
 801722e:	e7f7      	b.n	8017220 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8017230:	b00d      	add	sp, #52	; 0x34
 8017232:	ecbd 8b0a 	vpop	{d8-d12}
 8017236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801723c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801723c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017240:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8017244:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8017248:	2d00      	cmp	r5, #0
 801724a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801724e:	fb05 040e 	mla	r4, r5, lr, r0
 8017252:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8017256:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801725a:	eb02 0804 	add.w	r8, r2, r4
 801725e:	db40      	blt.n	80172e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017260:	45a9      	cmp	r9, r5
 8017262:	dd3e      	ble.n	80172e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017264:	2800      	cmp	r0, #0
 8017266:	db3a      	blt.n	80172de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8017268:	4586      	cmp	lr, r0
 801726a:	dd38      	ble.n	80172de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 801726c:	5d12      	ldrb	r2, [r2, r4]
 801726e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017272:	1c42      	adds	r2, r0, #1
 8017274:	d438      	bmi.n	80172e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017276:	4596      	cmp	lr, r2
 8017278:	dd36      	ble.n	80172e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801727a:	b3bf      	cbz	r7, 80172ec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 801727c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017280:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8017284:	3501      	adds	r5, #1
 8017286:	d435      	bmi.n	80172f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017288:	45a9      	cmp	r9, r5
 801728a:	dd33      	ble.n	80172f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801728c:	f1bc 0f00 	cmp.w	ip, #0
 8017290:	d033      	beq.n	80172fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8017292:	2800      	cmp	r0, #0
 8017294:	db2c      	blt.n	80172f0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017296:	4586      	cmp	lr, r0
 8017298:	dd2a      	ble.n	80172f0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801729a:	f818 200e 	ldrb.w	r2, [r8, lr]
 801729e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80172a2:	3001      	adds	r0, #1
 80172a4:	d42c      	bmi.n	8017300 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80172a6:	4586      	cmp	lr, r0
 80172a8:	dd2a      	ble.n	8017300 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80172aa:	b35f      	cbz	r7, 8017304 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 80172ac:	44c6      	add	lr, r8
 80172ae:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80172b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80172b6:	2f0f      	cmp	r7, #15
 80172b8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80172bc:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 80172c0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80172c4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80172c8:	d802      	bhi.n	80172d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 80172ca:	f1bc 0f0f 	cmp.w	ip, #15
 80172ce:	d91b      	bls.n	8017308 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 80172d0:	4b77      	ldr	r3, [pc, #476]	; (80174b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 80172d2:	f240 115b 	movw	r1, #347	; 0x15b
 80172d6:	4a77      	ldr	r2, [pc, #476]	; (80174b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 80172d8:	4877      	ldr	r0, [pc, #476]	; (80174b8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 80172da:	f005 fd3f 	bl	801cd5c <__assert_func>
 80172de:	2600      	movs	r6, #0
 80172e0:	e7c7      	b.n	8017272 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 80172e2:	2400      	movs	r4, #0
 80172e4:	4626      	mov	r6, r4
 80172e6:	e7cd      	b.n	8017284 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 80172e8:	2400      	movs	r4, #0
 80172ea:	e7cb      	b.n	8017284 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 80172ec:	463c      	mov	r4, r7
 80172ee:	e7c9      	b.n	8017284 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 80172f0:	2500      	movs	r5, #0
 80172f2:	e7d6      	b.n	80172a2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 80172f4:	2200      	movs	r2, #0
 80172f6:	4615      	mov	r5, r2
 80172f8:	e7dd      	b.n	80172b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80172fa:	4662      	mov	r2, ip
 80172fc:	4665      	mov	r5, ip
 80172fe:	e7da      	b.n	80172b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017300:	2200      	movs	r2, #0
 8017302:	e7d8      	b.n	80172b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017304:	463a      	mov	r2, r7
 8017306:	e7d6      	b.n	80172b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017308:	b2bf      	uxth	r7, r7
 801730a:	fa1f f08c 	uxth.w	r0, ip
 801730e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8017312:	fb00 fe07 	mul.w	lr, r0, r7
 8017316:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801731a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801731e:	ebac 070e 	sub.w	r7, ip, lr
 8017322:	b280      	uxth	r0, r0
 8017324:	b2bf      	uxth	r7, r7
 8017326:	1a1b      	subs	r3, r3, r0
 8017328:	fb07 fc0a 	mul.w	ip, r7, sl
 801732c:	b29b      	uxth	r3, r3
 801732e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8017332:	9300      	str	r3, [sp, #0]
 8017334:	fb00 cc09 	mla	ip, r0, r9, ip
 8017338:	fb0e cc08 	mla	ip, lr, r8, ip
 801733c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017340:	9301      	str	r3, [sp, #4]
 8017342:	2b00      	cmp	r3, #0
 8017344:	f000 80b0 	beq.w	80174a8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8017348:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801734c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017350:	fb0b fc0c 	mul.w	ip, fp, ip
 8017354:	fb0b f606 	mul.w	r6, fp, r6
 8017358:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801735c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017360:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8017364:	44dc      	add	ip, fp
 8017366:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801736a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801736e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017372:	fb0a fb0b 	mul.w	fp, sl, fp
 8017376:	fb0a fa04 	mul.w	sl, sl, r4
 801737a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801737e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8017382:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8017386:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801738a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801738e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017392:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8017396:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801739a:	0a36      	lsrs	r6, r6, #8
 801739c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80173a0:	44dc      	add	ip, fp
 80173a2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80173a6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80173aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80173ae:	fb09 fb0b 	mul.w	fp, r9, fp
 80173b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80173b6:	fb09 f905 	mul.w	r9, r9, r5
 80173ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80173be:	ea4f 241b 	mov.w	r4, fp, lsr #8
 80173c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80173c6:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80173ca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80173ce:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80173d2:	fb0c fc07 	mul.w	ip, ip, r7
 80173d6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80173da:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80173de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80173e2:	445c      	add	r4, fp
 80173e4:	fb08 f505 	mul.w	r5, r8, r5
 80173e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80173ec:	fb08 f802 	mul.w	r8, r8, r2
 80173f0:	0a24      	lsrs	r4, r4, #8
 80173f2:	0a2a      	lsrs	r2, r5, #8
 80173f4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80173f8:	fb07 f70a 	mul.w	r7, r7, sl
 80173fc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017400:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017404:	4415      	add	r5, r2
 8017406:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801740a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801740e:	9a00      	ldr	r2, [sp, #0]
 8017410:	0a2d      	lsrs	r5, r5, #8
 8017412:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017416:	fb03 cc02 	mla	ip, r3, r2, ip
 801741a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801741e:	fb02 7306 	mla	r3, r2, r6, r7
 8017422:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8017426:	9a01      	ldr	r2, [sp, #4]
 8017428:	fb05 c50e 	mla	r5, r5, lr, ip
 801742c:	fb0e 3e08 	mla	lr, lr, r8, r3
 8017430:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8017434:	fb04 5400 	mla	r4, r4, r0, r5
 8017438:	fb00 e303 	mla	r3, r0, r3, lr
 801743c:	0a24      	lsrs	r4, r4, #8
 801743e:	0a1b      	lsrs	r3, r3, #8
 8017440:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017448:	431c      	orrs	r4, r3
 801744a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801744e:	b29b      	uxth	r3, r3
 8017450:	b2e0      	uxtb	r0, r4
 8017452:	435a      	muls	r2, r3
 8017454:	fb10 f003 	smulbb	r0, r0, r3
 8017458:	1c55      	adds	r5, r2, #1
 801745a:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 801745e:	780a      	ldrb	r2, [r1, #0]
 8017460:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8017464:	b2ed      	uxtb	r5, r5
 8017466:	fb02 0205 	mla	r2, r2, r5, r0
 801746a:	b292      	uxth	r2, r2
 801746c:	1c50      	adds	r0, r2, #1
 801746e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017472:	7848      	ldrb	r0, [r1, #1]
 8017474:	fb10 f005 	smulbb	r0, r0, r5
 8017478:	1212      	asrs	r2, r2, #8
 801747a:	700a      	strb	r2, [r1, #0]
 801747c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8017480:	0c24      	lsrs	r4, r4, #16
 8017482:	fb02 0203 	mla	r2, r2, r3, r0
 8017486:	b292      	uxth	r2, r2
 8017488:	1c50      	adds	r0, r2, #1
 801748a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801748e:	1212      	asrs	r2, r2, #8
 8017490:	704a      	strb	r2, [r1, #1]
 8017492:	788a      	ldrb	r2, [r1, #2]
 8017494:	fb12 f505 	smulbb	r5, r2, r5
 8017498:	fb04 5303 	mla	r3, r4, r3, r5
 801749c:	b29b      	uxth	r3, r3
 801749e:	1c5a      	adds	r2, r3, #1
 80174a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80174a4:	121b      	asrs	r3, r3, #8
 80174a6:	708b      	strb	r3, [r1, #2]
 80174a8:	b003      	add	sp, #12
 80174aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174ae:	bf00      	nop
 80174b0:	0802145d 	.word	0x0802145d
 80174b4:	08021872 	.word	0x08021872
 80174b8:	0802142a 	.word	0x0802142a

080174bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80174bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c0:	ed2d 8b08 	vpush	{d8-d11}
 80174c4:	b09f      	sub	sp, #124	; 0x7c
 80174c6:	eeb0 aa40 	vmov.f32	s20, s0
 80174ca:	eef0 9a60 	vmov.f32	s19, s1
 80174ce:	921b      	str	r2, [sp, #108]	; 0x6c
 80174d0:	eeb0 9a41 	vmov.f32	s18, s2
 80174d4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80174d6:	eeb0 8a62 	vmov.f32	s16, s5
 80174da:	9309      	str	r3, [sp, #36]	; 0x24
 80174dc:	eef0 8a43 	vmov.f32	s17, s6
 80174e0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80174e4:	eef0 ba44 	vmov.f32	s23, s8
 80174e8:	901d      	str	r0, [sp, #116]	; 0x74
 80174ea:	eeb0 ba64 	vmov.f32	s22, s9
 80174ee:	931c      	str	r3, [sp, #112]	; 0x70
 80174f0:	eef0 aa45 	vmov.f32	s21, s10
 80174f4:	6850      	ldr	r0, [r2, #4]
 80174f6:	9119      	str	r1, [sp, #100]	; 0x64
 80174f8:	6812      	ldr	r2, [r2, #0]
 80174fa:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80174fc:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8017500:	fb00 1303 	mla	r3, r0, r3, r1
 8017504:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017508:	18d3      	adds	r3, r2, r3
 801750a:	930c      	str	r3, [sp, #48]	; 0x30
 801750c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	9312      	str	r3, [sp, #72]	; 0x48
 8017512:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017514:	685e      	ldr	r6, [r3, #4]
 8017516:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801751a:	3604      	adds	r6, #4
 801751c:	930d      	str	r3, [sp, #52]	; 0x34
 801751e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017520:	2b00      	cmp	r3, #0
 8017522:	dc03      	bgt.n	801752c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017526:	2b00      	cmp	r3, #0
 8017528:	f340 8378 	ble.w	8017c1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801752c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801752e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017532:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017536:	1e48      	subs	r0, r1, #1
 8017538:	1e57      	subs	r7, r2, #1
 801753a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801753c:	2b00      	cmp	r3, #0
 801753e:	f340 818c 	ble.w	801785a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8017542:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017544:	142b      	asrs	r3, r5, #16
 8017546:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801754a:	d406      	bmi.n	801755a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801754c:	4584      	cmp	ip, r0
 801754e:	da04      	bge.n	801755a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017550:	2b00      	cmp	r3, #0
 8017552:	db02      	blt.n	801755a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017554:	42bb      	cmp	r3, r7
 8017556:	f2c0 8181 	blt.w	801785c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801755a:	f11c 0c01 	adds.w	ip, ip, #1
 801755e:	f100 816f 	bmi.w	8017840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8017562:	4561      	cmp	r1, ip
 8017564:	f2c0 816c 	blt.w	8017840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8017568:	3301      	adds	r3, #1
 801756a:	f100 8169 	bmi.w	8017840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801756e:	429a      	cmp	r2, r3
 8017570:	f2c0 8166 	blt.w	8017840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8017574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017576:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017578:	931a      	str	r3, [sp, #104]	; 0x68
 801757a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801757c:	2b00      	cmp	r3, #0
 801757e:	f340 818c 	ble.w	801789a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8017582:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017584:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8017588:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801758c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017590:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017592:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8017596:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017598:	141b      	asrs	r3, r3, #16
 801759a:	f100 81d0 	bmi.w	801793e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801759e:	f100 38ff 	add.w	r8, r0, #4294967295
 80175a2:	4543      	cmp	r3, r8
 80175a4:	f280 81cb 	bge.w	801793e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80175a8:	f1bc 0f00 	cmp.w	ip, #0
 80175ac:	f2c0 81c7 	blt.w	801793e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80175b0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80175b4:	45c4      	cmp	ip, r8
 80175b6:	f280 81c2 	bge.w	801793e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80175ba:	b200      	sxth	r0, r0
 80175bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80175be:	fb0c 3300 	mla	r3, ip, r0, r3
 80175c2:	eb04 0803 	add.w	r8, r4, r3
 80175c6:	5ce3      	ldrb	r3, [r4, r3]
 80175c8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80175cc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80175d0:	2a00      	cmp	r2, #0
 80175d2:	f000 81a9 	beq.w	8017928 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 80175d6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80175da:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80175de:	940e      	str	r4, [sp, #56]	; 0x38
 80175e0:	0e24      	lsrs	r4, r4, #24
 80175e2:	9415      	str	r4, [sp, #84]	; 0x54
 80175e4:	b179      	cbz	r1, 8017606 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80175e6:	eb08 0c00 	add.w	ip, r8, r0
 80175ea:	f818 0000 	ldrb.w	r0, [r8, r0]
 80175ee:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80175f2:	900a      	str	r0, [sp, #40]	; 0x28
 80175f4:	0e00      	lsrs	r0, r0, #24
 80175f6:	9013      	str	r0, [sp, #76]	; 0x4c
 80175f8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80175fc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017600:	900f      	str	r0, [sp, #60]	; 0x3c
 8017602:	0e00      	lsrs	r0, r0, #24
 8017604:	9016      	str	r0, [sp, #88]	; 0x58
 8017606:	b292      	uxth	r2, r2
 8017608:	9815      	ldr	r0, [sp, #84]	; 0x54
 801760a:	b289      	uxth	r1, r1
 801760c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801760e:	fb02 f901 	mul.w	r9, r2, r1
 8017612:	0112      	lsls	r2, r2, #4
 8017614:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017618:	eba2 0809 	sub.w	r8, r2, r9
 801761c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017620:	b289      	uxth	r1, r1
 8017622:	fa1f f888 	uxth.w	r8, r8
 8017626:	1a52      	subs	r2, r2, r1
 8017628:	fb08 f000 	mul.w	r0, r8, r0
 801762c:	b292      	uxth	r2, r2
 801762e:	fb02 000e 	mla	r0, r2, lr, r0
 8017632:	fb01 0004 	mla	r0, r1, r4, r0
 8017636:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017638:	fb09 0004 	mla	r0, r9, r4, r0
 801763c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017640:	2800      	cmp	r0, #0
 8017642:	f000 80f2 	beq.w	801782a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017646:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801764a:	d01b      	beq.n	8017684 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801764c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017654:	fb0e fa0a 	mul.w	sl, lr, sl
 8017658:	fb0e fe03 	mul.w	lr, lr, r3
 801765c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017660:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017664:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017668:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801766c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017670:	4453      	add	r3, sl
 8017672:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017676:	0a1b      	lsrs	r3, r3, #8
 8017678:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801767c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017680:	ea43 030c 	orr.w	r3, r3, ip
 8017684:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017686:	2cff      	cmp	r4, #255	; 0xff
 8017688:	d021      	beq.n	80176ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801768a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801768c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017690:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017692:	fb04 fb0b 	mul.w	fp, r4, fp
 8017696:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017698:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801769c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801769e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80176a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80176a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80176aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80176ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80176b2:	44de      	add	lr, fp
 80176b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80176b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80176bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80176c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80176c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80176c8:	ea4e 040a 	orr.w	r4, lr, sl
 80176cc:	940e      	str	r4, [sp, #56]	; 0x38
 80176ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80176d0:	2cff      	cmp	r4, #255	; 0xff
 80176d2:	d021      	beq.n	8017718 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80176d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80176d6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80176da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80176dc:	fb04 fb0b 	mul.w	fp, r4, fp
 80176e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80176e2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80176e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80176e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80176ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80176f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80176f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80176f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80176fc:	44de      	add	lr, fp
 80176fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017702:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017706:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801770a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801770e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017712:	ea4e 040a 	orr.w	r4, lr, sl
 8017716:	940a      	str	r4, [sp, #40]	; 0x28
 8017718:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801771a:	2cff      	cmp	r4, #255	; 0xff
 801771c:	d021      	beq.n	8017762 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801771e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017720:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017724:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017726:	fb04 fb0b 	mul.w	fp, r4, fp
 801772a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801772c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017730:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017732:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017736:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801773a:	fb04 fa0a 	mul.w	sl, r4, sl
 801773e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017742:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017746:	44de      	add	lr, fp
 8017748:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801774c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017750:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017754:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017758:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801775c:	ea4e 040a 	orr.w	r4, lr, sl
 8017760:	940f      	str	r4, [sp, #60]	; 0x3c
 8017762:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017764:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8017768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801776c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017770:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017772:	fb08 fc0c 	mul.w	ip, r8, ip
 8017776:	fb02 cc0e 	mla	ip, r2, lr, ip
 801777a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801777e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017780:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017784:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017788:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801778a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801778e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017792:	fb08 f80e 	mul.w	r8, r8, lr
 8017796:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801779a:	fb02 8303 	mla	r3, r2, r3, r8
 801779e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80177a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80177a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177aa:	fb01 330a 	mla	r3, r1, sl, r3
 80177ae:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80177b2:	fb09 3901 	mla	r9, r9, r1, r3
 80177b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80177ba:	4343      	muls	r3, r0
 80177bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80177c0:	1c58      	adds	r0, r3, #1
 80177c2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80177c6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80177ca:	ea4c 0c09 	orr.w	ip, ip, r9
 80177ce:	783b      	ldrb	r3, [r7, #0]
 80177d0:	fa5f f28c 	uxtb.w	r2, ip
 80177d4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80177d8:	fb12 f201 	smulbb	r2, r2, r1
 80177dc:	b2c0      	uxtb	r0, r0
 80177de:	fb03 2300 	mla	r3, r3, r0, r2
 80177e2:	b29b      	uxth	r3, r3
 80177e4:	1c5a      	adds	r2, r3, #1
 80177e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80177ea:	787a      	ldrb	r2, [r7, #1]
 80177ec:	fb12 f200 	smulbb	r2, r2, r0
 80177f0:	121b      	asrs	r3, r3, #8
 80177f2:	703b      	strb	r3, [r7, #0]
 80177f4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80177f8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80177fc:	fb03 2301 	mla	r3, r3, r1, r2
 8017800:	b29b      	uxth	r3, r3
 8017802:	1c5a      	adds	r2, r3, #1
 8017804:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017808:	121b      	asrs	r3, r3, #8
 801780a:	707b      	strb	r3, [r7, #1]
 801780c:	78bb      	ldrb	r3, [r7, #2]
 801780e:	fb13 f000 	smulbb	r0, r3, r0
 8017812:	fb0c 0c01 	mla	ip, ip, r1, r0
 8017816:	fa1f fc8c 	uxth.w	ip, ip
 801781a:	f10c 0301 	add.w	r3, ip, #1
 801781e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017822:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017826:	f887 c002 	strb.w	ip, [r7, #2]
 801782a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801782c:	3703      	adds	r7, #3
 801782e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017830:	441a      	add	r2, r3
 8017832:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017834:	441d      	add	r5, r3
 8017836:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017838:	9231      	str	r2, [sp, #196]	; 0xc4
 801783a:	3b01      	subs	r3, #1
 801783c:	931a      	str	r3, [sp, #104]	; 0x68
 801783e:	e69c      	b.n	801757a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8017840:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017842:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017844:	441c      	add	r4, r3
 8017846:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017848:	441d      	add	r5, r3
 801784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801784c:	9431      	str	r4, [sp, #196]	; 0xc4
 801784e:	3b01      	subs	r3, #1
 8017850:	9309      	str	r3, [sp, #36]	; 0x24
 8017852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017854:	3303      	adds	r3, #3
 8017856:	930c      	str	r3, [sp, #48]	; 0x30
 8017858:	e66f      	b.n	801753a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801785a:	d026      	beq.n	80178aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801785e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8017860:	3b01      	subs	r3, #1
 8017862:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017864:	fb00 4003 	mla	r0, r0, r3, r4
 8017868:	1400      	asrs	r0, r0, #16
 801786a:	f53f ae83 	bmi.w	8017574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801786e:	3901      	subs	r1, #1
 8017870:	4288      	cmp	r0, r1
 8017872:	f6bf ae7f 	bge.w	8017574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017876:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8017878:	fb01 5303 	mla	r3, r1, r3, r5
 801787c:	141b      	asrs	r3, r3, #16
 801787e:	f53f ae79 	bmi.w	8017574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017882:	3a01      	subs	r2, #1
 8017884:	4293      	cmp	r3, r2
 8017886:	f6bf ae75 	bge.w	8017574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801788a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801788c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8017890:	f103 0e03 	add.w	lr, r3, #3
 8017894:	f1bb 0f00 	cmp.w	fp, #0
 8017898:	dc71      	bgt.n	801797e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801789a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801789c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80178a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80178a6:	4423      	add	r3, r4
 80178a8:	930c      	str	r3, [sp, #48]	; 0x30
 80178aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	f340 81b5 	ble.w	8017c1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80178b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80178b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80178b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80178bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80178c0:	eef0 6a48 	vmov.f32	s13, s16
 80178c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80178c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80178cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80178d0:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80178d4:	eef0 6a68 	vmov.f32	s13, s17
 80178d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80178dc:	ee16 5a90 	vmov	r5, s13
 80178e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80178e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80178e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80178ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80178f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80178f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80178f8:	ee18 2a10 	vmov	r2, s16
 80178fc:	eeb0 8a47 	vmov.f32	s16, s14
 8017900:	fb92 f3f3 	sdiv	r3, r2, r3
 8017904:	ee18 2a90 	vmov	r2, s17
 8017908:	9333      	str	r3, [sp, #204]	; 0xcc
 801790a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801790c:	eef0 8a67 	vmov.f32	s17, s15
 8017910:	fb92 f3f3 	sdiv	r3, r2, r3
 8017914:	9334      	str	r3, [sp, #208]	; 0xd0
 8017916:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017918:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801791a:	3b01      	subs	r3, #1
 801791c:	9319      	str	r3, [sp, #100]	; 0x64
 801791e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017920:	bf08      	it	eq
 8017922:	4613      	moveq	r3, r2
 8017924:	9309      	str	r3, [sp, #36]	; 0x24
 8017926:	e5fa      	b.n	801751e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017928:	2900      	cmp	r1, #0
 801792a:	f43f ae6c 	beq.w	8017606 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801792e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017932:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017936:	900a      	str	r0, [sp, #40]	; 0x28
 8017938:	0e00      	lsrs	r0, r0, #24
 801793a:	9013      	str	r0, [sp, #76]	; 0x4c
 801793c:	e663      	b.n	8017606 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801793e:	f113 0801 	adds.w	r8, r3, #1
 8017942:	f53f af72 	bmi.w	801782a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017946:	4540      	cmp	r0, r8
 8017948:	f6ff af6f 	blt.w	801782a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801794c:	f11c 0801 	adds.w	r8, ip, #1
 8017950:	f53f af6b 	bmi.w	801782a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017954:	45c6      	cmp	lr, r8
 8017956:	f6ff af68 	blt.w	801782a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801795a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801795c:	b200      	sxth	r0, r0
 801795e:	9302      	str	r3, [sp, #8]
 8017960:	fa0f f38e 	sxth.w	r3, lr
 8017964:	9000      	str	r0, [sp, #0]
 8017966:	9301      	str	r3, [sp, #4]
 8017968:	4633      	mov	r3, r6
 801796a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801796c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8017970:	e9cd c203 	strd	ip, r2, [sp, #12]
 8017974:	4639      	mov	r1, r7
 8017976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017978:	f7ff fc60 	bl	801723c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801797c:	e755      	b.n	801782a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801797e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017980:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8017984:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017986:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801798a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801798c:	1427      	asrs	r7, r4, #16
 801798e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017990:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017994:	142b      	asrs	r3, r5, #16
 8017996:	fb01 7303 	mla	r3, r1, r3, r7
 801799a:	18e7      	adds	r7, r4, r3
 801799c:	5ce3      	ldrb	r3, [r4, r3]
 801799e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80179a2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80179a6:	2a00      	cmp	r2, #0
 80179a8:	f000 812e 	beq.w	8017c08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80179ac:	f897 8001 	ldrb.w	r8, [r7, #1]
 80179b0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80179b4:	9410      	str	r4, [sp, #64]	; 0x40
 80179b6:	0e24      	lsrs	r4, r4, #24
 80179b8:	9417      	str	r4, [sp, #92]	; 0x5c
 80179ba:	b170      	cbz	r0, 80179da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80179bc:	eb07 0801 	add.w	r8, r7, r1
 80179c0:	5c79      	ldrb	r1, [r7, r1]
 80179c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80179c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80179c8:	0e09      	lsrs	r1, r1, #24
 80179ca:	9114      	str	r1, [sp, #80]	; 0x50
 80179cc:	f898 1001 	ldrb.w	r1, [r8, #1]
 80179d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80179d4:	9111      	str	r1, [sp, #68]	; 0x44
 80179d6:	0e09      	lsrs	r1, r1, #24
 80179d8:	9118      	str	r1, [sp, #96]	; 0x60
 80179da:	b292      	uxth	r2, r2
 80179dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80179de:	b280      	uxth	r0, r0
 80179e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80179e2:	fb02 f900 	mul.w	r9, r2, r0
 80179e6:	0112      	lsls	r2, r2, #4
 80179e8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80179ec:	eba2 0809 	sub.w	r8, r2, r9
 80179f0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80179f4:	b280      	uxth	r0, r0
 80179f6:	fa1f f888 	uxth.w	r8, r8
 80179fa:	1a12      	subs	r2, r2, r0
 80179fc:	fb08 f101 	mul.w	r1, r8, r1
 8017a00:	b292      	uxth	r2, r2
 8017a02:	fb02 110c 	mla	r1, r2, ip, r1
 8017a06:	fb00 1104 	mla	r1, r0, r4, r1
 8017a0a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017a0c:	fb09 1104 	mla	r1, r9, r4, r1
 8017a10:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017a14:	2900      	cmp	r1, #0
 8017a16:	f000 80ec 	beq.w	8017bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8017a1a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8017a1e:	d019      	beq.n	8017a54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8017a20:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017a24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017a28:	fb0c fa0a 	mul.w	sl, ip, sl
 8017a2c:	fb0c fc03 	mul.w	ip, ip, r3
 8017a30:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017a34:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017a38:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017a3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017a40:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8017a44:	4453      	add	r3, sl
 8017a46:	0a3f      	lsrs	r7, r7, #8
 8017a48:	0a1b      	lsrs	r3, r3, #8
 8017a4a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017a4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017a52:	433b      	orrs	r3, r7
 8017a54:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017a56:	2cff      	cmp	r4, #255	; 0xff
 8017a58:	d020      	beq.n	8017a9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8017a5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a5c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017a60:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017a62:	4367      	muls	r7, r4
 8017a64:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017a6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a6e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017a70:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017a74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a78:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a7c:	44bc      	add	ip, r7
 8017a7e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017a82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017a86:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017a8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a96:	ea4c 040a 	orr.w	r4, ip, sl
 8017a9a:	9410      	str	r4, [sp, #64]	; 0x40
 8017a9c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017a9e:	2cff      	cmp	r4, #255	; 0xff
 8017aa0:	d020      	beq.n	8017ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8017aa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017aa4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017aa8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017aaa:	4367      	muls	r7, r4
 8017aac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017aae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017ab2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017ab6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017ab8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017abc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017ac0:	fb04 fa0a 	mul.w	sl, r4, sl
 8017ac4:	44bc      	add	ip, r7
 8017ac6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017aca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ace:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017ad2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017ad6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017ada:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017ade:	ea4c 040a 	orr.w	r4, ip, sl
 8017ae2:	940b      	str	r4, [sp, #44]	; 0x2c
 8017ae4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017ae6:	2cff      	cmp	r4, #255	; 0xff
 8017ae8:	d020      	beq.n	8017b2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8017aea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017aec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017af0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017af2:	4367      	muls	r7, r4
 8017af4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017af6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017afa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017afe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017b00:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017b04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017b08:	fb04 fa0a 	mul.w	sl, r4, sl
 8017b0c:	44bc      	add	ip, r7
 8017b0e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017b12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017b16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017b1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017b1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017b22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017b26:	ea4c 040a 	orr.w	r4, ip, sl
 8017b2a:	9411      	str	r4, [sp, #68]	; 0x44
 8017b2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017b2e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017b32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017b36:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017b3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017b3c:	fb08 f707 	mul.w	r7, r8, r7
 8017b40:	fb02 770c 	mla	r7, r2, ip, r7
 8017b44:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017b48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017b4a:	fb00 770c 	mla	r7, r0, ip, r7
 8017b4e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017b52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017b54:	fb09 770c 	mla	r7, r9, ip, r7
 8017b58:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017b5c:	fb08 f80c 	mul.w	r8, r8, ip
 8017b60:	0a3f      	lsrs	r7, r7, #8
 8017b62:	fb02 8303 	mla	r3, r2, r3, r8
 8017b66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b68:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017b6c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017b70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b72:	fb00 330a 	mla	r3, r0, sl, r3
 8017b76:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8017b7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017b7c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8017b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017b86:	434b      	muls	r3, r1
 8017b88:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017b8c:	1c59      	adds	r1, r3, #1
 8017b8e:	ea47 070c 	orr.w	r7, r7, ip
 8017b92:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017b96:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8017b9a:	b2fa      	uxtb	r2, r7
 8017b9c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8017ba0:	fb12 f200 	smulbb	r2, r2, r0
 8017ba4:	b2c9      	uxtb	r1, r1
 8017ba6:	fb03 2301 	mla	r3, r3, r1, r2
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	1c5a      	adds	r2, r3, #1
 8017bae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017bb2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8017bb6:	fb12 f201 	smulbb	r2, r2, r1
 8017bba:	121b      	asrs	r3, r3, #8
 8017bbc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8017bc0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8017bc4:	0c3f      	lsrs	r7, r7, #16
 8017bc6:	fb03 2300 	mla	r3, r3, r0, r2
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	1c5a      	adds	r2, r3, #1
 8017bce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017bd2:	121b      	asrs	r3, r3, #8
 8017bd4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8017bd8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8017bdc:	fb13 f101 	smulbb	r1, r3, r1
 8017be0:	fb07 1700 	mla	r7, r7, r0, r1
 8017be4:	b2bf      	uxth	r7, r7
 8017be6:	1c7b      	adds	r3, r7, #1
 8017be8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8017bec:	123f      	asrs	r7, r7, #8
 8017bee:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8017bf2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017bf4:	f10e 0e03 	add.w	lr, lr, #3
 8017bf8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017bfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017bfe:	441a      	add	r2, r3
 8017c00:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017c02:	9231      	str	r2, [sp, #196]	; 0xc4
 8017c04:	441d      	add	r5, r3
 8017c06:	e645      	b.n	8017894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	f43f aee6 	beq.w	80179da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8017c0e:	5c79      	ldrb	r1, [r7, r1]
 8017c10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017c14:	910b      	str	r1, [sp, #44]	; 0x2c
 8017c16:	0e09      	lsrs	r1, r1, #24
 8017c18:	9114      	str	r1, [sp, #80]	; 0x50
 8017c1a:	e6de      	b.n	80179da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8017c1c:	b01f      	add	sp, #124	; 0x7c
 8017c1e:	ecbd 8b08 	vpop	{d8-d11}
 8017c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017c28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8017c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8017c30:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8017c34:	2c00      	cmp	r4, #0
 8017c36:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8017c3a:	fb04 060c 	mla	r6, r4, ip, r0
 8017c3e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8017c42:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8017c46:	eb02 0e06 	add.w	lr, r2, r6
 8017c4a:	db3d      	blt.n	8017cc8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8017c4c:	45a0      	cmp	r8, r4
 8017c4e:	dd3b      	ble.n	8017cc8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8017c50:	2800      	cmp	r0, #0
 8017c52:	db37      	blt.n	8017cc4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8017c54:	4584      	cmp	ip, r0
 8017c56:	dd35      	ble.n	8017cc4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8017c58:	5d92      	ldrb	r2, [r2, r6]
 8017c5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017c5e:	1c46      	adds	r6, r0, #1
 8017c60:	d435      	bmi.n	8017cce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8017c62:	45b4      	cmp	ip, r6
 8017c64:	dd33      	ble.n	8017cce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8017c66:	b3a5      	cbz	r5, 8017cd2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8017c68:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8017c6c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8017c70:	3401      	adds	r4, #1
 8017c72:	d432      	bmi.n	8017cda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8017c74:	45a0      	cmp	r8, r4
 8017c76:	dd30      	ble.n	8017cda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8017c78:	b397      	cbz	r7, 8017ce0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8017c7a:	2800      	cmp	r0, #0
 8017c7c:	db2b      	blt.n	8017cd6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8017c7e:	4584      	cmp	ip, r0
 8017c80:	dd29      	ble.n	8017cd6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8017c82:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8017c86:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8017c8a:	3001      	adds	r0, #1
 8017c8c:	d42b      	bmi.n	8017ce6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8017c8e:	4584      	cmp	ip, r0
 8017c90:	dd29      	ble.n	8017ce6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8017c92:	b355      	cbz	r5, 8017cea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8017c94:	44f4      	add	ip, lr
 8017c96:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8017c9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017c9e:	2d0f      	cmp	r5, #15
 8017ca0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8017ca4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017ca8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017cac:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8017cb0:	d801      	bhi.n	8017cb6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8017cb2:	2f0f      	cmp	r7, #15
 8017cb4:	d91b      	bls.n	8017cee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8017cb6:	4b7f      	ldr	r3, [pc, #508]	; (8017eb4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8017cb8:	f240 115b 	movw	r1, #347	; 0x15b
 8017cbc:	4a7e      	ldr	r2, [pc, #504]	; (8017eb8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8017cbe:	487f      	ldr	r0, [pc, #508]	; (8017ebc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8017cc0:	f005 f84c 	bl	801cd5c <__assert_func>
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	e7ca      	b.n	8017c5e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8017cc8:	2600      	movs	r6, #0
 8017cca:	4632      	mov	r2, r6
 8017ccc:	e7d0      	b.n	8017c70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8017cce:	2600      	movs	r6, #0
 8017cd0:	e7ce      	b.n	8017c70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8017cd2:	462e      	mov	r6, r5
 8017cd4:	e7cc      	b.n	8017c70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8017cd6:	2400      	movs	r4, #0
 8017cd8:	e7d7      	b.n	8017c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8017cda:	2300      	movs	r3, #0
 8017cdc:	461c      	mov	r4, r3
 8017cde:	e7de      	b.n	8017c9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017ce0:	463b      	mov	r3, r7
 8017ce2:	463c      	mov	r4, r7
 8017ce4:	e7db      	b.n	8017c9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	e7d9      	b.n	8017c9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017cea:	462b      	mov	r3, r5
 8017cec:	e7d7      	b.n	8017c9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017cee:	b2a8      	uxth	r0, r5
 8017cf0:	b2bf      	uxth	r7, r7
 8017cf2:	fb07 fe00 	mul.w	lr, r7, r0
 8017cf6:	0100      	lsls	r0, r0, #4
 8017cf8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8017cfc:	eba0 0c0e 	sub.w	ip, r0, lr
 8017d00:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8017d04:	b2bf      	uxth	r7, r7
 8017d06:	fa1f fc8c 	uxth.w	ip, ip
 8017d0a:	1bc5      	subs	r5, r0, r7
 8017d0c:	fb0c f00a 	mul.w	r0, ip, sl
 8017d10:	b2ad      	uxth	r5, r5
 8017d12:	fb05 000b 	mla	r0, r5, fp, r0
 8017d16:	fb07 0009 	mla	r0, r7, r9, r0
 8017d1a:	fb0e 0008 	mla	r0, lr, r8, r0
 8017d1e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017d22:	9001      	str	r0, [sp, #4]
 8017d24:	2800      	cmp	r0, #0
 8017d26:	f000 80c2 	beq.w	8017eae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8017d2a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8017d2e:	d018      	beq.n	8017d62 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8017d30:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8017d34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017d38:	fb0b f000 	mul.w	r0, fp, r0
 8017d3c:	fb0b fb02 	mul.w	fp, fp, r2
 8017d40:	0a02      	lsrs	r2, r0, #8
 8017d42:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8017d46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017d4a:	4402      	add	r2, r0
 8017d4c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8017d50:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8017d54:	0a12      	lsrs	r2, r2, #8
 8017d56:	0a00      	lsrs	r0, r0, #8
 8017d58:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017d5c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017d60:	4302      	orrs	r2, r0
 8017d62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017d66:	d01a      	beq.n	8017d9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8017d68:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8017d6c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017d70:	fb0a f000 	mul.w	r0, sl, r0
 8017d74:	fb0a fa06 	mul.w	sl, sl, r6
 8017d78:	0a06      	lsrs	r6, r0, #8
 8017d7a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8017d7e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017d82:	4406      	add	r6, r0
 8017d84:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8017d88:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8017d8c:	0a36      	lsrs	r6, r6, #8
 8017d8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017d92:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017d96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017d9a:	ea46 060a 	orr.w	r6, r6, sl
 8017d9e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017da2:	d01b      	beq.n	8017ddc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8017da4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8017da8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017dac:	fb09 fa0a 	mul.w	sl, r9, sl
 8017db0:	fb09 f004 	mul.w	r0, r9, r4
 8017db4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8017db8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017dbc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8017dc0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017dc4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8017dc8:	4454      	add	r4, sl
 8017dca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017dce:	0a24      	lsrs	r4, r4, #8
 8017dd0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017dd4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017dd8:	ea44 0409 	orr.w	r4, r4, r9
 8017ddc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017de0:	d01b      	beq.n	8017e1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8017de2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8017de6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017dea:	fb08 f909 	mul.w	r9, r8, r9
 8017dee:	fb08 f003 	mul.w	r0, r8, r3
 8017df2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017df6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8017dfa:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8017dfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017e02:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8017e06:	444b      	add	r3, r9
 8017e08:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017e0c:	0a1b      	lsrs	r3, r3, #8
 8017e0e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8017e12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017e16:	ea43 0308 	orr.w	r3, r3, r8
 8017e1a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8017e1e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017e22:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8017e26:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017e2a:	fb0c f000 	mul.w	r0, ip, r0
 8017e2e:	fb0c f606 	mul.w	r6, ip, r6
 8017e32:	fb05 0808 	mla	r8, r5, r8, r0
 8017e36:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8017e3a:	fb05 6502 	mla	r5, r5, r2, r6
 8017e3e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017e42:	fb07 8800 	mla	r8, r7, r0, r8
 8017e46:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8017e4a:	fb07 5704 	mla	r7, r7, r4, r5
 8017e4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017e52:	fb0e 8000 	mla	r0, lr, r0, r8
 8017e56:	780a      	ldrb	r2, [r1, #0]
 8017e58:	fb0e 7e03 	mla	lr, lr, r3, r7
 8017e5c:	9b01      	ldr	r3, [sp, #4]
 8017e5e:	0a00      	lsrs	r0, r0, #8
 8017e60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017e64:	43db      	mvns	r3, r3
 8017e66:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017e6a:	b2db      	uxtb	r3, r3
 8017e6c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8017e70:	ea40 0e0e 	orr.w	lr, r0, lr
 8017e74:	fb02 f003 	mul.w	r0, r2, r3
 8017e78:	1c42      	adds	r2, r0, #1
 8017e7a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017e7e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8017e82:	700a      	strb	r2, [r1, #0]
 8017e84:	784a      	ldrb	r2, [r1, #1]
 8017e86:	435a      	muls	r2, r3
 8017e88:	1c50      	adds	r0, r2, #1
 8017e8a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8017e8e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8017e92:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8017e96:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017e9a:	704a      	strb	r2, [r1, #1]
 8017e9c:	788a      	ldrb	r2, [r1, #2]
 8017e9e:	4353      	muls	r3, r2
 8017ea0:	1c5a      	adds	r2, r3, #1
 8017ea2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017ea6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8017eaa:	f881 e002 	strb.w	lr, [r1, #2]
 8017eae:	b003      	add	sp, #12
 8017eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eb4:	0802145d 	.word	0x0802145d
 8017eb8:	08021872 	.word	0x08021872
 8017ebc:	0802142a 	.word	0x0802142a

08017ec0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec4:	ed2d 8b0a 	vpush	{d8-d12}
 8017ec8:	b09b      	sub	sp, #108	; 0x6c
 8017eca:	eeb0 aa40 	vmov.f32	s20, s0
 8017ece:	eef0 9a60 	vmov.f32	s19, s1
 8017ed2:	9218      	str	r2, [sp, #96]	; 0x60
 8017ed4:	eeb0 9a41 	vmov.f32	s18, s2
 8017ed8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017eda:	eeb0 8a62 	vmov.f32	s16, s5
 8017ede:	9019      	str	r0, [sp, #100]	; 0x64
 8017ee0:	eef0 8a43 	vmov.f32	s17, s6
 8017ee4:	6850      	ldr	r0, [r2, #4]
 8017ee6:	eeb0 ca44 	vmov.f32	s24, s8
 8017eea:	9116      	str	r1, [sp, #88]	; 0x58
 8017eec:	eef0 ba64 	vmov.f32	s23, s9
 8017ef0:	9307      	str	r3, [sp, #28]
 8017ef2:	eeb0 ba45 	vmov.f32	s22, s10
 8017ef6:	6812      	ldr	r2, [r2, #0]
 8017ef8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8017efc:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8017efe:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8017f02:	fb00 1303 	mla	r3, r0, r3, r1
 8017f06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f0a:	18d3      	adds	r3, r2, r3
 8017f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8017f0e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f14:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017f16:	685e      	ldr	r6, [r3, #4]
 8017f18:	3604      	adds	r6, #4
 8017f1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	dc03      	bgt.n	8017f28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017f20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	f340 834f 	ble.w	80185c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8017f28:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017f2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017f2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017f32:	1e48      	subs	r0, r1, #1
 8017f34:	1e57      	subs	r7, r2, #1
 8017f36:	9b07      	ldr	r3, [sp, #28]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	f340 8178 	ble.w	801822e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017f3e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8017f40:	142b      	asrs	r3, r5, #16
 8017f42:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8017f46:	d406      	bmi.n	8017f56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017f48:	4584      	cmp	ip, r0
 8017f4a:	da04      	bge.n	8017f56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	db02      	blt.n	8017f56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017f50:	42bb      	cmp	r3, r7
 8017f52:	f2c0 816d 	blt.w	8018230 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017f56:	f11c 0c01 	adds.w	ip, ip, #1
 8017f5a:	f100 815b 	bmi.w	8018214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8017f5e:	4561      	cmp	r1, ip
 8017f60:	f2c0 8158 	blt.w	8018214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8017f64:	3301      	adds	r3, #1
 8017f66:	f100 8155 	bmi.w	8018214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	f2c0 8152 	blt.w	8018214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8017f70:	9b07      	ldr	r3, [sp, #28]
 8017f72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017f74:	9317      	str	r3, [sp, #92]	; 0x5c
 8017f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	f340 8178 	ble.w	801826e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8017f7e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8017f80:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8017f84:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8017f88:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017f8c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017f8e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8017f92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8017f94:	141b      	asrs	r3, r3, #16
 8017f96:	f100 81ba 	bmi.w	801830e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017f9a:	f101 38ff 	add.w	r8, r1, #4294967295
 8017f9e:	4543      	cmp	r3, r8
 8017fa0:	f280 81b5 	bge.w	801830e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017fa4:	f1bc 0f00 	cmp.w	ip, #0
 8017fa8:	f2c0 81b1 	blt.w	801830e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017fac:	f10e 38ff 	add.w	r8, lr, #4294967295
 8017fb0:	45c4      	cmp	ip, r8
 8017fb2:	f280 81ac 	bge.w	801830e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017fb6:	b209      	sxth	r1, r1
 8017fb8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017fba:	fb0c 3301 	mla	r3, ip, r1, r3
 8017fbe:	eb04 0803 	add.w	r8, r4, r3
 8017fc2:	5ce3      	ldrb	r3, [r4, r3]
 8017fc4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017fc8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017fcc:	2a00      	cmp	r2, #0
 8017fce:	f000 8193 	beq.w	80182f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8017fd2:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017fd6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017fda:	940b      	str	r4, [sp, #44]	; 0x2c
 8017fdc:	0e24      	lsrs	r4, r4, #24
 8017fde:	9412      	str	r4, [sp, #72]	; 0x48
 8017fe0:	b178      	cbz	r0, 8018002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017fe2:	eb08 0c01 	add.w	ip, r8, r1
 8017fe6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017fea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017fee:	9108      	str	r1, [sp, #32]
 8017ff0:	0e09      	lsrs	r1, r1, #24
 8017ff2:	9110      	str	r1, [sp, #64]	; 0x40
 8017ff4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017ff8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017ffc:	910c      	str	r1, [sp, #48]	; 0x30
 8017ffe:	0e09      	lsrs	r1, r1, #24
 8018000:	9113      	str	r1, [sp, #76]	; 0x4c
 8018002:	b292      	uxth	r2, r2
 8018004:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018006:	b280      	uxth	r0, r0
 8018008:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801800a:	fb02 f900 	mul.w	r9, r2, r0
 801800e:	0112      	lsls	r2, r2, #4
 8018010:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018014:	eba2 0809 	sub.w	r8, r2, r9
 8018018:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801801c:	b280      	uxth	r0, r0
 801801e:	fa1f f888 	uxth.w	r8, r8
 8018022:	1a12      	subs	r2, r2, r0
 8018024:	fb08 f101 	mul.w	r1, r8, r1
 8018028:	b292      	uxth	r2, r2
 801802a:	fb02 110e 	mla	r1, r2, lr, r1
 801802e:	fb00 1104 	mla	r1, r0, r4, r1
 8018032:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018034:	fb09 1104 	mla	r1, r9, r4, r1
 8018038:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801803c:	2900      	cmp	r1, #0
 801803e:	f000 80de 	beq.w	80181fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018042:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018046:	d01b      	beq.n	8018080 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8018048:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801804c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018050:	fb0e fa0a 	mul.w	sl, lr, sl
 8018054:	fb0e fe03 	mul.w	lr, lr, r3
 8018058:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801805c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018060:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018064:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018068:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801806c:	4453      	add	r3, sl
 801806e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018072:	0a1b      	lsrs	r3, r3, #8
 8018074:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018078:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801807c:	ea43 030c 	orr.w	r3, r3, ip
 8018080:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018082:	2cff      	cmp	r4, #255	; 0xff
 8018084:	d021      	beq.n	80180ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8018086:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018088:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801808c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801808e:	fb04 fb0b 	mul.w	fp, r4, fp
 8018092:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018094:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018098:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801809a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801809e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80180a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80180a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80180aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80180ae:	44de      	add	lr, fp
 80180b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80180b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80180b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80180bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80180c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80180c4:	ea4e 040a 	orr.w	r4, lr, sl
 80180c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80180ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80180cc:	2cff      	cmp	r4, #255	; 0xff
 80180ce:	d021      	beq.n	8018114 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80180d0:	9c08      	ldr	r4, [sp, #32]
 80180d2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80180d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80180d8:	fb04 fb0b 	mul.w	fp, r4, fp
 80180dc:	9c08      	ldr	r4, [sp, #32]
 80180de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80180e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80180e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80180e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80180ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80180f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80180f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80180f8:	44de      	add	lr, fp
 80180fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80180fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018102:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018106:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801810a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801810e:	ea4e 040a 	orr.w	r4, lr, sl
 8018112:	9408      	str	r4, [sp, #32]
 8018114:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018116:	2cff      	cmp	r4, #255	; 0xff
 8018118:	d021      	beq.n	801815e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801811a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801811c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018120:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018122:	fb04 fb0b 	mul.w	fp, r4, fp
 8018126:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018128:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801812c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801812e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018132:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018136:	fb04 fa0a 	mul.w	sl, r4, sl
 801813a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801813e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018142:	44de      	add	lr, fp
 8018144:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018148:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801814c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018150:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018154:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018158:	ea4e 040a 	orr.w	r4, lr, sl
 801815c:	940c      	str	r4, [sp, #48]	; 0x30
 801815e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018160:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018164:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018168:	43c9      	mvns	r1, r1
 801816a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801816e:	9c08      	ldr	r4, [sp, #32]
 8018170:	b2c9      	uxtb	r1, r1
 8018172:	fb08 fc0c 	mul.w	ip, r8, ip
 8018176:	fb02 cc0e 	mla	ip, r2, lr, ip
 801817a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801817e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018180:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018184:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018188:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801818a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801818e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018192:	fb08 f80e 	mul.w	r8, r8, lr
 8018196:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801819a:	fb02 8303 	mla	r3, r2, r3, r8
 801819e:	9a08      	ldr	r2, [sp, #32]
 80181a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80181a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80181a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181aa:	fb00 330a 	mla	r3, r0, sl, r3
 80181ae:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80181b2:	fb09 3900 	mla	r9, r9, r0, r3
 80181b6:	783b      	ldrb	r3, [r7, #0]
 80181b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80181bc:	fb03 f201 	mul.w	r2, r3, r1
 80181c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80181c4:	1c53      	adds	r3, r2, #1
 80181c6:	ea4c 0c09 	orr.w	ip, ip, r9
 80181ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80181ce:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80181d2:	703b      	strb	r3, [r7, #0]
 80181d4:	787b      	ldrb	r3, [r7, #1]
 80181d6:	434b      	muls	r3, r1
 80181d8:	1c5a      	adds	r2, r3, #1
 80181da:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80181de:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80181e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80181e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80181ea:	707b      	strb	r3, [r7, #1]
 80181ec:	78bb      	ldrb	r3, [r7, #2]
 80181ee:	4359      	muls	r1, r3
 80181f0:	1c4b      	adds	r3, r1, #1
 80181f2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80181f6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80181fa:	f887 c002 	strb.w	ip, [r7, #2]
 80181fe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018200:	3703      	adds	r7, #3
 8018202:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018204:	441a      	add	r2, r3
 8018206:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018208:	441d      	add	r5, r3
 801820a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801820c:	922f      	str	r2, [sp, #188]	; 0xbc
 801820e:	3b01      	subs	r3, #1
 8018210:	9317      	str	r3, [sp, #92]	; 0x5c
 8018212:	e6b0      	b.n	8017f76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018214:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018216:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018218:	441c      	add	r4, r3
 801821a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801821c:	441d      	add	r5, r3
 801821e:	9b07      	ldr	r3, [sp, #28]
 8018220:	942f      	str	r4, [sp, #188]	; 0xbc
 8018222:	3b01      	subs	r3, #1
 8018224:	9307      	str	r3, [sp, #28]
 8018226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018228:	3303      	adds	r3, #3
 801822a:	930a      	str	r3, [sp, #40]	; 0x28
 801822c:	e683      	b.n	8017f36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801822e:	d026      	beq.n	801827e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8018230:	9b07      	ldr	r3, [sp, #28]
 8018232:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018234:	3b01      	subs	r3, #1
 8018236:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018238:	fb00 4003 	mla	r0, r0, r3, r4
 801823c:	1400      	asrs	r0, r0, #16
 801823e:	f53f ae97 	bmi.w	8017f70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018242:	3901      	subs	r1, #1
 8018244:	4288      	cmp	r0, r1
 8018246:	f6bf ae93 	bge.w	8017f70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801824a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801824c:	fb01 5303 	mla	r3, r1, r3, r5
 8018250:	141b      	asrs	r3, r3, #16
 8018252:	f53f ae8d 	bmi.w	8017f70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018256:	3a01      	subs	r2, #1
 8018258:	4293      	cmp	r3, r2
 801825a:	f6bf ae89 	bge.w	8017f70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801825e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018260:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018264:	f103 0e03 	add.w	lr, r3, #3
 8018268:	f1bb 0f00 	cmp.w	fp, #0
 801826c:	dc6d      	bgt.n	801834a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 801826e:	9b07      	ldr	r3, [sp, #28]
 8018270:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018276:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801827a:	4423      	add	r3, r4
 801827c:	930a      	str	r3, [sp, #40]	; 0x28
 801827e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018280:	2b00      	cmp	r3, #0
 8018282:	f340 81a0 	ble.w	80185c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018286:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801828a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801828c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8018290:	eef0 6a48 	vmov.f32	s13, s16
 8018294:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8018298:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801829c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80182a0:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 80182a4:	eef0 6a68 	vmov.f32	s13, s17
 80182a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80182ac:	ee16 5a90 	vmov	r5, s13
 80182b0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80182b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80182b8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80182bc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80182c0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80182c4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80182c8:	ee18 2a10 	vmov	r2, s16
 80182cc:	eeb0 8a47 	vmov.f32	s16, s14
 80182d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80182d4:	ee18 2a90 	vmov	r2, s17
 80182d8:	9331      	str	r3, [sp, #196]	; 0xc4
 80182da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80182dc:	eef0 8a67 	vmov.f32	s17, s15
 80182e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80182e4:	9332      	str	r3, [sp, #200]	; 0xc8
 80182e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80182e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80182ea:	3b01      	subs	r3, #1
 80182ec:	9316      	str	r3, [sp, #88]	; 0x58
 80182ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80182f0:	bf08      	it	eq
 80182f2:	4613      	moveq	r3, r2
 80182f4:	9307      	str	r3, [sp, #28]
 80182f6:	e610      	b.n	8017f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80182f8:	2800      	cmp	r0, #0
 80182fa:	f43f ae82 	beq.w	8018002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80182fe:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018302:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018306:	9108      	str	r1, [sp, #32]
 8018308:	0e09      	lsrs	r1, r1, #24
 801830a:	9110      	str	r1, [sp, #64]	; 0x40
 801830c:	e679      	b.n	8018002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801830e:	f113 0801 	adds.w	r8, r3, #1
 8018312:	f53f af74 	bmi.w	80181fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018316:	4541      	cmp	r1, r8
 8018318:	f6ff af71 	blt.w	80181fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801831c:	f11c 0801 	adds.w	r8, ip, #1
 8018320:	f53f af6d 	bmi.w	80181fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018324:	45c6      	cmp	lr, r8
 8018326:	f6ff af6a 	blt.w	80181fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801832a:	b209      	sxth	r1, r1
 801832c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018330:	fa0f f38e 	sxth.w	r3, lr
 8018334:	9100      	str	r1, [sp, #0]
 8018336:	4639      	mov	r1, r7
 8018338:	9301      	str	r3, [sp, #4]
 801833a:	4633      	mov	r3, r6
 801833c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8018340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018342:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018344:	f7ff fc70 	bl	8017c28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8018348:	e759      	b.n	80181fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801834a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801834c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018350:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018352:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018356:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018358:	1427      	asrs	r7, r4, #16
 801835a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801835c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018360:	142b      	asrs	r3, r5, #16
 8018362:	fb01 7303 	mla	r3, r1, r3, r7
 8018366:	18e7      	adds	r7, r4, r3
 8018368:	5ce3      	ldrb	r3, [r4, r3]
 801836a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801836e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018372:	2a00      	cmp	r2, #0
 8018374:	f000 811d 	beq.w	80185b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8018378:	f897 8001 	ldrb.w	r8, [r7, #1]
 801837c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018380:	940d      	str	r4, [sp, #52]	; 0x34
 8018382:	0e24      	lsrs	r4, r4, #24
 8018384:	9414      	str	r4, [sp, #80]	; 0x50
 8018386:	b170      	cbz	r0, 80183a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018388:	eb07 0801 	add.w	r8, r7, r1
 801838c:	5c79      	ldrb	r1, [r7, r1]
 801838e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018392:	9109      	str	r1, [sp, #36]	; 0x24
 8018394:	0e09      	lsrs	r1, r1, #24
 8018396:	9111      	str	r1, [sp, #68]	; 0x44
 8018398:	f898 1001 	ldrb.w	r1, [r8, #1]
 801839c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80183a0:	910e      	str	r1, [sp, #56]	; 0x38
 80183a2:	0e09      	lsrs	r1, r1, #24
 80183a4:	9115      	str	r1, [sp, #84]	; 0x54
 80183a6:	b292      	uxth	r2, r2
 80183a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80183aa:	b280      	uxth	r0, r0
 80183ac:	fb02 f900 	mul.w	r9, r2, r0
 80183b0:	0112      	lsls	r2, r2, #4
 80183b2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80183b6:	eba2 0809 	sub.w	r8, r2, r9
 80183ba:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80183be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183c0:	b280      	uxth	r0, r0
 80183c2:	fa1f f888 	uxth.w	r8, r8
 80183c6:	1a09      	subs	r1, r1, r0
 80183c8:	fb08 f202 	mul.w	r2, r8, r2
 80183cc:	b289      	uxth	r1, r1
 80183ce:	fb01 220c 	mla	r2, r1, ip, r2
 80183d2:	fb00 2204 	mla	r2, r0, r4, r2
 80183d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80183d8:	fb09 2204 	mla	r2, r9, r4, r2
 80183dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80183e0:	2a00      	cmp	r2, #0
 80183e2:	f000 80db 	beq.w	801859c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80183e6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80183ea:	d019      	beq.n	8018420 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 80183ec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80183f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80183f4:	fb0c fa0a 	mul.w	sl, ip, sl
 80183f8:	fb0c fc03 	mul.w	ip, ip, r3
 80183fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018400:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018404:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018408:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801840c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018410:	4453      	add	r3, sl
 8018412:	0a3f      	lsrs	r7, r7, #8
 8018414:	0a1b      	lsrs	r3, r3, #8
 8018416:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801841a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801841e:	433b      	orrs	r3, r7
 8018420:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018422:	2cff      	cmp	r4, #255	; 0xff
 8018424:	d020      	beq.n	8018468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8018426:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018428:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801842c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801842e:	4367      	muls	r7, r4
 8018430:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018432:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018436:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801843a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801843c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018440:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018444:	fb04 fa0a 	mul.w	sl, r4, sl
 8018448:	44bc      	add	ip, r7
 801844a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801844e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018452:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018456:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801845a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801845e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018462:	ea4c 040a 	orr.w	r4, ip, sl
 8018466:	940d      	str	r4, [sp, #52]	; 0x34
 8018468:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801846a:	2cff      	cmp	r4, #255	; 0xff
 801846c:	d020      	beq.n	80184b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801846e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018470:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018474:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018476:	4367      	muls	r7, r4
 8018478:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801847a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801847e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018482:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018484:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018488:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801848c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018490:	44bc      	add	ip, r7
 8018492:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018496:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801849a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801849e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80184a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80184a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80184aa:	ea4c 040a 	orr.w	r4, ip, sl
 80184ae:	9409      	str	r4, [sp, #36]	; 0x24
 80184b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80184b2:	2cff      	cmp	r4, #255	; 0xff
 80184b4:	d020      	beq.n	80184f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 80184b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80184b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80184bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80184be:	4367      	muls	r7, r4
 80184c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80184c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80184c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80184ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80184cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80184d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80184d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80184d8:	44bc      	add	ip, r7
 80184da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80184de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80184e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80184e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80184ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80184ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80184f2:	ea4c 040a 	orr.w	r4, ip, sl
 80184f6:	940e      	str	r4, [sp, #56]	; 0x38
 80184f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80184fa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80184fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018502:	43d2      	mvns	r2, r2
 8018504:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018508:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801850a:	b2d2      	uxtb	r2, r2
 801850c:	fb08 f707 	mul.w	r7, r8, r7
 8018510:	fb01 770c 	mla	r7, r1, ip, r7
 8018514:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018518:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801851a:	fb00 770c 	mla	r7, r0, ip, r7
 801851e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018522:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018524:	fb09 770c 	mla	r7, r9, ip, r7
 8018528:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801852c:	fb08 f80c 	mul.w	r8, r8, ip
 8018530:	0a3f      	lsrs	r7, r7, #8
 8018532:	fb01 8303 	mla	r3, r1, r3, r8
 8018536:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018538:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801853c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8018540:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018542:	fb00 330a 	mla	r3, r0, sl, r3
 8018546:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801854a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801854e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018552:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018556:	fb03 f102 	mul.w	r1, r3, r2
 801855a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801855e:	1c4b      	adds	r3, r1, #1
 8018560:	ea47 070c 	orr.w	r7, r7, ip
 8018564:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018568:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801856c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8018570:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8018574:	4353      	muls	r3, r2
 8018576:	1c59      	adds	r1, r3, #1
 8018578:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801857c:	0a3b      	lsrs	r3, r7, #8
 801857e:	0c3f      	lsrs	r7, r7, #16
 8018580:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018584:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018588:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801858c:	435a      	muls	r2, r3
 801858e:	1c53      	adds	r3, r2, #1
 8018590:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018594:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8018598:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801859c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801859e:	f10e 0e03 	add.w	lr, lr, #3
 80185a2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80185a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80185a8:	441a      	add	r2, r3
 80185aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80185ac:	922f      	str	r2, [sp, #188]	; 0xbc
 80185ae:	441d      	add	r5, r3
 80185b0:	e65a      	b.n	8018268 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80185b2:	2800      	cmp	r0, #0
 80185b4:	f43f aef7 	beq.w	80183a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80185b8:	5c79      	ldrb	r1, [r7, r1]
 80185ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80185be:	9109      	str	r1, [sp, #36]	; 0x24
 80185c0:	0e09      	lsrs	r1, r1, #24
 80185c2:	9111      	str	r1, [sp, #68]	; 0x44
 80185c4:	e6ef      	b.n	80183a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80185c6:	b01b      	add	sp, #108	; 0x6c
 80185c8:	ecbd 8b0a 	vpop	{d8-d12}
 80185cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80185d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d4:	b08d      	sub	sp, #52	; 0x34
 80185d6:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80185da:	9103      	str	r1, [sp, #12]
 80185dc:	fb07 5803 	mla	r8, r7, r3, r5
 80185e0:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80185e4:	9803      	ldr	r0, [sp, #12]
 80185e6:	2f00      	cmp	r7, #0
 80185e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80185ea:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80185ee:	9903      	ldr	r1, [sp, #12]
 80185f0:	9c03      	ldr	r4, [sp, #12]
 80185f2:	eb02 0608 	add.w	r6, r2, r8
 80185f6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80185fa:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80185fe:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8018602:	7809      	ldrb	r1, [r1, #0]
 8018604:	7840      	ldrb	r0, [r0, #1]
 8018606:	78a4      	ldrb	r4, [r4, #2]
 8018608:	db51      	blt.n	80186ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801860a:	45be      	cmp	lr, r7
 801860c:	dd4f      	ble.n	80186ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801860e:	2d00      	cmp	r5, #0
 8018610:	db49      	blt.n	80186a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8018612:	42ab      	cmp	r3, r5
 8018614:	dd47      	ble.n	80186a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8018616:	f812 2008 	ldrb.w	r2, [r2, r8]
 801861a:	9204      	str	r2, [sp, #16]
 801861c:	7872      	ldrb	r2, [r6, #1]
 801861e:	9205      	str	r2, [sp, #20]
 8018620:	78b2      	ldrb	r2, [r6, #2]
 8018622:	9206      	str	r2, [sp, #24]
 8018624:	1c6a      	adds	r2, r5, #1
 8018626:	d449      	bmi.n	80186bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018628:	4293      	cmp	r3, r2
 801862a:	dd47      	ble.n	80186bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801862c:	f1bc 0f00 	cmp.w	ip, #0
 8018630:	d044      	beq.n	80186bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018632:	7972      	ldrb	r2, [r6, #5]
 8018634:	f896 b003 	ldrb.w	fp, [r6, #3]
 8018638:	f896 a004 	ldrb.w	sl, [r6, #4]
 801863c:	9201      	str	r2, [sp, #4]
 801863e:	3701      	adds	r7, #1
 8018640:	d444      	bmi.n	80186cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8018642:	45be      	cmp	lr, r7
 8018644:	dd42      	ble.n	80186cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8018646:	f1b9 0f00 	cmp.w	r9, #0
 801864a:	f000 80c1 	beq.w	80187d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801864e:	2d00      	cmp	r5, #0
 8018650:	db38      	blt.n	80186c4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8018652:	42ab      	cmp	r3, r5
 8018654:	dd36      	ble.n	80186c4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8018656:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801865a:	f816 8002 	ldrb.w	r8, [r6, r2]
 801865e:	2203      	movs	r2, #3
 8018660:	fb03 6702 	mla	r7, r3, r2, r6
 8018664:	fb03 6202 	mla	r2, r3, r2, r6
 8018668:	787f      	ldrb	r7, [r7, #1]
 801866a:	f892 e002 	ldrb.w	lr, [r2, #2]
 801866e:	9702      	str	r7, [sp, #8]
 8018670:	3501      	adds	r5, #1
 8018672:	d432      	bmi.n	80186da <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8018674:	42ab      	cmp	r3, r5
 8018676:	dd30      	ble.n	80186da <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8018678:	f1bc 0f00 	cmp.w	ip, #0
 801867c:	d031      	beq.n	80186e2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801867e:	2703      	movs	r7, #3
 8018680:	fb13 7207 	smlabb	r2, r3, r7, r7
 8018684:	5cb5      	ldrb	r5, [r6, r2]
 8018686:	fb03 6207 	mla	r2, r3, r7, r6
 801868a:	fb03 6307 	mla	r3, r3, r7, r6
 801868e:	7912      	ldrb	r2, [r2, #4]
 8018690:	795e      	ldrb	r6, [r3, #5]
 8018692:	f1bc 0f0f 	cmp.w	ip, #15
 8018696:	d927      	bls.n	80186e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8018698:	4b53      	ldr	r3, [pc, #332]	; (80187e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801869a:	f240 115b 	movw	r1, #347	; 0x15b
 801869e:	4a53      	ldr	r2, [pc, #332]	; (80187ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80186a0:	4853      	ldr	r0, [pc, #332]	; (80187f0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80186a2:	f004 fb5b 	bl	801cd5c <__assert_func>
 80186a6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80186aa:	9104      	str	r1, [sp, #16]
 80186ac:	e7ba      	b.n	8018624 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80186ae:	9401      	str	r4, [sp, #4]
 80186b0:	4682      	mov	sl, r0
 80186b2:	468b      	mov	fp, r1
 80186b4:	9104      	str	r1, [sp, #16]
 80186b6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80186ba:	e7c0      	b.n	801863e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80186bc:	9401      	str	r4, [sp, #4]
 80186be:	4682      	mov	sl, r0
 80186c0:	468b      	mov	fp, r1
 80186c2:	e7bc      	b.n	801863e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80186c4:	46a6      	mov	lr, r4
 80186c6:	9002      	str	r0, [sp, #8]
 80186c8:	4688      	mov	r8, r1
 80186ca:	e7d1      	b.n	8018670 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80186cc:	4626      	mov	r6, r4
 80186ce:	4602      	mov	r2, r0
 80186d0:	460d      	mov	r5, r1
 80186d2:	46a6      	mov	lr, r4
 80186d4:	9002      	str	r0, [sp, #8]
 80186d6:	4688      	mov	r8, r1
 80186d8:	e7db      	b.n	8018692 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80186da:	4626      	mov	r6, r4
 80186dc:	4602      	mov	r2, r0
 80186de:	460d      	mov	r5, r1
 80186e0:	e7d7      	b.n	8018692 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80186e2:	4626      	mov	r6, r4
 80186e4:	4602      	mov	r2, r0
 80186e6:	460d      	mov	r5, r1
 80186e8:	f1b9 0f0f 	cmp.w	r9, #15
 80186ec:	d8d4      	bhi.n	8018698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80186ee:	fa1f f38c 	uxth.w	r3, ip
 80186f2:	fa1f fc89 	uxth.w	ip, r9
 80186f6:	fb03 f70c 	mul.w	r7, r3, ip
 80186fa:	011b      	lsls	r3, r3, #4
 80186fc:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8018700:	9707      	str	r7, [sp, #28]
 8018702:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8018706:	fa1f fc8c 	uxth.w	ip, ip
 801870a:	eba7 070c 	sub.w	r7, r7, ip
 801870e:	b2bf      	uxth	r7, r7
 8018710:	9709      	str	r7, [sp, #36]	; 0x24
 8018712:	9f07      	ldr	r7, [sp, #28]
 8018714:	1bdb      	subs	r3, r3, r7
 8018716:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801871a:	b29b      	uxth	r3, r3
 801871c:	9708      	str	r7, [sp, #32]
 801871e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018720:	930a      	str	r3, [sp, #40]	; 0x28
 8018722:	ea6f 0907 	mvn.w	r9, r7
 8018726:	fb03 fb0b 	mul.w	fp, r3, fp
 801872a:	9f04      	ldr	r7, [sp, #16]
 801872c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801872e:	fa5f f989 	uxtb.w	r9, r9
 8018732:	fb03 bb07 	mla	fp, r3, r7, fp
 8018736:	9f07      	ldr	r7, [sp, #28]
 8018738:	fb11 f109 	smulbb	r1, r1, r9
 801873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801873e:	fb0c b808 	mla	r8, ip, r8, fp
 8018742:	fb10 f009 	smulbb	r0, r0, r9
 8018746:	fb14 f409 	smulbb	r4, r4, r9
 801874a:	fb07 8805 	mla	r8, r7, r5, r8
 801874e:	9d08      	ldr	r5, [sp, #32]
 8018750:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018752:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018756:	fb08 1805 	mla	r8, r8, r5, r1
 801875a:	9d05      	ldr	r5, [sp, #20]
 801875c:	fa1f f888 	uxth.w	r8, r8
 8018760:	f108 0101 	add.w	r1, r8, #1
 8018764:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8018768:	9903      	ldr	r1, [sp, #12]
 801876a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801876e:	f881 8000 	strb.w	r8, [r1]
 8018772:	fb03 f10a 	mul.w	r1, r3, sl
 8018776:	fb07 1105 	mla	r1, r7, r5, r1
 801877a:	9d02      	ldr	r5, [sp, #8]
 801877c:	fb0c 1105 	mla	r1, ip, r5, r1
 8018780:	9d07      	ldr	r5, [sp, #28]
 8018782:	fb05 1102 	mla	r1, r5, r2, r1
 8018786:	9a08      	ldr	r2, [sp, #32]
 8018788:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801878c:	fb01 0102 	mla	r1, r1, r2, r0
 8018790:	9a03      	ldr	r2, [sp, #12]
 8018792:	b289      	uxth	r1, r1
 8018794:	1c48      	adds	r0, r1, #1
 8018796:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801879a:	1209      	asrs	r1, r1, #8
 801879c:	7051      	strb	r1, [r2, #1]
 801879e:	9a01      	ldr	r2, [sp, #4]
 80187a0:	4353      	muls	r3, r2
 80187a2:	9a06      	ldr	r2, [sp, #24]
 80187a4:	fb07 3702 	mla	r7, r7, r2, r3
 80187a8:	9b08      	ldr	r3, [sp, #32]
 80187aa:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80187ae:	fb05 c606 	mla	r6, r5, r6, ip
 80187b2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80187b6:	fb06 4603 	mla	r6, r6, r3, r4
 80187ba:	9b03      	ldr	r3, [sp, #12]
 80187bc:	b2b6      	uxth	r6, r6
 80187be:	f106 0e01 	add.w	lr, r6, #1
 80187c2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80187c6:	1236      	asrs	r6, r6, #8
 80187c8:	709e      	strb	r6, [r3, #2]
 80187ca:	b00d      	add	sp, #52	; 0x34
 80187cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187d0:	f1bc 0f0f 	cmp.w	ip, #15
 80187d4:	f63f af60 	bhi.w	8018698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80187d8:	4626      	mov	r6, r4
 80187da:	4602      	mov	r2, r0
 80187dc:	460d      	mov	r5, r1
 80187de:	46a6      	mov	lr, r4
 80187e0:	9002      	str	r0, [sp, #8]
 80187e2:	4688      	mov	r8, r1
 80187e4:	e783      	b.n	80186ee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80187e6:	bf00      	nop
 80187e8:	0802145d 	.word	0x0802145d
 80187ec:	08021872 	.word	0x08021872
 80187f0:	0802142a 	.word	0x0802142a

080187f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80187f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f8:	ed2d 8b08 	vpush	{d8-d11}
 80187fc:	b09f      	sub	sp, #124	; 0x7c
 80187fe:	eeb0 aa40 	vmov.f32	s20, s0
 8018802:	eef0 9a60 	vmov.f32	s19, s1
 8018806:	920e      	str	r2, [sp, #56]	; 0x38
 8018808:	eeb0 9a41 	vmov.f32	s18, s2
 801880c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801880e:	eeb0 8a62 	vmov.f32	s16, s5
 8018812:	9307      	str	r3, [sp, #28]
 8018814:	eef0 8a43 	vmov.f32	s17, s6
 8018818:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801881c:	eef0 ba44 	vmov.f32	s23, s8
 8018820:	901d      	str	r0, [sp, #116]	; 0x74
 8018822:	eeb0 ba64 	vmov.f32	s22, s9
 8018826:	930c      	str	r3, [sp, #48]	; 0x30
 8018828:	eef0 aa45 	vmov.f32	s21, s10
 801882c:	6850      	ldr	r0, [r2, #4]
 801882e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018830:	6812      	ldr	r2, [r2, #0]
 8018832:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8018836:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 801883a:	fb00 1303 	mla	r3, r0, r3, r1
 801883e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018842:	18d3      	adds	r3, r2, r3
 8018844:	9308      	str	r3, [sp, #32]
 8018846:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	930a      	str	r3, [sp, #40]	; 0x28
 801884c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801884e:	43db      	mvns	r3, r3
 8018850:	b2db      	uxtb	r3, r3
 8018852:	9309      	str	r3, [sp, #36]	; 0x24
 8018854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018856:	2b00      	cmp	r3, #0
 8018858:	dc03      	bgt.n	8018862 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801885a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801885c:	2b00      	cmp	r3, #0
 801885e:	f340 81f5 	ble.w	8018c4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8018862:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018864:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018868:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801886c:	1e48      	subs	r0, r1, #1
 801886e:	1e54      	subs	r4, r2, #1
 8018870:	9b07      	ldr	r3, [sp, #28]
 8018872:	2b00      	cmp	r3, #0
 8018874:	f340 80d5 	ble.w	8018a22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8018878:	ea5f 452a 	movs.w	r5, sl, asr #16
 801887c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8018880:	d406      	bmi.n	8018890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018882:	4285      	cmp	r5, r0
 8018884:	da04      	bge.n	8018890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018886:	2b00      	cmp	r3, #0
 8018888:	db02      	blt.n	8018890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801888a:	42a3      	cmp	r3, r4
 801888c:	f2c0 80ca 	blt.w	8018a24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8018890:	3501      	adds	r5, #1
 8018892:	f100 80bb 	bmi.w	8018a0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018896:	42a9      	cmp	r1, r5
 8018898:	f2c0 80b8 	blt.w	8018a0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801889c:	3301      	adds	r3, #1
 801889e:	f100 80b5 	bmi.w	8018a0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80188a2:	429a      	cmp	r2, r3
 80188a4:	f2c0 80b2 	blt.w	8018a0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80188a8:	9b07      	ldr	r3, [sp, #28]
 80188aa:	9d08      	ldr	r5, [sp, #32]
 80188ac:	930d      	str	r3, [sp, #52]	; 0x34
 80188ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	f340 80d6 	ble.w	8018a62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80188b6:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80188b8:	ea4f 4428 	mov.w	r4, r8, asr #16
 80188bc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80188be:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80188c2:	68c6      	ldr	r6, [r0, #12]
 80188c4:	ea5f 402a 	movs.w	r0, sl, asr #16
 80188c8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80188cc:	689b      	ldr	r3, [r3, #8]
 80188ce:	f100 810f 	bmi.w	8018af0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80188d2:	1e5f      	subs	r7, r3, #1
 80188d4:	42b8      	cmp	r0, r7
 80188d6:	f280 810b 	bge.w	8018af0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80188da:	2c00      	cmp	r4, #0
 80188dc:	f2c0 8108 	blt.w	8018af0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80188e0:	1e77      	subs	r7, r6, #1
 80188e2:	42bc      	cmp	r4, r7
 80188e4:	f280 8104 	bge.w	8018af0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80188e8:	b21b      	sxth	r3, r3
 80188ea:	fb04 0003 	mla	r0, r4, r3, r0
 80188ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80188f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80188f4:	1826      	adds	r6, r4, r0
 80188f6:	5c24      	ldrb	r4, [r4, r0]
 80188f8:	78b7      	ldrb	r7, [r6, #2]
 80188fa:	7870      	ldrb	r0, [r6, #1]
 80188fc:	970f      	str	r7, [sp, #60]	; 0x3c
 80188fe:	7977      	ldrb	r7, [r6, #5]
 8018900:	f896 e003 	ldrb.w	lr, [r6, #3]
 8018904:	f896 c004 	ldrb.w	ip, [r6, #4]
 8018908:	9710      	str	r7, [sp, #64]	; 0x40
 801890a:	b1c9      	cbz	r1, 8018940 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801890c:	f04f 0b03 	mov.w	fp, #3
 8018910:	f06f 0904 	mvn.w	r9, #4
 8018914:	3605      	adds	r6, #5
 8018916:	fb13 930b 	smlabb	r3, r3, fp, r9
 801891a:	eb06 0b03 	add.w	fp, r6, r3
 801891e:	5cf3      	ldrb	r3, [r6, r3]
 8018920:	9311      	str	r3, [sp, #68]	; 0x44
 8018922:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8018926:	9313      	str	r3, [sp, #76]	; 0x4c
 8018928:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801892c:	9315      	str	r3, [sp, #84]	; 0x54
 801892e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8018932:	9312      	str	r3, [sp, #72]	; 0x48
 8018934:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8018938:	9314      	str	r3, [sp, #80]	; 0x50
 801893a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801893e:	9316      	str	r3, [sp, #88]	; 0x58
 8018940:	b292      	uxth	r2, r2
 8018942:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8018944:	b289      	uxth	r1, r1
 8018946:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801894a:	fb02 f601 	mul.w	r6, r2, r1
 801894e:	0112      	lsls	r2, r2, #4
 8018950:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8018954:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8018958:	1b92      	subs	r2, r2, r6
 801895a:	b289      	uxth	r1, r1
 801895c:	b292      	uxth	r2, r2
 801895e:	eba9 0901 	sub.w	r9, r9, r1
 8018962:	fb02 fe0e 	mul.w	lr, r2, lr
 8018966:	fa1f f989 	uxth.w	r9, r9
 801896a:	fb02 fc0c 	mul.w	ip, r2, ip
 801896e:	fb09 e404 	mla	r4, r9, r4, lr
 8018972:	f895 e000 	ldrb.w	lr, [r5]
 8018976:	fb09 c000 	mla	r0, r9, r0, ip
 801897a:	fb01 4407 	mla	r4, r1, r7, r4
 801897e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018980:	fb06 4407 	mla	r4, r6, r7, r4
 8018984:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018986:	fb1e fe07 	smulbb	lr, lr, r7
 801898a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801898e:	fb04 e403 	mla	r4, r4, r3, lr
 8018992:	b2a4      	uxth	r4, r4
 8018994:	f104 0e01 	add.w	lr, r4, #1
 8018998:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801899c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801899e:	fb01 0004 	mla	r0, r1, r4, r0
 80189a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80189a4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80189a8:	fb06 0004 	mla	r0, r6, r4, r0
 80189ac:	786c      	ldrb	r4, [r5, #1]
 80189ae:	f885 e000 	strb.w	lr, [r5]
 80189b2:	fb14 f407 	smulbb	r4, r4, r7
 80189b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80189ba:	fb00 4003 	mla	r0, r0, r3, r4
 80189be:	b280      	uxth	r0, r0
 80189c0:	1c44      	adds	r4, r0, #1
 80189c2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80189c6:	1200      	asrs	r0, r0, #8
 80189c8:	7068      	strb	r0, [r5, #1]
 80189ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80189cc:	4342      	muls	r2, r0
 80189ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80189d0:	fb09 2200 	mla	r2, r9, r0, r2
 80189d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80189d6:	fb01 2100 	mla	r1, r1, r0, r2
 80189da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80189dc:	fb06 1602 	mla	r6, r6, r2, r1
 80189e0:	78a9      	ldrb	r1, [r5, #2]
 80189e2:	fb11 f107 	smulbb	r1, r1, r7
 80189e6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80189ea:	fb06 1303 	mla	r3, r6, r3, r1
 80189ee:	b29b      	uxth	r3, r3
 80189f0:	1c5e      	adds	r6, r3, #1
 80189f2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80189f6:	121b      	asrs	r3, r3, #8
 80189f8:	70ab      	strb	r3, [r5, #2]
 80189fa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80189fc:	3503      	adds	r5, #3
 80189fe:	449a      	add	sl, r3
 8018a00:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018a02:	4498      	add	r8, r3
 8018a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a06:	3b01      	subs	r3, #1
 8018a08:	930d      	str	r3, [sp, #52]	; 0x34
 8018a0a:	e750      	b.n	80188ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018a0c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018a0e:	449a      	add	sl, r3
 8018a10:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018a12:	4498      	add	r8, r3
 8018a14:	9b07      	ldr	r3, [sp, #28]
 8018a16:	3b01      	subs	r3, #1
 8018a18:	9307      	str	r3, [sp, #28]
 8018a1a:	9b08      	ldr	r3, [sp, #32]
 8018a1c:	3303      	adds	r3, #3
 8018a1e:	9308      	str	r3, [sp, #32]
 8018a20:	e726      	b.n	8018870 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018a22:	d026      	beq.n	8018a72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018a24:	9b07      	ldr	r3, [sp, #28]
 8018a26:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8018a28:	3b01      	subs	r3, #1
 8018a2a:	fb00 a003 	mla	r0, r0, r3, sl
 8018a2e:	1400      	asrs	r0, r0, #16
 8018a30:	f53f af3a 	bmi.w	80188a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018a34:	3901      	subs	r1, #1
 8018a36:	4288      	cmp	r0, r1
 8018a38:	f6bf af36 	bge.w	80188a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018a3c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8018a3e:	fb01 8303 	mla	r3, r1, r3, r8
 8018a42:	141b      	asrs	r3, r3, #16
 8018a44:	f53f af30 	bmi.w	80188a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018a48:	3a01      	subs	r2, #1
 8018a4a:	4293      	cmp	r3, r2
 8018a4c:	f6bf af2c 	bge.w	80188a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018a50:	9b08      	ldr	r3, [sp, #32]
 8018a52:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018a56:	1cdd      	adds	r5, r3, #3
 8018a58:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8018a5c:	f1bc 0f00 	cmp.w	ip, #0
 8018a60:	dc5f      	bgt.n	8018b22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8018a62:	9b07      	ldr	r3, [sp, #28]
 8018a64:	9a08      	ldr	r2, [sp, #32]
 8018a66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a6e:	441a      	add	r2, r3
 8018a70:	9208      	str	r2, [sp, #32]
 8018a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	f340 80e9 	ble.w	8018c4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8018a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018a7e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018a80:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018a84:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018a88:	eef0 6a48 	vmov.f32	s13, s16
 8018a8c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018a90:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018a94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018a98:	ee16 aa90 	vmov	sl, s13
 8018a9c:	eef0 6a68 	vmov.f32	s13, s17
 8018aa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018aa4:	ee16 8a90 	vmov	r8, s13
 8018aa8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018aac:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018ab0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018ab4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018ab8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018abc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018ac0:	ee18 2a10 	vmov	r2, s16
 8018ac4:	eeb0 8a47 	vmov.f32	s16, s14
 8018ac8:	fb92 f3f3 	sdiv	r3, r2, r3
 8018acc:	ee18 2a90 	vmov	r2, s17
 8018ad0:	9333      	str	r3, [sp, #204]	; 0xcc
 8018ad2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018ad4:	eef0 8a67 	vmov.f32	s17, s15
 8018ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8018adc:	9334      	str	r3, [sp, #208]	; 0xd0
 8018ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ae2:	3b01      	subs	r3, #1
 8018ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ae6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018ae8:	bf08      	it	eq
 8018aea:	4613      	moveq	r3, r2
 8018aec:	9307      	str	r3, [sp, #28]
 8018aee:	e6b1      	b.n	8018854 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018af0:	1c47      	adds	r7, r0, #1
 8018af2:	d482      	bmi.n	80189fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018af4:	42bb      	cmp	r3, r7
 8018af6:	db80      	blt.n	80189fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018af8:	1c67      	adds	r7, r4, #1
 8018afa:	f53f af7e 	bmi.w	80189fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018afe:	42be      	cmp	r6, r7
 8018b00:	f6ff af7b 	blt.w	80189fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018b04:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018b06:	b236      	sxth	r6, r6
 8018b08:	9001      	str	r0, [sp, #4]
 8018b0a:	b21b      	sxth	r3, r3
 8018b0c:	9600      	str	r6, [sp, #0]
 8018b0e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018b10:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8018b14:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018b18:	4629      	mov	r1, r5
 8018b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b1c:	f7ff fd58 	bl	80185d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8018b20:	e76b      	b.n	80189fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018b22:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8018b24:	ea4f 402a 	mov.w	r0, sl, asr #16
 8018b28:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8018b2c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8018b30:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8018b34:	ea4f 4128 	mov.w	r1, r8, asr #16
 8018b38:	fb07 0101 	mla	r1, r7, r1, r0
 8018b3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018b3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018b42:	1844      	adds	r4, r0, r1
 8018b44:	5c40      	ldrb	r0, [r0, r1]
 8018b46:	78a6      	ldrb	r6, [r4, #2]
 8018b48:	7861      	ldrb	r1, [r4, #1]
 8018b4a:	960f      	str	r6, [sp, #60]	; 0x3c
 8018b4c:	78e6      	ldrb	r6, [r4, #3]
 8018b4e:	910d      	str	r1, [sp, #52]	; 0x34
 8018b50:	9610      	str	r6, [sp, #64]	; 0x40
 8018b52:	f894 9004 	ldrb.w	r9, [r4, #4]
 8018b56:	f894 b005 	ldrb.w	fp, [r4, #5]
 8018b5a:	b192      	cbz	r2, 8018b82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8018b5c:	f06f 0604 	mvn.w	r6, #4
 8018b60:	2103      	movs	r1, #3
 8018b62:	3405      	adds	r4, #5
 8018b64:	fb17 6701 	smlabb	r7, r7, r1, r6
 8018b68:	19e6      	adds	r6, r4, r7
 8018b6a:	5de4      	ldrb	r4, [r4, r7]
 8018b6c:	9417      	str	r4, [sp, #92]	; 0x5c
 8018b6e:	7874      	ldrb	r4, [r6, #1]
 8018b70:	9419      	str	r4, [sp, #100]	; 0x64
 8018b72:	78b4      	ldrb	r4, [r6, #2]
 8018b74:	941b      	str	r4, [sp, #108]	; 0x6c
 8018b76:	78f4      	ldrb	r4, [r6, #3]
 8018b78:	9418      	str	r4, [sp, #96]	; 0x60
 8018b7a:	7934      	ldrb	r4, [r6, #4]
 8018b7c:	941a      	str	r4, [sp, #104]	; 0x68
 8018b7e:	7974      	ldrb	r4, [r6, #5]
 8018b80:	941c      	str	r4, [sp, #112]	; 0x70
 8018b82:	b29b      	uxth	r3, r3
 8018b84:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018b86:	b292      	uxth	r2, r2
 8018b88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018b8a:	3503      	adds	r5, #3
 8018b8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018b90:	fb03 f402 	mul.w	r4, r3, r2
 8018b94:	011b      	lsls	r3, r3, #4
 8018b96:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8018b9a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8018b9e:	1b1b      	subs	r3, r3, r4
 8018ba0:	b292      	uxth	r2, r2
 8018ba2:	b29b      	uxth	r3, r3
 8018ba4:	1ab6      	subs	r6, r6, r2
 8018ba6:	435f      	muls	r7, r3
 8018ba8:	b2b6      	uxth	r6, r6
 8018baa:	fb03 f909 	mul.w	r9, r3, r9
 8018bae:	fb03 fb0b 	mul.w	fp, r3, fp
 8018bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bb4:	fb06 7000 	mla	r0, r6, r0, r7
 8018bb8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018bba:	fb06 bb03 	mla	fp, r6, r3, fp
 8018bbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018bc0:	fb02 0007 	mla	r0, r2, r7, r0
 8018bc4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8018bc6:	fb02 bb03 	mla	fp, r2, r3, fp
 8018bca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018bcc:	fb04 0007 	mla	r0, r4, r7, r0
 8018bd0:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8018bd4:	fb17 f701 	smulbb	r7, r7, r1
 8018bd8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018bdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018bde:	fb00 700e 	mla	r0, r0, lr, r7
 8018be2:	fb06 9101 	mla	r1, r6, r1, r9
 8018be6:	b280      	uxth	r0, r0
 8018be8:	1c47      	adds	r7, r0, #1
 8018bea:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8018bee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018bf0:	1200      	asrs	r0, r0, #8
 8018bf2:	f805 0c06 	strb.w	r0, [r5, #-6]
 8018bf6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018bf8:	fb02 1100 	mla	r1, r2, r0, r1
 8018bfc:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018bfe:	fb04 1100 	mla	r1, r4, r0, r1
 8018c02:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8018c06:	fb04 b403 	mla	r4, r4, r3, fp
 8018c0a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8018c0e:	fb10 f007 	smulbb	r0, r0, r7
 8018c12:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018c16:	fb13 f307 	smulbb	r3, r3, r7
 8018c1a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018c1e:	fb01 010e 	mla	r1, r1, lr, r0
 8018c22:	fb04 340e 	mla	r4, r4, lr, r3
 8018c26:	b289      	uxth	r1, r1
 8018c28:	b2a4      	uxth	r4, r4
 8018c2a:	1c48      	adds	r0, r1, #1
 8018c2c:	1c63      	adds	r3, r4, #1
 8018c2e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8018c32:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8018c36:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018c38:	1209      	asrs	r1, r1, #8
 8018c3a:	1224      	asrs	r4, r4, #8
 8018c3c:	449a      	add	sl, r3
 8018c3e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018c40:	f805 1c05 	strb.w	r1, [r5, #-5]
 8018c44:	f805 4c04 	strb.w	r4, [r5, #-4]
 8018c48:	4498      	add	r8, r3
 8018c4a:	e707      	b.n	8018a5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8018c4c:	b01f      	add	sp, #124	; 0x7c
 8018c4e:	ecbd 8b08 	vpop	{d8-d11}
 8018c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018c58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8018c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c5c:	b085      	sub	sp, #20
 8018c5e:	784d      	ldrb	r5, [r1, #1]
 8018c60:	788e      	ldrb	r6, [r1, #2]
 8018c62:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8018c66:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8018c6a:	9403      	str	r4, [sp, #12]
 8018c6c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018c70:	780c      	ldrb	r4, [r1, #0]
 8018c72:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8018c76:	fb07 ce03 	mla	lr, r7, r3, ip
 8018c7a:	2f00      	cmp	r7, #0
 8018c7c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018c80:	eb02 0b0e 	add.w	fp, r2, lr
 8018c84:	db56      	blt.n	8018d34 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8018c86:	45b9      	cmp	r9, r7
 8018c88:	dd54      	ble.n	8018d34 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8018c8a:	f1bc 0f00 	cmp.w	ip, #0
 8018c8e:	db4d      	blt.n	8018d2c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8018c90:	4563      	cmp	r3, ip
 8018c92:	dd4b      	ble.n	8018d2c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8018c94:	f812 200e 	ldrb.w	r2, [r2, lr]
 8018c98:	9200      	str	r2, [sp, #0]
 8018c9a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8018c9e:	9201      	str	r2, [sp, #4]
 8018ca0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8018ca4:	9202      	str	r2, [sp, #8]
 8018ca6:	f11c 0201 	adds.w	r2, ip, #1
 8018caa:	d44a      	bmi.n	8018d42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8018cac:	4293      	cmp	r3, r2
 8018cae:	dd48      	ble.n	8018d42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8018cb0:	2800      	cmp	r0, #0
 8018cb2:	d046      	beq.n	8018d42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8018cb4:	f89b e003 	ldrb.w	lr, [fp, #3]
 8018cb8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8018cbc:	f89b a005 	ldrb.w	sl, [fp, #5]
 8018cc0:	3701      	adds	r7, #1
 8018cc2:	d446      	bmi.n	8018d52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8018cc4:	45b9      	cmp	r9, r7
 8018cc6:	dd44      	ble.n	8018d52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8018cc8:	9a03      	ldr	r2, [sp, #12]
 8018cca:	2a00      	cmp	r2, #0
 8018ccc:	d045      	beq.n	8018d5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8018cce:	f1bc 0f00 	cmp.w	ip, #0
 8018cd2:	db3a      	blt.n	8018d4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8018cd4:	4563      	cmp	r3, ip
 8018cd6:	dd38      	ble.n	8018d4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8018cd8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018cdc:	f04f 0903 	mov.w	r9, #3
 8018ce0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8018ce4:	fb03 b209 	mla	r2, r3, r9, fp
 8018ce8:	fb03 b909 	mla	r9, r3, r9, fp
 8018cec:	7852      	ldrb	r2, [r2, #1]
 8018cee:	f899 9002 	ldrb.w	r9, [r9, #2]
 8018cf2:	f11c 0c01 	adds.w	ip, ip, #1
 8018cf6:	d40d      	bmi.n	8018d14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018cf8:	4563      	cmp	r3, ip
 8018cfa:	dd0b      	ble.n	8018d14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018cfc:	b160      	cbz	r0, 8018d18 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8018cfe:	2603      	movs	r6, #3
 8018d00:	fb13 6406 	smlabb	r4, r3, r6, r6
 8018d04:	fb03 b506 	mla	r5, r3, r6, fp
 8018d08:	fb03 b306 	mla	r3, r3, r6, fp
 8018d0c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8018d10:	792d      	ldrb	r5, [r5, #4]
 8018d12:	795e      	ldrb	r6, [r3, #5]
 8018d14:	280f      	cmp	r0, #15
 8018d16:	d802      	bhi.n	8018d1e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8018d18:	9b03      	ldr	r3, [sp, #12]
 8018d1a:	2b0f      	cmp	r3, #15
 8018d1c:	d922      	bls.n	8018d64 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8018d1e:	4b2f      	ldr	r3, [pc, #188]	; (8018ddc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8018d20:	f240 115b 	movw	r1, #347	; 0x15b
 8018d24:	4a2e      	ldr	r2, [pc, #184]	; (8018de0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8018d26:	482f      	ldr	r0, [pc, #188]	; (8018de4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8018d28:	f004 f818 	bl	801cd5c <__assert_func>
 8018d2c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8018d30:	9400      	str	r4, [sp, #0]
 8018d32:	e7b8      	b.n	8018ca6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8018d34:	46b2      	mov	sl, r6
 8018d36:	46a8      	mov	r8, r5
 8018d38:	46a6      	mov	lr, r4
 8018d3a:	9400      	str	r4, [sp, #0]
 8018d3c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8018d40:	e7be      	b.n	8018cc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8018d42:	46b2      	mov	sl, r6
 8018d44:	46a8      	mov	r8, r5
 8018d46:	46a6      	mov	lr, r4
 8018d48:	e7ba      	b.n	8018cc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8018d4a:	46b1      	mov	r9, r6
 8018d4c:	462a      	mov	r2, r5
 8018d4e:	4627      	mov	r7, r4
 8018d50:	e7cf      	b.n	8018cf2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8018d52:	46b1      	mov	r9, r6
 8018d54:	462a      	mov	r2, r5
 8018d56:	4627      	mov	r7, r4
 8018d58:	e7dc      	b.n	8018d14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018d5a:	280f      	cmp	r0, #15
 8018d5c:	d8df      	bhi.n	8018d1e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8018d5e:	46b1      	mov	r9, r6
 8018d60:	462a      	mov	r2, r5
 8018d62:	4627      	mov	r7, r4
 8018d64:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8018d68:	b280      	uxth	r0, r0
 8018d6a:	fb00 f30b 	mul.w	r3, r0, fp
 8018d6e:	0100      	lsls	r0, r0, #4
 8018d70:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8018d74:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8018d78:	1ac0      	subs	r0, r0, r3
 8018d7a:	fa1f fb8b 	uxth.w	fp, fp
 8018d7e:	b280      	uxth	r0, r0
 8018d80:	ebac 0c0b 	sub.w	ip, ip, fp
 8018d84:	9003      	str	r0, [sp, #12]
 8018d86:	fa1f fc8c 	uxth.w	ip, ip
 8018d8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8018d8e:	9800      	ldr	r0, [sp, #0]
 8018d90:	fb0c ee00 	mla	lr, ip, r0, lr
 8018d94:	9803      	ldr	r0, [sp, #12]
 8018d96:	fb00 f808 	mul.w	r8, r0, r8
 8018d9a:	9801      	ldr	r0, [sp, #4]
 8018d9c:	fb0b ee07 	mla	lr, fp, r7, lr
 8018da0:	fb0c 8800 	mla	r8, ip, r0, r8
 8018da4:	fb03 ee04 	mla	lr, r3, r4, lr
 8018da8:	fb0b 8202 	mla	r2, fp, r2, r8
 8018dac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018db0:	fb03 2505 	mla	r5, r3, r5, r2
 8018db4:	9a03      	ldr	r2, [sp, #12]
 8018db6:	f881 e000 	strb.w	lr, [r1]
 8018dba:	fb02 f00a 	mul.w	r0, r2, sl
 8018dbe:	9a02      	ldr	r2, [sp, #8]
 8018dc0:	122d      	asrs	r5, r5, #8
 8018dc2:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018dc6:	704d      	strb	r5, [r1, #1]
 8018dc8:	fb0b c909 	mla	r9, fp, r9, ip
 8018dcc:	fb03 9606 	mla	r6, r3, r6, r9
 8018dd0:	1236      	asrs	r6, r6, #8
 8018dd2:	708e      	strb	r6, [r1, #2]
 8018dd4:	b005      	add	sp, #20
 8018dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dda:	bf00      	nop
 8018ddc:	0802145d 	.word	0x0802145d
 8018de0:	08021872 	.word	0x08021872
 8018de4:	0802142a 	.word	0x0802142a

08018de8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dec:	ed2d 8b08 	vpush	{d8-d11}
 8018df0:	b09b      	sub	sp, #108	; 0x6c
 8018df2:	eeb0 aa40 	vmov.f32	s20, s0
 8018df6:	eef0 9a60 	vmov.f32	s19, s1
 8018dfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8018dfc:	eeb0 9a41 	vmov.f32	s18, s2
 8018e00:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8018e02:	eeb0 8a62 	vmov.f32	s16, s5
 8018e06:	9019      	str	r0, [sp, #100]	; 0x64
 8018e08:	eef0 8a43 	vmov.f32	s17, s6
 8018e0c:	6850      	ldr	r0, [r2, #4]
 8018e0e:	eef0 ba44 	vmov.f32	s23, s8
 8018e12:	9109      	str	r1, [sp, #36]	; 0x24
 8018e14:	eeb0 ba64 	vmov.f32	s22, s9
 8018e18:	9306      	str	r3, [sp, #24]
 8018e1a:	eef0 aa45 	vmov.f32	s21, s10
 8018e1e:	6812      	ldr	r2, [r2, #0]
 8018e20:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8018e24:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8018e28:	fb00 1303 	mla	r3, r0, r3, r1
 8018e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e30:	18d3      	adds	r3, r2, r3
 8018e32:	9307      	str	r3, [sp, #28]
 8018e34:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	9308      	str	r3, [sp, #32]
 8018e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	dc03      	bgt.n	8018e48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	f340 81ab 	ble.w	801919e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8018e48:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018e4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018e4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018e52:	1e48      	subs	r0, r1, #1
 8018e54:	1e55      	subs	r5, r2, #1
 8018e56:	9b06      	ldr	r3, [sp, #24]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f340 80b1 	ble.w	8018fc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018e5e:	ea5f 462b 	movs.w	r6, fp, asr #16
 8018e62:	ea4f 4324 	mov.w	r3, r4, asr #16
 8018e66:	d406      	bmi.n	8018e76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018e68:	4286      	cmp	r6, r0
 8018e6a:	da04      	bge.n	8018e76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	db02      	blt.n	8018e76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018e70:	42ab      	cmp	r3, r5
 8018e72:	f2c0 80a6 	blt.w	8018fc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8018e76:	3601      	adds	r6, #1
 8018e78:	f100 8097 	bmi.w	8018faa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8018e7c:	42b1      	cmp	r1, r6
 8018e7e:	f2c0 8094 	blt.w	8018faa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8018e82:	3301      	adds	r3, #1
 8018e84:	f100 8091 	bmi.w	8018faa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8018e88:	429a      	cmp	r2, r3
 8018e8a:	f2c0 808e 	blt.w	8018faa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8018e8e:	9b06      	ldr	r3, [sp, #24]
 8018e90:	9e07      	ldr	r6, [sp, #28]
 8018e92:	930a      	str	r3, [sp, #40]	; 0x28
 8018e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	f340 80b0 	ble.w	8018ffc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018e9c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8018e9e:	1425      	asrs	r5, r4, #16
 8018ea0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018ea2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8018ea6:	68c7      	ldr	r7, [r0, #12]
 8018ea8:	ea5f 402b 	movs.w	r0, fp, asr #16
 8018eac:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8018eb0:	689b      	ldr	r3, [r3, #8]
 8018eb2:	f100 80ea 	bmi.w	801908a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018eb6:	f103 3cff 	add.w	ip, r3, #4294967295
 8018eba:	4560      	cmp	r0, ip
 8018ebc:	f280 80e5 	bge.w	801908a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018ec0:	2d00      	cmp	r5, #0
 8018ec2:	f2c0 80e2 	blt.w	801908a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018ec6:	f107 3cff 	add.w	ip, r7, #4294967295
 8018eca:	4565      	cmp	r5, ip
 8018ecc:	f280 80dd 	bge.w	801908a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018ed0:	b21b      	sxth	r3, r3
 8018ed2:	fb05 0003 	mla	r0, r5, r3, r0
 8018ed6:	9d08      	ldr	r5, [sp, #32]
 8018ed8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018edc:	182f      	adds	r7, r5, r0
 8018ede:	5c2d      	ldrb	r5, [r5, r0]
 8018ee0:	7878      	ldrb	r0, [r7, #1]
 8018ee2:	f897 e002 	ldrb.w	lr, [r7, #2]
 8018ee6:	900c      	str	r0, [sp, #48]	; 0x30
 8018ee8:	f897 9003 	ldrb.w	r9, [r7, #3]
 8018eec:	f897 8004 	ldrb.w	r8, [r7, #4]
 8018ef0:	f897 a005 	ldrb.w	sl, [r7, #5]
 8018ef4:	b1c9      	cbz	r1, 8018f2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018ef6:	f04f 0c03 	mov.w	ip, #3
 8018efa:	f06f 0004 	mvn.w	r0, #4
 8018efe:	3705      	adds	r7, #5
 8018f00:	fb13 030c 	smlabb	r3, r3, ip, r0
 8018f04:	eb07 0c03 	add.w	ip, r7, r3
 8018f08:	5cfb      	ldrb	r3, [r7, r3]
 8018f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8018f0c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8018f10:	930f      	str	r3, [sp, #60]	; 0x3c
 8018f12:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8018f16:	9311      	str	r3, [sp, #68]	; 0x44
 8018f18:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8018f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8018f1e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8018f22:	9310      	str	r3, [sp, #64]	; 0x40
 8018f24:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8018f28:	9312      	str	r3, [sp, #72]	; 0x48
 8018f2a:	b292      	uxth	r2, r2
 8018f2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018f2e:	b289      	uxth	r1, r1
 8018f30:	fb02 f301 	mul.w	r3, r2, r1
 8018f34:	0112      	lsls	r2, r2, #4
 8018f36:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8018f3a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8018f3e:	1ad2      	subs	r2, r2, r3
 8018f40:	b289      	uxth	r1, r1
 8018f42:	b292      	uxth	r2, r2
 8018f44:	1a7f      	subs	r7, r7, r1
 8018f46:	fb02 f909 	mul.w	r9, r2, r9
 8018f4a:	b2bf      	uxth	r7, r7
 8018f4c:	fb02 f808 	mul.w	r8, r2, r8
 8018f50:	fb02 fa0a 	mul.w	sl, r2, sl
 8018f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f56:	fb07 9905 	mla	r9, r7, r5, r9
 8018f5a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018f5c:	fb07 8800 	mla	r8, r7, r0, r8
 8018f60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018f62:	fb07 aa0e 	mla	sl, r7, lr, sl
 8018f66:	fb01 9905 	mla	r9, r1, r5, r9
 8018f6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018f6c:	fb01 8800 	mla	r8, r1, r0, r8
 8018f70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018f72:	fb01 a102 	mla	r1, r1, r2, sl
 8018f76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018f78:	fb03 9905 	mla	r9, r3, r5, r9
 8018f7c:	fb03 8800 	mla	r8, r3, r0, r8
 8018f80:	fb03 1302 	mla	r3, r3, r2, r1
 8018f84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f88:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f8c:	121b      	asrs	r3, r3, #8
 8018f8e:	f886 9000 	strb.w	r9, [r6]
 8018f92:	f886 8001 	strb.w	r8, [r6, #1]
 8018f96:	70b3      	strb	r3, [r6, #2]
 8018f98:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018f9a:	3603      	adds	r6, #3
 8018f9c:	449b      	add	fp, r3
 8018f9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018fa0:	441c      	add	r4, r3
 8018fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fa4:	3b01      	subs	r3, #1
 8018fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8018fa8:	e774      	b.n	8018e94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8018faa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018fac:	449b      	add	fp, r3
 8018fae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018fb0:	441c      	add	r4, r3
 8018fb2:	9b06      	ldr	r3, [sp, #24]
 8018fb4:	3b01      	subs	r3, #1
 8018fb6:	9306      	str	r3, [sp, #24]
 8018fb8:	9b07      	ldr	r3, [sp, #28]
 8018fba:	3303      	adds	r3, #3
 8018fbc:	9307      	str	r3, [sp, #28]
 8018fbe:	e74a      	b.n	8018e56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018fc0:	d024      	beq.n	801900c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8018fc2:	9b06      	ldr	r3, [sp, #24]
 8018fc4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8018fc6:	3b01      	subs	r3, #1
 8018fc8:	fb00 b003 	mla	r0, r0, r3, fp
 8018fcc:	1400      	asrs	r0, r0, #16
 8018fce:	f53f af5e 	bmi.w	8018e8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018fd2:	3901      	subs	r1, #1
 8018fd4:	4288      	cmp	r0, r1
 8018fd6:	f6bf af5a 	bge.w	8018e8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018fda:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8018fdc:	fb01 4303 	mla	r3, r1, r3, r4
 8018fe0:	141b      	asrs	r3, r3, #16
 8018fe2:	f53f af54 	bmi.w	8018e8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018fe6:	3a01      	subs	r2, #1
 8018fe8:	4293      	cmp	r3, r2
 8018fea:	f6bf af50 	bge.w	8018e8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018fee:	9b07      	ldr	r3, [sp, #28]
 8018ff0:	f8dd e018 	ldr.w	lr, [sp, #24]
 8018ff4:	1cde      	adds	r6, r3, #3
 8018ff6:	f1be 0f00 	cmp.w	lr, #0
 8018ffa:	dc5f      	bgt.n	80190bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8018ffc:	9b06      	ldr	r3, [sp, #24]
 8018ffe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019002:	9b07      	ldr	r3, [sp, #28]
 8019004:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019008:	4423      	add	r3, r4
 801900a:	9307      	str	r3, [sp, #28]
 801900c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801900e:	2b00      	cmp	r3, #0
 8019010:	f340 80c5 	ble.w	801919e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8019014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019018:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801901a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801901e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019022:	eef0 6a48 	vmov.f32	s13, s16
 8019026:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801902a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801902e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019032:	ee16 ba90 	vmov	fp, s13
 8019036:	eef0 6a68 	vmov.f32	s13, s17
 801903a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801903e:	ee16 4a90 	vmov	r4, s13
 8019042:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019046:	ee69 7a27 	vmul.f32	s15, s18, s15
 801904a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801904e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019052:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019056:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801905a:	ee18 2a10 	vmov	r2, s16
 801905e:	eeb0 8a47 	vmov.f32	s16, s14
 8019062:	fb92 f3f3 	sdiv	r3, r2, r3
 8019066:	ee18 2a90 	vmov	r2, s17
 801906a:	932f      	str	r3, [sp, #188]	; 0xbc
 801906c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801906e:	eef0 8a67 	vmov.f32	s17, s15
 8019072:	fb92 f3f3 	sdiv	r3, r2, r3
 8019076:	9330      	str	r3, [sp, #192]	; 0xc0
 8019078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801907a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801907c:	3b01      	subs	r3, #1
 801907e:	9309      	str	r3, [sp, #36]	; 0x24
 8019080:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019082:	bf08      	it	eq
 8019084:	4613      	moveq	r3, r2
 8019086:	9306      	str	r3, [sp, #24]
 8019088:	e6d7      	b.n	8018e3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801908a:	f110 0c01 	adds.w	ip, r0, #1
 801908e:	d483      	bmi.n	8018f98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019090:	4563      	cmp	r3, ip
 8019092:	db81      	blt.n	8018f98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019094:	f115 0c01 	adds.w	ip, r5, #1
 8019098:	f53f af7e 	bmi.w	8018f98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801909c:	4567      	cmp	r7, ip
 801909e:	f6ff af7b 	blt.w	8018f98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80190a2:	b23f      	sxth	r7, r7
 80190a4:	b21b      	sxth	r3, r3
 80190a6:	9700      	str	r7, [sp, #0]
 80190a8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80190ac:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80190b0:	9a08      	ldr	r2, [sp, #32]
 80190b2:	4631      	mov	r1, r6
 80190b4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80190b6:	f7ff fdcf 	bl	8018c58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80190ba:	e76d      	b.n	8018f98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80190bc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80190be:	ea4f 402b 	mov.w	r0, fp, asr #16
 80190c2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80190c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80190ca:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80190ce:	1421      	asrs	r1, r4, #16
 80190d0:	930a      	str	r3, [sp, #40]	; 0x28
 80190d2:	fb0c 0101 	mla	r1, ip, r1, r0
 80190d6:	9808      	ldr	r0, [sp, #32]
 80190d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80190dc:	1845      	adds	r5, r0, r1
 80190de:	5c40      	ldrb	r0, [r0, r1]
 80190e0:	796f      	ldrb	r7, [r5, #5]
 80190e2:	7869      	ldrb	r1, [r5, #1]
 80190e4:	f895 8002 	ldrb.w	r8, [r5, #2]
 80190e8:	f895 a003 	ldrb.w	sl, [r5, #3]
 80190ec:	f895 9004 	ldrb.w	r9, [r5, #4]
 80190f0:	970c      	str	r7, [sp, #48]	; 0x30
 80190f2:	b1a2      	cbz	r2, 801911e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 80190f4:	2703      	movs	r7, #3
 80190f6:	f06f 0304 	mvn.w	r3, #4
 80190fa:	3505      	adds	r5, #5
 80190fc:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8019100:	eb05 070c 	add.w	r7, r5, ip
 8019104:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019108:	9513      	str	r5, [sp, #76]	; 0x4c
 801910a:	787d      	ldrb	r5, [r7, #1]
 801910c:	9515      	str	r5, [sp, #84]	; 0x54
 801910e:	78bd      	ldrb	r5, [r7, #2]
 8019110:	9517      	str	r5, [sp, #92]	; 0x5c
 8019112:	78fd      	ldrb	r5, [r7, #3]
 8019114:	9514      	str	r5, [sp, #80]	; 0x50
 8019116:	793d      	ldrb	r5, [r7, #4]
 8019118:	9516      	str	r5, [sp, #88]	; 0x58
 801911a:	797d      	ldrb	r5, [r7, #5]
 801911c:	9518      	str	r5, [sp, #96]	; 0x60
 801911e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019122:	b292      	uxth	r2, r2
 8019124:	3603      	adds	r6, #3
 8019126:	f10e 3eff 	add.w	lr, lr, #4294967295
 801912a:	fb03 f502 	mul.w	r5, r3, r2
 801912e:	011b      	lsls	r3, r3, #4
 8019130:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8019134:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019138:	1b5b      	subs	r3, r3, r5
 801913a:	b292      	uxth	r2, r2
 801913c:	b29b      	uxth	r3, r3
 801913e:	1abf      	subs	r7, r7, r2
 8019140:	fb03 f909 	mul.w	r9, r3, r9
 8019144:	b2bf      	uxth	r7, r7
 8019146:	fb03 fa0a 	mul.w	sl, r3, sl
 801914a:	fb07 9901 	mla	r9, r7, r1, r9
 801914e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019150:	fb07 aa00 	mla	sl, r7, r0, sl
 8019154:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019156:	fb02 9901 	mla	r9, r2, r1, r9
 801915a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801915c:	fb02 aa00 	mla	sl, r2, r0, sl
 8019160:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019162:	fb05 9901 	mla	r9, r5, r1, r9
 8019166:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019168:	fb05 aa00 	mla	sl, r5, r0, sl
 801916c:	434b      	muls	r3, r1
 801916e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019170:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019174:	fb07 3308 	mla	r3, r7, r8, r3
 8019178:	ea4f 2929 	mov.w	r9, r9, asr #8
 801917c:	f806 ac06 	strb.w	sl, [r6, #-6]
 8019180:	fb02 3201 	mla	r2, r2, r1, r3
 8019184:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019186:	f806 9c05 	strb.w	r9, [r6, #-5]
 801918a:	fb05 2503 	mla	r5, r5, r3, r2
 801918e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019190:	122d      	asrs	r5, r5, #8
 8019192:	449b      	add	fp, r3
 8019194:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019196:	f806 5c04 	strb.w	r5, [r6, #-4]
 801919a:	441c      	add	r4, r3
 801919c:	e72b      	b.n	8018ff6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801919e:	b01b      	add	sp, #108	; 0x6c
 80191a0:	ecbd 8b08 	vpop	{d8-d11}
 80191a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80191a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ac:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80191b0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80191b4:	fb04 5603 	mla	r6, r4, r3, r5
 80191b8:	2c00      	cmp	r4, #0
 80191ba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80191be:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80191c2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80191c6:	db36      	blt.n	8019236 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 80191c8:	45a6      	cmp	lr, r4
 80191ca:	dd34      	ble.n	8019236 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 80191cc:	2d00      	cmp	r5, #0
 80191ce:	db30      	blt.n	8019232 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 80191d0:	42ab      	cmp	r3, r5
 80191d2:	dd2e      	ble.n	8019232 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 80191d4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80191d8:	1c6e      	adds	r6, r5, #1
 80191da:	d42f      	bmi.n	801923c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 80191dc:	42b3      	cmp	r3, r6
 80191de:	dd2d      	ble.n	801923c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 80191e0:	b370      	cbz	r0, 8019240 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 80191e2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80191e6:	3401      	adds	r4, #1
 80191e8:	d42e      	bmi.n	8019248 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80191ea:	45a6      	cmp	lr, r4
 80191ec:	dd2c      	ble.n	8019248 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80191ee:	b377      	cbz	r7, 801924e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 80191f0:	2d00      	cmp	r5, #0
 80191f2:	db27      	blt.n	8019244 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 80191f4:	42ab      	cmp	r3, r5
 80191f6:	dd25      	ble.n	8019244 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 80191f8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80191fc:	3501      	adds	r5, #1
 80191fe:	d429      	bmi.n	8019254 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019200:	42ab      	cmp	r3, r5
 8019202:	dd27      	ble.n	8019254 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019204:	b340      	cbz	r0, 8019258 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8019206:	3301      	adds	r3, #1
 8019208:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801920c:	280f      	cmp	r0, #15
 801920e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019212:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019216:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801921a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801921e:	d801      	bhi.n	8019224 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8019220:	2f0f      	cmp	r7, #15
 8019222:	d91b      	bls.n	801925c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8019224:	4b89      	ldr	r3, [pc, #548]	; (801944c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8019226:	f240 115b 	movw	r1, #347	; 0x15b
 801922a:	4a89      	ldr	r2, [pc, #548]	; (8019450 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801922c:	4889      	ldr	r0, [pc, #548]	; (8019454 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801922e:	f003 fd95 	bl	801cd5c <__assert_func>
 8019232:	2200      	movs	r2, #0
 8019234:	e7d0      	b.n	80191d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8019236:	2600      	movs	r6, #0
 8019238:	4632      	mov	r2, r6
 801923a:	e7d4      	b.n	80191e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801923c:	2600      	movs	r6, #0
 801923e:	e7d2      	b.n	80191e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019240:	4606      	mov	r6, r0
 8019242:	e7d0      	b.n	80191e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019244:	2400      	movs	r4, #0
 8019246:	e7d9      	b.n	80191fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8019248:	2300      	movs	r3, #0
 801924a:	461c      	mov	r4, r3
 801924c:	e7de      	b.n	801920c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801924e:	463b      	mov	r3, r7
 8019250:	463c      	mov	r4, r7
 8019252:	e7db      	b.n	801920c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019254:	2300      	movs	r3, #0
 8019256:	e7d9      	b.n	801920c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019258:	4603      	mov	r3, r0
 801925a:	e7d7      	b.n	801920c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801925c:	b280      	uxth	r0, r0
 801925e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019262:	b2bf      	uxth	r7, r7
 8019264:	fb00 fe07 	mul.w	lr, r0, r7
 8019268:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801926c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8019270:	eba0 0c0e 	sub.w	ip, r0, lr
 8019274:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8019278:	b2bf      	uxth	r7, r7
 801927a:	fa1f fc8c 	uxth.w	ip, ip
 801927e:	eba5 0507 	sub.w	r5, r5, r7
 8019282:	fb0c f00a 	mul.w	r0, ip, sl
 8019286:	b2ad      	uxth	r5, r5
 8019288:	fb05 000b 	mla	r0, r5, fp, r0
 801928c:	fb07 0009 	mla	r0, r7, r9, r0
 8019290:	fb0e 0008 	mla	r0, lr, r8, r0
 8019294:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019298:	9001      	str	r0, [sp, #4]
 801929a:	d018      	beq.n	80192ce <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 801929c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80192a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80192a4:	fb0b f000 	mul.w	r0, fp, r0
 80192a8:	fb0b fb02 	mul.w	fp, fp, r2
 80192ac:	0a02      	lsrs	r2, r0, #8
 80192ae:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80192b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80192b6:	4402      	add	r2, r0
 80192b8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80192bc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80192c0:	0a12      	lsrs	r2, r2, #8
 80192c2:	0a00      	lsrs	r0, r0, #8
 80192c4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80192c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80192cc:	4302      	orrs	r2, r0
 80192ce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80192d2:	d01a      	beq.n	801930a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 80192d4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80192d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80192dc:	fb0a f000 	mul.w	r0, sl, r0
 80192e0:	fb0a fa06 	mul.w	sl, sl, r6
 80192e4:	0a06      	lsrs	r6, r0, #8
 80192e6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80192ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80192ee:	4406      	add	r6, r0
 80192f0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80192f4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80192f8:	0a36      	lsrs	r6, r6, #8
 80192fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80192fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019302:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019306:	ea46 060a 	orr.w	r6, r6, sl
 801930a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801930e:	d01b      	beq.n	8019348 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8019310:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019314:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019318:	fb09 fa0a 	mul.w	sl, r9, sl
 801931c:	fb09 f004 	mul.w	r0, r9, r4
 8019320:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019324:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019328:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801932c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019330:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019334:	4454      	add	r4, sl
 8019336:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801933a:	0a24      	lsrs	r4, r4, #8
 801933c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019340:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019344:	ea44 0409 	orr.w	r4, r4, r9
 8019348:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801934c:	d01b      	beq.n	8019386 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 801934e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8019352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019356:	fb08 f909 	mul.w	r9, r8, r9
 801935a:	fb08 f003 	mul.w	r0, r8, r3
 801935e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019362:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8019366:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801936a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801936e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8019372:	444b      	add	r3, r9
 8019374:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019378:	0a1b      	lsrs	r3, r3, #8
 801937a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801937e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019382:	ea43 0308 	orr.w	r3, r3, r8
 8019386:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801938a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801938e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8019392:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019396:	fb0c f000 	mul.w	r0, ip, r0
 801939a:	fb0c f606 	mul.w	r6, ip, r6
 801939e:	fb05 0808 	mla	r8, r5, r8, r0
 80193a2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80193a6:	fb05 6502 	mla	r5, r5, r2, r6
 80193aa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80193ae:	fb07 8800 	mla	r8, r7, r0, r8
 80193b2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80193b6:	fb07 5704 	mla	r7, r7, r4, r5
 80193ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80193be:	fb0e 8000 	mla	r0, lr, r0, r8
 80193c2:	fb0e 7e03 	mla	lr, lr, r3, r7
 80193c6:	9b01      	ldr	r3, [sp, #4]
 80193c8:	0a00      	lsrs	r0, r0, #8
 80193ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80193ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80193d2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80193d6:	ea40 0e0e 	orr.w	lr, r0, lr
 80193da:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80193de:	b280      	uxth	r0, r0
 80193e0:	fa5f f48e 	uxtb.w	r4, lr
 80193e4:	4343      	muls	r3, r0
 80193e6:	fb14 f400 	smulbb	r4, r4, r0
 80193ea:	1c5a      	adds	r2, r3, #1
 80193ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80193f0:	780b      	ldrb	r3, [r1, #0]
 80193f2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80193f6:	b2d2      	uxtb	r2, r2
 80193f8:	fb03 4302 	mla	r3, r3, r2, r4
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	1c5c      	adds	r4, r3, #1
 8019400:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019404:	784c      	ldrb	r4, [r1, #1]
 8019406:	fb14 f402 	smulbb	r4, r4, r2
 801940a:	121b      	asrs	r3, r3, #8
 801940c:	700b      	strb	r3, [r1, #0]
 801940e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8019412:	fb03 4300 	mla	r3, r3, r0, r4
 8019416:	b29b      	uxth	r3, r3
 8019418:	1c5c      	adds	r4, r3, #1
 801941a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801941e:	121b      	asrs	r3, r3, #8
 8019420:	704b      	strb	r3, [r1, #1]
 8019422:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8019426:	f891 e002 	ldrb.w	lr, [r1, #2]
 801942a:	fb1e fe02 	smulbb	lr, lr, r2
 801942e:	fb03 ee00 	mla	lr, r3, r0, lr
 8019432:	fa1f fe8e 	uxth.w	lr, lr
 8019436:	f10e 0301 	add.w	r3, lr, #1
 801943a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801943e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019442:	f881 e002 	strb.w	lr, [r1, #2]
 8019446:	b003      	add	sp, #12
 8019448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801944c:	0802145d 	.word	0x0802145d
 8019450:	08021872 	.word	0x08021872
 8019454:	0802142a 	.word	0x0802142a

08019458 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801945c:	ed2d 8b08 	vpush	{d8-d11}
 8019460:	b09d      	sub	sp, #116	; 0x74
 8019462:	eeb0 aa40 	vmov.f32	s20, s0
 8019466:	eef0 9a60 	vmov.f32	s19, s1
 801946a:	9219      	str	r2, [sp, #100]	; 0x64
 801946c:	eeb0 9a41 	vmov.f32	s18, s2
 8019470:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8019472:	eeb0 8a62 	vmov.f32	s16, s5
 8019476:	9307      	str	r3, [sp, #28]
 8019478:	eef0 8a43 	vmov.f32	s17, s6
 801947c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8019480:	eef0 ba44 	vmov.f32	s23, s8
 8019484:	901b      	str	r0, [sp, #108]	; 0x6c
 8019486:	eeb0 ba64 	vmov.f32	s22, s9
 801948a:	931a      	str	r3, [sp, #104]	; 0x68
 801948c:	eef0 aa45 	vmov.f32	s21, s10
 8019490:	6850      	ldr	r0, [r2, #4]
 8019492:	9117      	str	r1, [sp, #92]	; 0x5c
 8019494:	6812      	ldr	r2, [r2, #0]
 8019496:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801949a:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801949e:	fb00 1303 	mla	r3, r0, r3, r1
 80194a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194a6:	18d3      	adds	r3, r2, r3
 80194a8:	930a      	str	r3, [sp, #40]	; 0x28
 80194aa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	9310      	str	r3, [sp, #64]	; 0x40
 80194b0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80194b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80194b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	dc03      	bgt.n	80194c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80194bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80194be:	2b00      	cmp	r3, #0
 80194c0:	f340 8368 	ble.w	8019b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80194c4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80194c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80194ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80194ce:	1e48      	subs	r0, r1, #1
 80194d0:	1e57      	subs	r7, r2, #1
 80194d2:	9b07      	ldr	r3, [sp, #28]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	f340 8187 	ble.w	80197e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80194da:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80194de:	ea4f 4326 	mov.w	r3, r6, asr #16
 80194e2:	d406      	bmi.n	80194f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80194e4:	4584      	cmp	ip, r0
 80194e6:	da04      	bge.n	80194f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	db02      	blt.n	80194f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80194ec:	42bb      	cmp	r3, r7
 80194ee:	f2c0 817c 	blt.w	80197ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80194f2:	f11c 0c01 	adds.w	ip, ip, #1
 80194f6:	f100 816c 	bmi.w	80197d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80194fa:	4561      	cmp	r1, ip
 80194fc:	f2c0 8169 	blt.w	80197d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8019500:	3301      	adds	r3, #1
 8019502:	f100 8166 	bmi.w	80197d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8019506:	429a      	cmp	r2, r3
 8019508:	f2c0 8163 	blt.w	80197d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801950c:	9b07      	ldr	r3, [sp, #28]
 801950e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019510:	9318      	str	r3, [sp, #96]	; 0x60
 8019512:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019514:	2b00      	cmp	r3, #0
 8019516:	f340 8186 	ble.w	8019826 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801951a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801951c:	142a      	asrs	r2, r5, #16
 801951e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8019522:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019526:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801952a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801952e:	f100 81cb 	bmi.w	80198c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8019532:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019536:	4542      	cmp	r2, r8
 8019538:	f280 81c6 	bge.w	80198c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801953c:	2800      	cmp	r0, #0
 801953e:	f2c0 81c3 	blt.w	80198c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8019542:	f103 38ff 	add.w	r8, r3, #4294967295
 8019546:	4540      	cmp	r0, r8
 8019548:	f280 81be 	bge.w	80198c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801954c:	fa0f f38e 	sxth.w	r3, lr
 8019550:	fb00 2203 	mla	r2, r0, r3, r2
 8019554:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019556:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801955a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801955e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8019562:	2900      	cmp	r1, #0
 8019564:	f000 81a6 	beq.w	80198b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8019568:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801956c:	900c      	str	r0, [sp, #48]	; 0x30
 801956e:	0e00      	lsrs	r0, r0, #24
 8019570:	9013      	str	r0, [sp, #76]	; 0x4c
 8019572:	f1bc 0f00 	cmp.w	ip, #0
 8019576:	d00f      	beq.n	8019598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019578:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801957c:	3b01      	subs	r3, #1
 801957e:	009b      	lsls	r3, r3, #2
 8019580:	3304      	adds	r3, #4
 8019582:	eb08 0003 	add.w	r0, r8, r3
 8019586:	f858 3003 	ldr.w	r3, [r8, r3]
 801958a:	9308      	str	r3, [sp, #32]
 801958c:	0e1b      	lsrs	r3, r3, #24
 801958e:	9311      	str	r3, [sp, #68]	; 0x44
 8019590:	6843      	ldr	r3, [r0, #4]
 8019592:	930d      	str	r3, [sp, #52]	; 0x34
 8019594:	0e1b      	lsrs	r3, r3, #24
 8019596:	9314      	str	r3, [sp, #80]	; 0x50
 8019598:	b289      	uxth	r1, r1
 801959a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801959c:	fa1f fc8c 	uxth.w	ip, ip
 80195a0:	0108      	lsls	r0, r1, #4
 80195a2:	fb01 f90c 	mul.w	r9, r1, ip
 80195a6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80195aa:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80195ae:	eba0 0809 	sub.w	r8, r0, r9
 80195b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80195b4:	fa1f f18c 	uxth.w	r1, ip
 80195b8:	fa1f f888 	uxth.w	r8, r8
 80195bc:	1a5b      	subs	r3, r3, r1
 80195be:	fb08 f000 	mul.w	r0, r8, r0
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	fb03 000e 	mla	r0, r3, lr, r0
 80195c8:	fb01 0004 	mla	r0, r1, r4, r0
 80195cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80195ce:	fb09 0004 	mla	r0, r9, r4, r0
 80195d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80195d6:	2800      	cmp	r0, #0
 80195d8:	f000 80f2 	beq.w	80197c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80195dc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80195e0:	d01b      	beq.n	801961a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80195e2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80195e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80195ea:	fb0e fa0a 	mul.w	sl, lr, sl
 80195ee:	fb0e fe02 	mul.w	lr, lr, r2
 80195f2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80195f6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80195fa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80195fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019602:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019606:	4452      	add	r2, sl
 8019608:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801960c:	0a12      	lsrs	r2, r2, #8
 801960e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019612:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019616:	ea42 020c 	orr.w	r2, r2, ip
 801961a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801961c:	2cff      	cmp	r4, #255	; 0xff
 801961e:	d021      	beq.n	8019664 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8019620:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019622:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019626:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019628:	fb04 fb0b 	mul.w	fp, r4, fp
 801962c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801962e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019632:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019634:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019638:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801963c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019640:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019644:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019648:	44de      	add	lr, fp
 801964a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801964e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019652:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019656:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801965a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801965e:	ea4e 040a 	orr.w	r4, lr, sl
 8019662:	940c      	str	r4, [sp, #48]	; 0x30
 8019664:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019666:	2cff      	cmp	r4, #255	; 0xff
 8019668:	d021      	beq.n	80196ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801966a:	9c08      	ldr	r4, [sp, #32]
 801966c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019670:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019672:	fb04 fb0b 	mul.w	fp, r4, fp
 8019676:	9c08      	ldr	r4, [sp, #32]
 8019678:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801967c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801967e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019682:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019686:	fb04 fa0a 	mul.w	sl, r4, sl
 801968a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801968e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019692:	44de      	add	lr, fp
 8019694:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019698:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801969c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80196a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80196a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80196a8:	ea4e 040a 	orr.w	r4, lr, sl
 80196ac:	9408      	str	r4, [sp, #32]
 80196ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80196b0:	2cff      	cmp	r4, #255	; 0xff
 80196b2:	d021      	beq.n	80196f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80196b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80196b6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80196ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80196bc:	fb04 fb0b 	mul.w	fp, r4, fp
 80196c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80196c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80196c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80196c8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80196cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80196d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80196d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80196d8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80196dc:	44de      	add	lr, fp
 80196de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80196e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80196e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80196ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80196ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80196f2:	ea4e 040a 	orr.w	r4, lr, sl
 80196f6:	940d      	str	r4, [sp, #52]	; 0x34
 80196f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80196fa:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80196fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019702:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019706:	9c08      	ldr	r4, [sp, #32]
 8019708:	fb08 fc0c 	mul.w	ip, r8, ip
 801970c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8019710:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019714:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019716:	fb01 cc0e 	mla	ip, r1, lr, ip
 801971a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801971e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019720:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019724:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019728:	fb08 f80e 	mul.w	r8, r8, lr
 801972c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019730:	fb03 8202 	mla	r2, r3, r2, r8
 8019734:	9b08      	ldr	r3, [sp, #32]
 8019736:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801973a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801973e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019740:	fb01 220a 	mla	r2, r1, sl, r2
 8019744:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8019748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801974a:	fb09 2901 	mla	r9, r9, r1, r2
 801974e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019750:	4343      	muls	r3, r0
 8019752:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019756:	1c58      	adds	r0, r3, #1
 8019758:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801975c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019760:	783b      	ldrb	r3, [r7, #0]
 8019762:	ea4c 0c09 	orr.w	ip, ip, r9
 8019766:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801976a:	fa5f f28c 	uxtb.w	r2, ip
 801976e:	b2c0      	uxtb	r0, r0
 8019770:	fb12 f201 	smulbb	r2, r2, r1
 8019774:	fb03 2300 	mla	r3, r3, r0, r2
 8019778:	b29b      	uxth	r3, r3
 801977a:	1c5a      	adds	r2, r3, #1
 801977c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019780:	787a      	ldrb	r2, [r7, #1]
 8019782:	fb12 f200 	smulbb	r2, r2, r0
 8019786:	121b      	asrs	r3, r3, #8
 8019788:	703b      	strb	r3, [r7, #0]
 801978a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801978e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019792:	fb03 2301 	mla	r3, r3, r1, r2
 8019796:	b29b      	uxth	r3, r3
 8019798:	1c5a      	adds	r2, r3, #1
 801979a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801979e:	121b      	asrs	r3, r3, #8
 80197a0:	707b      	strb	r3, [r7, #1]
 80197a2:	78bb      	ldrb	r3, [r7, #2]
 80197a4:	fb13 f000 	smulbb	r0, r3, r0
 80197a8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80197ac:	fa1f fc8c 	uxth.w	ip, ip
 80197b0:	f10c 0301 	add.w	r3, ip, #1
 80197b4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80197b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80197bc:	f887 c002 	strb.w	ip, [r7, #2]
 80197c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80197c2:	3703      	adds	r7, #3
 80197c4:	441d      	add	r5, r3
 80197c6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80197c8:	441e      	add	r6, r3
 80197ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80197cc:	3b01      	subs	r3, #1
 80197ce:	9318      	str	r3, [sp, #96]	; 0x60
 80197d0:	e69f      	b.n	8019512 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80197d2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80197d4:	441d      	add	r5, r3
 80197d6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80197d8:	441e      	add	r6, r3
 80197da:	9b07      	ldr	r3, [sp, #28]
 80197dc:	3b01      	subs	r3, #1
 80197de:	9307      	str	r3, [sp, #28]
 80197e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197e2:	3303      	adds	r3, #3
 80197e4:	930a      	str	r3, [sp, #40]	; 0x28
 80197e6:	e674      	b.n	80194d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80197e8:	d025      	beq.n	8019836 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80197ea:	9b07      	ldr	r3, [sp, #28]
 80197ec:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80197ee:	3b01      	subs	r3, #1
 80197f0:	fb00 5003 	mla	r0, r0, r3, r5
 80197f4:	1400      	asrs	r0, r0, #16
 80197f6:	f53f ae89 	bmi.w	801950c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80197fa:	3901      	subs	r1, #1
 80197fc:	4288      	cmp	r0, r1
 80197fe:	f6bf ae85 	bge.w	801950c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019802:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8019804:	fb01 6303 	mla	r3, r1, r3, r6
 8019808:	141b      	asrs	r3, r3, #16
 801980a:	f53f ae7f 	bmi.w	801950c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801980e:	3a01      	subs	r2, #1
 8019810:	4293      	cmp	r3, r2
 8019812:	f6bf ae7b 	bge.w	801950c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019818:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801981c:	f103 0e03 	add.w	lr, r3, #3
 8019820:	f1bb 0f00 	cmp.w	fp, #0
 8019824:	dc6e      	bgt.n	8019904 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8019826:	9b07      	ldr	r3, [sp, #28]
 8019828:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801982c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801982e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019832:	4423      	add	r3, r4
 8019834:	930a      	str	r3, [sp, #40]	; 0x28
 8019836:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019838:	2b00      	cmp	r3, #0
 801983a:	f340 81ab 	ble.w	8019b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801983e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019842:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019844:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019848:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801984c:	eef0 6a48 	vmov.f32	s13, s16
 8019850:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019854:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019858:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801985c:	ee16 5a90 	vmov	r5, s13
 8019860:	eef0 6a68 	vmov.f32	s13, s17
 8019864:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019868:	ee16 6a90 	vmov	r6, s13
 801986c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019870:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019874:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019878:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801987c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019880:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019884:	ee18 2a10 	vmov	r2, s16
 8019888:	eeb0 8a47 	vmov.f32	s16, s14
 801988c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019890:	ee18 2a90 	vmov	r2, s17
 8019894:	9331      	str	r3, [sp, #196]	; 0xc4
 8019896:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019898:	eef0 8a67 	vmov.f32	s17, s15
 801989c:	fb92 f3f3 	sdiv	r3, r2, r3
 80198a0:	9332      	str	r3, [sp, #200]	; 0xc8
 80198a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80198a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80198a6:	3b01      	subs	r3, #1
 80198a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80198aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80198ac:	bf08      	it	eq
 80198ae:	4613      	moveq	r3, r2
 80198b0:	9307      	str	r3, [sp, #28]
 80198b2:	e600      	b.n	80194b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80198b4:	f1bc 0f00 	cmp.w	ip, #0
 80198b8:	f43f ae6e 	beq.w	8019598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80198bc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80198c0:	9308      	str	r3, [sp, #32]
 80198c2:	0e1b      	lsrs	r3, r3, #24
 80198c4:	9311      	str	r3, [sp, #68]	; 0x44
 80198c6:	e667      	b.n	8019598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80198c8:	f112 0801 	adds.w	r8, r2, #1
 80198cc:	f53f af78 	bmi.w	80197c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80198d0:	45c6      	cmp	lr, r8
 80198d2:	f6ff af75 	blt.w	80197c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80198d6:	f110 0801 	adds.w	r8, r0, #1
 80198da:	f53f af71 	bmi.w	80197c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80198de:	4543      	cmp	r3, r8
 80198e0:	f6ff af6e 	blt.w	80197c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80198e4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80198e6:	b21b      	sxth	r3, r3
 80198e8:	9201      	str	r2, [sp, #4]
 80198ea:	9300      	str	r3, [sp, #0]
 80198ec:	fa0f f38e 	sxth.w	r3, lr
 80198f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80198f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198f6:	e9cd c404 	strd	ip, r4, [sp, #16]
 80198fa:	4639      	mov	r1, r7
 80198fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80198fe:	f7ff fc53 	bl	80191a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8019902:	e75d      	b.n	80197c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019904:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019906:	142f      	asrs	r7, r5, #16
 8019908:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801990a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801990e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8019912:	1433      	asrs	r3, r6, #16
 8019914:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019918:	fb02 7303 	mla	r3, r2, r3, r7
 801991c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8019920:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019924:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019928:	2900      	cmp	r1, #0
 801992a:	f000 812a 	beq.w	8019b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801992e:	687c      	ldr	r4, [r7, #4]
 8019930:	940e      	str	r4, [sp, #56]	; 0x38
 8019932:	0e24      	lsrs	r4, r4, #24
 8019934:	9415      	str	r4, [sp, #84]	; 0x54
 8019936:	b178      	cbz	r0, 8019958 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8019938:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801993c:	3a01      	subs	r2, #1
 801993e:	0092      	lsls	r2, r2, #2
 8019940:	3204      	adds	r2, #4
 8019942:	eb07 0802 	add.w	r8, r7, r2
 8019946:	58ba      	ldr	r2, [r7, r2]
 8019948:	9209      	str	r2, [sp, #36]	; 0x24
 801994a:	0e12      	lsrs	r2, r2, #24
 801994c:	9212      	str	r2, [sp, #72]	; 0x48
 801994e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8019952:	920f      	str	r2, [sp, #60]	; 0x3c
 8019954:	0e12      	lsrs	r2, r2, #24
 8019956:	9216      	str	r2, [sp, #88]	; 0x58
 8019958:	b289      	uxth	r1, r1
 801995a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801995c:	b280      	uxth	r0, r0
 801995e:	fb01 f900 	mul.w	r9, r1, r0
 8019962:	0109      	lsls	r1, r1, #4
 8019964:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019968:	eba1 0809 	sub.w	r8, r1, r9
 801996c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8019970:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019972:	b280      	uxth	r0, r0
 8019974:	fa1f f888 	uxth.w	r8, r8
 8019978:	1a12      	subs	r2, r2, r0
 801997a:	fb08 f101 	mul.w	r1, r8, r1
 801997e:	b292      	uxth	r2, r2
 8019980:	fb02 110c 	mla	r1, r2, ip, r1
 8019984:	fb00 1104 	mla	r1, r0, r4, r1
 8019988:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801998a:	fb09 1104 	mla	r1, r9, r4, r1
 801998e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019992:	2900      	cmp	r1, #0
 8019994:	f000 80ec 	beq.w	8019b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8019998:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801999c:	d019      	beq.n	80199d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801999e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80199a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80199a6:	fb0c fa0a 	mul.w	sl, ip, sl
 80199aa:	fb0c fc03 	mul.w	ip, ip, r3
 80199ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80199b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80199b6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80199ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80199be:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80199c2:	4453      	add	r3, sl
 80199c4:	0a3f      	lsrs	r7, r7, #8
 80199c6:	0a1b      	lsrs	r3, r3, #8
 80199c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80199cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80199d0:	433b      	orrs	r3, r7
 80199d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80199d4:	2cff      	cmp	r4, #255	; 0xff
 80199d6:	d020      	beq.n	8019a1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 80199d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80199da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80199de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80199e0:	4367      	muls	r7, r4
 80199e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80199e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80199e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80199ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80199ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80199f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80199f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80199fa:	44bc      	add	ip, r7
 80199fc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019a00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019a08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a14:	ea4c 040a 	orr.w	r4, ip, sl
 8019a18:	940e      	str	r4, [sp, #56]	; 0x38
 8019a1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019a1c:	2cff      	cmp	r4, #255	; 0xff
 8019a1e:	d020      	beq.n	8019a62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8019a20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019a22:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019a26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019a28:	4367      	muls	r7, r4
 8019a2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019a2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019a30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019a34:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019a36:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019a3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8019a42:	44bc      	add	ip, r7
 8019a44:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019a48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019a50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a5c:	ea4c 040a 	orr.w	r4, ip, sl
 8019a60:	9409      	str	r4, [sp, #36]	; 0x24
 8019a62:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019a64:	2cff      	cmp	r4, #255	; 0xff
 8019a66:	d020      	beq.n	8019aaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8019a68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019a6a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019a6e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019a70:	4367      	muls	r7, r4
 8019a72:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019a74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019a78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019a7c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019a7e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019a82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a86:	fb04 fa0a 	mul.w	sl, r4, sl
 8019a8a:	44bc      	add	ip, r7
 8019a8c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019a90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019a98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019aa0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019aa4:	ea4c 040a 	orr.w	r4, ip, sl
 8019aa8:	940f      	str	r4, [sp, #60]	; 0x3c
 8019aaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019aac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019ab0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019ab4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019ab8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019aba:	fb08 f707 	mul.w	r7, r8, r7
 8019abe:	fb02 770c 	mla	r7, r2, ip, r7
 8019ac2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019ac6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019ac8:	fb00 770c 	mla	r7, r0, ip, r7
 8019acc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019ad0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019ad2:	fb09 770c 	mla	r7, r9, ip, r7
 8019ad6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019ada:	fb08 f80c 	mul.w	r8, r8, ip
 8019ade:	0a3f      	lsrs	r7, r7, #8
 8019ae0:	fb02 8303 	mla	r3, r2, r3, r8
 8019ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ae6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019aea:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019af0:	fb00 330a 	mla	r3, r0, sl, r3
 8019af4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019af8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019afa:	fb09 3c0c 	mla	ip, r9, ip, r3
 8019afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019b04:	434b      	muls	r3, r1
 8019b06:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019b0a:	1c59      	adds	r1, r3, #1
 8019b0c:	ea47 070c 	orr.w	r7, r7, ip
 8019b10:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019b14:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019b18:	b2fa      	uxtb	r2, r7
 8019b1a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019b1e:	fb12 f200 	smulbb	r2, r2, r0
 8019b22:	b2c9      	uxtb	r1, r1
 8019b24:	fb03 2301 	mla	r3, r3, r1, r2
 8019b28:	b29b      	uxth	r3, r3
 8019b2a:	1c5a      	adds	r2, r3, #1
 8019b2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b30:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019b34:	fb12 f201 	smulbb	r2, r2, r1
 8019b38:	121b      	asrs	r3, r3, #8
 8019b3a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019b3e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8019b42:	0c3f      	lsrs	r7, r7, #16
 8019b44:	fb03 2300 	mla	r3, r3, r0, r2
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	1c5a      	adds	r2, r3, #1
 8019b4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b50:	121b      	asrs	r3, r3, #8
 8019b52:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019b56:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019b5a:	fb13 f101 	smulbb	r1, r3, r1
 8019b5e:	fb07 1700 	mla	r7, r7, r0, r1
 8019b62:	b2bf      	uxth	r7, r7
 8019b64:	1c79      	adds	r1, r7, #1
 8019b66:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8019b6a:	123f      	asrs	r7, r7, #8
 8019b6c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019b70:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019b72:	f10e 0e03 	add.w	lr, lr, #3
 8019b76:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019b7a:	441d      	add	r5, r3
 8019b7c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019b7e:	441e      	add	r6, r3
 8019b80:	e64e      	b.n	8019820 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8019b82:	2800      	cmp	r0, #0
 8019b84:	f43f aee8 	beq.w	8019958 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8019b88:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8019b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8019b8e:	0e12      	lsrs	r2, r2, #24
 8019b90:	9212      	str	r2, [sp, #72]	; 0x48
 8019b92:	e6e1      	b.n	8019958 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8019b94:	b01d      	add	sp, #116	; 0x74
 8019b96:	ecbd 8b08 	vpop	{d8-d11}
 8019b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019ba0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8019ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ba4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8019ba8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019bac:	fb04 5603 	mla	r6, r4, r3, r5
 8019bb0:	2c00      	cmp	r4, #0
 8019bb2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8019bb6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019bba:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8019bbe:	db36      	blt.n	8019c2e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8019bc0:	45a6      	cmp	lr, r4
 8019bc2:	dd34      	ble.n	8019c2e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8019bc4:	2d00      	cmp	r5, #0
 8019bc6:	db30      	blt.n	8019c2a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8019bc8:	42ab      	cmp	r3, r5
 8019bca:	dd2e      	ble.n	8019c2a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8019bcc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8019bd0:	1c6e      	adds	r6, r5, #1
 8019bd2:	d42f      	bmi.n	8019c34 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8019bd4:	42b3      	cmp	r3, r6
 8019bd6:	dd2d      	ble.n	8019c34 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8019bd8:	b370      	cbz	r0, 8019c38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8019bda:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019bde:	3401      	adds	r4, #1
 8019be0:	d42e      	bmi.n	8019c40 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8019be2:	45a6      	cmp	lr, r4
 8019be4:	dd2c      	ble.n	8019c40 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8019be6:	b377      	cbz	r7, 8019c46 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8019be8:	2d00      	cmp	r5, #0
 8019bea:	db27      	blt.n	8019c3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8019bec:	42ab      	cmp	r3, r5
 8019bee:	dd25      	ble.n	8019c3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8019bf0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8019bf4:	3501      	adds	r5, #1
 8019bf6:	d429      	bmi.n	8019c4c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8019bf8:	42ab      	cmp	r3, r5
 8019bfa:	dd27      	ble.n	8019c4c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8019bfc:	b340      	cbz	r0, 8019c50 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 8019bfe:	3301      	adds	r3, #1
 8019c00:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8019c04:	280f      	cmp	r0, #15
 8019c06:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019c0a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019c0e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8019c12:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8019c16:	d801      	bhi.n	8019c1c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8019c18:	2f0f      	cmp	r7, #15
 8019c1a:	d91b      	bls.n	8019c54 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8019c1c:	4b7e      	ldr	r3, [pc, #504]	; (8019e18 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 8019c1e:	f240 115b 	movw	r1, #347	; 0x15b
 8019c22:	4a7e      	ldr	r2, [pc, #504]	; (8019e1c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8019c24:	487e      	ldr	r0, [pc, #504]	; (8019e20 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8019c26:	f003 f899 	bl	801cd5c <__assert_func>
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	e7d0      	b.n	8019bd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 8019c2e:	2600      	movs	r6, #0
 8019c30:	4632      	mov	r2, r6
 8019c32:	e7d4      	b.n	8019bde <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019c34:	2600      	movs	r6, #0
 8019c36:	e7d2      	b.n	8019bde <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019c38:	4606      	mov	r6, r0
 8019c3a:	e7d0      	b.n	8019bde <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019c3c:	2400      	movs	r4, #0
 8019c3e:	e7d9      	b.n	8019bf4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8019c40:	2300      	movs	r3, #0
 8019c42:	461c      	mov	r4, r3
 8019c44:	e7de      	b.n	8019c04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8019c46:	463b      	mov	r3, r7
 8019c48:	463c      	mov	r4, r7
 8019c4a:	e7db      	b.n	8019c04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	e7d9      	b.n	8019c04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8019c50:	4603      	mov	r3, r0
 8019c52:	e7d7      	b.n	8019c04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8019c54:	b280      	uxth	r0, r0
 8019c56:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019c5a:	b2bf      	uxth	r7, r7
 8019c5c:	fb00 fe07 	mul.w	lr, r0, r7
 8019c60:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019c64:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8019c68:	eba0 0c0e 	sub.w	ip, r0, lr
 8019c6c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8019c70:	b2bf      	uxth	r7, r7
 8019c72:	fa1f fc8c 	uxth.w	ip, ip
 8019c76:	eba0 0507 	sub.w	r5, r0, r7
 8019c7a:	fb0c f00a 	mul.w	r0, ip, sl
 8019c7e:	b2ad      	uxth	r5, r5
 8019c80:	fb05 000b 	mla	r0, r5, fp, r0
 8019c84:	fb07 0009 	mla	r0, r7, r9, r0
 8019c88:	fb0e 0008 	mla	r0, lr, r8, r0
 8019c8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019c90:	9001      	str	r0, [sp, #4]
 8019c92:	d018      	beq.n	8019cc6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8019c94:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8019c98:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019c9c:	fb0b f000 	mul.w	r0, fp, r0
 8019ca0:	fb0b fb02 	mul.w	fp, fp, r2
 8019ca4:	0a02      	lsrs	r2, r0, #8
 8019ca6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019caa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019cae:	4402      	add	r2, r0
 8019cb0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8019cb4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019cb8:	0a12      	lsrs	r2, r2, #8
 8019cba:	0a00      	lsrs	r0, r0, #8
 8019cbc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019cc0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019cc4:	4302      	orrs	r2, r0
 8019cc6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019cca:	d01a      	beq.n	8019d02 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8019ccc:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019cd0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019cd4:	fb0a f000 	mul.w	r0, sl, r0
 8019cd8:	fb0a fa06 	mul.w	sl, sl, r6
 8019cdc:	0a06      	lsrs	r6, r0, #8
 8019cde:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019ce2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019ce6:	4406      	add	r6, r0
 8019ce8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019cec:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019cf0:	0a36      	lsrs	r6, r6, #8
 8019cf2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019cf6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019cfa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019cfe:	ea46 060a 	orr.w	r6, r6, sl
 8019d02:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019d06:	d01b      	beq.n	8019d40 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8019d08:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019d0c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019d10:	fb09 fa0a 	mul.w	sl, r9, sl
 8019d14:	fb09 f004 	mul.w	r0, r9, r4
 8019d18:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019d1c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019d20:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8019d24:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019d28:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019d2c:	4454      	add	r4, sl
 8019d2e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019d32:	0a24      	lsrs	r4, r4, #8
 8019d34:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019d38:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019d3c:	ea44 0409 	orr.w	r4, r4, r9
 8019d40:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019d44:	d01b      	beq.n	8019d7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8019d46:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8019d4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019d4e:	fb08 f909 	mul.w	r9, r8, r9
 8019d52:	fb08 f003 	mul.w	r0, r8, r3
 8019d56:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019d5a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8019d5e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8019d62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019d66:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8019d6a:	444b      	add	r3, r9
 8019d6c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019d70:	0a1b      	lsrs	r3, r3, #8
 8019d72:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019d76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019d7a:	ea43 0308 	orr.w	r3, r3, r8
 8019d7e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019d82:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019d86:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8019d8a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019d8e:	fb0c f000 	mul.w	r0, ip, r0
 8019d92:	fb0c f606 	mul.w	r6, ip, r6
 8019d96:	fb05 0808 	mla	r8, r5, r8, r0
 8019d9a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8019d9e:	fb05 6502 	mla	r5, r5, r2, r6
 8019da2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019da6:	fb07 8800 	mla	r8, r7, r0, r8
 8019daa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8019dae:	fb07 5704 	mla	r7, r7, r4, r5
 8019db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019db6:	fb0e 8000 	mla	r0, lr, r0, r8
 8019dba:	780a      	ldrb	r2, [r1, #0]
 8019dbc:	fb0e 7e03 	mla	lr, lr, r3, r7
 8019dc0:	9b01      	ldr	r3, [sp, #4]
 8019dc2:	0a00      	lsrs	r0, r0, #8
 8019dc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019dc8:	43db      	mvns	r3, r3
 8019dca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019dd4:	ea40 0e0e 	orr.w	lr, r0, lr
 8019dd8:	fb02 f003 	mul.w	r0, r2, r3
 8019ddc:	1c42      	adds	r2, r0, #1
 8019dde:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8019de2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8019de6:	700a      	strb	r2, [r1, #0]
 8019de8:	784a      	ldrb	r2, [r1, #1]
 8019dea:	435a      	muls	r2, r3
 8019dec:	1c50      	adds	r0, r2, #1
 8019dee:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8019df2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8019df6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8019dfa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8019dfe:	704a      	strb	r2, [r1, #1]
 8019e00:	788a      	ldrb	r2, [r1, #2]
 8019e02:	4353      	muls	r3, r2
 8019e04:	1c5a      	adds	r2, r3, #1
 8019e06:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019e0a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8019e0e:	f881 e002 	strb.w	lr, [r1, #2]
 8019e12:	b003      	add	sp, #12
 8019e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e18:	0802145d 	.word	0x0802145d
 8019e1c:	08021872 	.word	0x08021872
 8019e20:	0802142a 	.word	0x0802142a

08019e24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e28:	ed2d 8b08 	vpush	{d8-d11}
 8019e2c:	b099      	sub	sp, #100	; 0x64
 8019e2e:	eeb0 aa40 	vmov.f32	s20, s0
 8019e32:	eef0 9a60 	vmov.f32	s19, s1
 8019e36:	9017      	str	r0, [sp, #92]	; 0x5c
 8019e38:	eeb0 9a41 	vmov.f32	s18, s2
 8019e3c:	9306      	str	r3, [sp, #24]
 8019e3e:	eeb0 8a62 	vmov.f32	s16, s5
 8019e42:	eef0 8a43 	vmov.f32	s17, s6
 8019e46:	eef0 ba44 	vmov.f32	s23, s8
 8019e4a:	eeb0 ba64 	vmov.f32	s22, s9
 8019e4e:	eef0 aa45 	vmov.f32	s21, s10
 8019e52:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8019e56:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019e58:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8019e5c:	6850      	ldr	r0, [r2, #4]
 8019e5e:	6812      	ldr	r2, [r2, #0]
 8019e60:	fb00 1303 	mla	r3, r0, r3, r1
 8019e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e68:	18d3      	adds	r3, r2, r3
 8019e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8019e6c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019e6e:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	930e      	str	r3, [sp, #56]	; 0x38
 8019e76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	dc03      	bgt.n	8019e84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019e7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	f340 8360 	ble.w	801a544 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8019e84:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019e86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019e8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019e8e:	1e48      	subs	r0, r1, #1
 8019e90:	1e57      	subs	r7, r2, #1
 8019e92:	9b06      	ldr	r3, [sp, #24]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	f340 817b 	ble.w	801a190 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8019e9a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8019e9e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8019ea2:	d406      	bmi.n	8019eb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019ea4:	4584      	cmp	ip, r0
 8019ea6:	da04      	bge.n	8019eb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	db02      	blt.n	8019eb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019eac:	42bb      	cmp	r3, r7
 8019eae:	f2c0 8170 	blt.w	801a192 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8019eb2:	f11c 0c01 	adds.w	ip, ip, #1
 8019eb6:	f100 8160 	bmi.w	801a17a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019eba:	4561      	cmp	r1, ip
 8019ebc:	f2c0 815d 	blt.w	801a17a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019ec0:	3301      	adds	r3, #1
 8019ec2:	f100 815a 	bmi.w	801a17a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019ec6:	429a      	cmp	r2, r3
 8019ec8:	f2c0 8157 	blt.w	801a17a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019ecc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019ed0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019ed2:	f1b8 0f00 	cmp.w	r8, #0
 8019ed6:	f340 8179 	ble.w	801a1cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8019eda:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8019edc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8019ee0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019ee2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019ee6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8019eea:	142a      	asrs	r2, r5, #16
 8019eec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019ef0:	689b      	ldr	r3, [r3, #8]
 8019ef2:	f100 81be 	bmi.w	801a272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019ef6:	f103 39ff 	add.w	r9, r3, #4294967295
 8019efa:	454a      	cmp	r2, r9
 8019efc:	f280 81b9 	bge.w	801a272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019f00:	f1bc 0f00 	cmp.w	ip, #0
 8019f04:	f2c0 81b5 	blt.w	801a272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019f08:	f10e 39ff 	add.w	r9, lr, #4294967295
 8019f0c:	45cc      	cmp	ip, r9
 8019f0e:	f280 81b0 	bge.w	801a272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019f12:	b21b      	sxth	r3, r3
 8019f14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f16:	fb0c 2203 	mla	r2, ip, r3, r2
 8019f1a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8019f1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019f22:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8019f26:	2900      	cmp	r1, #0
 8019f28:	f000 8197 	beq.w	801a25a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8019f2c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8019f30:	940a      	str	r4, [sp, #40]	; 0x28
 8019f32:	0e24      	lsrs	r4, r4, #24
 8019f34:	9411      	str	r4, [sp, #68]	; 0x44
 8019f36:	b180      	cbz	r0, 8019f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019f38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019f3c:	3b01      	subs	r3, #1
 8019f3e:	009b      	lsls	r3, r3, #2
 8019f40:	3304      	adds	r3, #4
 8019f42:	eb09 0c03 	add.w	ip, r9, r3
 8019f46:	f859 3003 	ldr.w	r3, [r9, r3]
 8019f4a:	9307      	str	r3, [sp, #28]
 8019f4c:	0e1b      	lsrs	r3, r3, #24
 8019f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f50:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f56:	0e1b      	lsrs	r3, r3, #24
 8019f58:	9312      	str	r3, [sp, #72]	; 0x48
 8019f5a:	b289      	uxth	r1, r1
 8019f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019f5e:	b280      	uxth	r0, r0
 8019f60:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019f62:	fb01 fa00 	mul.w	sl, r1, r0
 8019f66:	0109      	lsls	r1, r1, #4
 8019f68:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8019f6c:	eba1 090a 	sub.w	r9, r1, sl
 8019f70:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8019f74:	b280      	uxth	r0, r0
 8019f76:	fa1f f989 	uxth.w	r9, r9
 8019f7a:	1a09      	subs	r1, r1, r0
 8019f7c:	fb09 f303 	mul.w	r3, r9, r3
 8019f80:	b289      	uxth	r1, r1
 8019f82:	fb01 330e 	mla	r3, r1, lr, r3
 8019f86:	fb00 3304 	mla	r3, r0, r4, r3
 8019f8a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019f8c:	fb0a 3304 	mla	r3, sl, r4, r3
 8019f90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	f000 80e8 	beq.w	801a16a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019f9a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019f9e:	d01b      	beq.n	8019fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019fa0:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8019fa4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019fa8:	fb0e fb0b 	mul.w	fp, lr, fp
 8019fac:	fb0e fe02 	mul.w	lr, lr, r2
 8019fb0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8019fb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019fb8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019fbc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019fc0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019fc4:	445a      	add	r2, fp
 8019fc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019fca:	0a12      	lsrs	r2, r2, #8
 8019fcc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019fd0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019fd4:	ea42 020c 	orr.w	r2, r2, ip
 8019fd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019fda:	2cff      	cmp	r4, #255	; 0xff
 8019fdc:	d021      	beq.n	801a022 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8019fde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019fe0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019fe4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019fe6:	fb04 fc0c 	mul.w	ip, r4, ip
 8019fea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019fec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019ff0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8019ff4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019ff6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019ffa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019ffe:	fb04 fb0b 	mul.w	fp, r4, fp
 801a002:	44e6      	add	lr, ip
 801a004:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a008:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a00c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a010:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a014:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a018:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a01c:	ea4e 040b 	orr.w	r4, lr, fp
 801a020:	940a      	str	r4, [sp, #40]	; 0x28
 801a022:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a024:	2cff      	cmp	r4, #255	; 0xff
 801a026:	d021      	beq.n	801a06c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a028:	9c07      	ldr	r4, [sp, #28]
 801a02a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a02e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a030:	fb04 fc0c 	mul.w	ip, r4, ip
 801a034:	9c07      	ldr	r4, [sp, #28]
 801a036:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a03a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a03e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a040:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a044:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a048:	fb04 fb0b 	mul.w	fp, r4, fp
 801a04c:	44e6      	add	lr, ip
 801a04e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a052:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a056:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a05a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a05e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a062:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a066:	ea4e 040b 	orr.w	r4, lr, fp
 801a06a:	9407      	str	r4, [sp, #28]
 801a06c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a06e:	2cff      	cmp	r4, #255	; 0xff
 801a070:	d021      	beq.n	801a0b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a072:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a074:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a078:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a07a:	fb04 fc0c 	mul.w	ip, r4, ip
 801a07e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a080:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a084:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a088:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a08a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a08e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a092:	fb04 fb0b 	mul.w	fp, r4, fp
 801a096:	44e6      	add	lr, ip
 801a098:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a09c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a0a0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a0a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0a8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a0ac:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a0b0:	ea4e 040b 	orr.w	r4, lr, fp
 801a0b4:	940b      	str	r4, [sp, #44]	; 0x2c
 801a0b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a0b8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a0bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a0c0:	2bff      	cmp	r3, #255	; 0xff
 801a0c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a0c6:	9c07      	ldr	r4, [sp, #28]
 801a0c8:	fb09 fc0c 	mul.w	ip, r9, ip
 801a0cc:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a0d0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a0d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a0d6:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a0da:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a0de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a0e0:	fb0a cc0e 	mla	ip, sl, lr, ip
 801a0e4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a0e8:	fb09 f90e 	mul.w	r9, r9, lr
 801a0ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a0f0:	fb01 9202 	mla	r2, r1, r2, r9
 801a0f4:	9907      	ldr	r1, [sp, #28]
 801a0f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a0fa:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801a0fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a100:	fb00 220b 	mla	r2, r0, fp, r2
 801a104:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801a108:	fb0a 2a00 	mla	sl, sl, r0, r2
 801a10c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a110:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a114:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a118:	fa5f f08c 	uxtb.w	r0, ip
 801a11c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801a120:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a124:	f000 80a2 	beq.w	801a26c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801a128:	43db      	mvns	r3, r3
 801a12a:	783a      	ldrb	r2, [r7, #0]
 801a12c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a130:	b2db      	uxtb	r3, r3
 801a132:	fb02 fe03 	mul.w	lr, r2, r3
 801a136:	fb0a fa03 	mul.w	sl, sl, r3
 801a13a:	f10e 0201 	add.w	r2, lr, #1
 801a13e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801a142:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a146:	703a      	strb	r2, [r7, #0]
 801a148:	787a      	ldrb	r2, [r7, #1]
 801a14a:	fb02 f003 	mul.w	r0, r2, r3
 801a14e:	f10a 0301 	add.w	r3, sl, #1
 801a152:	1c42      	adds	r2, r0, #1
 801a154:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801a158:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a15c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a160:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a164:	707a      	strb	r2, [r7, #1]
 801a166:	f887 c002 	strb.w	ip, [r7, #2]
 801a16a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a16c:	3703      	adds	r7, #3
 801a16e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a172:	441d      	add	r5, r3
 801a174:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a176:	441e      	add	r6, r3
 801a178:	e6ab      	b.n	8019ed2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a17a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a17c:	441d      	add	r5, r3
 801a17e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a180:	441e      	add	r6, r3
 801a182:	9b06      	ldr	r3, [sp, #24]
 801a184:	3b01      	subs	r3, #1
 801a186:	9306      	str	r3, [sp, #24]
 801a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a18a:	3303      	adds	r3, #3
 801a18c:	9309      	str	r3, [sp, #36]	; 0x24
 801a18e:	e680      	b.n	8019e92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a190:	d024      	beq.n	801a1dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801a192:	9b06      	ldr	r3, [sp, #24]
 801a194:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801a196:	3b01      	subs	r3, #1
 801a198:	fb00 5003 	mla	r0, r0, r3, r5
 801a19c:	1400      	asrs	r0, r0, #16
 801a19e:	f53f ae95 	bmi.w	8019ecc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a1a2:	3901      	subs	r1, #1
 801a1a4:	4288      	cmp	r0, r1
 801a1a6:	f6bf ae91 	bge.w	8019ecc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a1aa:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801a1ac:	fb01 6303 	mla	r3, r1, r3, r6
 801a1b0:	141b      	asrs	r3, r3, #16
 801a1b2:	f53f ae8b 	bmi.w	8019ecc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a1b6:	3a01      	subs	r2, #1
 801a1b8:	4293      	cmp	r3, r2
 801a1ba:	f6bf ae87 	bge.w	8019ecc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1c0:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a1c4:	1cdf      	adds	r7, r3, #3
 801a1c6:	f1bb 0f00 	cmp.w	fp, #0
 801a1ca:	dc6e      	bgt.n	801a2aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801a1cc:	9b06      	ldr	r3, [sp, #24]
 801a1ce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a1d8:	4423      	add	r3, r4
 801a1da:	9309      	str	r3, [sp, #36]	; 0x24
 801a1dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	f340 81b0 	ble.w	801a544 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801a1e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a1e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a1ea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a1ee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a1f2:	eef0 6a48 	vmov.f32	s13, s16
 801a1f6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a1fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a1fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a202:	ee16 5a90 	vmov	r5, s13
 801a206:	eef0 6a68 	vmov.f32	s13, s17
 801a20a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a20e:	ee16 6a90 	vmov	r6, s13
 801a212:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a216:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a21a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a21e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a222:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a226:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a22a:	ee18 2a10 	vmov	r2, s16
 801a22e:	eeb0 8a47 	vmov.f32	s16, s14
 801a232:	fb92 f3f3 	sdiv	r3, r2, r3
 801a236:	ee18 2a90 	vmov	r2, s17
 801a23a:	932d      	str	r3, [sp, #180]	; 0xb4
 801a23c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a23e:	eef0 8a67 	vmov.f32	s17, s15
 801a242:	fb92 f3f3 	sdiv	r3, r2, r3
 801a246:	932e      	str	r3, [sp, #184]	; 0xb8
 801a248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a24a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a24c:	3b01      	subs	r3, #1
 801a24e:	9315      	str	r3, [sp, #84]	; 0x54
 801a250:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a252:	bf08      	it	eq
 801a254:	4613      	moveq	r3, r2
 801a256:	9306      	str	r3, [sp, #24]
 801a258:	e60d      	b.n	8019e76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a25a:	2800      	cmp	r0, #0
 801a25c:	f43f ae7d 	beq.w	8019f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a260:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a264:	9307      	str	r3, [sp, #28]
 801a266:	0e1b      	lsrs	r3, r3, #24
 801a268:	930f      	str	r3, [sp, #60]	; 0x3c
 801a26a:	e676      	b.n	8019f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a26c:	7038      	strb	r0, [r7, #0]
 801a26e:	7079      	strb	r1, [r7, #1]
 801a270:	e779      	b.n	801a166 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801a272:	f112 0901 	adds.w	r9, r2, #1
 801a276:	f53f af78 	bmi.w	801a16a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a27a:	454b      	cmp	r3, r9
 801a27c:	f6ff af75 	blt.w	801a16a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a280:	f11c 0901 	adds.w	r9, ip, #1
 801a284:	f53f af71 	bmi.w	801a16a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a288:	45ce      	cmp	lr, r9
 801a28a:	f6ff af6e 	blt.w	801a16a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a28e:	b21b      	sxth	r3, r3
 801a290:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801a294:	fa0f f28e 	sxth.w	r2, lr
 801a298:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801a29c:	9200      	str	r2, [sp, #0]
 801a29e:	4639      	mov	r1, r7
 801a2a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a2a2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a2a4:	f7ff fc7c 	bl	8019ba0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801a2a8:	e75f      	b.n	801a16a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801a2aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a2ac:	1429      	asrs	r1, r5, #16
 801a2ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a2b0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801a2b4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801a2b8:	1433      	asrs	r3, r6, #16
 801a2ba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a2be:	fb0c 1303 	mla	r3, ip, r3, r1
 801a2c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a2c4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a2c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a2cc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a2d0:	2a00      	cmp	r2, #0
 801a2d2:	f000 8129 	beq.w	801a528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801a2d6:	684c      	ldr	r4, [r1, #4]
 801a2d8:	940c      	str	r4, [sp, #48]	; 0x30
 801a2da:	0e24      	lsrs	r4, r4, #24
 801a2dc:	9413      	str	r4, [sp, #76]	; 0x4c
 801a2de:	b198      	cbz	r0, 801a308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801a2e0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801a2e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a2e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801a2ec:	f10c 0c04 	add.w	ip, ip, #4
 801a2f0:	eb01 080c 	add.w	r8, r1, ip
 801a2f4:	f851 100c 	ldr.w	r1, [r1, ip]
 801a2f8:	9108      	str	r1, [sp, #32]
 801a2fa:	0e09      	lsrs	r1, r1, #24
 801a2fc:	9110      	str	r1, [sp, #64]	; 0x40
 801a2fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a302:	910d      	str	r1, [sp, #52]	; 0x34
 801a304:	0e09      	lsrs	r1, r1, #24
 801a306:	9114      	str	r1, [sp, #80]	; 0x50
 801a308:	b292      	uxth	r2, r2
 801a30a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a30c:	b280      	uxth	r0, r0
 801a30e:	fb02 f900 	mul.w	r9, r2, r0
 801a312:	0112      	lsls	r2, r2, #4
 801a314:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a318:	eba2 0809 	sub.w	r8, r2, r9
 801a31c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a320:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a322:	b280      	uxth	r0, r0
 801a324:	fa1f f888 	uxth.w	r8, r8
 801a328:	1a09      	subs	r1, r1, r0
 801a32a:	fb08 f202 	mul.w	r2, r8, r2
 801a32e:	b289      	uxth	r1, r1
 801a330:	fb01 220e 	mla	r2, r1, lr, r2
 801a334:	fb00 2204 	mla	r2, r0, r4, r2
 801a338:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a33a:	fb09 2204 	mla	r2, r9, r4, r2
 801a33e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a342:	2a00      	cmp	r2, #0
 801a344:	f000 80e8 	beq.w	801a518 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801a348:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a34c:	d01b      	beq.n	801a386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801a34e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a356:	fb0e fa0a 	mul.w	sl, lr, sl
 801a35a:	fb0e fe03 	mul.w	lr, lr, r3
 801a35e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a362:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a366:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a36a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a36e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a372:	4453      	add	r3, sl
 801a374:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a378:	0a1b      	lsrs	r3, r3, #8
 801a37a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a37e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a382:	ea43 030c 	orr.w	r3, r3, ip
 801a386:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a388:	2cff      	cmp	r4, #255	; 0xff
 801a38a:	d021      	beq.n	801a3d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801a38c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a38e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a392:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a394:	fb04 fc0c 	mul.w	ip, r4, ip
 801a398:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a39a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a39e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a3a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a3a4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a3a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a3ac:	fb04 fa0a 	mul.w	sl, r4, sl
 801a3b0:	44e6      	add	lr, ip
 801a3b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a3b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a3ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a3be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a3c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a3c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a3ca:	ea4e 040a 	orr.w	r4, lr, sl
 801a3ce:	940c      	str	r4, [sp, #48]	; 0x30
 801a3d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a3d2:	2cff      	cmp	r4, #255	; 0xff
 801a3d4:	d021      	beq.n	801a41a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801a3d6:	9c08      	ldr	r4, [sp, #32]
 801a3d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a3dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a3de:	fb04 fc0c 	mul.w	ip, r4, ip
 801a3e2:	9c08      	ldr	r4, [sp, #32]
 801a3e4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a3e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a3ea:	fb04 fa0e 	mul.w	sl, r4, lr
 801a3ee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a3f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a3f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a3fa:	44e6      	add	lr, ip
 801a3fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a400:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a404:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a408:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a40c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a410:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a414:	ea4e 040a 	orr.w	r4, lr, sl
 801a418:	9408      	str	r4, [sp, #32]
 801a41a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a41c:	2cff      	cmp	r4, #255	; 0xff
 801a41e:	d021      	beq.n	801a464 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801a420:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a422:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a426:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a428:	fb04 fc0c 	mul.w	ip, r4, ip
 801a42c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a42e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a432:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a436:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a438:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a43c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a440:	fb04 fa0a 	mul.w	sl, r4, sl
 801a444:	44e6      	add	lr, ip
 801a446:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a44a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a44e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a452:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a456:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a45a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a45e:	ea4e 040a 	orr.w	r4, lr, sl
 801a462:	940d      	str	r4, [sp, #52]	; 0x34
 801a464:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a466:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a46a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a46e:	2aff      	cmp	r2, #255	; 0xff
 801a470:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a474:	9c08      	ldr	r4, [sp, #32]
 801a476:	fb08 fc0c 	mul.w	ip, r8, ip
 801a47a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a47e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a482:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a484:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a488:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a48c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a48e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a492:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a496:	fb08 f80e 	mul.w	r8, r8, lr
 801a49a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a49e:	fb01 8303 	mla	r3, r1, r3, r8
 801a4a2:	9908      	ldr	r1, [sp, #32]
 801a4a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4a8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801a4ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a4ae:	fb00 330a 	mla	r3, r0, sl, r3
 801a4b2:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801a4b6:	fb09 3e0e 	mla	lr, r9, lr, r3
 801a4ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a4be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a4c2:	ea4c 0c0e 	orr.w	ip, ip, lr
 801a4c6:	fa5f f08c 	uxtb.w	r0, ip
 801a4ca:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801a4ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a4d2:	d032      	beq.n	801a53a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801a4d4:	43d2      	mvns	r2, r2
 801a4d6:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801a4da:	b2d2      	uxtb	r2, r2
 801a4dc:	fb0e fe02 	mul.w	lr, lr, r2
 801a4e0:	f10e 0301 	add.w	r3, lr, #1
 801a4e4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801a4e8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a4ec:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801a4f0:	4350      	muls	r0, r2
 801a4f2:	f807 3c03 	strb.w	r3, [r7, #-3]
 801a4f6:	1c43      	adds	r3, r0, #1
 801a4f8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a4fc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a500:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801a504:	4353      	muls	r3, r2
 801a506:	f807 1c02 	strb.w	r1, [r7, #-2]
 801a50a:	1c5a      	adds	r2, r3, #1
 801a50c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a510:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801a514:	f807 cc01 	strb.w	ip, [r7, #-1]
 801a518:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a51a:	3703      	adds	r7, #3
 801a51c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a520:	441d      	add	r5, r3
 801a522:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a524:	441e      	add	r6, r3
 801a526:	e64e      	b.n	801a1c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801a528:	2800      	cmp	r0, #0
 801a52a:	f43f aeed 	beq.w	801a308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801a52e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a532:	9108      	str	r1, [sp, #32]
 801a534:	0e09      	lsrs	r1, r1, #24
 801a536:	9110      	str	r1, [sp, #64]	; 0x40
 801a538:	e6e6      	b.n	801a308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801a53a:	f807 0c03 	strb.w	r0, [r7, #-3]
 801a53e:	f807 1c02 	strb.w	r1, [r7, #-2]
 801a542:	e7e7      	b.n	801a514 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801a544:	b019      	add	sp, #100	; 0x64
 801a546:	ecbd 8b08 	vpop	{d8-d11}
 801a54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a550 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801a550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a554:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801a558:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801a55c:	2800      	cmp	r0, #0
 801a55e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801a562:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801a566:	fb0c 0e03 	mla	lr, ip, r3, r0
 801a56a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801a56e:	db6b      	blt.n	801a648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a570:	4580      	cmp	r8, r0
 801a572:	dd69      	ble.n	801a648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a574:	f1bc 0f00 	cmp.w	ip, #0
 801a578:	db66      	blt.n	801a648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a57a:	45e1      	cmp	r9, ip
 801a57c:	dd64      	ble.n	801a648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a57e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801a582:	f01e 0f01 	tst.w	lr, #1
 801a586:	5d16      	ldrb	r6, [r2, r4]
 801a588:	bf0c      	ite	eq
 801a58a:	f006 060f 	andeq.w	r6, r6, #15
 801a58e:	1136      	asrne	r6, r6, #4
 801a590:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801a594:	b2f6      	uxtb	r6, r6
 801a596:	f110 0a01 	adds.w	sl, r0, #1
 801a59a:	d457      	bmi.n	801a64c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801a59c:	45d0      	cmp	r8, sl
 801a59e:	dd55      	ble.n	801a64c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801a5a0:	f1bc 0f00 	cmp.w	ip, #0
 801a5a4:	db52      	blt.n	801a64c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801a5a6:	45e1      	cmp	r9, ip
 801a5a8:	dd50      	ble.n	801a64c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801a5aa:	2f00      	cmp	r7, #0
 801a5ac:	f000 80ac 	beq.w	801a708 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801a5b0:	f10e 0b01 	add.w	fp, lr, #1
 801a5b4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801a5b8:	f01b 0f01 	tst.w	fp, #1
 801a5bc:	5d14      	ldrb	r4, [r2, r4]
 801a5be:	bf0c      	ite	eq
 801a5c0:	f004 040f 	andeq.w	r4, r4, #15
 801a5c4:	1124      	asrne	r4, r4, #4
 801a5c6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801a5ca:	b2e4      	uxtb	r4, r4
 801a5cc:	2d00      	cmp	r5, #0
 801a5ce:	f000 8096 	beq.w	801a6fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801a5d2:	2800      	cmp	r0, #0
 801a5d4:	f10c 0c01 	add.w	ip, ip, #1
 801a5d8:	db3c      	blt.n	801a654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801a5da:	4580      	cmp	r8, r0
 801a5dc:	dd3a      	ble.n	801a654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801a5de:	f1bc 0f00 	cmp.w	ip, #0
 801a5e2:	db37      	blt.n	801a654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801a5e4:	45e1      	cmp	r9, ip
 801a5e6:	dd35      	ble.n	801a654 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801a5e8:	eb03 0b0e 	add.w	fp, r3, lr
 801a5ec:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801a5f0:	f01b 0f01 	tst.w	fp, #1
 801a5f4:	5c10      	ldrb	r0, [r2, r0]
 801a5f6:	bf0c      	ite	eq
 801a5f8:	f000 000f 	andeq.w	r0, r0, #15
 801a5fc:	1100      	asrne	r0, r0, #4
 801a5fe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a602:	b2c0      	uxtb	r0, r0
 801a604:	f1ba 0f00 	cmp.w	sl, #0
 801a608:	db26      	blt.n	801a658 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801a60a:	45d0      	cmp	r8, sl
 801a60c:	dd24      	ble.n	801a658 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801a60e:	f1bc 0f00 	cmp.w	ip, #0
 801a612:	db21      	blt.n	801a658 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801a614:	45e1      	cmp	r9, ip
 801a616:	dd1f      	ble.n	801a658 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801a618:	b307      	cbz	r7, 801a65c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801a61a:	3301      	adds	r3, #1
 801a61c:	449e      	add	lr, r3
 801a61e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801a622:	f01e 0f01 	tst.w	lr, #1
 801a626:	5cd3      	ldrb	r3, [r2, r3]
 801a628:	bf0c      	ite	eq
 801a62a:	f003 030f 	andeq.w	r3, r3, #15
 801a62e:	111b      	asrne	r3, r3, #4
 801a630:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a634:	b2db      	uxtb	r3, r3
 801a636:	2f0f      	cmp	r7, #15
 801a638:	d911      	bls.n	801a65e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801a63a:	4b35      	ldr	r3, [pc, #212]	; (801a710 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801a63c:	f240 115b 	movw	r1, #347	; 0x15b
 801a640:	4a34      	ldr	r2, [pc, #208]	; (801a714 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801a642:	4835      	ldr	r0, [pc, #212]	; (801a718 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801a644:	f002 fb8a 	bl	801cd5c <__assert_func>
 801a648:	2600      	movs	r6, #0
 801a64a:	e7a4      	b.n	801a596 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801a64c:	2400      	movs	r4, #0
 801a64e:	e7bd      	b.n	801a5cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801a650:	463c      	mov	r4, r7
 801a652:	e7be      	b.n	801a5d2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801a654:	2000      	movs	r0, #0
 801a656:	e7d5      	b.n	801a604 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801a658:	2300      	movs	r3, #0
 801a65a:	e7ec      	b.n	801a636 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801a65c:	463b      	mov	r3, r7
 801a65e:	2d0f      	cmp	r5, #15
 801a660:	d8eb      	bhi.n	801a63a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801a662:	b2bf      	uxth	r7, r7
 801a664:	b2ad      	uxth	r5, r5
 801a666:	fb07 f205 	mul.w	r2, r7, r5
 801a66a:	013f      	lsls	r7, r7, #4
 801a66c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801a670:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801a674:	1abf      	subs	r7, r7, r2
 801a676:	b2ad      	uxth	r5, r5
 801a678:	b2bf      	uxth	r7, r7
 801a67a:	ebac 0c05 	sub.w	ip, ip, r5
 801a67e:	437c      	muls	r4, r7
 801a680:	fa1f fc8c 	uxth.w	ip, ip
 801a684:	fb06 440c 	mla	r4, r6, ip, r4
 801a688:	fb05 4400 	mla	r4, r5, r0, r4
 801a68c:	fb02 4203 	mla	r2, r2, r3, r4
 801a690:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a694:	b38a      	cbz	r2, 801a6fa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801a696:	4b21      	ldr	r3, [pc, #132]	; (801a71c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801a698:	681c      	ldr	r4, [r3, #0]
 801a69a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a69e:	b2e5      	uxtb	r5, r4
 801a6a0:	4353      	muls	r3, r2
 801a6a2:	1c5a      	adds	r2, r3, #1
 801a6a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a6a8:	1212      	asrs	r2, r2, #8
 801a6aa:	b290      	uxth	r0, r2
 801a6ac:	43d2      	mvns	r2, r2
 801a6ae:	fb15 f500 	smulbb	r5, r5, r0
 801a6b2:	b2d3      	uxtb	r3, r2
 801a6b4:	780a      	ldrb	r2, [r1, #0]
 801a6b6:	fb02 5203 	mla	r2, r2, r3, r5
 801a6ba:	b292      	uxth	r2, r2
 801a6bc:	1c55      	adds	r5, r2, #1
 801a6be:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801a6c2:	784d      	ldrb	r5, [r1, #1]
 801a6c4:	fb15 f503 	smulbb	r5, r5, r3
 801a6c8:	1212      	asrs	r2, r2, #8
 801a6ca:	700a      	strb	r2, [r1, #0]
 801a6cc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801a6d0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801a6d4:	fb02 5200 	mla	r2, r2, r0, r5
 801a6d8:	b292      	uxth	r2, r2
 801a6da:	1c55      	adds	r5, r2, #1
 801a6dc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801a6e0:	1212      	asrs	r2, r2, #8
 801a6e2:	704a      	strb	r2, [r1, #1]
 801a6e4:	788a      	ldrb	r2, [r1, #2]
 801a6e6:	fb12 f303 	smulbb	r3, r2, r3
 801a6ea:	fb04 3300 	mla	r3, r4, r0, r3
 801a6ee:	b29b      	uxth	r3, r3
 801a6f0:	1c5a      	adds	r2, r3, #1
 801a6f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a6f6:	121b      	asrs	r3, r3, #8
 801a6f8:	708b      	strb	r3, [r1, #2]
 801a6fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6fe:	2f0f      	cmp	r7, #15
 801a700:	d89b      	bhi.n	801a63a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801a702:	462b      	mov	r3, r5
 801a704:	4628      	mov	r0, r5
 801a706:	e7ac      	b.n	801a662 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801a708:	2d00      	cmp	r5, #0
 801a70a:	d1a1      	bne.n	801a650 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801a70c:	462c      	mov	r4, r5
 801a70e:	e7f8      	b.n	801a702 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801a710:	0802145d 	.word	0x0802145d
 801a714:	08021872 	.word	0x08021872
 801a718:	0802142a 	.word	0x0802142a
 801a71c:	240c3d6c 	.word	0x240c3d6c

0801a720 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a724:	ed2d 8b08 	vpush	{d8-d11}
 801a728:	b097      	sub	sp, #92	; 0x5c
 801a72a:	eeb0 aa40 	vmov.f32	s20, s0
 801a72e:	eef0 9a60 	vmov.f32	s19, s1
 801a732:	9214      	str	r2, [sp, #80]	; 0x50
 801a734:	eeb0 9a41 	vmov.f32	s18, s2
 801a738:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a73a:	eeb0 8a62 	vmov.f32	s16, s5
 801a73e:	9309      	str	r3, [sp, #36]	; 0x24
 801a740:	eef0 8a43 	vmov.f32	s17, s6
 801a744:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801a748:	eef0 ba44 	vmov.f32	s23, s8
 801a74c:	9015      	str	r0, [sp, #84]	; 0x54
 801a74e:	eeb0 ba64 	vmov.f32	s22, s9
 801a752:	6850      	ldr	r0, [r2, #4]
 801a754:	eef0 aa45 	vmov.f32	s21, s10
 801a758:	910c      	str	r1, [sp, #48]	; 0x30
 801a75a:	930e      	str	r3, [sp, #56]	; 0x38
 801a75c:	6812      	ldr	r2, [r2, #0]
 801a75e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a762:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801a766:	fb00 1303 	mla	r3, r0, r3, r1
 801a76a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a76e:	eb02 0a03 	add.w	sl, r2, r3
 801a772:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a774:	689b      	ldr	r3, [r3, #8]
 801a776:	3301      	adds	r3, #1
 801a778:	f023 0301 	bic.w	r3, r3, #1
 801a77c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a77e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a780:	681f      	ldr	r7, [r3, #0]
 801a782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a784:	2b00      	cmp	r3, #0
 801a786:	dc03      	bgt.n	801a790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a788:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	f340 8247 	ble.w	801ac1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801a790:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a792:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a796:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a79a:	1e48      	subs	r0, r1, #1
 801a79c:	f102 3cff 	add.w	ip, r2, #4294967295
 801a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	f340 80e5 	ble.w	801a972 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a7a8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801a7ac:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a7b0:	d406      	bmi.n	801a7c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a7b2:	4586      	cmp	lr, r0
 801a7b4:	da04      	bge.n	801a7c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	db02      	blt.n	801a7c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a7ba:	4563      	cmp	r3, ip
 801a7bc:	f2c0 80da 	blt.w	801a974 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a7c0:	f11e 0e01 	adds.w	lr, lr, #1
 801a7c4:	f100 80cb 	bmi.w	801a95e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a7c8:	4571      	cmp	r1, lr
 801a7ca:	f2c0 80c8 	blt.w	801a95e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a7ce:	3301      	adds	r3, #1
 801a7d0:	f100 80c5 	bmi.w	801a95e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	f2c0 80c2 	blt.w	801a95e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7dc:	46d0      	mov	r8, sl
 801a7de:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801a7e2:	930d      	str	r3, [sp, #52]	; 0x34
 801a7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	f340 80e3 	ble.w	801a9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a7ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a7ee:	1430      	asrs	r0, r6, #16
 801a7f0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801a7f4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a7f8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801a7fc:	142b      	asrs	r3, r5, #16
 801a7fe:	f100 812e 	bmi.w	801aa5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a802:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a806:	455b      	cmp	r3, fp
 801a808:	f280 8129 	bge.w	801aa5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a80c:	2800      	cmp	r0, #0
 801a80e:	f2c0 8126 	blt.w	801aa5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a812:	f10e 3bff 	add.w	fp, lr, #4294967295
 801a816:	4558      	cmp	r0, fp
 801a818:	f280 8121 	bge.w	801aa5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a81c:	fb00 3309 	mla	r3, r0, r9, r3
 801a820:	0858      	lsrs	r0, r3, #1
 801a822:	07dc      	lsls	r4, r3, #31
 801a824:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a828:	bf54      	ite	pl
 801a82a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a82e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a832:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a836:	fa5f fc8c 	uxtb.w	ip, ip
 801a83a:	2a00      	cmp	r2, #0
 801a83c:	f000 80fe 	beq.w	801aa3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a840:	1c58      	adds	r0, r3, #1
 801a842:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801a846:	07c0      	lsls	r0, r0, #31
 801a848:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a84c:	bf54      	ite	pl
 801a84e:	f00e 0e0f 	andpl.w	lr, lr, #15
 801a852:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801a856:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801a85a:	fa5f f08e 	uxtb.w	r0, lr
 801a85e:	9010      	str	r0, [sp, #64]	; 0x40
 801a860:	b1d9      	cbz	r1, 801a89a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801a862:	444b      	add	r3, r9
 801a864:	0858      	lsrs	r0, r3, #1
 801a866:	07dc      	lsls	r4, r3, #31
 801a868:	f103 0301 	add.w	r3, r3, #1
 801a86c:	5c38      	ldrb	r0, [r7, r0]
 801a86e:	bf54      	ite	pl
 801a870:	f000 000f 	andpl.w	r0, r0, #15
 801a874:	1100      	asrmi	r0, r0, #4
 801a876:	07dc      	lsls	r4, r3, #31
 801a878:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a87c:	b2c0      	uxtb	r0, r0
 801a87e:	900a      	str	r0, [sp, #40]	; 0x28
 801a880:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801a884:	f817 e000 	ldrb.w	lr, [r7, r0]
 801a888:	bf54      	ite	pl
 801a88a:	f00e 030f 	andpl.w	r3, lr, #15
 801a88e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801a892:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a896:	b2db      	uxtb	r3, r3
 801a898:	9311      	str	r3, [sp, #68]	; 0x44
 801a89a:	b292      	uxth	r2, r2
 801a89c:	b289      	uxth	r1, r1
 801a89e:	0113      	lsls	r3, r2, #4
 801a8a0:	fb02 f001 	mul.w	r0, r2, r1
 801a8a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a8a6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801a8aa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801a8ae:	1a1b      	subs	r3, r3, r0
 801a8b0:	b289      	uxth	r1, r1
 801a8b2:	b29b      	uxth	r3, r3
 801a8b4:	ebae 0e01 	sub.w	lr, lr, r1
 801a8b8:	4353      	muls	r3, r2
 801a8ba:	fa1f fe8e 	uxth.w	lr, lr
 801a8be:	fb0c 320e 	mla	r2, ip, lr, r3
 801a8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8c4:	fb01 2203 	mla	r2, r1, r3, r2
 801a8c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a8ca:	fb00 2203 	mla	r2, r0, r3, r2
 801a8ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a8d2:	2a00      	cmp	r2, #0
 801a8d4:	d039      	beq.n	801a94a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a8d6:	4bc7      	ldr	r3, [pc, #796]	; (801abf4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801a8d8:	6819      	ldr	r1, [r3, #0]
 801a8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8dc:	fa5f fc81 	uxtb.w	ip, r1
 801a8e0:	435a      	muls	r2, r3
 801a8e2:	1c53      	adds	r3, r2, #1
 801a8e4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a8e8:	1212      	asrs	r2, r2, #8
 801a8ea:	b290      	uxth	r0, r2
 801a8ec:	43d2      	mvns	r2, r2
 801a8ee:	fb1c fc00 	smulbb	ip, ip, r0
 801a8f2:	b2d3      	uxtb	r3, r2
 801a8f4:	f898 2000 	ldrb.w	r2, [r8]
 801a8f8:	fb02 c203 	mla	r2, r2, r3, ip
 801a8fc:	b292      	uxth	r2, r2
 801a8fe:	f102 0c01 	add.w	ip, r2, #1
 801a902:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a906:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a90a:	fb1c fc03 	smulbb	ip, ip, r3
 801a90e:	1212      	asrs	r2, r2, #8
 801a910:	f888 2000 	strb.w	r2, [r8]
 801a914:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801a918:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801a91c:	fb02 c200 	mla	r2, r2, r0, ip
 801a920:	b292      	uxth	r2, r2
 801a922:	f102 0c01 	add.w	ip, r2, #1
 801a926:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a92a:	1212      	asrs	r2, r2, #8
 801a92c:	f888 2001 	strb.w	r2, [r8, #1]
 801a930:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a934:	fb12 f303 	smulbb	r3, r2, r3
 801a938:	fb01 3300 	mla	r3, r1, r0, r3
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	1c5a      	adds	r2, r3, #1
 801a940:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a944:	121b      	asrs	r3, r3, #8
 801a946:	f888 3002 	strb.w	r3, [r8, #2]
 801a94a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a94c:	f108 0803 	add.w	r8, r8, #3
 801a950:	441d      	add	r5, r3
 801a952:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a954:	441e      	add	r6, r3
 801a956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a958:	3b01      	subs	r3, #1
 801a95a:	930d      	str	r3, [sp, #52]	; 0x34
 801a95c:	e742      	b.n	801a7e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801a95e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a960:	f10a 0a03 	add.w	sl, sl, #3
 801a964:	441d      	add	r5, r3
 801a966:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a968:	441e      	add	r6, r3
 801a96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a96c:	3b01      	subs	r3, #1
 801a96e:	9309      	str	r3, [sp, #36]	; 0x24
 801a970:	e716      	b.n	801a7a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a972:	d024      	beq.n	801a9be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a976:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a978:	3b01      	subs	r3, #1
 801a97a:	fb00 5003 	mla	r0, r0, r3, r5
 801a97e:	1400      	asrs	r0, r0, #16
 801a980:	f53f af2b 	bmi.w	801a7da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a984:	3901      	subs	r1, #1
 801a986:	4288      	cmp	r0, r1
 801a988:	f6bf af27 	bge.w	801a7da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a98c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a98e:	fb01 6303 	mla	r3, r1, r3, r6
 801a992:	141b      	asrs	r3, r3, #16
 801a994:	f53f af21 	bmi.w	801a7da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a998:	3a01      	subs	r2, #1
 801a99a:	4293      	cmp	r3, r2
 801a99c:	f6bf af1d 	bge.w	801a7da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a9a0:	f10a 0e03 	add.w	lr, sl, #3
 801a9a4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a9a8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801a9ac:	f1b8 0f00 	cmp.w	r8, #0
 801a9b0:	dc76      	bgt.n	801aaa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801a9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a9b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a9bc:	44a2      	add	sl, r4
 801a9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	f340 812c 	ble.w	801ac1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801a9c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a9ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a9cc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a9d0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a9d4:	eef0 6a48 	vmov.f32	s13, s16
 801a9d8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a9dc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a9e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9e4:	ee16 5a90 	vmov	r5, s13
 801a9e8:	eef0 6a68 	vmov.f32	s13, s17
 801a9ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9f0:	ee16 6a90 	vmov	r6, s13
 801a9f4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a9f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a9fc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801aa00:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801aa04:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801aa08:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801aa0c:	ee18 2a10 	vmov	r2, s16
 801aa10:	eeb0 8a47 	vmov.f32	s16, s14
 801aa14:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa18:	ee18 2a90 	vmov	r2, s17
 801aa1c:	932b      	str	r3, [sp, #172]	; 0xac
 801aa1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aa20:	eef0 8a67 	vmov.f32	s17, s15
 801aa24:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa28:	932c      	str	r3, [sp, #176]	; 0xb0
 801aa2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa2e:	3b01      	subs	r3, #1
 801aa30:	930c      	str	r3, [sp, #48]	; 0x30
 801aa32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aa34:	bf08      	it	eq
 801aa36:	4613      	moveq	r3, r2
 801aa38:	9309      	str	r3, [sp, #36]	; 0x24
 801aa3a:	e6a2      	b.n	801a782 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801aa3c:	2900      	cmp	r1, #0
 801aa3e:	f43f af2c 	beq.w	801a89a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801aa42:	eb09 0003 	add.w	r0, r9, r3
 801aa46:	0843      	lsrs	r3, r0, #1
 801aa48:	07c0      	lsls	r0, r0, #31
 801aa4a:	5cfb      	ldrb	r3, [r7, r3]
 801aa4c:	bf54      	ite	pl
 801aa4e:	f003 030f 	andpl.w	r3, r3, #15
 801aa52:	111b      	asrmi	r3, r3, #4
 801aa54:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801aa58:	b2db      	uxtb	r3, r3
 801aa5a:	930a      	str	r3, [sp, #40]	; 0x28
 801aa5c:	e71d      	b.n	801a89a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801aa5e:	f113 0b01 	adds.w	fp, r3, #1
 801aa62:	f53f af72 	bmi.w	801a94a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aa66:	45dc      	cmp	ip, fp
 801aa68:	f6ff af6f 	blt.w	801a94a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aa6c:	f110 0b01 	adds.w	fp, r0, #1
 801aa70:	f53f af6b 	bmi.w	801a94a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aa74:	45de      	cmp	lr, fp
 801aa76:	f6ff af68 	blt.w	801a94a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aa7a:	9302      	str	r3, [sp, #8]
 801aa7c:	fa0f f38e 	sxth.w	r3, lr
 801aa80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aa82:	9301      	str	r3, [sp, #4]
 801aa84:	fa0f f38c 	sxth.w	r3, ip
 801aa88:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801aa8c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801aa90:	9300      	str	r3, [sp, #0]
 801aa92:	463a      	mov	r2, r7
 801aa94:	464b      	mov	r3, r9
 801aa96:	4641      	mov	r1, r8
 801aa98:	9815      	ldr	r0, [sp, #84]	; 0x54
 801aa9a:	f7ff fd59 	bl	801a550 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801aa9e:	e754      	b.n	801a94a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aaa0:	142a      	asrs	r2, r5, #16
 801aaa2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801aaa6:	1433      	asrs	r3, r6, #16
 801aaa8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801aaac:	fb09 2303 	mla	r3, r9, r3, r2
 801aab0:	085a      	lsrs	r2, r3, #1
 801aab2:	07dc      	lsls	r4, r3, #31
 801aab4:	5cba      	ldrb	r2, [r7, r2]
 801aab6:	bf54      	ite	pl
 801aab8:	f002 020f 	andpl.w	r2, r2, #15
 801aabc:	1112      	asrmi	r2, r2, #4
 801aabe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801aac2:	b2d2      	uxtb	r2, r2
 801aac4:	2900      	cmp	r1, #0
 801aac6:	f000 8097 	beq.w	801abf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801aaca:	f103 0b01 	add.w	fp, r3, #1
 801aace:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801aad2:	f01b 0f01 	tst.w	fp, #1
 801aad6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801aada:	bf0c      	ite	eq
 801aadc:	f00c 0c0f 	andeq.w	ip, ip, #15
 801aae0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801aae4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801aae8:	fa5f f48c 	uxtb.w	r4, ip
 801aaec:	9412      	str	r4, [sp, #72]	; 0x48
 801aaee:	b300      	cbz	r0, 801ab32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801aaf0:	444b      	add	r3, r9
 801aaf2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801aaf6:	07dc      	lsls	r4, r3, #31
 801aaf8:	f103 0301 	add.w	r3, r3, #1
 801aafc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ab00:	bf54      	ite	pl
 801ab02:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ab06:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ab0a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ab0e:	fa5f f48c 	uxtb.w	r4, ip
 801ab12:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ab16:	940b      	str	r4, [sp, #44]	; 0x2c
 801ab18:	07dc      	lsls	r4, r3, #31
 801ab1a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ab1e:	bf54      	ite	pl
 801ab20:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ab24:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ab28:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ab2c:	fa5f f38c 	uxtb.w	r3, ip
 801ab30:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab32:	b289      	uxth	r1, r1
 801ab34:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab36:	b280      	uxth	r0, r0
 801ab38:	fb01 f300 	mul.w	r3, r1, r0
 801ab3c:	0109      	lsls	r1, r1, #4
 801ab3e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801ab42:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801ab46:	1ac9      	subs	r1, r1, r3
 801ab48:	b280      	uxth	r0, r0
 801ab4a:	b289      	uxth	r1, r1
 801ab4c:	ebac 0c00 	sub.w	ip, ip, r0
 801ab50:	4361      	muls	r1, r4
 801ab52:	fa1f fc8c 	uxth.w	ip, ip
 801ab56:	fb02 120c 	mla	r2, r2, ip, r1
 801ab5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ab5c:	fb00 2001 	mla	r0, r0, r1, r2
 801ab60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ab62:	fb03 0302 	mla	r3, r3, r2, r0
 801ab66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d039      	beq.n	801abe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ab6e:	4a21      	ldr	r2, [pc, #132]	; (801abf4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801ab70:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801ab74:	6810      	ldr	r0, [r2, #0]
 801ab76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab78:	fa5f fc80 	uxtb.w	ip, r0
 801ab7c:	4353      	muls	r3, r2
 801ab7e:	1c5a      	adds	r2, r3, #1
 801ab80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ab84:	121b      	asrs	r3, r3, #8
 801ab86:	b29a      	uxth	r2, r3
 801ab88:	43db      	mvns	r3, r3
 801ab8a:	fb1c fc02 	smulbb	ip, ip, r2
 801ab8e:	b2db      	uxtb	r3, r3
 801ab90:	fb01 c103 	mla	r1, r1, r3, ip
 801ab94:	b289      	uxth	r1, r1
 801ab96:	f101 0c01 	add.w	ip, r1, #1
 801ab9a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801ab9e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801aba2:	fb1c fc03 	smulbb	ip, ip, r3
 801aba6:	1209      	asrs	r1, r1, #8
 801aba8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801abac:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801abb0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801abb4:	fb01 c102 	mla	r1, r1, r2, ip
 801abb8:	b289      	uxth	r1, r1
 801abba:	f101 0c01 	add.w	ip, r1, #1
 801abbe:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801abc2:	1209      	asrs	r1, r1, #8
 801abc4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801abc8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801abcc:	fb11 f303 	smulbb	r3, r1, r3
 801abd0:	fb00 3002 	mla	r0, r0, r2, r3
 801abd4:	b280      	uxth	r0, r0
 801abd6:	1c42      	adds	r2, r0, #1
 801abd8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801abdc:	1200      	asrs	r0, r0, #8
 801abde:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801abe2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801abe4:	f10e 0e03 	add.w	lr, lr, #3
 801abe8:	f108 38ff 	add.w	r8, r8, #4294967295
 801abec:	441d      	add	r5, r3
 801abee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801abf0:	441e      	add	r6, r3
 801abf2:	e6db      	b.n	801a9ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801abf4:	240c3d6c 	.word	0x240c3d6c
 801abf8:	2800      	cmp	r0, #0
 801abfa:	d09a      	beq.n	801ab32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801abfc:	444b      	add	r3, r9
 801abfe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ac02:	07db      	lsls	r3, r3, #31
 801ac04:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ac08:	bf54      	ite	pl
 801ac0a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ac0e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ac12:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ac16:	fa5f f38c 	uxtb.w	r3, ip
 801ac1a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ac1c:	e789      	b.n	801ab32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ac1e:	b017      	add	sp, #92	; 0x5c
 801ac20:	ecbd 8b08 	vpop	{d8-d11}
 801ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801ac28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac2c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801ac30:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801ac34:	2800      	cmp	r0, #0
 801ac36:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801ac3a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801ac3e:	fb0c 0e03 	mla	lr, ip, r3, r0
 801ac42:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801ac46:	db6b      	blt.n	801ad20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ac48:	4580      	cmp	r8, r0
 801ac4a:	dd69      	ble.n	801ad20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ac4c:	f1bc 0f00 	cmp.w	ip, #0
 801ac50:	db66      	blt.n	801ad20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ac52:	45e1      	cmp	r9, ip
 801ac54:	dd64      	ble.n	801ad20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ac56:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801ac5a:	f01e 0f01 	tst.w	lr, #1
 801ac5e:	5d16      	ldrb	r6, [r2, r4]
 801ac60:	bf0c      	ite	eq
 801ac62:	f006 060f 	andeq.w	r6, r6, #15
 801ac66:	1136      	asrne	r6, r6, #4
 801ac68:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ac6c:	b2f6      	uxtb	r6, r6
 801ac6e:	f110 0a01 	adds.w	sl, r0, #1
 801ac72:	d457      	bmi.n	801ad24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ac74:	45d0      	cmp	r8, sl
 801ac76:	dd55      	ble.n	801ad24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ac78:	f1bc 0f00 	cmp.w	ip, #0
 801ac7c:	db52      	blt.n	801ad24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ac7e:	45e1      	cmp	r9, ip
 801ac80:	dd50      	ble.n	801ad24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ac82:	2f00      	cmp	r7, #0
 801ac84:	f000 80a5 	beq.w	801add2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801ac88:	f10e 0b01 	add.w	fp, lr, #1
 801ac8c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801ac90:	f01b 0f01 	tst.w	fp, #1
 801ac94:	5d14      	ldrb	r4, [r2, r4]
 801ac96:	bf0c      	ite	eq
 801ac98:	f004 040f 	andeq.w	r4, r4, #15
 801ac9c:	1124      	asrne	r4, r4, #4
 801ac9e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801aca2:	b2e4      	uxtb	r4, r4
 801aca4:	2d00      	cmp	r5, #0
 801aca6:	f000 808f 	beq.w	801adc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801acaa:	2800      	cmp	r0, #0
 801acac:	f10c 0c01 	add.w	ip, ip, #1
 801acb0:	db3c      	blt.n	801ad2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801acb2:	4580      	cmp	r8, r0
 801acb4:	dd3a      	ble.n	801ad2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801acb6:	f1bc 0f00 	cmp.w	ip, #0
 801acba:	db37      	blt.n	801ad2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801acbc:	45e1      	cmp	r9, ip
 801acbe:	dd35      	ble.n	801ad2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801acc0:	eb03 0b0e 	add.w	fp, r3, lr
 801acc4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801acc8:	f01b 0f01 	tst.w	fp, #1
 801accc:	5c10      	ldrb	r0, [r2, r0]
 801acce:	bf0c      	ite	eq
 801acd0:	f000 000f 	andeq.w	r0, r0, #15
 801acd4:	1100      	asrne	r0, r0, #4
 801acd6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801acda:	b2c0      	uxtb	r0, r0
 801acdc:	f1ba 0f00 	cmp.w	sl, #0
 801ace0:	db26      	blt.n	801ad30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801ace2:	45d0      	cmp	r8, sl
 801ace4:	dd24      	ble.n	801ad30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801ace6:	f1bc 0f00 	cmp.w	ip, #0
 801acea:	db21      	blt.n	801ad30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801acec:	45e1      	cmp	r9, ip
 801acee:	dd1f      	ble.n	801ad30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801acf0:	b307      	cbz	r7, 801ad34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801acf2:	3301      	adds	r3, #1
 801acf4:	449e      	add	lr, r3
 801acf6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801acfa:	f01e 0f01 	tst.w	lr, #1
 801acfe:	5cd3      	ldrb	r3, [r2, r3]
 801ad00:	bf0c      	ite	eq
 801ad02:	f003 030f 	andeq.w	r3, r3, #15
 801ad06:	111b      	asrne	r3, r3, #4
 801ad08:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ad0c:	b2db      	uxtb	r3, r3
 801ad0e:	2f0f      	cmp	r7, #15
 801ad10:	d911      	bls.n	801ad36 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801ad12:	4b32      	ldr	r3, [pc, #200]	; (801addc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801ad14:	f240 115b 	movw	r1, #347	; 0x15b
 801ad18:	4a31      	ldr	r2, [pc, #196]	; (801ade0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801ad1a:	4832      	ldr	r0, [pc, #200]	; (801ade4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801ad1c:	f002 f81e 	bl	801cd5c <__assert_func>
 801ad20:	2600      	movs	r6, #0
 801ad22:	e7a4      	b.n	801ac6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801ad24:	2400      	movs	r4, #0
 801ad26:	e7bd      	b.n	801aca4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801ad28:	463c      	mov	r4, r7
 801ad2a:	e7be      	b.n	801acaa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801ad2c:	2000      	movs	r0, #0
 801ad2e:	e7d5      	b.n	801acdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801ad30:	2300      	movs	r3, #0
 801ad32:	e7ec      	b.n	801ad0e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801ad34:	463b      	mov	r3, r7
 801ad36:	2d0f      	cmp	r5, #15
 801ad38:	d8eb      	bhi.n	801ad12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801ad3a:	b2bf      	uxth	r7, r7
 801ad3c:	b2ad      	uxth	r5, r5
 801ad3e:	fb07 f205 	mul.w	r2, r7, r5
 801ad42:	013f      	lsls	r7, r7, #4
 801ad44:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801ad48:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801ad4c:	1abf      	subs	r7, r7, r2
 801ad4e:	b2ad      	uxth	r5, r5
 801ad50:	b2bf      	uxth	r7, r7
 801ad52:	ebac 0c05 	sub.w	ip, ip, r5
 801ad56:	437c      	muls	r4, r7
 801ad58:	fa1f fc8c 	uxth.w	ip, ip
 801ad5c:	fb06 440c 	mla	r4, r6, ip, r4
 801ad60:	fb05 4400 	mla	r4, r5, r0, r4
 801ad64:	fb02 4303 	mla	r3, r2, r3, r4
 801ad68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ad6c:	b353      	cbz	r3, 801adc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801ad6e:	4a1e      	ldr	r2, [pc, #120]	; (801ade8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801ad70:	7808      	ldrb	r0, [r1, #0]
 801ad72:	6814      	ldr	r4, [r2, #0]
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	43db      	mvns	r3, r3
 801ad78:	b2e5      	uxtb	r5, r4
 801ad7a:	b2db      	uxtb	r3, r3
 801ad7c:	fb15 f502 	smulbb	r5, r5, r2
 801ad80:	fb00 5003 	mla	r0, r0, r3, r5
 801ad84:	b280      	uxth	r0, r0
 801ad86:	1c45      	adds	r5, r0, #1
 801ad88:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ad8c:	784d      	ldrb	r5, [r1, #1]
 801ad8e:	fb15 f503 	smulbb	r5, r5, r3
 801ad92:	1200      	asrs	r0, r0, #8
 801ad94:	7008      	strb	r0, [r1, #0]
 801ad96:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801ad9a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ad9e:	fb00 5002 	mla	r0, r0, r2, r5
 801ada2:	b280      	uxth	r0, r0
 801ada4:	1c45      	adds	r5, r0, #1
 801ada6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801adaa:	1200      	asrs	r0, r0, #8
 801adac:	7048      	strb	r0, [r1, #1]
 801adae:	7888      	ldrb	r0, [r1, #2]
 801adb0:	fb10 f303 	smulbb	r3, r0, r3
 801adb4:	fb04 3202 	mla	r2, r4, r2, r3
 801adb8:	b292      	uxth	r2, r2
 801adba:	1c53      	adds	r3, r2, #1
 801adbc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801adc0:	1212      	asrs	r2, r2, #8
 801adc2:	708a      	strb	r2, [r1, #2]
 801adc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adc8:	2f0f      	cmp	r7, #15
 801adca:	d8a2      	bhi.n	801ad12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801adcc:	462b      	mov	r3, r5
 801adce:	4628      	mov	r0, r5
 801add0:	e7b3      	b.n	801ad3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801add2:	2d00      	cmp	r5, #0
 801add4:	d1a8      	bne.n	801ad28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801add6:	462c      	mov	r4, r5
 801add8:	e7f8      	b.n	801adcc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801adda:	bf00      	nop
 801addc:	0802145d 	.word	0x0802145d
 801ade0:	08021872 	.word	0x08021872
 801ade4:	0802142a 	.word	0x0802142a
 801ade8:	240c3d6c 	.word	0x240c3d6c

0801adec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adf0:	ed2d 8b08 	vpush	{d8-d11}
 801adf4:	b093      	sub	sp, #76	; 0x4c
 801adf6:	461c      	mov	r4, r3
 801adf8:	eeb0 aa40 	vmov.f32	s20, s0
 801adfc:	920c      	str	r2, [sp, #48]	; 0x30
 801adfe:	eef0 9a60 	vmov.f32	s19, s1
 801ae02:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ae04:	eeb0 9a41 	vmov.f32	s18, s2
 801ae08:	9011      	str	r0, [sp, #68]	; 0x44
 801ae0a:	eeb0 8a62 	vmov.f32	s16, s5
 801ae0e:	6850      	ldr	r0, [r2, #4]
 801ae10:	eef0 8a43 	vmov.f32	s17, s6
 801ae14:	9107      	str	r1, [sp, #28]
 801ae16:	eef0 ba44 	vmov.f32	s23, s8
 801ae1a:	6812      	ldr	r2, [r2, #0]
 801ae1c:	eeb0 ba64 	vmov.f32	s22, s9
 801ae20:	eef0 aa45 	vmov.f32	s21, s10
 801ae24:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801ae28:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801ae2c:	fb00 1303 	mla	r3, r0, r3, r1
 801ae30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae34:	eb02 0b03 	add.w	fp, r2, r3
 801ae38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ae3a:	689b      	ldr	r3, [r3, #8]
 801ae3c:	3301      	adds	r3, #1
 801ae3e:	f023 0301 	bic.w	r3, r3, #1
 801ae42:	9309      	str	r3, [sp, #36]	; 0x24
 801ae44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ae46:	f8d3 8000 	ldr.w	r8, [r3]
 801ae4a:	9b07      	ldr	r3, [sp, #28]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	dc03      	bgt.n	801ae58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ae50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	f340 822b 	ble.w	801b2ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ae58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ae5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ae5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ae62:	1e48      	subs	r0, r1, #1
 801ae64:	1e57      	subs	r7, r2, #1
 801ae66:	2c00      	cmp	r4, #0
 801ae68:	f340 80d7 	ble.w	801b01a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801ae6c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ae70:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ae74:	d406      	bmi.n	801ae84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ae76:	4584      	cmp	ip, r0
 801ae78:	da04      	bge.n	801ae84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	db02      	blt.n	801ae84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ae7e:	42bb      	cmp	r3, r7
 801ae80:	f2c0 80cc 	blt.w	801b01c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ae84:	f11c 0c01 	adds.w	ip, ip, #1
 801ae88:	f100 80bf 	bmi.w	801b00a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ae8c:	4561      	cmp	r1, ip
 801ae8e:	f2c0 80bc 	blt.w	801b00a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ae92:	3301      	adds	r3, #1
 801ae94:	f100 80b9 	bmi.w	801b00a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ae98:	429a      	cmp	r2, r3
 801ae9a:	f2c0 80b6 	blt.w	801b00a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ae9e:	46a2      	mov	sl, r4
 801aea0:	465f      	mov	r7, fp
 801aea2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801aea6:	f1ba 0f00 	cmp.w	sl, #0
 801aeaa:	f340 80d4 	ble.w	801b056 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aeae:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801aeb2:	1430      	asrs	r0, r6, #16
 801aeb4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801aeb8:	9308      	str	r3, [sp, #32]
 801aeba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aebc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801aec0:	142b      	asrs	r3, r5, #16
 801aec2:	f100 8124 	bmi.w	801b10e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801aec6:	f10c 32ff 	add.w	r2, ip, #4294967295
 801aeca:	4293      	cmp	r3, r2
 801aecc:	f280 811f 	bge.w	801b10e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801aed0:	2800      	cmp	r0, #0
 801aed2:	f2c0 811c 	blt.w	801b10e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801aed6:	f10e 32ff 	add.w	r2, lr, #4294967295
 801aeda:	4290      	cmp	r0, r2
 801aedc:	f280 8117 	bge.w	801b10e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801aee0:	fb00 3309 	mla	r3, r0, r9, r3
 801aee4:	0858      	lsrs	r0, r3, #1
 801aee6:	07da      	lsls	r2, r3, #31
 801aee8:	9a08      	ldr	r2, [sp, #32]
 801aeea:	f818 c000 	ldrb.w	ip, [r8, r0]
 801aeee:	bf54      	ite	pl
 801aef0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801aef4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801aef8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801aefc:	fa5f fc8c 	uxtb.w	ip, ip
 801af00:	2a00      	cmp	r2, #0
 801af02:	f000 80ed 	beq.w	801b0e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801af06:	1c58      	adds	r0, r3, #1
 801af08:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801af0c:	07c0      	lsls	r0, r0, #31
 801af0e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801af12:	bf54      	ite	pl
 801af14:	f00e 0e0f 	andpl.w	lr, lr, #15
 801af18:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801af1c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801af20:	fa5f fe8e 	uxtb.w	lr, lr
 801af24:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801af28:	b1c9      	cbz	r1, 801af5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801af2a:	444b      	add	r3, r9
 801af2c:	0858      	lsrs	r0, r3, #1
 801af2e:	07da      	lsls	r2, r3, #31
 801af30:	f818 0000 	ldrb.w	r0, [r8, r0]
 801af34:	bf54      	ite	pl
 801af36:	f000 000f 	andpl.w	r0, r0, #15
 801af3a:	1100      	asrmi	r0, r0, #4
 801af3c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801af40:	b2c0      	uxtb	r0, r0
 801af42:	900a      	str	r0, [sp, #40]	; 0x28
 801af44:	1c58      	adds	r0, r3, #1
 801af46:	0843      	lsrs	r3, r0, #1
 801af48:	07c2      	lsls	r2, r0, #31
 801af4a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801af4e:	bf54      	ite	pl
 801af50:	f003 030f 	andpl.w	r3, r3, #15
 801af54:	111b      	asrmi	r3, r3, #4
 801af56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801af5a:	b2db      	uxtb	r3, r3
 801af5c:	930e      	str	r3, [sp, #56]	; 0x38
 801af5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801af62:	b289      	uxth	r1, r1
 801af64:	fb02 f301 	mul.w	r3, r2, r1
 801af68:	0112      	lsls	r2, r2, #4
 801af6a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801af6e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801af72:	1ad2      	subs	r2, r2, r3
 801af74:	b289      	uxth	r1, r1
 801af76:	b292      	uxth	r2, r2
 801af78:	1a40      	subs	r0, r0, r1
 801af7a:	fa1f fe80 	uxth.w	lr, r0
 801af7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801af80:	4342      	muls	r2, r0
 801af82:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801af86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af88:	fb01 c102 	mla	r1, r1, r2, ip
 801af8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801af8e:	fb03 1302 	mla	r3, r3, r2, r1
 801af92:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801af96:	b383      	cbz	r3, 801affa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801af98:	4ac7      	ldr	r2, [pc, #796]	; (801b2b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801af9a:	2bff      	cmp	r3, #255	; 0xff
 801af9c:	6812      	ldr	r2, [r2, #0]
 801af9e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801afa2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801afa6:	b2d2      	uxtb	r2, r2
 801afa8:	f000 80ac 	beq.w	801b104 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801afac:	b299      	uxth	r1, r3
 801afae:	43db      	mvns	r3, r3
 801afb0:	f897 c000 	ldrb.w	ip, [r7]
 801afb4:	fb12 f201 	smulbb	r2, r2, r1
 801afb8:	b2db      	uxtb	r3, r3
 801afba:	fb10 f001 	smulbb	r0, r0, r1
 801afbe:	fb0c 2203 	mla	r2, ip, r3, r2
 801afc2:	fb1e f101 	smulbb	r1, lr, r1
 801afc6:	b292      	uxth	r2, r2
 801afc8:	f102 0c01 	add.w	ip, r2, #1
 801afcc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801afd0:	1212      	asrs	r2, r2, #8
 801afd2:	703a      	strb	r2, [r7, #0]
 801afd4:	787a      	ldrb	r2, [r7, #1]
 801afd6:	fb02 0003 	mla	r0, r2, r3, r0
 801afda:	b280      	uxth	r0, r0
 801afdc:	1c42      	adds	r2, r0, #1
 801afde:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801afe2:	78ba      	ldrb	r2, [r7, #2]
 801afe4:	fb02 1303 	mla	r3, r2, r3, r1
 801afe8:	1200      	asrs	r0, r0, #8
 801afea:	b29b      	uxth	r3, r3
 801afec:	7078      	strb	r0, [r7, #1]
 801afee:	f103 0e01 	add.w	lr, r3, #1
 801aff2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801aff6:	121b      	asrs	r3, r3, #8
 801aff8:	70bb      	strb	r3, [r7, #2]
 801affa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801affc:	3703      	adds	r7, #3
 801affe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b002:	441d      	add	r5, r3
 801b004:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b006:	441e      	add	r6, r3
 801b008:	e74d      	b.n	801aea6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b00a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b00c:	3c01      	subs	r4, #1
 801b00e:	f10b 0b03 	add.w	fp, fp, #3
 801b012:	441d      	add	r5, r3
 801b014:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b016:	441e      	add	r6, r3
 801b018:	e725      	b.n	801ae66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b01a:	d021      	beq.n	801b060 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801b01c:	1e63      	subs	r3, r4, #1
 801b01e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b020:	fb00 5003 	mla	r0, r0, r3, r5
 801b024:	1400      	asrs	r0, r0, #16
 801b026:	f53f af3a 	bmi.w	801ae9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b02a:	3901      	subs	r1, #1
 801b02c:	4288      	cmp	r0, r1
 801b02e:	f6bf af36 	bge.w	801ae9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b032:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b034:	fb01 6303 	mla	r3, r1, r3, r6
 801b038:	141b      	asrs	r3, r3, #16
 801b03a:	f53f af30 	bmi.w	801ae9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b03e:	3a01      	subs	r2, #1
 801b040:	4293      	cmp	r3, r2
 801b042:	f6bf af2c 	bge.w	801ae9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b046:	f10b 0c03 	add.w	ip, fp, #3
 801b04a:	46a6      	mov	lr, r4
 801b04c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b050:	f1be 0f00 	cmp.w	lr, #0
 801b054:	dc79      	bgt.n	801b14a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801b056:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801b05a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b05e:	44a3      	add	fp, r4
 801b060:	9b07      	ldr	r3, [sp, #28]
 801b062:	2b00      	cmp	r3, #0
 801b064:	f340 8123 	ble.w	801b2ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b06c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b06e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b072:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b076:	eef0 6a48 	vmov.f32	s13, s16
 801b07a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b07e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b082:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b086:	ee16 5a90 	vmov	r5, s13
 801b08a:	eef0 6a68 	vmov.f32	s13, s17
 801b08e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b092:	ee16 6a90 	vmov	r6, s13
 801b096:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b09a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b09e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b0a2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b0a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b0aa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b0ae:	ee18 2a10 	vmov	r2, s16
 801b0b2:	eeb0 8a47 	vmov.f32	s16, s14
 801b0b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0ba:	ee18 2a90 	vmov	r2, s17
 801b0be:	9327      	str	r3, [sp, #156]	; 0x9c
 801b0c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b0c2:	eef0 8a67 	vmov.f32	s17, s15
 801b0c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0ca:	9328      	str	r3, [sp, #160]	; 0xa0
 801b0cc:	9b07      	ldr	r3, [sp, #28]
 801b0ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b0d0:	3b01      	subs	r3, #1
 801b0d2:	9307      	str	r3, [sp, #28]
 801b0d4:	bf08      	it	eq
 801b0d6:	4614      	moveq	r4, r2
 801b0d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b0da:	bf18      	it	ne
 801b0dc:	461c      	movne	r4, r3
 801b0de:	e6b4      	b.n	801ae4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b0e0:	2900      	cmp	r1, #0
 801b0e2:	f43f af3c 	beq.w	801af5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801b0e6:	eb09 0003 	add.w	r0, r9, r3
 801b0ea:	0843      	lsrs	r3, r0, #1
 801b0ec:	07c0      	lsls	r0, r0, #31
 801b0ee:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b0f2:	bf54      	ite	pl
 801b0f4:	f003 030f 	andpl.w	r3, r3, #15
 801b0f8:	111b      	asrmi	r3, r3, #4
 801b0fa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b0fe:	b2db      	uxtb	r3, r3
 801b100:	930a      	str	r3, [sp, #40]	; 0x28
 801b102:	e72c      	b.n	801af5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801b104:	703a      	strb	r2, [r7, #0]
 801b106:	7078      	strb	r0, [r7, #1]
 801b108:	f887 e002 	strb.w	lr, [r7, #2]
 801b10c:	e775      	b.n	801affa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b10e:	1c5a      	adds	r2, r3, #1
 801b110:	f53f af73 	bmi.w	801affa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b114:	4594      	cmp	ip, r2
 801b116:	f6ff af70 	blt.w	801affa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b11a:	1c42      	adds	r2, r0, #1
 801b11c:	f53f af6d 	bmi.w	801affa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b120:	4596      	cmp	lr, r2
 801b122:	f6ff af6a 	blt.w	801affa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b126:	9302      	str	r3, [sp, #8]
 801b128:	fa0f f38e 	sxth.w	r3, lr
 801b12c:	9a08      	ldr	r2, [sp, #32]
 801b12e:	9301      	str	r3, [sp, #4]
 801b130:	fa0f f38c 	sxth.w	r3, ip
 801b134:	9105      	str	r1, [sp, #20]
 801b136:	4639      	mov	r1, r7
 801b138:	9300      	str	r3, [sp, #0]
 801b13a:	464b      	mov	r3, r9
 801b13c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b140:	4642      	mov	r2, r8
 801b142:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b144:	f7ff fd70 	bl	801ac28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801b148:	e757      	b.n	801affa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b14a:	142a      	asrs	r2, r5, #16
 801b14c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b150:	1433      	asrs	r3, r6, #16
 801b152:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801b156:	fb09 2303 	mla	r3, r9, r3, r2
 801b15a:	085a      	lsrs	r2, r3, #1
 801b15c:	07d9      	lsls	r1, r3, #31
 801b15e:	f818 2002 	ldrb.w	r2, [r8, r2]
 801b162:	bf54      	ite	pl
 801b164:	f002 020f 	andpl.w	r2, r2, #15
 801b168:	1112      	asrmi	r2, r2, #4
 801b16a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b16e:	b2d2      	uxtb	r2, r2
 801b170:	2800      	cmp	r0, #0
 801b172:	f000 8085 	beq.w	801b280 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801b176:	f103 0a01 	add.w	sl, r3, #1
 801b17a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801b17e:	f01a 0f01 	tst.w	sl, #1
 801b182:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b186:	bf0c      	ite	eq
 801b188:	f001 010f 	andeq.w	r1, r1, #15
 801b18c:	1109      	asrne	r1, r1, #4
 801b18e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b192:	b2c9      	uxtb	r1, r1
 801b194:	910f      	str	r1, [sp, #60]	; 0x3c
 801b196:	b1df      	cbz	r7, 801b1d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801b198:	444b      	add	r3, r9
 801b19a:	0859      	lsrs	r1, r3, #1
 801b19c:	f013 0f01 	tst.w	r3, #1
 801b1a0:	f103 0301 	add.w	r3, r3, #1
 801b1a4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b1a8:	bf0c      	ite	eq
 801b1aa:	f001 010f 	andeq.w	r1, r1, #15
 801b1ae:	1109      	asrne	r1, r1, #4
 801b1b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b1b4:	b2c9      	uxtb	r1, r1
 801b1b6:	910b      	str	r1, [sp, #44]	; 0x2c
 801b1b8:	0859      	lsrs	r1, r3, #1
 801b1ba:	07db      	lsls	r3, r3, #31
 801b1bc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b1c0:	bf54      	ite	pl
 801b1c2:	f001 010f 	andpl.w	r1, r1, #15
 801b1c6:	1109      	asrmi	r1, r1, #4
 801b1c8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b1cc:	b2c9      	uxtb	r1, r1
 801b1ce:	9110      	str	r1, [sp, #64]	; 0x40
 801b1d0:	b280      	uxth	r0, r0
 801b1d2:	b2bf      	uxth	r7, r7
 801b1d4:	fb00 f307 	mul.w	r3, r0, r7
 801b1d8:	0100      	lsls	r0, r0, #4
 801b1da:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801b1de:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801b1e2:	1ac0      	subs	r0, r0, r3
 801b1e4:	b2bf      	uxth	r7, r7
 801b1e6:	b280      	uxth	r0, r0
 801b1e8:	1bc9      	subs	r1, r1, r7
 801b1ea:	fa1f fa81 	uxth.w	sl, r1
 801b1ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b1f0:	4348      	muls	r0, r1
 801b1f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b1f4:	fb02 020a 	mla	r2, r2, sl, r0
 801b1f8:	fb07 2701 	mla	r7, r7, r1, r2
 801b1fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b1fe:	fb03 7302 	mla	r3, r3, r2, r7
 801b202:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b206:	b393      	cbz	r3, 801b26e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b208:	4a2b      	ldr	r2, [pc, #172]	; (801b2b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801b20a:	2bff      	cmp	r3, #255	; 0xff
 801b20c:	6811      	ldr	r1, [r2, #0]
 801b20e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801b212:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801b216:	b2c9      	uxtb	r1, r1
 801b218:	d042      	beq.n	801b2a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b21a:	b298      	uxth	r0, r3
 801b21c:	43db      	mvns	r3, r3
 801b21e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801b222:	fb11 f100 	smulbb	r1, r1, r0
 801b226:	b2db      	uxtb	r3, r3
 801b228:	fb17 f700 	smulbb	r7, r7, r0
 801b22c:	fb02 1103 	mla	r1, r2, r3, r1
 801b230:	fb1a f000 	smulbb	r0, sl, r0
 801b234:	b289      	uxth	r1, r1
 801b236:	1c4a      	adds	r2, r1, #1
 801b238:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b23c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801b240:	fb02 7703 	mla	r7, r2, r3, r7
 801b244:	1209      	asrs	r1, r1, #8
 801b246:	b2bf      	uxth	r7, r7
 801b248:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b24c:	1c7a      	adds	r2, r7, #1
 801b24e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b252:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801b256:	fb02 0303 	mla	r3, r2, r3, r0
 801b25a:	123f      	asrs	r7, r7, #8
 801b25c:	b29b      	uxth	r3, r3
 801b25e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b262:	1c5a      	adds	r2, r3, #1
 801b264:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b268:	121b      	asrs	r3, r3, #8
 801b26a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801b26e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b270:	f10c 0c03 	add.w	ip, ip, #3
 801b274:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b278:	441d      	add	r5, r3
 801b27a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b27c:	441e      	add	r6, r3
 801b27e:	e6e7      	b.n	801b050 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b280:	2f00      	cmp	r7, #0
 801b282:	d0a5      	beq.n	801b1d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801b284:	444b      	add	r3, r9
 801b286:	0859      	lsrs	r1, r3, #1
 801b288:	07db      	lsls	r3, r3, #31
 801b28a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b28e:	bf54      	ite	pl
 801b290:	f001 010f 	andpl.w	r1, r1, #15
 801b294:	1109      	asrmi	r1, r1, #4
 801b296:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b29a:	b2c9      	uxtb	r1, r1
 801b29c:	910b      	str	r1, [sp, #44]	; 0x2c
 801b29e:	e797      	b.n	801b1d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801b2a0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b2a4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b2a8:	f80c ac01 	strb.w	sl, [ip, #-1]
 801b2ac:	e7df      	b.n	801b26e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801b2ae:	b013      	add	sp, #76	; 0x4c
 801b2b0:	ecbd 8b08 	vpop	{d8-d11}
 801b2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2b8:	240c3d6c 	.word	0x240c3d6c

0801b2bc <CRC_Lock>:
 801b2bc:	4a20      	ldr	r2, [pc, #128]	; (801b340 <CRC_Lock+0x84>)
 801b2be:	b530      	push	{r4, r5, lr}
 801b2c0:	6813      	ldr	r3, [r2, #0]
 801b2c2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801b2c6:	f24c 2540 	movw	r5, #49728	; 0xc240
 801b2ca:	f023 0301 	bic.w	r3, r3, #1
 801b2ce:	6013      	str	r3, [r2, #0]
 801b2d0:	4b1c      	ldr	r3, [pc, #112]	; (801b344 <CRC_Lock+0x88>)
 801b2d2:	681a      	ldr	r2, [r3, #0]
 801b2d4:	4022      	ands	r2, r4
 801b2d6:	42aa      	cmp	r2, r5
 801b2d8:	d005      	beq.n	801b2e6 <CRC_Lock+0x2a>
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	f24c 2270 	movw	r2, #49776	; 0xc270
 801b2e0:	4023      	ands	r3, r4
 801b2e2:	4293      	cmp	r3, r2
 801b2e4:	d124      	bne.n	801b330 <CRC_Lock+0x74>
 801b2e6:	4b18      	ldr	r3, [pc, #96]	; (801b348 <CRC_Lock+0x8c>)
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	bb0b      	cbnz	r3, 801b330 <CRC_Lock+0x74>
 801b2ec:	4b17      	ldr	r3, [pc, #92]	; (801b34c <CRC_Lock+0x90>)
 801b2ee:	681a      	ldr	r2, [r3, #0]
 801b2f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b2f4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b2f8:	d00d      	beq.n	801b316 <CRC_Lock+0x5a>
 801b2fa:	681a      	ldr	r2, [r3, #0]
 801b2fc:	f240 4483 	movw	r4, #1155	; 0x483
 801b300:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b304:	42a2      	cmp	r2, r4
 801b306:	d006      	beq.n	801b316 <CRC_Lock+0x5a>
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	f240 4285 	movw	r2, #1157	; 0x485
 801b30e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b312:	4293      	cmp	r3, r2
 801b314:	d10c      	bne.n	801b330 <CRC_Lock+0x74>
 801b316:	4b0e      	ldr	r3, [pc, #56]	; (801b350 <CRC_Lock+0x94>)
 801b318:	2201      	movs	r2, #1
 801b31a:	601a      	str	r2, [r3, #0]
 801b31c:	681a      	ldr	r2, [r3, #0]
 801b31e:	2a00      	cmp	r2, #0
 801b320:	d1fc      	bne.n	801b31c <CRC_Lock+0x60>
 801b322:	4b0c      	ldr	r3, [pc, #48]	; (801b354 <CRC_Lock+0x98>)
 801b324:	6018      	str	r0, [r3, #0]
 801b326:	6818      	ldr	r0, [r3, #0]
 801b328:	1a43      	subs	r3, r0, r1
 801b32a:	4258      	negs	r0, r3
 801b32c:	4158      	adcs	r0, r3
 801b32e:	bd30      	pop	{r4, r5, pc}
 801b330:	4b09      	ldr	r3, [pc, #36]	; (801b358 <CRC_Lock+0x9c>)
 801b332:	2201      	movs	r2, #1
 801b334:	601a      	str	r2, [r3, #0]
 801b336:	681a      	ldr	r2, [r3, #0]
 801b338:	2a00      	cmp	r2, #0
 801b33a:	d1fc      	bne.n	801b336 <CRC_Lock+0x7a>
 801b33c:	4b07      	ldr	r3, [pc, #28]	; (801b35c <CRC_Lock+0xa0>)
 801b33e:	e7f1      	b.n	801b324 <CRC_Lock+0x68>
 801b340:	e0002000 	.word	0xe0002000
 801b344:	e000ed00 	.word	0xe000ed00
 801b348:	e0042000 	.word	0xe0042000
 801b34c:	5c001000 	.word	0x5c001000
 801b350:	58024c08 	.word	0x58024c08
 801b354:	58024c00 	.word	0x58024c00
 801b358:	40023008 	.word	0x40023008
 801b35c:	40023000 	.word	0x40023000

0801b360 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801b360:	6101      	str	r1, [r0, #16]
 801b362:	4770      	bx	lr

0801b364 <_ZN8touchgfx8Gestures4tickEv>:
 801b364:	7b83      	ldrb	r3, [r0, #14]
 801b366:	b14b      	cbz	r3, 801b37c <_ZN8touchgfx8Gestures4tickEv+0x18>
 801b368:	8903      	ldrh	r3, [r0, #8]
 801b36a:	3301      	adds	r3, #1
 801b36c:	b29b      	uxth	r3, r3
 801b36e:	2b07      	cmp	r3, #7
 801b370:	8103      	strh	r3, [r0, #8]
 801b372:	bf81      	itttt	hi
 801b374:	2300      	movhi	r3, #0
 801b376:	8143      	strhhi	r3, [r0, #10]
 801b378:	8183      	strhhi	r3, [r0, #12]
 801b37a:	7383      	strbhi	r3, [r0, #14]
 801b37c:	4770      	bx	lr
	...

0801b380 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801b380:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b384:	4698      	mov	r8, r3
 801b386:	8883      	ldrh	r3, [r0, #4]
 801b388:	4604      	mov	r4, r0
 801b38a:	4617      	mov	r7, r2
 801b38c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b390:	eba8 0303 	sub.w	r3, r8, r3
 801b394:	4a19      	ldr	r2, [pc, #100]	; (801b3fc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801b396:	460e      	mov	r6, r1
 801b398:	b21b      	sxth	r3, r3
 801b39a:	88c1      	ldrh	r1, [r0, #6]
 801b39c:	9200      	str	r2, [sp, #0]
 801b39e:	2000      	movs	r0, #0
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	8aa2      	ldrh	r2, [r4, #20]
 801b3a4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801b3a8:	bfb8      	it	lt
 801b3aa:	425b      	neglt	r3, r3
 801b3ac:	f88d 0004 	strb.w	r0, [sp, #4]
 801b3b0:	f8ad 1008 	strh.w	r1, [sp, #8]
 801b3b4:	b21b      	sxth	r3, r3
 801b3b6:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b3ba:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b3be:	4293      	cmp	r3, r2
 801b3c0:	dc07      	bgt.n	801b3d2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801b3c2:	1a69      	subs	r1, r5, r1
 801b3c4:	b209      	sxth	r1, r1
 801b3c6:	2900      	cmp	r1, #0
 801b3c8:	bfb8      	it	lt
 801b3ca:	4249      	neglt	r1, r1
 801b3cc:	b209      	sxth	r1, r1
 801b3ce:	428a      	cmp	r2, r1
 801b3d0:	da10      	bge.n	801b3f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801b3d2:	6920      	ldr	r0, [r4, #16]
 801b3d4:	4669      	mov	r1, sp
 801b3d6:	eba8 0606 	sub.w	r6, r8, r6
 801b3da:	1bef      	subs	r7, r5, r7
 801b3dc:	6803      	ldr	r3, [r0, #0]
 801b3de:	685b      	ldr	r3, [r3, #4]
 801b3e0:	4798      	blx	r3
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	2001      	movs	r0, #1
 801b3e6:	8166      	strh	r6, [r4, #10]
 801b3e8:	8123      	strh	r3, [r4, #8]
 801b3ea:	81a7      	strh	r7, [r4, #12]
 801b3ec:	f8a4 8004 	strh.w	r8, [r4, #4]
 801b3f0:	80e5      	strh	r5, [r4, #6]
 801b3f2:	73a0      	strb	r0, [r4, #14]
 801b3f4:	b004      	add	sp, #16
 801b3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3fa:	bf00      	nop
 801b3fc:	08020824 	.word	0x08020824

0801b400 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801b400:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b402:	461e      	mov	r6, r3
 801b404:	1e4b      	subs	r3, r1, #1
 801b406:	b085      	sub	sp, #20
 801b408:	4604      	mov	r4, r0
 801b40a:	2b01      	cmp	r3, #1
 801b40c:	460d      	mov	r5, r1
 801b40e:	4617      	mov	r7, r2
 801b410:	d84b      	bhi.n	801b4aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801b412:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b416:	1cd3      	adds	r3, r2, #3
 801b418:	b29b      	uxth	r3, r3
 801b41a:	2b06      	cmp	r3, #6
 801b41c:	d916      	bls.n	801b44c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801b41e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801b4c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b422:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b426:	f8cd c004 	str.w	ip, [sp, #4]
 801b42a:	f04f 0c00 	mov.w	ip, #0
 801b42e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b432:	6900      	ldr	r0, [r0, #16]
 801b434:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b438:	a901      	add	r1, sp, #4
 801b43a:	f88d c008 	strb.w	ip, [sp, #8]
 801b43e:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b442:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b446:	6803      	ldr	r3, [r0, #0]
 801b448:	689b      	ldr	r3, [r3, #8]
 801b44a:	4798      	blx	r3
 801b44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b450:	1cd3      	adds	r3, r2, #3
 801b452:	b29b      	uxth	r3, r3
 801b454:	2b06      	cmp	r3, #6
 801b456:	d916      	bls.n	801b486 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b458:	f8df c064 	ldr.w	ip, [pc, #100]	; 801b4c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b45c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b460:	f8cd c004 	str.w	ip, [sp, #4]
 801b464:	f04f 0c01 	mov.w	ip, #1
 801b468:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b46c:	6920      	ldr	r0, [r4, #16]
 801b46e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b472:	a901      	add	r1, sp, #4
 801b474:	f88d c008 	strb.w	ip, [sp, #8]
 801b478:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b47c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b480:	6803      	ldr	r3, [r0, #0]
 801b482:	689b      	ldr	r3, [r3, #8]
 801b484:	4798      	blx	r3
 801b486:	4b0d      	ldr	r3, [pc, #52]	; (801b4bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801b488:	a901      	add	r1, sp, #4
 801b48a:	6920      	ldr	r0, [r4, #16]
 801b48c:	9301      	str	r3, [sp, #4]
 801b48e:	2300      	movs	r3, #0
 801b490:	f88d 5008 	strb.w	r5, [sp, #8]
 801b494:	f8ad 700a 	strh.w	r7, [sp, #10]
 801b498:	f8ad 600c 	strh.w	r6, [sp, #12]
 801b49c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b4a0:	6803      	ldr	r3, [r0, #0]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	4798      	blx	r3
 801b4a6:	b005      	add	sp, #20
 801b4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4aa:	2900      	cmp	r1, #0
 801b4ac:	d1eb      	bne.n	801b486 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b4ae:	80a2      	strh	r2, [r4, #4]
 801b4b0:	80c6      	strh	r6, [r0, #6]
 801b4b2:	60a1      	str	r1, [r4, #8]
 801b4b4:	81a1      	strh	r1, [r4, #12]
 801b4b6:	73a1      	strb	r1, [r4, #14]
 801b4b8:	e7e5      	b.n	801b486 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b4ba:	bf00      	nop
 801b4bc:	08020810 	.word	0x08020810
 801b4c0:	08020838 	.word	0x08020838

0801b4c4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 801b4c4:	10c9      	asrs	r1, r1, #3
 801b4c6:	2900      	cmp	r1, #0
 801b4c8:	bfb8      	it	lt
 801b4ca:	4249      	neglt	r1, r1
 801b4cc:	2801      	cmp	r0, #1
 801b4ce:	d108      	bne.n	801b4e2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 801b4d0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801b4d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801b4d8:	4601      	mov	r1, r0
 801b4da:	dd02      	ble.n	801b4e2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 801b4dc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801b4e0:	4770      	bx	lr
 801b4e2:	29ff      	cmp	r1, #255	; 0xff
 801b4e4:	bfa8      	it	ge
 801b4e6:	21ff      	movge	r1, #255	; 0xff
 801b4e8:	4608      	mov	r0, r1
 801b4ea:	4770      	bx	lr

0801b4ec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 801b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f0:	688c      	ldr	r4, [r1, #8]
 801b4f2:	b087      	sub	sp, #28
 801b4f4:	4607      	mov	r7, r0
 801b4f6:	2c00      	cmp	r4, #0
 801b4f8:	db2b      	blt.n	801b552 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 801b4fa:	6803      	ldr	r3, [r0, #0]
 801b4fc:	691a      	ldr	r2, [r3, #16]
 801b4fe:	42a2      	cmp	r2, r4
 801b500:	dd27      	ble.n	801b552 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 801b502:	685a      	ldr	r2, [r3, #4]
 801b504:	695e      	ldr	r6, [r3, #20]
 801b506:	68cd      	ldr	r5, [r1, #12]
 801b508:	fb06 2604 	mla	r6, r6, r4, r2
 801b50c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 801b510:	698a      	ldr	r2, [r1, #24]
 801b512:	f893 a008 	ldrb.w	sl, [r3, #8]
 801b516:	f8d1 8020 	ldr.w	r8, [r1, #32]
 801b51a:	9205      	str	r2, [sp, #20]
 801b51c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 801b520:	9b05      	ldr	r3, [sp, #20]
 801b522:	6839      	ldr	r1, [r7, #0]
 801b524:	eb03 0c02 	add.w	ip, r3, r2
 801b528:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 801b52c:	68c9      	ldr	r1, [r1, #12]
 801b52e:	1898      	adds	r0, r3, r2
 801b530:	4288      	cmp	r0, r1
 801b532:	db02      	blt.n	801b53a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 801b534:	1a8b      	subs	r3, r1, r2
 801b536:	2b00      	cmp	r3, #0
 801b538:	dd09      	ble.n	801b54e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 801b53a:	6878      	ldr	r0, [r7, #4]
 801b53c:	6801      	ldr	r1, [r0, #0]
 801b53e:	9400      	str	r4, [sp, #0]
 801b540:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 801b544:	4653      	mov	r3, sl
 801b546:	f8d1 b008 	ldr.w	fp, [r1, #8]
 801b54a:	4631      	mov	r1, r6
 801b54c:	47d8      	blx	fp
 801b54e:	3d01      	subs	r5, #1
 801b550:	d1e4      	bne.n	801b51c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 801b552:	b007      	add	sp, #28
 801b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b558 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801b558:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801b55c:	b90b      	cbnz	r3, 801b562 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 801b55e:	f001 b991 	b.w	801c884 <_ZN8touchgfx7Outline6lineToEii>
 801b562:	4770      	bx	lr

0801b564 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 801b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b568:	4604      	mov	r4, r0
 801b56a:	2600      	movs	r6, #0
 801b56c:	4b8f      	ldr	r3, [pc, #572]	; (801b7ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 801b56e:	f100 0518 	add.w	r5, r0, #24
 801b572:	f104 0730 	add.w	r7, r4, #48	; 0x30
 801b576:	b086      	sub	sp, #24
 801b578:	4690      	mov	r8, r2
 801b57a:	e9c0 3100 	strd	r3, r1, [r0]
 801b57e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801b582:	e9c0 6604 	strd	r6, r6, [r0, #16]
 801b586:	4628      	mov	r0, r5
 801b588:	f001 fba0 	bl	801cccc <_ZN8touchgfx15RenderingBufferC1Ev>
 801b58c:	4638      	mov	r0, r7
 801b58e:	f000 fb45 	bl	801bc1c <_ZN8touchgfx7OutlineC1Ev>
 801b592:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801b596:	f001 fb41 	bl	801cc1c <_ZN8touchgfx8ScanlineC1Ev>
 801b59a:	2301      	movs	r3, #1
 801b59c:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 801b5a0:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 801b5a4:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 801b5a8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801b5ac:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 801b5b0:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801b5b4:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 801b5b8:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 801b5bc:	f7f3 fe96 	bl	800f2ec <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 801b5c0:	b928      	cbnz	r0, 801b5ce <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 801b5c2:	4b7b      	ldr	r3, [pc, #492]	; (801b7b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 801b5c4:	212a      	movs	r1, #42	; 0x2a
 801b5c6:	4a7b      	ldr	r2, [pc, #492]	; (801b7b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 801b5c8:	487b      	ldr	r0, [pc, #492]	; (801b7b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 801b5ca:	f001 fbc7 	bl	801cd5c <__assert_func>
 801b5ce:	f9b8 2000 	ldrsh.w	r2, [r8]
 801b5d2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 801b5d6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801b5da:	4410      	add	r0, r2
 801b5dc:	9602      	str	r6, [sp, #8]
 801b5de:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 801b5e2:	b280      	uxth	r0, r0
 801b5e4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 801b5e8:	fa0f fa80 	sxth.w	sl, r0
 801b5ec:	f1ba 0f00 	cmp.w	sl, #0
 801b5f0:	dd70      	ble.n	801b6d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801b5f2:	4591      	cmp	r9, r2
 801b5f4:	dd6e      	ble.n	801b6d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801b5f6:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 801b5fa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b5fe:	440b      	add	r3, r1
 801b600:	b29b      	uxth	r3, r3
 801b602:	b21e      	sxth	r6, r3
 801b604:	2e00      	cmp	r6, #0
 801b606:	dd65      	ble.n	801b6d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801b608:	458e      	cmp	lr, r1
 801b60a:	dd63      	ble.n	801b6d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801b60c:	45d1      	cmp	r9, sl
 801b60e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801b612:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801b616:	bfb8      	it	lt
 801b618:	fa1f f089 	uxthlt.w	r0, r9
 801b61c:	45b6      	cmp	lr, r6
 801b61e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801b622:	bfb8      	it	lt
 801b624:	fa1f f38e 	uxthlt.w	r3, lr
 801b628:	1a80      	subs	r0, r0, r2
 801b62a:	f8ad 100a 	strh.w	r1, [sp, #10]
 801b62e:	1a5b      	subs	r3, r3, r1
 801b630:	f8ad 000c 	strh.w	r0, [sp, #12]
 801b634:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b638:	f10d 0808 	add.w	r8, sp, #8
 801b63c:	ae04      	add	r6, sp, #16
 801b63e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b642:	e886 0003 	stmia.w	r6, {r0, r1}
 801b646:	f8dc 3000 	ldr.w	r3, [ip]
 801b64a:	4660      	mov	r0, ip
 801b64c:	4631      	mov	r1, r6
 801b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b650:	4798      	blx	r3
 801b652:	6861      	ldr	r1, [r4, #4]
 801b654:	4640      	mov	r0, r8
 801b656:	3104      	adds	r1, #4
 801b658:	f7f4 fd34 	bl	80100c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b65c:	4630      	mov	r0, r6
 801b65e:	f7f4 fd09 	bl	8010074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b662:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801b666:	f7f3 fdd1 	bl	800f20c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 801b66a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 801b66e:	4638      	mov	r0, r7
 801b670:	f000 fab0 	bl	801bbd4 <_ZN8touchgfx7Outline5resetEv>
 801b674:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801b678:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801b67c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801b680:	015b      	lsls	r3, r3, #5
 801b682:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 801b686:	0152      	lsls	r2, r2, #5
 801b688:	60e3      	str	r3, [r4, #12]
 801b68a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b68e:	60a2      	str	r2, [r4, #8]
 801b690:	015b      	lsls	r3, r3, #5
 801b692:	6123      	str	r3, [r4, #16]
 801b694:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b698:	015b      	lsls	r3, r3, #5
 801b69a:	6163      	str	r3, [r4, #20]
 801b69c:	4b47      	ldr	r3, [pc, #284]	; (801b7bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 801b69e:	6818      	ldr	r0, [r3, #0]
 801b6a0:	6803      	ldr	r3, [r0, #0]
 801b6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6a4:	4798      	blx	r3
 801b6a6:	4606      	mov	r6, r0
 801b6a8:	f7ed fe3c 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 801b6ac:	6803      	ldr	r3, [r0, #0]
 801b6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6b0:	4798      	blx	r3
 801b6b2:	4607      	mov	r7, r0
 801b6b4:	f7ed fe36 	bl	8009324 <_ZN8touchgfx3HAL3lcdEv>
 801b6b8:	6803      	ldr	r3, [r0, #0]
 801b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6bc:	4798      	blx	r3
 801b6be:	280d      	cmp	r0, #13
 801b6c0:	d854      	bhi.n	801b76c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 801b6c2:	e8df f000 	tbb	[pc, r0]
 801b6c6:	554b      	.short	0x554b
 801b6c8:	2b6e0a66 	.word	0x2b6e0a66
 801b6cc:	5f5f5f3b 	.word	0x5f5f5f3b
 801b6d0:	6e6e5f5f 	.word	0x6e6e5f5f
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	9303      	str	r3, [sp, #12]
 801b6d8:	e7ae      	b.n	801b638 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 801b6da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b6de:	2108      	movs	r1, #8
 801b6e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b6e4:	fb92 f1f1 	sdiv	r1, r2, r1
 801b6e8:	fb07 1303 	mla	r3, r7, r3, r1
 801b6ec:	441e      	add	r6, r3
 801b6ee:	4253      	negs	r3, r2
 801b6f0:	f002 0207 	and.w	r2, r2, #7
 801b6f4:	f003 0307 	and.w	r3, r3, #7
 801b6f8:	bf58      	it	pl
 801b6fa:	425a      	negpl	r2, r3
 801b6fc:	b2d2      	uxtb	r2, r2
 801b6fe:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b702:	4628      	mov	r0, r5
 801b704:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b708:	6721      	str	r1, [r4, #112]	; 0x70
 801b70a:	e9cd 1700 	strd	r1, r7, [sp]
 801b70e:	4631      	mov	r1, r6
 801b710:	f001 fae8 	bl	801cce4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 801b714:	4620      	mov	r0, r4
 801b716:	b006      	add	sp, #24
 801b718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b71c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b720:	2104      	movs	r1, #4
 801b722:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b726:	fb92 f1f1 	sdiv	r1, r2, r1
 801b72a:	fb07 1303 	mla	r3, r7, r3, r1
 801b72e:	441e      	add	r6, r3
 801b730:	4253      	negs	r3, r2
 801b732:	f002 0203 	and.w	r2, r2, #3
 801b736:	f003 0303 	and.w	r3, r3, #3
 801b73a:	e7dd      	b.n	801b6f8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 801b73c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b740:	2102      	movs	r1, #2
 801b742:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b746:	2a00      	cmp	r2, #0
 801b748:	fb92 f1f1 	sdiv	r1, r2, r1
 801b74c:	f002 0201 	and.w	r2, r2, #1
 801b750:	fb07 1303 	mla	r3, r7, r3, r1
 801b754:	bfb8      	it	lt
 801b756:	4252      	neglt	r2, r2
 801b758:	441e      	add	r6, r3
 801b75a:	e7cf      	b.n	801b6fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 801b75c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b760:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b764:	437b      	muls	r3, r7
 801b766:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b76a:	441e      	add	r6, r3
 801b76c:	2200      	movs	r2, #0
 801b76e:	e7c6      	b.n	801b6fe <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 801b770:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b774:	2103      	movs	r1, #3
 801b776:	fb07 f203 	mul.w	r2, r7, r3
 801b77a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b77e:	fb13 2301 	smlabb	r3, r3, r1, r2
 801b782:	e7f2      	b.n	801b76a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801b784:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b788:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b78c:	fb07 2303 	mla	r3, r7, r3, r2
 801b790:	e7eb      	b.n	801b76a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801b792:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b796:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b79a:	437b      	muls	r3, r7
 801b79c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801b7a0:	e7e3      	b.n	801b76a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801b7a2:	4b07      	ldr	r3, [pc, #28]	; (801b7c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 801b7a4:	2169      	movs	r1, #105	; 0x69
 801b7a6:	4a03      	ldr	r2, [pc, #12]	; (801b7b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 801b7a8:	e70e      	b.n	801b5c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 801b7aa:	bf00      	nop
 801b7ac:	08021c2c 	.word	0x08021c2c
 801b7b0:	08021b75 	.word	0x08021b75
 801b7b4:	08021c34 	.word	0x08021c34
 801b7b8:	08021bd1 	.word	0x08021bd1
 801b7bc:	240c3d44 	.word	0x240c3d44
 801b7c0:	08021c05 	.word	0x08021c05

0801b7c4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 801b7c4:	6812      	ldr	r2, [r2, #0]
 801b7c6:	2a00      	cmp	r2, #0
 801b7c8:	db0b      	blt.n	801b7e2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 801b7ca:	9800      	ldr	r0, [sp, #0]
 801b7cc:	6800      	ldr	r0, [r0, #0]
 801b7ce:	4290      	cmp	r0, r2
 801b7d0:	bfd4      	ite	le
 801b7d2:	2002      	movle	r0, #2
 801b7d4:	2000      	movgt	r0, #0
 801b7d6:	680a      	ldr	r2, [r1, #0]
 801b7d8:	2a00      	cmp	r2, #0
 801b7da:	da04      	bge.n	801b7e6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 801b7dc:	f040 0004 	orr.w	r0, r0, #4
 801b7e0:	4770      	bx	lr
 801b7e2:	2001      	movs	r0, #1
 801b7e4:	e7f7      	b.n	801b7d6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	4293      	cmp	r3, r2
 801b7ea:	bfd8      	it	le
 801b7ec:	f040 0008 	orrle.w	r0, r0, #8
 801b7f0:	4770      	bx	lr
	...

0801b7f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801b7f4:	4b07      	ldr	r3, [pc, #28]	; (801b814 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 801b7f6:	b510      	push	{r4, lr}
 801b7f8:	781b      	ldrb	r3, [r3, #0]
 801b7fa:	2b01      	cmp	r3, #1
 801b7fc:	d108      	bne.n	801b810 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 801b7fe:	6843      	ldr	r3, [r0, #4]
 801b800:	6814      	ldr	r4, [r2, #0]
 801b802:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b806:	680b      	ldr	r3, [r1, #0]
 801b808:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801b80c:	6013      	str	r3, [r2, #0]
 801b80e:	600c      	str	r4, [r1, #0]
 801b810:	bd10      	pop	{r4, pc}
 801b812:	bf00      	nop
 801b814:	240c3d3a 	.word	0x240c3d3a

0801b818 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801b818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b81a:	b085      	sub	sp, #20
 801b81c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801b820:	4604      	mov	r4, r0
 801b822:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b826:	b33b      	cbz	r3, 801b878 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 801b828:	aa02      	add	r2, sp, #8
 801b82a:	a903      	add	r1, sp, #12
 801b82c:	f7ff ffe2 	bl	801b7f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801b830:	68a3      	ldr	r3, [r4, #8]
 801b832:	9e03      	ldr	r6, [sp, #12]
 801b834:	aa02      	add	r2, sp, #8
 801b836:	9f02      	ldr	r7, [sp, #8]
 801b838:	a903      	add	r1, sp, #12
 801b83a:	1af6      	subs	r6, r6, r3
 801b83c:	68e3      	ldr	r3, [r4, #12]
 801b83e:	4620      	mov	r0, r4
 801b840:	1aff      	subs	r7, r7, r3
 801b842:	f104 0314 	add.w	r3, r4, #20
 801b846:	9603      	str	r6, [sp, #12]
 801b848:	9300      	str	r3, [sp, #0]
 801b84a:	f104 0310 	add.w	r3, r4, #16
 801b84e:	9702      	str	r7, [sp, #8]
 801b850:	f7ff ffb8 	bl	801b7c4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801b854:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 801b858:	4605      	mov	r5, r0
 801b85a:	b97b      	cbnz	r3, 801b87c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 801b85c:	463a      	mov	r2, r7
 801b85e:	4631      	mov	r1, r6
 801b860:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801b864:	f7ff fe78 	bl	801b558 <_ZN8touchgfx10Rasterizer6lineToEii>
 801b868:	9b03      	ldr	r3, [sp, #12]
 801b86a:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 801b86e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801b872:	9b02      	ldr	r3, [sp, #8]
 801b874:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801b878:	b005      	add	sp, #20
 801b87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b87c:	b110      	cbz	r0, 801b884 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 801b87e:	ea13 0200 	ands.w	r2, r3, r0
 801b882:	d11c      	bne.n	801b8be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 801b884:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 801b888:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801b88c:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 801b890:	b188      	cbz	r0, 801b8b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 801b892:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 801b896:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801b89a:	b913      	cbnz	r3, 801b8a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 801b89c:	4630      	mov	r0, r6
 801b89e:	f001 f821 	bl	801c8e4 <_ZN8touchgfx7Outline6moveToEii>
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801b8a8:	2301      	movs	r3, #1
 801b8aa:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 801b8ae:	4630      	mov	r0, r6
 801b8b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b8b4:	e7d6      	b.n	801b864 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 801b8b6:	4630      	mov	r0, r6
 801b8b8:	f7ff fe4e 	bl	801b558 <_ZN8touchgfx10Rasterizer6lineToEii>
 801b8bc:	e7f7      	b.n	801b8ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 801b8be:	4615      	mov	r5, r2
 801b8c0:	e7d2      	b.n	801b868 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0801b8c2 <_ZN8touchgfx6Canvas5closeEv>:
 801b8c2:	b538      	push	{r3, r4, r5, lr}
 801b8c4:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 801b8c8:	4604      	mov	r4, r0
 801b8ca:	b993      	cbnz	r3, 801b8f2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801b8cc:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 801b8d0:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 801b8d4:	4213      	tst	r3, r2
 801b8d6:	d10c      	bne.n	801b8f2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801b8d8:	f100 0530 	add.w	r5, r0, #48	; 0x30
 801b8dc:	b123      	cbz	r3, 801b8e8 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801b8de:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 801b8e2:	4628      	mov	r0, r5
 801b8e4:	f7ff fe38 	bl	801b558 <_ZN8touchgfx10Rasterizer6lineToEii>
 801b8e8:	4628      	mov	r0, r5
 801b8ea:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 801b8ee:	f7ff fe33 	bl	801b558 <_ZN8touchgfx10Rasterizer6lineToEii>
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801b8f8:	bd38      	pop	{r3, r4, r5, pc}

0801b8fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801b8fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8fc:	b085      	sub	sp, #20
 801b8fe:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801b902:	4604      	mov	r4, r0
 801b904:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b908:	b353      	cbz	r3, 801b960 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 801b90a:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 801b90e:	b90b      	cbnz	r3, 801b914 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 801b910:	f7ff ffd7 	bl	801b8c2 <_ZN8touchgfx6Canvas5closeEv>
 801b914:	aa02      	add	r2, sp, #8
 801b916:	a903      	add	r1, sp, #12
 801b918:	4620      	mov	r0, r4
 801b91a:	f7ff ff6b 	bl	801b7f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801b91e:	68a3      	ldr	r3, [r4, #8]
 801b920:	9d03      	ldr	r5, [sp, #12]
 801b922:	aa02      	add	r2, sp, #8
 801b924:	9e02      	ldr	r6, [sp, #8]
 801b926:	a903      	add	r1, sp, #12
 801b928:	1aed      	subs	r5, r5, r3
 801b92a:	68e3      	ldr	r3, [r4, #12]
 801b92c:	4620      	mov	r0, r4
 801b92e:	1af6      	subs	r6, r6, r3
 801b930:	f104 0314 	add.w	r3, r4, #20
 801b934:	9503      	str	r5, [sp, #12]
 801b936:	9300      	str	r3, [sp, #0]
 801b938:	f104 0310 	add.w	r3, r4, #16
 801b93c:	9602      	str	r6, [sp, #8]
 801b93e:	f7ff ff41 	bl	801b7c4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801b942:	4607      	mov	r7, r0
 801b944:	b170      	cbz	r0, 801b964 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 801b946:	2301      	movs	r3, #1
 801b948:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801b94c:	9a03      	ldr	r2, [sp, #12]
 801b94e:	9b02      	ldr	r3, [sp, #8]
 801b950:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 801b954:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801b958:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 801b95c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 801b960:	b005      	add	sp, #20
 801b962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b964:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801b968:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 801b96c:	b92b      	cbnz	r3, 801b97a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 801b96e:	4632      	mov	r2, r6
 801b970:	4629      	mov	r1, r5
 801b972:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801b976:	f000 ffb5 	bl	801c8e4 <_ZN8touchgfx7Outline6moveToEii>
 801b97a:	2300      	movs	r3, #0
 801b97c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801b980:	2301      	movs	r3, #1
 801b982:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 801b986:	e7e1      	b.n	801b94c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0801b988 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 801b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b98c:	4604      	mov	r4, r0
 801b98e:	b087      	sub	sp, #28
 801b990:	9105      	str	r1, [sp, #20]
 801b992:	f001 f8ec 	bl	801cb6e <_ZN8touchgfx7Outline8getCellsEv>
 801b996:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801b99a:	4605      	mov	r5, r0
 801b99c:	f1b9 0f00 	cmp.w	r9, #0
 801b9a0:	d103      	bne.n	801b9aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 801b9a2:	2001      	movs	r0, #1
 801b9a4:	b007      	add	sp, #28
 801b9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9aa:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 801b9ae:	2e00      	cmp	r6, #0
 801b9b0:	d139      	bne.n	801ba26 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 801b9b2:	f104 0848 	add.w	r8, r4, #72	; 0x48
 801b9b6:	f105 0708 	add.w	r7, r5, #8
 801b9ba:	4640      	mov	r0, r8
 801b9bc:	f001 f919 	bl	801cbf2 <_ZN8touchgfx8Scanline5resetEv>
 801b9c0:	f109 33ff 	add.w	r3, r9, #4294967295
 801b9c4:	9303      	str	r3, [sp, #12]
 801b9c6:	f9b5 b000 	ldrsh.w	fp, [r5]
 801b9ca:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 801b9ce:	46da      	mov	sl, fp
 801b9d0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b9d4:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 801b9d8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b9dc:	9b03      	ldr	r3, [sp, #12]
 801b9de:	4416      	add	r6, r2
 801b9e0:	9504      	str	r5, [sp, #16]
 801b9e2:	463d      	mov	r5, r7
 801b9e4:	3b01      	subs	r3, #1
 801b9e6:	9303      	str	r3, [sp, #12]
 801b9e8:	3301      	adds	r3, #1
 801b9ea:	d01e      	beq.n	801ba2a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 801b9ec:	3708      	adds	r7, #8
 801b9ee:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 801b9f2:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 801b9f6:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 801b9fa:	4290      	cmp	r0, r2
 801b9fc:	d11e      	bne.n	801ba3c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 801b9fe:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 801ba02:	4411      	add	r1, r2
 801ba04:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 801ba08:	e7e8      	b.n	801b9dc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 801ba0a:	1c91      	adds	r1, r2, #2
 801ba0c:	f04f 0301 	mov.w	r3, #1
 801ba10:	65e1      	str	r1, [r4, #92]	; 0x5c
 801ba12:	8053      	strh	r3, [r2, #2]
 801ba14:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801ba16:	1c91      	adds	r1, r2, #2
 801ba18:	65a1      	str	r1, [r4, #88]	; 0x58
 801ba1a:	f8a2 b002 	strh.w	fp, [r2, #2]
 801ba1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801ba20:	3201      	adds	r2, #1
 801ba22:	6562      	str	r2, [r4, #84]	; 0x54
 801ba24:	e03a      	b.n	801ba9c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 801ba26:	2000      	movs	r0, #0
 801ba28:	e7bc      	b.n	801b9a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 801ba2a:	b951      	cbnz	r1, 801ba42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 801ba2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d0b7      	beq.n	801b9a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 801ba32:	4641      	mov	r1, r8
 801ba34:	9805      	ldr	r0, [sp, #20]
 801ba36:	f7ff fd59 	bl	801b4ec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801ba3a:	e7b2      	b.n	801b9a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 801ba3c:	2900      	cmp	r1, #0
 801ba3e:	d035      	beq.n	801baac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 801ba40:	9504      	str	r5, [sp, #16]
 801ba42:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 801ba46:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801ba4a:	f7ff fd3b 	bl	801b4c4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 801ba4e:	4605      	mov	r5, r0
 801ba50:	b330      	cbz	r0, 801baa0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801ba52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801ba54:	b182      	cbz	r2, 801ba78 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 801ba56:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801ba58:	4591      	cmp	r9, r2
 801ba5a:	d00d      	beq.n	801ba78 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 801ba5c:	4641      	mov	r1, r8
 801ba5e:	9805      	ldr	r0, [sp, #20]
 801ba60:	f7ff fd44 	bl	801b4ec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801ba64:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ba68:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801ba6a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801ba6e:	65e2      	str	r2, [r4, #92]	; 0x5c
 801ba70:	2300      	movs	r3, #0
 801ba72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ba74:	6563      	str	r3, [r4, #84]	; 0x54
 801ba76:	65a2      	str	r2, [r4, #88]	; 0x58
 801ba78:	f1bb 0f00 	cmp.w	fp, #0
 801ba7c:	db10      	blt.n	801baa0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801ba7e:	f7f3 fc43 	bl	800f308 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801ba82:	4583      	cmp	fp, r0
 801ba84:	da0c      	bge.n	801baa0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801ba86:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801ba88:	f802 500b 	strb.w	r5, [r2, fp]
 801ba8c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ba8e:	3201      	adds	r2, #1
 801ba90:	4593      	cmp	fp, r2
 801ba92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801ba94:	d1b9      	bne.n	801ba0a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 801ba96:	8811      	ldrh	r1, [r2, #0]
 801ba98:	3101      	adds	r1, #1
 801ba9a:	8011      	strh	r1, [r2, #0]
 801ba9c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 801baa0:	9b03      	ldr	r3, [sp, #12]
 801baa2:	3301      	adds	r3, #1
 801baa4:	d0c2      	beq.n	801ba2c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 801baa6:	f10b 0a01 	add.w	sl, fp, #1
 801baaa:	9d04      	ldr	r5, [sp, #16]
 801baac:	f9b5 3000 	ldrsh.w	r3, [r5]
 801bab0:	4553      	cmp	r3, sl
 801bab2:	dd88      	ble.n	801b9c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 801bab4:	01b1      	lsls	r1, r6, #6
 801bab6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801baba:	f7ff fd03 	bl	801b4c4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 801babe:	4683      	mov	fp, r0
 801bac0:	2800      	cmp	r0, #0
 801bac2:	d080      	beq.n	801b9c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 801bac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801bac6:	b183      	cbz	r3, 801baea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 801bac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801baca:	4599      	cmp	r9, r3
 801bacc:	d00d      	beq.n	801baea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 801bace:	4641      	mov	r1, r8
 801bad0:	9805      	ldr	r0, [sp, #20]
 801bad2:	f7ff fd0b 	bl	801b4ec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801bad6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bada:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801bade:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801bae0:	65e3      	str	r3, [r4, #92]	; 0x5c
 801bae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bae4:	65a3      	str	r3, [r4, #88]	; 0x58
 801bae6:	2300      	movs	r3, #0
 801bae8:	6563      	str	r3, [r4, #84]	; 0x54
 801baea:	f9b5 3000 	ldrsh.w	r3, [r5]
 801baee:	464a      	mov	r2, r9
 801baf0:	f8cd b000 	str.w	fp, [sp]
 801baf4:	4651      	mov	r1, sl
 801baf6:	eba3 030a 	sub.w	r3, r3, sl
 801bafa:	4640      	mov	r0, r8
 801bafc:	f001 f8a4 	bl	801cc48 <_ZN8touchgfx8Scanline7addSpanEiijj>
 801bb00:	e761      	b.n	801b9c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0801bb02 <_ZN8touchgfx6Canvas6renderEh>:
 801bb02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb04:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801bb08:	4604      	mov	r4, r0
 801bb0a:	460d      	mov	r5, r1
 801bb0c:	b913      	cbnz	r3, 801bb14 <_ZN8touchgfx6Canvas6renderEh+0x12>
 801bb0e:	2001      	movs	r0, #1
 801bb10:	b003      	add	sp, #12
 801bb12:	bd30      	pop	{r4, r5, pc}
 801bb14:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d12f      	bne.n	801bb7c <_ZN8touchgfx6Canvas6renderEh+0x7a>
 801bb1c:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d0f4      	beq.n	801bb0e <_ZN8touchgfx6Canvas6renderEh+0xc>
 801bb24:	6840      	ldr	r0, [r0, #4]
 801bb26:	6803      	ldr	r3, [r0, #0]
 801bb28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb2a:	4798      	blx	r3
 801bb2c:	fb10 f105 	smulbb	r1, r0, r5
 801bb30:	b288      	uxth	r0, r1
 801bb32:	1c41      	adds	r1, r0, #1
 801bb34:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801bb38:	120d      	asrs	r5, r1, #8
 801bb3a:	d0e8      	beq.n	801bb0e <_ZN8touchgfx6Canvas6renderEh+0xc>
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	f7ff fec0 	bl	801b8c2 <_ZN8touchgfx6Canvas5closeEv>
 801bb42:	6860      	ldr	r0, [r4, #4]
 801bb44:	6803      	ldr	r3, [r0, #0]
 801bb46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bb48:	4798      	blx	r3
 801bb4a:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 801bb4e:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 801bb52:	8082      	strh	r2, [r0, #4]
 801bb54:	80c3      	strh	r3, [r0, #6]
 801bb56:	6860      	ldr	r0, [r4, #4]
 801bb58:	6803      	ldr	r3, [r0, #0]
 801bb5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bb5c:	4798      	blx	r3
 801bb5e:	7205      	strb	r5, [r0, #8]
 801bb60:	6860      	ldr	r0, [r4, #4]
 801bb62:	6803      	ldr	r3, [r0, #0]
 801bb64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bb66:	4798      	blx	r3
 801bb68:	f104 0318 	add.w	r3, r4, #24
 801bb6c:	4669      	mov	r1, sp
 801bb6e:	e9cd 3000 	strd	r3, r0, [sp]
 801bb72:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801bb76:	f7ff ff07 	bl	801b988 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 801bb7a:	e7c9      	b.n	801bb10 <_ZN8touchgfx6Canvas6renderEh+0xe>
 801bb7c:	2000      	movs	r0, #0
 801bb7e:	e7c7      	b.n	801bb10 <_ZN8touchgfx6Canvas6renderEh+0xe>

0801bb80 <_ZN8touchgfx6CanvasD1Ev>:
 801bb80:	b538      	push	{r3, r4, r5, lr}
 801bb82:	4605      	mov	r5, r0
 801bb84:	4b08      	ldr	r3, [pc, #32]	; (801bba8 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 801bb86:	4604      	mov	r4, r0
 801bb88:	f845 3b30 	str.w	r3, [r5], #48
 801bb8c:	4b07      	ldr	r3, [pc, #28]	; (801bbac <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 801bb8e:	6818      	ldr	r0, [r3, #0]
 801bb90:	6803      	ldr	r3, [r0, #0]
 801bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb94:	4798      	blx	r3
 801bb96:	4628      	mov	r0, r5
 801bb98:	f000 f814 	bl	801bbc4 <_ZN8touchgfx7OutlineD1Ev>
 801bb9c:	f104 0018 	add.w	r0, r4, #24
 801bba0:	f001 f88b 	bl	801ccba <_ZN8touchgfx15RenderingBufferD1Ev>
 801bba4:	4620      	mov	r0, r4
 801bba6:	bd38      	pop	{r3, r4, r5, pc}
 801bba8:	08021c2c 	.word	0x08021c2c
 801bbac:	240c3d44 	.word	0x240c3d44

0801bbb0 <_ZN8touchgfx6CanvasD0Ev>:
 801bbb0:	b510      	push	{r4, lr}
 801bbb2:	4604      	mov	r4, r0
 801bbb4:	f7ff ffe4 	bl	801bb80 <_ZN8touchgfx6CanvasD1Ev>
 801bbb8:	21bc      	movs	r1, #188	; 0xbc
 801bbba:	4620      	mov	r0, r4
 801bbbc:	f001 f89f 	bl	801ccfe <_ZdlPvj>
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	bd10      	pop	{r4, pc}

0801bbc4 <_ZN8touchgfx7OutlineD1Ev>:
 801bbc4:	4770      	bx	lr

0801bbc6 <_ZN8touchgfx7OutlineD0Ev>:
 801bbc6:	b510      	push	{r4, lr}
 801bbc8:	4604      	mov	r4, r0
 801bbca:	2148      	movs	r1, #72	; 0x48
 801bbcc:	f001 f897 	bl	801ccfe <_ZdlPvj>
 801bbd0:	4620      	mov	r0, r4
 801bbd2:	bd10      	pop	{r4, pc}

0801bbd4 <_ZN8touchgfx7Outline5resetEv>:
 801bbd4:	b510      	push	{r4, lr}
 801bbd6:	4604      	mov	r4, r0
 801bbd8:	f7f3 fbae 	bl	800f338 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801bbdc:	60e0      	str	r0, [r4, #12]
 801bbde:	f7f3 fbb1 	bl	800f344 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801bbe2:	68e3      	ldr	r3, [r4, #12]
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	08c0      	lsrs	r0, r0, #3
 801bbe8:	6123      	str	r3, [r4, #16]
 801bbea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bbee:	6060      	str	r0, [r4, #4]
 801bbf0:	82a3      	strh	r3, [r4, #20]
 801bbf2:	82e3      	strh	r3, [r4, #22]
 801bbf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bbf6:	60a2      	str	r2, [r4, #8]
 801bbf8:	f023 0301 	bic.w	r3, r3, #1
 801bbfc:	8322      	strh	r2, [r4, #24]
 801bbfe:	8362      	strh	r2, [r4, #26]
 801bc00:	f043 0302 	orr.w	r3, r3, #2
 801bc04:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801bc08:	63e3      	str	r3, [r4, #60]	; 0x3c
 801bc0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bc0e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801bc12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801bc16:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801bc1a:	bd10      	pop	{r4, pc}

0801bc1c <_ZN8touchgfx7OutlineC1Ev>:
 801bc1c:	4b0f      	ldr	r3, [pc, #60]	; (801bc5c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 801bc1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801bc22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801bc26:	b510      	push	{r4, lr}
 801bc28:	6003      	str	r3, [r0, #0]
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	4604      	mov	r4, r0
 801bc2e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801bc32:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801bc36:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bc3a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801bc3e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801bc42:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 801bc46:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801bc4a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 801bc4e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 801bc52:	f7ff ffbf 	bl	801bbd4 <_ZN8touchgfx7Outline5resetEv>
 801bc56:	4620      	mov	r0, r4
 801bc58:	bd10      	pop	{r4, pc}
 801bc5a:	bf00      	nop
 801bc5c:	08021cfc 	.word	0x08021cfc

0801bc60 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc64:	b095      	sub	sp, #84	; 0x54
 801bc66:	4604      	mov	r4, r0
 801bc68:	1155      	asrs	r5, r2, #5
 801bc6a:	f002 061f 	and.w	r6, r2, #31
 801bc6e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801bc70:	1157      	asrs	r7, r2, #5
 801bc72:	9304      	str	r3, [sp, #16]
 801bc74:	1153      	asrs	r3, r2, #5
 801bc76:	9300      	str	r3, [sp, #0]
 801bc78:	1143      	asrs	r3, r0, #5
 801bc7a:	930c      	str	r3, [sp, #48]	; 0x30
 801bc7c:	f000 031f 	and.w	r3, r0, #31
 801bc80:	9303      	str	r3, [sp, #12]
 801bc82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bc84:	42ab      	cmp	r3, r5
 801bc86:	bfc8      	it	gt
 801bc88:	462b      	movgt	r3, r5
 801bc8a:	ea4f 1562 	mov.w	r5, r2, asr #5
 801bc8e:	bfc8      	it	gt
 801bc90:	6323      	strgt	r3, [r4, #48]	; 0x30
 801bc92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bc94:	42ab      	cmp	r3, r5
 801bc96:	bfd8      	it	le
 801bc98:	462b      	movle	r3, r5
 801bc9a:	ea4f 1560 	mov.w	r5, r0, asr #5
 801bc9e:	bfdc      	itt	le
 801bca0:	3301      	addle	r3, #1
 801bca2:	63a3      	strle	r3, [r4, #56]	; 0x38
 801bca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bca6:	42ab      	cmp	r3, r5
 801bca8:	bfc8      	it	gt
 801bcaa:	462b      	movgt	r3, r5
 801bcac:	ea4f 1560 	mov.w	r5, r0, asr #5
 801bcb0:	bfc8      	it	gt
 801bcb2:	6323      	strgt	r3, [r4, #48]	; 0x30
 801bcb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bcb6:	42ab      	cmp	r3, r5
 801bcb8:	bfd8      	it	le
 801bcba:	462b      	movle	r3, r5
 801bcbc:	ea4f 1561 	mov.w	r5, r1, asr #5
 801bcc0:	bfdc      	itt	le
 801bcc2:	3301      	addle	r3, #1
 801bcc4:	63a3      	strle	r3, [r4, #56]	; 0x38
 801bcc6:	9b04      	ldr	r3, [sp, #16]
 801bcc8:	eba3 0a01 	sub.w	sl, r3, r1
 801bccc:	1143      	asrs	r3, r0, #5
 801bcce:	429f      	cmp	r7, r3
 801bcd0:	f040 811d 	bne.w	801bf0e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 801bcd4:	9b04      	ldr	r3, [sp, #16]
 801bcd6:	ea4f 1b63 	mov.w	fp, r3, asr #5
 801bcda:	9b03      	ldr	r3, [sp, #12]
 801bcdc:	429e      	cmp	r6, r3
 801bcde:	d131      	bne.n	801bd44 <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 801bce0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801bce4:	fa0f fb8b 	sxth.w	fp, fp
 801bce8:	f9bd 2000 	ldrsh.w	r2, [sp]
 801bcec:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801bcf0:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 801bcf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801bcf8:	4281      	cmp	r1, r0
 801bcfa:	f000 80e6 	beq.w	801beca <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801bcfe:	8b60      	ldrh	r0, [r4, #26]
 801bd00:	8b21      	ldrh	r1, [r4, #24]
 801bd02:	4301      	orrs	r1, r0
 801bd04:	d00b      	beq.n	801bd1e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	db09      	blt.n	801bd1e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801bd0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bd0c:	428b      	cmp	r3, r1
 801bd0e:	da06      	bge.n	801bd1e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801bd10:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801bd14:	4299      	cmp	r1, r3
 801bd16:	d308      	bcc.n	801bd2a <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 801bd18:	2301      	movs	r3, #1
 801bd1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801bd1e:	f8a4 b014 	strh.w	fp, [r4, #20]
 801bd22:	2300      	movs	r3, #0
 801bd24:	82e2      	strh	r2, [r4, #22]
 801bd26:	8323      	strh	r3, [r4, #24]
 801bd28:	e01f      	b.n	801bd6a <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 801bd2a:	f104 0314 	add.w	r3, r4, #20
 801bd2e:	6925      	ldr	r5, [r4, #16]
 801bd30:	cb03      	ldmia	r3!, {r0, r1}
 801bd32:	6028      	str	r0, [r5, #0]
 801bd34:	6069      	str	r1, [r5, #4]
 801bd36:	6923      	ldr	r3, [r4, #16]
 801bd38:	3308      	adds	r3, #8
 801bd3a:	6123      	str	r3, [r4, #16]
 801bd3c:	68a3      	ldr	r3, [r4, #8]
 801bd3e:	3301      	adds	r3, #1
 801bd40:	60a3      	str	r3, [r4, #8]
 801bd42:	e7ec      	b.n	801bd1e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801bd44:	9b04      	ldr	r3, [sp, #16]
 801bd46:	45ab      	cmp	fp, r5
 801bd48:	f001 011f 	and.w	r1, r1, #31
 801bd4c:	8b20      	ldrh	r0, [r4, #24]
 801bd4e:	f003 031f 	and.w	r3, r3, #31
 801bd52:	8b62      	ldrh	r2, [r4, #26]
 801bd54:	9305      	str	r3, [sp, #20]
 801bd56:	9b03      	ldr	r3, [sp, #12]
 801bd58:	eba3 0306 	sub.w	r3, r3, r6
 801bd5c:	d107      	bne.n	801bd6e <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 801bd5e:	4418      	add	r0, r3
 801bd60:	8320      	strh	r0, [r4, #24]
 801bd62:	9805      	ldr	r0, [sp, #20]
 801bd64:	4401      	add	r1, r0
 801bd66:	fb03 2301 	mla	r3, r3, r1, r2
 801bd6a:	8363      	strh	r3, [r4, #26]
 801bd6c:	e0ad      	b.n	801beca <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801bd6e:	f1ba 0f00 	cmp.w	sl, #0
 801bd72:	db33      	blt.n	801bddc <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 801bd74:	2701      	movs	r7, #1
 801bd76:	f1c1 0c20 	rsb	ip, r1, #32
 801bd7a:	9702      	str	r7, [sp, #8]
 801bd7c:	2720      	movs	r7, #32
 801bd7e:	fb03 f30c 	mul.w	r3, r3, ip
 801bd82:	9701      	str	r7, [sp, #4]
 801bd84:	9f01      	ldr	r7, [sp, #4]
 801bd86:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801bd8a:	4439      	add	r1, r7
 801bd8c:	fb93 fcfa 	sdiv	ip, r3, sl
 801bd90:	fb0a 331c 	mls	r3, sl, ip, r3
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	bfbc      	itt	lt
 801bd98:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801bd9c:	4453      	addlt	r3, sl
 801bd9e:	fb0c 2101 	mla	r1, ip, r1, r2
 801bda2:	9a02      	ldr	r2, [sp, #8]
 801bda4:	4460      	add	r0, ip
 801bda6:	4415      	add	r5, r2
 801bda8:	f9bd 2000 	ldrsh.w	r2, [sp]
 801bdac:	b200      	sxth	r0, r0
 801bdae:	0417      	lsls	r7, r2, #16
 801bdb0:	9200      	str	r2, [sp, #0]
 801bdb2:	fa0f fe85 	sxth.w	lr, r5
 801bdb6:	8320      	strh	r0, [r4, #24]
 801bdb8:	9704      	str	r7, [sp, #16]
 801bdba:	b209      	sxth	r1, r1
 801bdbc:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 801bdc0:	9a04      	ldr	r2, [sp, #16]
 801bdc2:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 801bdc6:	8361      	strh	r1, [r4, #26]
 801bdc8:	eb0e 0902 	add.w	r9, lr, r2
 801bdcc:	454f      	cmp	r7, r9
 801bdce:	d10d      	bne.n	801bdec <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 801bdd0:	4ba0      	ldr	r3, [pc, #640]	; (801c054 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 801bdd2:	2176      	movs	r1, #118	; 0x76
 801bdd4:	4aa0      	ldr	r2, [pc, #640]	; (801c058 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 801bdd6:	48a1      	ldr	r0, [pc, #644]	; (801c05c <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 801bdd8:	f000 ffc0 	bl	801cd5c <__assert_func>
 801bddc:	f04f 37ff 	mov.w	r7, #4294967295
 801bde0:	434b      	muls	r3, r1
 801bde2:	f1ca 0a00 	rsb	sl, sl, #0
 801bde6:	9702      	str	r7, [sp, #8]
 801bde8:	2700      	movs	r7, #0
 801bdea:	e7ca      	b.n	801bd82 <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 801bdec:	ea50 0201 	orrs.w	r2, r0, r1
 801bdf0:	d00c      	beq.n	801be0c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801bdf2:	f1b8 0f00 	cmp.w	r8, #0
 801bdf6:	db09      	blt.n	801be0c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801bdf8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bdfa:	4588      	cmp	r8, r1
 801bdfc:	da06      	bge.n	801be0c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801bdfe:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801be02:	4288      	cmp	r0, r1
 801be04:	d364      	bcc.n	801bed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 801be06:	2101      	movs	r1, #1
 801be08:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801be0c:	2100      	movs	r1, #0
 801be0e:	9a00      	ldr	r2, [sp, #0]
 801be10:	45ab      	cmp	fp, r5
 801be12:	f8a4 e014 	strh.w	lr, [r4, #20]
 801be16:	82e2      	strh	r2, [r4, #22]
 801be18:	4466      	add	r6, ip
 801be1a:	8321      	strh	r1, [r4, #24]
 801be1c:	8361      	strh	r1, [r4, #26]
 801be1e:	d04b      	beq.n	801beb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 801be20:	9a03      	ldr	r2, [sp, #12]
 801be22:	eba3 030a 	sub.w	r3, r3, sl
 801be26:	f04f 0800 	mov.w	r8, #0
 801be2a:	1b91      	subs	r1, r2, r6
 801be2c:	448c      	add	ip, r1
 801be2e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 801be32:	fb9c f7fa 	sdiv	r7, ip, sl
 801be36:	fb0a cc17 	mls	ip, sl, r7, ip
 801be3a:	f1bc 0f00 	cmp.w	ip, #0
 801be3e:	bfbc      	itt	lt
 801be40:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801be44:	44d4      	addlt	ip, sl
 801be46:	1c7a      	adds	r2, r7, #1
 801be48:	9207      	str	r2, [sp, #28]
 801be4a:	eb13 030c 	adds.w	r3, r3, ip
 801be4e:	9a02      	ldr	r2, [sp, #8]
 801be50:	bf54      	ite	pl
 801be52:	9807      	ldrpl	r0, [sp, #28]
 801be54:	4638      	movmi	r0, r7
 801be56:	4415      	add	r5, r2
 801be58:	9a04      	ldr	r2, [sp, #16]
 801be5a:	fa0f fe80 	sxth.w	lr, r0
 801be5e:	4406      	add	r6, r0
 801be60:	ea4f 1140 	mov.w	r1, r0, lsl #5
 801be64:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801be68:	fa0f f985 	sxth.w	r9, r5
 801be6c:	bf58      	it	pl
 801be6e:	eba3 030a 	subpl.w	r3, r3, sl
 801be72:	4410      	add	r0, r2
 801be74:	b209      	sxth	r1, r1
 801be76:	444a      	add	r2, r9
 801be78:	f8a4 e018 	strh.w	lr, [r4, #24]
 801be7c:	8361      	strh	r1, [r4, #26]
 801be7e:	4290      	cmp	r0, r2
 801be80:	d0a6      	beq.n	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801be82:	ea5e 0201 	orrs.w	r2, lr, r1
 801be86:	d00d      	beq.n	801bea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801be88:	9a00      	ldr	r2, [sp, #0]
 801be8a:	2a00      	cmp	r2, #0
 801be8c:	db0a      	blt.n	801bea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801be8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801be90:	428a      	cmp	r2, r1
 801be92:	da07      	bge.n	801bea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801be94:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801be98:	4288      	cmp	r0, r1
 801be9a:	d329      	bcc.n	801bef0 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 801be9c:	f04f 0201 	mov.w	r2, #1
 801bea0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801bea4:	9a00      	ldr	r2, [sp, #0]
 801bea6:	45ab      	cmp	fp, r5
 801bea8:	f8a4 9014 	strh.w	r9, [r4, #20]
 801beac:	82e2      	strh	r2, [r4, #22]
 801beae:	f8a4 8018 	strh.w	r8, [r4, #24]
 801beb2:	f8a4 801a 	strh.w	r8, [r4, #26]
 801beb6:	d1c8      	bne.n	801be4a <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 801beb8:	9b03      	ldr	r3, [sp, #12]
 801beba:	9a01      	ldr	r2, [sp, #4]
 801bebc:	1b9e      	subs	r6, r3, r6
 801bebe:	9b05      	ldr	r3, [sp, #20]
 801bec0:	3320      	adds	r3, #32
 801bec2:	8326      	strh	r6, [r4, #24]
 801bec4:	1a9b      	subs	r3, r3, r2
 801bec6:	435e      	muls	r6, r3
 801bec8:	8366      	strh	r6, [r4, #26]
 801beca:	b015      	add	sp, #84	; 0x54
 801becc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bed0:	f104 0714 	add.w	r7, r4, #20
 801bed4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801bed8:	cf03      	ldmia	r7!, {r0, r1}
 801beda:	f8c8 0000 	str.w	r0, [r8]
 801bede:	f8c8 1004 	str.w	r1, [r8, #4]
 801bee2:	6921      	ldr	r1, [r4, #16]
 801bee4:	3108      	adds	r1, #8
 801bee6:	6121      	str	r1, [r4, #16]
 801bee8:	68a1      	ldr	r1, [r4, #8]
 801beea:	3101      	adds	r1, #1
 801beec:	60a1      	str	r1, [r4, #8]
 801beee:	e78d      	b.n	801be0c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801bef0:	f104 0e14 	add.w	lr, r4, #20
 801bef4:	6922      	ldr	r2, [r4, #16]
 801bef6:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801befa:	9206      	str	r2, [sp, #24]
 801befc:	6010      	str	r0, [r2, #0]
 801befe:	6051      	str	r1, [r2, #4]
 801bf00:	6921      	ldr	r1, [r4, #16]
 801bf02:	3108      	adds	r1, #8
 801bf04:	6121      	str	r1, [r4, #16]
 801bf06:	68a1      	ldr	r1, [r4, #8]
 801bf08:	3101      	adds	r1, #1
 801bf0a:	60a1      	str	r1, [r4, #8]
 801bf0c:	e7ca      	b.n	801bea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801bf0e:	eba0 0b02 	sub.w	fp, r0, r2
 801bf12:	f1ba 0f00 	cmp.w	sl, #0
 801bf16:	f040 80a3 	bne.w	801c060 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801bf1a:	f1bb 0f00 	cmp.w	fp, #0
 801bf1e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801bf22:	8b62      	ldrh	r2, [r4, #26]
 801bf24:	b22d      	sxth	r5, r5
 801bf26:	bfa8      	it	ge
 801bf28:	f04f 0a20 	movge.w	sl, #32
 801bf2c:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 801bf30:	8b21      	ldrh	r1, [r4, #24]
 801bf32:	bfb8      	it	lt
 801bf34:	f04f 39ff 	movlt.w	r9, #4294967295
 801bf38:	ebaa 0606 	sub.w	r6, sl, r6
 801bf3c:	bfa8      	it	ge
 801bf3e:	f04f 0901 	movge.w	r9, #1
 801bf42:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801bf46:	4431      	add	r1, r6
 801bf48:	fb06 2603 	mla	r6, r6, r3, r2
 801bf4c:	9a00      	ldr	r2, [sp, #0]
 801bf4e:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 801bf52:	b209      	sxth	r1, r1
 801bf54:	444a      	add	r2, r9
 801bf56:	b236      	sxth	r6, r6
 801bf58:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 801bf5c:	8321      	strh	r1, [r4, #24]
 801bf5e:	b217      	sxth	r7, r2
 801bf60:	8366      	strh	r6, [r4, #26]
 801bf62:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 801bf66:	45f4      	cmp	ip, lr
 801bf68:	f43f af32 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801bf6c:	4331      	orrs	r1, r6
 801bf6e:	d00b      	beq.n	801bf88 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801bf70:	2800      	cmp	r0, #0
 801bf72:	db09      	blt.n	801bf88 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801bf74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bf76:	4288      	cmp	r0, r1
 801bf78:	da06      	bge.n	801bf88 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801bf7a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801bf7e:	4288      	cmp	r0, r1
 801bf80:	d33b      	bcc.n	801bffa <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 801bf82:	2101      	movs	r1, #1
 801bf84:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801bf88:	f1aa 0610 	sub.w	r6, sl, #16
 801bf8c:	82e7      	strh	r7, [r4, #22]
 801bf8e:	2700      	movs	r7, #0
 801bf90:	82a5      	strh	r5, [r4, #20]
 801bf92:	0076      	lsls	r6, r6, #1
 801bf94:	8327      	strh	r7, [r4, #24]
 801bf96:	fb06 fc03 	mul.w	ip, r6, r3
 801bf9a:	b236      	sxth	r6, r6
 801bf9c:	8367      	strh	r7, [r4, #26]
 801bf9e:	fa0f fc8c 	sxth.w	ip, ip
 801bfa2:	ea46 010c 	orr.w	r1, r6, ip
 801bfa6:	9100      	str	r1, [sp, #0]
 801bfa8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bfaa:	428a      	cmp	r2, r1
 801bfac:	d046      	beq.n	801c03c <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 801bfae:	444a      	add	r2, r9
 801bfb0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801bfb4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801bfb8:	fa0f f882 	sxth.w	r8, r2
 801bfbc:	8326      	strh	r6, [r4, #24]
 801bfbe:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 801bfc2:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801bfc6:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 801bfca:	4570      	cmp	r0, lr
 801bfcc:	f43f af00 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801bfd0:	9800      	ldr	r0, [sp, #0]
 801bfd2:	b160      	cbz	r0, 801bfee <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801bfd4:	2900      	cmp	r1, #0
 801bfd6:	db0a      	blt.n	801bfee <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801bfd8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801bfda:	4281      	cmp	r1, r0
 801bfdc:	da07      	bge.n	801bfee <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801bfde:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801bfe2:	4288      	cmp	r0, r1
 801bfe4:	d319      	bcc.n	801c01a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 801bfe6:	f04f 0101 	mov.w	r1, #1
 801bfea:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801bfee:	82a5      	strh	r5, [r4, #20]
 801bff0:	f8a4 8016 	strh.w	r8, [r4, #22]
 801bff4:	8327      	strh	r7, [r4, #24]
 801bff6:	8367      	strh	r7, [r4, #26]
 801bff8:	e7d6      	b.n	801bfa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 801bffa:	f104 0614 	add.w	r6, r4, #20
 801bffe:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801c002:	ce03      	ldmia	r6!, {r0, r1}
 801c004:	f8cc 0000 	str.w	r0, [ip]
 801c008:	f8cc 1004 	str.w	r1, [ip, #4]
 801c00c:	6921      	ldr	r1, [r4, #16]
 801c00e:	3108      	adds	r1, #8
 801c010:	6121      	str	r1, [r4, #16]
 801c012:	68a1      	ldr	r1, [r4, #8]
 801c014:	3101      	adds	r1, #1
 801c016:	60a1      	str	r1, [r4, #8]
 801c018:	e7b6      	b.n	801bf88 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801c01a:	f104 0e14 	add.w	lr, r4, #20
 801c01e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c022:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801c026:	f8cb 0000 	str.w	r0, [fp]
 801c02a:	f8cb 1004 	str.w	r1, [fp, #4]
 801c02e:	6921      	ldr	r1, [r4, #16]
 801c030:	3108      	adds	r1, #8
 801c032:	6121      	str	r1, [r4, #16]
 801c034:	68a1      	ldr	r1, [r4, #8]
 801c036:	3101      	adds	r1, #1
 801c038:	60a1      	str	r1, [r4, #8]
 801c03a:	e7d8      	b.n	801bfee <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801c03c:	9a03      	ldr	r2, [sp, #12]
 801c03e:	8b61      	ldrh	r1, [r4, #26]
 801c040:	f1a2 0e20 	sub.w	lr, r2, #32
 801c044:	8b22      	ldrh	r2, [r4, #24]
 801c046:	44d6      	add	lr, sl
 801c048:	4472      	add	r2, lr
 801c04a:	fb0e 1303 	mla	r3, lr, r3, r1
 801c04e:	8322      	strh	r2, [r4, #24]
 801c050:	e68b      	b.n	801bd6a <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 801c052:	bf00      	nop
 801c054:	08021c83 	.word	0x08021c83
 801c058:	08021d04 	.word	0x08021d04
 801c05c:	08021cb4 	.word	0x08021cb4
 801c060:	f1bb 0f00 	cmp.w	fp, #0
 801c064:	f2c0 8124 	blt.w	801c2b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 801c068:	2201      	movs	r2, #1
 801c06a:	f1c6 0320 	rsb	r3, r6, #32
 801c06e:	920b      	str	r2, [sp, #44]	; 0x2c
 801c070:	2220      	movs	r2, #32
 801c072:	fb0a f303 	mul.w	r3, sl, r3
 801c076:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801c07a:	9202      	str	r2, [sp, #8]
 801c07c:	fb93 fcfb 	sdiv	ip, r3, fp
 801c080:	fb0b 331c 	mls	r3, fp, ip, r3
 801c084:	2b00      	cmp	r3, #0
 801c086:	9308      	str	r3, [sp, #32]
 801c088:	bfbe      	ittt	lt
 801c08a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801c08e:	445b      	addlt	r3, fp
 801c090:	9308      	strlt	r3, [sp, #32]
 801c092:	eb0c 0301 	add.w	r3, ip, r1
 801c096:	9301      	str	r3, [sp, #4]
 801c098:	115b      	asrs	r3, r3, #5
 801c09a:	9305      	str	r3, [sp, #20]
 801c09c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801c0a0:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 801c0a4:	461f      	mov	r7, r3
 801c0a6:	9b02      	ldr	r3, [sp, #8]
 801c0a8:	42b3      	cmp	r3, r6
 801c0aa:	f040 8117 	bne.w	801c2dc <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 801c0ae:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c0b2:	f9bd 3000 	ldrsh.w	r3, [sp]
 801c0b6:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 801c0ba:	42b9      	cmp	r1, r7
 801c0bc:	d016      	beq.n	801c0ec <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801c0be:	8b60      	ldrh	r0, [r4, #26]
 801c0c0:	8b21      	ldrh	r1, [r4, #24]
 801c0c2:	4301      	orrs	r1, r0
 801c0c4:	d00d      	beq.n	801c0e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801c0c6:	f1b8 0f00 	cmp.w	r8, #0
 801c0ca:	db0a      	blt.n	801c0e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801c0cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c0ce:	4541      	cmp	r1, r8
 801c0d0:	dd07      	ble.n	801c0e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801c0d2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801c0d6:	4288      	cmp	r0, r1
 801c0d8:	f0c0 80f3 	bcc.w	801c2c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 801c0dc:	2101      	movs	r1, #1
 801c0de:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801c0e2:	82e3      	strh	r3, [r4, #22]
 801c0e4:	2300      	movs	r3, #0
 801c0e6:	82a2      	strh	r2, [r4, #20]
 801c0e8:	8323      	strh	r3, [r4, #24]
 801c0ea:	8363      	strh	r3, [r4, #26]
 801c0ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0ee:	9a00      	ldr	r2, [sp, #0]
 801c0f0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801c0f4:	441a      	add	r2, r3
 801c0f6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c0fa:	4691      	mov	r9, r2
 801c0fc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801c100:	fa0f f589 	sxth.w	r5, r9
 801c104:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801c108:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 801c10c:	4281      	cmp	r1, r0
 801c10e:	d015      	beq.n	801c13c <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 801c110:	8b60      	ldrh	r0, [r4, #26]
 801c112:	8b21      	ldrh	r1, [r4, #24]
 801c114:	4301      	orrs	r1, r0
 801c116:	d00c      	beq.n	801c132 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801c118:	2a00      	cmp	r2, #0
 801c11a:	db0a      	blt.n	801c132 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801c11c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c11e:	428a      	cmp	r2, r1
 801c120:	da07      	bge.n	801c132 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801c122:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801c126:	4291      	cmp	r1, r2
 801c128:	f0c0 81ae 	bcc.w	801c488 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 801c12c:	2201      	movs	r2, #1
 801c12e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801c132:	82a3      	strh	r3, [r4, #20]
 801c134:	2300      	movs	r3, #0
 801c136:	82e5      	strh	r5, [r4, #22]
 801c138:	8323      	strh	r3, [r4, #24]
 801c13a:	8363      	strh	r3, [r4, #26]
 801c13c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c13e:	454b      	cmp	r3, r9
 801c140:	f000 808a 	beq.w	801c258 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 801c144:	ea4f 134a 	mov.w	r3, sl, lsl #5
 801c148:	fb93 f2fb 	sdiv	r2, r3, fp
 801c14c:	fb0b 3312 	mls	r3, fp, r2, r3
 801c150:	9205      	str	r2, [sp, #20]
 801c152:	2b00      	cmp	r3, #0
 801c154:	9307      	str	r3, [sp, #28]
 801c156:	da04      	bge.n	801c162 <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 801c158:	1e53      	subs	r3, r2, #1
 801c15a:	9305      	str	r3, [sp, #20]
 801c15c:	9b07      	ldr	r3, [sp, #28]
 801c15e:	445b      	add	r3, fp
 801c160:	9307      	str	r3, [sp, #28]
 801c162:	9b08      	ldr	r3, [sp, #32]
 801c164:	f04f 0a00 	mov.w	sl, #0
 801c168:	eba3 030b 	sub.w	r3, r3, fp
 801c16c:	9308      	str	r3, [sp, #32]
 801c16e:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 801c172:	f1c3 0320 	rsb	r3, r3, #32
 801c176:	930a      	str	r3, [sp, #40]	; 0x28
 801c178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c17a:	9b02      	ldr	r3, [sp, #8]
 801c17c:	1a9b      	subs	r3, r3, r2
 801c17e:	9309      	str	r3, [sp, #36]	; 0x24
 801c180:	9902      	ldr	r1, [sp, #8]
 801c182:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 801c186:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801c18a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c18e:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 801c192:	189b      	adds	r3, r3, r2
 801c194:	9308      	str	r3, [sp, #32]
 801c196:	bf57      	itett	pl
 801c198:	eba3 030b 	subpl.w	r3, r3, fp
 801c19c:	9b05      	ldrmi	r3, [sp, #20]
 801c19e:	9308      	strpl	r3, [sp, #32]
 801c1a0:	9b05      	ldrpl	r3, [sp, #20]
 801c1a2:	bf58      	it	pl
 801c1a4:	3301      	addpl	r3, #1
 801c1a6:	9300      	str	r3, [sp, #0]
 801c1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c1ac:	4413      	add	r3, r2
 801c1ae:	9301      	str	r3, [sp, #4]
 801c1b0:	115b      	asrs	r3, r3, #5
 801c1b2:	9306      	str	r3, [sp, #24]
 801c1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1b6:	428b      	cmp	r3, r1
 801c1b8:	f040 8180 	bne.w	801c4bc <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 801c1bc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801c1c0:	fa0f f389 	sxth.w	r3, r9
 801c1c4:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 801c1c8:	4541      	cmp	r1, r8
 801c1ca:	d017      	beq.n	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801c1cc:	8b60      	ldrh	r0, [r4, #26]
 801c1ce:	8b21      	ldrh	r1, [r4, #24]
 801c1d0:	4301      	orrs	r1, r0
 801c1d2:	d00d      	beq.n	801c1f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801c1d4:	2e00      	cmp	r6, #0
 801c1d6:	db0b      	blt.n	801c1f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801c1d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c1da:	42b1      	cmp	r1, r6
 801c1dc:	dd08      	ble.n	801c1f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801c1de:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801c1e2:	4288      	cmp	r0, r1
 801c1e4:	f0c0 815d 	bcc.w	801c4a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 801c1e8:	f04f 0101 	mov.w	r1, #1
 801c1ec:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801c1f0:	82a2      	strh	r2, [r4, #20]
 801c1f2:	82e3      	strh	r3, [r4, #22]
 801c1f4:	f8a4 a018 	strh.w	sl, [r4, #24]
 801c1f8:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801c1fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c1fe:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801c202:	4499      	add	r9, r3
 801c204:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801c208:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c20c:	fa0f f589 	sxth.w	r5, r9
 801c210:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801c214:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 801c218:	4281      	cmp	r1, r0
 801c21a:	f43f add9 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801c21e:	8b60      	ldrh	r0, [r4, #26]
 801c220:	8b21      	ldrh	r1, [r4, #24]
 801c222:	4301      	orrs	r1, r0
 801c224:	d00d      	beq.n	801c242 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801c226:	2a00      	cmp	r2, #0
 801c228:	db0b      	blt.n	801c242 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801c22a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c22c:	428a      	cmp	r2, r1
 801c22e:	da08      	bge.n	801c242 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801c230:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801c234:	4291      	cmp	r1, r2
 801c236:	f0c0 8228 	bcc.w	801c68a <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 801c23a:	f04f 0201 	mov.w	r2, #1
 801c23e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801c242:	82a3      	strh	r3, [r4, #20]
 801c244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c246:	82e5      	strh	r5, [r4, #22]
 801c248:	454b      	cmp	r3, r9
 801c24a:	f8a4 a018 	strh.w	sl, [r4, #24]
 801c24e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801c252:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c256:	d193      	bne.n	801c180 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 801c258:	9b02      	ldr	r3, [sp, #8]
 801c25a:	f1c3 0e20 	rsb	lr, r3, #32
 801c25e:	9b04      	ldr	r3, [sp, #16]
 801c260:	ea4f 1b63 	mov.w	fp, r3, asr #5
 801c264:	9b03      	ldr	r3, [sp, #12]
 801c266:	459e      	cmp	lr, r3
 801c268:	f040 8229 	bne.w	801c6be <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 801c26c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801c270:	fa0f f58b 	sxth.w	r5, fp
 801c274:	fa0f f289 	sxth.w	r2, r9
 801c278:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801c27c:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 801c280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c284:	4281      	cmp	r1, r0
 801c286:	f43f ae20 	beq.w	801beca <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801c28a:	8b60      	ldrh	r0, [r4, #26]
 801c28c:	8b21      	ldrh	r1, [r4, #24]
 801c28e:	4301      	orrs	r1, r0
 801c290:	d00c      	beq.n	801c2ac <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801c292:	2b00      	cmp	r3, #0
 801c294:	db0a      	blt.n	801c2ac <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801c296:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c298:	428b      	cmp	r3, r1
 801c29a:	da07      	bge.n	801c2ac <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801c29c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801c2a0:	4299      	cmp	r1, r3
 801c2a2:	f0c0 81ff 	bcc.w	801c6a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 801c2a6:	2301      	movs	r3, #1
 801c2a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801c2ac:	82a5      	strh	r5, [r4, #20]
 801c2ae:	e538      	b.n	801bd22 <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 801c2b0:	f04f 32ff 	mov.w	r2, #4294967295
 801c2b4:	fb0a f306 	mul.w	r3, sl, r6
 801c2b8:	f1cb 0b00 	rsb	fp, fp, #0
 801c2bc:	920b      	str	r2, [sp, #44]	; 0x2c
 801c2be:	2200      	movs	r2, #0
 801c2c0:	e6d9      	b.n	801c076 <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 801c2c2:	f104 0514 	add.w	r5, r4, #20
 801c2c6:	6926      	ldr	r6, [r4, #16]
 801c2c8:	cd03      	ldmia	r5!, {r0, r1}
 801c2ca:	6030      	str	r0, [r6, #0]
 801c2cc:	6071      	str	r1, [r6, #4]
 801c2ce:	6921      	ldr	r1, [r4, #16]
 801c2d0:	3108      	adds	r1, #8
 801c2d2:	6121      	str	r1, [r4, #16]
 801c2d4:	68a1      	ldr	r1, [r4, #8]
 801c2d6:	3101      	adds	r1, #1
 801c2d8:	60a1      	str	r1, [r4, #8]
 801c2da:	e702      	b.n	801c0e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801c2dc:	9b01      	ldr	r3, [sp, #4]
 801c2de:	f001 011f 	and.w	r1, r1, #31
 801c2e2:	8b20      	ldrh	r0, [r4, #24]
 801c2e4:	f003 031f 	and.w	r3, r3, #31
 801c2e8:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 801c2ec:	930d      	str	r3, [sp, #52]	; 0x34
 801c2ee:	9b02      	ldr	r3, [sp, #8]
 801c2f0:	1b9a      	subs	r2, r3, r6
 801c2f2:	9b05      	ldr	r3, [sp, #20]
 801c2f4:	42ab      	cmp	r3, r5
 801c2f6:	d107      	bne.n	801c308 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 801c2f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2fa:	4410      	add	r0, r2
 801c2fc:	4419      	add	r1, r3
 801c2fe:	8320      	strh	r0, [r4, #24]
 801c300:	fb02 9201 	mla	r2, r2, r1, r9
 801c304:	8362      	strh	r2, [r4, #26]
 801c306:	e6f1      	b.n	801c0ec <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801c308:	f1bc 0f00 	cmp.w	ip, #0
 801c30c:	f2c0 8093 	blt.w	801c436 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 801c310:	f1c1 0320 	rsb	r3, r1, #32
 801c314:	435a      	muls	r2, r3
 801c316:	2301      	movs	r3, #1
 801c318:	9309      	str	r3, [sp, #36]	; 0x24
 801c31a:	2320      	movs	r3, #32
 801c31c:	9307      	str	r3, [sp, #28]
 801c31e:	9b07      	ldr	r3, [sp, #28]
 801c320:	fb92 fefc 	sdiv	lr, r2, ip
 801c324:	fb0c 221e 	mls	r2, ip, lr, r2
 801c328:	4419      	add	r1, r3
 801c32a:	2a00      	cmp	r2, #0
 801c32c:	bfbc      	itt	lt
 801c32e:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801c332:	4462      	addlt	r2, ip
 801c334:	fb0e 9101 	mla	r1, lr, r1, r9
 801c338:	4470      	add	r0, lr
 801c33a:	b20b      	sxth	r3, r1
 801c33c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c33e:	b200      	sxth	r0, r0
 801c340:	440d      	add	r5, r1
 801c342:	f9bd 1000 	ldrsh.w	r1, [sp]
 801c346:	8320      	strh	r0, [r4, #24]
 801c348:	fa0f f985 	sxth.w	r9, r5
 801c34c:	9106      	str	r1, [sp, #24]
 801c34e:	0409      	lsls	r1, r1, #16
 801c350:	8363      	strh	r3, [r4, #26]
 801c352:	910a      	str	r1, [sp, #40]	; 0x28
 801c354:	4449      	add	r1, r9
 801c356:	42b9      	cmp	r1, r7
 801c358:	f43f ad3a 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801c35c:	4303      	orrs	r3, r0
 801c35e:	d00c      	beq.n	801c37a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801c360:	f1b8 0f00 	cmp.w	r8, #0
 801c364:	db09      	blt.n	801c37a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801c366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c368:	4543      	cmp	r3, r8
 801c36a:	dd06      	ble.n	801c37a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801c36c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801c370:	4299      	cmp	r1, r3
 801c372:	d368      	bcc.n	801c446 <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 801c374:	2301      	movs	r3, #1
 801c376:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801c37a:	9b06      	ldr	r3, [sp, #24]
 801c37c:	4476      	add	r6, lr
 801c37e:	f8a4 9014 	strh.w	r9, [r4, #20]
 801c382:	82e3      	strh	r3, [r4, #22]
 801c384:	2300      	movs	r3, #0
 801c386:	8323      	strh	r3, [r4, #24]
 801c388:	8363      	strh	r3, [r4, #26]
 801c38a:	9b05      	ldr	r3, [sp, #20]
 801c38c:	42ab      	cmp	r3, r5
 801c38e:	d048      	beq.n	801c422 <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 801c390:	9b02      	ldr	r3, [sp, #8]
 801c392:	eba2 020c 	sub.w	r2, r2, ip
 801c396:	1b9b      	subs	r3, r3, r6
 801c398:	4473      	add	r3, lr
 801c39a:	015b      	lsls	r3, r3, #5
 801c39c:	fb93 f8fc 	sdiv	r8, r3, ip
 801c3a0:	fb0c 3318 	mls	r3, ip, r8, r3
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	bfbc      	itt	lt
 801c3a8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c3ac:	4463      	addlt	r3, ip
 801c3ae:	f108 0101 	add.w	r1, r8, #1
 801c3b2:	910f      	str	r1, [sp, #60]	; 0x3c
 801c3b4:	18d2      	adds	r2, r2, r3
 801c3b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c3b8:	bf56      	itet	pl
 801c3ba:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 801c3bc:	4640      	movmi	r0, r8
 801c3be:	eba2 020c 	subpl.w	r2, r2, ip
 801c3c2:	fa0f fe80 	sxth.w	lr, r0
 801c3c6:	4406      	add	r6, r0
 801c3c8:	0141      	lsls	r1, r0, #5
 801c3ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c3cc:	f8a4 e018 	strh.w	lr, [r4, #24]
 801c3d0:	4405      	add	r5, r0
 801c3d2:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801c3d6:	b209      	sxth	r1, r1
 801c3d8:	fa0f f985 	sxth.w	r9, r5
 801c3dc:	4438      	add	r0, r7
 801c3de:	8361      	strh	r1, [r4, #26]
 801c3e0:	444f      	add	r7, r9
 801c3e2:	42b8      	cmp	r0, r7
 801c3e4:	f43f acf4 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801c3e8:	ea5e 0101 	orrs.w	r1, lr, r1
 801c3ec:	d00e      	beq.n	801c40c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801c3ee:	9906      	ldr	r1, [sp, #24]
 801c3f0:	2900      	cmp	r1, #0
 801c3f2:	db0b      	blt.n	801c40c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801c3f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c3f6:	9806      	ldr	r0, [sp, #24]
 801c3f8:	4288      	cmp	r0, r1
 801c3fa:	da07      	bge.n	801c40c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801c3fc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801c400:	4288      	cmp	r0, r1
 801c402:	d330      	bcc.n	801c466 <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 801c404:	f04f 0101 	mov.w	r1, #1
 801c408:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801c40c:	9906      	ldr	r1, [sp, #24]
 801c40e:	f8a4 9014 	strh.w	r9, [r4, #20]
 801c412:	82e1      	strh	r1, [r4, #22]
 801c414:	f04f 0100 	mov.w	r1, #0
 801c418:	8321      	strh	r1, [r4, #24]
 801c41a:	8361      	strh	r1, [r4, #26]
 801c41c:	9905      	ldr	r1, [sp, #20]
 801c41e:	42a9      	cmp	r1, r5
 801c420:	d1c8      	bne.n	801c3b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 801c422:	9b02      	ldr	r3, [sp, #8]
 801c424:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c426:	1b9e      	subs	r6, r3, r6
 801c428:	9b07      	ldr	r3, [sp, #28]
 801c42a:	3120      	adds	r1, #32
 801c42c:	8326      	strh	r6, [r4, #24]
 801c42e:	1ac9      	subs	r1, r1, r3
 801c430:	434e      	muls	r6, r1
 801c432:	8366      	strh	r6, [r4, #26]
 801c434:	e65a      	b.n	801c0ec <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801c436:	f04f 33ff 	mov.w	r3, #4294967295
 801c43a:	434a      	muls	r2, r1
 801c43c:	f1cc 0c00 	rsb	ip, ip, #0
 801c440:	9309      	str	r3, [sp, #36]	; 0x24
 801c442:	2300      	movs	r3, #0
 801c444:	e76a      	b.n	801c31c <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 801c446:	f104 0314 	add.w	r3, r4, #20
 801c44a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801c44e:	cb03      	ldmia	r3!, {r0, r1}
 801c450:	f8c8 0000 	str.w	r0, [r8]
 801c454:	f8c8 1004 	str.w	r1, [r8, #4]
 801c458:	6923      	ldr	r3, [r4, #16]
 801c45a:	3308      	adds	r3, #8
 801c45c:	6123      	str	r3, [r4, #16]
 801c45e:	68a3      	ldr	r3, [r4, #8]
 801c460:	3301      	adds	r3, #1
 801c462:	60a3      	str	r3, [r4, #8]
 801c464:	e789      	b.n	801c37a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801c466:	6921      	ldr	r1, [r4, #16]
 801c468:	f104 0e14 	add.w	lr, r4, #20
 801c46c:	910e      	str	r1, [sp, #56]	; 0x38
 801c46e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801c470:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801c474:	6038      	str	r0, [r7, #0]
 801c476:	4638      	mov	r0, r7
 801c478:	6079      	str	r1, [r7, #4]
 801c47a:	6921      	ldr	r1, [r4, #16]
 801c47c:	3108      	adds	r1, #8
 801c47e:	6121      	str	r1, [r4, #16]
 801c480:	68a1      	ldr	r1, [r4, #8]
 801c482:	3101      	adds	r1, #1
 801c484:	60a1      	str	r1, [r4, #8]
 801c486:	e7c1      	b.n	801c40c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801c488:	f104 0214 	add.w	r2, r4, #20
 801c48c:	6926      	ldr	r6, [r4, #16]
 801c48e:	ca03      	ldmia	r2!, {r0, r1}
 801c490:	6030      	str	r0, [r6, #0]
 801c492:	6071      	str	r1, [r6, #4]
 801c494:	6922      	ldr	r2, [r4, #16]
 801c496:	3208      	adds	r2, #8
 801c498:	6122      	str	r2, [r4, #16]
 801c49a:	68a2      	ldr	r2, [r4, #8]
 801c49c:	3201      	adds	r2, #1
 801c49e:	60a2      	str	r2, [r4, #8]
 801c4a0:	e647      	b.n	801c132 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801c4a2:	f104 0514 	add.w	r5, r4, #20
 801c4a6:	6926      	ldr	r6, [r4, #16]
 801c4a8:	cd03      	ldmia	r5!, {r0, r1}
 801c4aa:	6030      	str	r0, [r6, #0]
 801c4ac:	6071      	str	r1, [r6, #4]
 801c4ae:	6921      	ldr	r1, [r4, #16]
 801c4b0:	3108      	adds	r1, #8
 801c4b2:	6121      	str	r1, [r4, #16]
 801c4b4:	68a1      	ldr	r1, [r4, #8]
 801c4b6:	3101      	adds	r1, #1
 801c4b8:	60a1      	str	r1, [r4, #8]
 801c4ba:	e699      	b.n	801c1f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801c4bc:	9b01      	ldr	r3, [sp, #4]
 801c4be:	ea4f 176c 	mov.w	r7, ip, asr #5
 801c4c2:	8b20      	ldrh	r0, [r4, #24]
 801c4c4:	f00c 0c1f 	and.w	ip, ip, #31
 801c4c8:	f003 031f 	and.w	r3, r3, #31
 801c4cc:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 801c4d0:	9310      	str	r3, [sp, #64]	; 0x40
 801c4d2:	9b06      	ldr	r3, [sp, #24]
 801c4d4:	429f      	cmp	r7, r3
 801c4d6:	d10a      	bne.n	801c4ee <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 801c4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4da:	4418      	add	r0, r3
 801c4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c4de:	449c      	add	ip, r3
 801c4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4e2:	8320      	strh	r0, [r4, #24]
 801c4e4:	fb03 ee0c 	mla	lr, r3, ip, lr
 801c4e8:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801c4ec:	e686      	b.n	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801c4ee:	9b00      	ldr	r3, [sp, #0]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	f2c0 80a0 	blt.w	801c636 <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 801c4f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c4f8:	f1cc 0320 	rsb	r3, ip, #32
 801c4fc:	434b      	muls	r3, r1
 801c4fe:	2101      	movs	r1, #1
 801c500:	910e      	str	r1, [sp, #56]	; 0x38
 801c502:	2120      	movs	r1, #32
 801c504:	9a00      	ldr	r2, [sp, #0]
 801c506:	910d      	str	r1, [sp, #52]	; 0x34
 801c508:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c50a:	fb93 f5f2 	sdiv	r5, r3, r2
 801c50e:	fb02 3315 	mls	r3, r2, r5, r3
 801c512:	448c      	add	ip, r1
 801c514:	2b00      	cmp	r3, #0
 801c516:	bfbc      	itt	lt
 801c518:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801c51c:	189b      	addlt	r3, r3, r2
 801c51e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c520:	fb05 ec0c 	mla	ip, r5, ip, lr
 801c524:	4428      	add	r0, r5
 801c526:	4417      	add	r7, r2
 801c528:	fa0f f18c 	sxth.w	r1, ip
 801c52c:	fa0f fc89 	sxth.w	ip, r9
 801c530:	fa0f fe87 	sxth.w	lr, r7
 801c534:	8361      	strh	r1, [r4, #26]
 801c536:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801c53a:	b200      	sxth	r0, r0
 801c53c:	920f      	str	r2, [sp, #60]	; 0x3c
 801c53e:	4472      	add	r2, lr
 801c540:	8320      	strh	r0, [r4, #24]
 801c542:	4542      	cmp	r2, r8
 801c544:	f43f ac44 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801c548:	ea50 0201 	orrs.w	r2, r0, r1
 801c54c:	d00c      	beq.n	801c568 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801c54e:	2e00      	cmp	r6, #0
 801c550:	db0a      	blt.n	801c568 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801c552:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c554:	42b1      	cmp	r1, r6
 801c556:	dd07      	ble.n	801c568 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801c558:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801c55c:	4288      	cmp	r0, r1
 801c55e:	d375      	bcc.n	801c64c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 801c560:	f04f 0201 	mov.w	r2, #1
 801c564:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801c568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c56a:	f8a4 e014 	strh.w	lr, [r4, #20]
 801c56e:	1956      	adds	r6, r2, r5
 801c570:	9a06      	ldr	r2, [sp, #24]
 801c572:	f8a4 c016 	strh.w	ip, [r4, #22]
 801c576:	42ba      	cmp	r2, r7
 801c578:	f8a4 a018 	strh.w	sl, [r4, #24]
 801c57c:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801c580:	d04c      	beq.n	801c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 801c582:	9a02      	ldr	r2, [sp, #8]
 801c584:	1b91      	subs	r1, r2, r6
 801c586:	9a00      	ldr	r2, [sp, #0]
 801c588:	440d      	add	r5, r1
 801c58a:	016d      	lsls	r5, r5, #5
 801c58c:	fb95 fef2 	sdiv	lr, r5, r2
 801c590:	fb02 551e 	mls	r5, r2, lr, r5
 801c594:	2d00      	cmp	r5, #0
 801c596:	bfbc      	itt	lt
 801c598:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801c59c:	18ad      	addlt	r5, r5, r2
 801c59e:	9a00      	ldr	r2, [sp, #0]
 801c5a0:	1a9b      	subs	r3, r3, r2
 801c5a2:	f10e 0201 	add.w	r2, lr, #1
 801c5a6:	9213      	str	r2, [sp, #76]	; 0x4c
 801c5a8:	195b      	adds	r3, r3, r5
 801c5aa:	bf57      	itett	pl
 801c5ac:	9a00      	ldrpl	r2, [sp, #0]
 801c5ae:	4670      	movmi	r0, lr
 801c5b0:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 801c5b2:	1a9b      	subpl	r3, r3, r2
 801c5b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c5b6:	fa0f f880 	sxth.w	r8, r0
 801c5ba:	4406      	add	r6, r0
 801c5bc:	4417      	add	r7, r2
 801c5be:	0141      	lsls	r1, r0, #5
 801c5c0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801c5c4:	b23a      	sxth	r2, r7
 801c5c6:	f8a4 8018 	strh.w	r8, [r4, #24]
 801c5ca:	b209      	sxth	r1, r1
 801c5cc:	9211      	str	r2, [sp, #68]	; 0x44
 801c5ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c5d0:	8361      	strh	r1, [r4, #26]
 801c5d2:	1882      	adds	r2, r0, r2
 801c5d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c5d6:	9212      	str	r2, [sp, #72]	; 0x48
 801c5d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5da:	4402      	add	r2, r0
 801c5dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c5de:	4290      	cmp	r0, r2
 801c5e0:	f43f abf6 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801c5e4:	ea58 0201 	orrs.w	r2, r8, r1
 801c5e8:	d00d      	beq.n	801c606 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801c5ea:	f1bc 0f00 	cmp.w	ip, #0
 801c5ee:	db0a      	blt.n	801c606 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801c5f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c5f2:	458c      	cmp	ip, r1
 801c5f4:	da07      	bge.n	801c606 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801c5f6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801c5fa:	4288      	cmp	r0, r1
 801c5fc:	d336      	bcc.n	801c66c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 801c5fe:	f04f 0201 	mov.w	r2, #1
 801c602:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801c606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c608:	f8a4 c016 	strh.w	ip, [r4, #22]
 801c60c:	82a2      	strh	r2, [r4, #20]
 801c60e:	9a06      	ldr	r2, [sp, #24]
 801c610:	f8a4 a018 	strh.w	sl, [r4, #24]
 801c614:	42ba      	cmp	r2, r7
 801c616:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801c61a:	d1c5      	bne.n	801c5a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 801c61c:	9b02      	ldr	r3, [sp, #8]
 801c61e:	1b9e      	subs	r6, r3, r6
 801c620:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c622:	f103 0c20 	add.w	ip, r3, #32
 801c626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c628:	8326      	strh	r6, [r4, #24]
 801c62a:	ebac 0c03 	sub.w	ip, ip, r3
 801c62e:	fb06 f60c 	mul.w	r6, r6, ip
 801c632:	8366      	strh	r6, [r4, #26]
 801c634:	e5e2      	b.n	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801c636:	9a00      	ldr	r2, [sp, #0]
 801c638:	f04f 31ff 	mov.w	r1, #4294967295
 801c63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c63e:	4252      	negs	r2, r2
 801c640:	910e      	str	r1, [sp, #56]	; 0x38
 801c642:	fb03 f30c 	mul.w	r3, r3, ip
 801c646:	2100      	movs	r1, #0
 801c648:	9200      	str	r2, [sp, #0]
 801c64a:	e75b      	b.n	801c504 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 801c64c:	f104 0614 	add.w	r6, r4, #20
 801c650:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801c654:	ce03      	ldmia	r6!, {r0, r1}
 801c656:	f8c8 0000 	str.w	r0, [r8]
 801c65a:	f8c8 1004 	str.w	r1, [r8, #4]
 801c65e:	6921      	ldr	r1, [r4, #16]
 801c660:	3108      	adds	r1, #8
 801c662:	6121      	str	r1, [r4, #16]
 801c664:	68a1      	ldr	r1, [r4, #8]
 801c666:	3101      	adds	r1, #1
 801c668:	60a1      	str	r1, [r4, #8]
 801c66a:	e77d      	b.n	801c568 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801c66c:	f104 0814 	add.w	r8, r4, #20
 801c670:	6922      	ldr	r2, [r4, #16]
 801c672:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801c676:	9212      	str	r2, [sp, #72]	; 0x48
 801c678:	6010      	str	r0, [r2, #0]
 801c67a:	6051      	str	r1, [r2, #4]
 801c67c:	6921      	ldr	r1, [r4, #16]
 801c67e:	3108      	adds	r1, #8
 801c680:	6121      	str	r1, [r4, #16]
 801c682:	68a1      	ldr	r1, [r4, #8]
 801c684:	3101      	adds	r1, #1
 801c686:	60a1      	str	r1, [r4, #8]
 801c688:	e7bd      	b.n	801c606 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801c68a:	f104 0214 	add.w	r2, r4, #20
 801c68e:	6926      	ldr	r6, [r4, #16]
 801c690:	ca03      	ldmia	r2!, {r0, r1}
 801c692:	6030      	str	r0, [r6, #0]
 801c694:	6071      	str	r1, [r6, #4]
 801c696:	6922      	ldr	r2, [r4, #16]
 801c698:	3208      	adds	r2, #8
 801c69a:	6122      	str	r2, [r4, #16]
 801c69c:	68a2      	ldr	r2, [r4, #8]
 801c69e:	3201      	adds	r2, #1
 801c6a0:	60a2      	str	r2, [r4, #8]
 801c6a2:	e5ce      	b.n	801c242 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801c6a4:	f104 0314 	add.w	r3, r4, #20
 801c6a8:	6926      	ldr	r6, [r4, #16]
 801c6aa:	cb03      	ldmia	r3!, {r0, r1}
 801c6ac:	6030      	str	r0, [r6, #0]
 801c6ae:	6071      	str	r1, [r6, #4]
 801c6b0:	6923      	ldr	r3, [r4, #16]
 801c6b2:	3308      	adds	r3, #8
 801c6b4:	6123      	str	r3, [r4, #16]
 801c6b6:	68a3      	ldr	r3, [r4, #8]
 801c6b8:	3301      	adds	r3, #1
 801c6ba:	60a3      	str	r3, [r4, #8]
 801c6bc:	e5f6      	b.n	801c2ac <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801c6be:	9b01      	ldr	r3, [sp, #4]
 801c6c0:	8b20      	ldrh	r0, [r4, #24]
 801c6c2:	ea4f 1c63 	mov.w	ip, r3, asr #5
 801c6c6:	f003 021f 	and.w	r2, r3, #31
 801c6ca:	9b04      	ldr	r3, [sp, #16]
 801c6cc:	45dc      	cmp	ip, fp
 801c6ce:	8b66      	ldrh	r6, [r4, #26]
 801c6d0:	f003 031f 	and.w	r3, r3, #31
 801c6d4:	9305      	str	r3, [sp, #20]
 801c6d6:	9b03      	ldr	r3, [sp, #12]
 801c6d8:	eba3 050e 	sub.w	r5, r3, lr
 801c6dc:	d108      	bne.n	801c6f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 801c6de:	9b05      	ldr	r3, [sp, #20]
 801c6e0:	4428      	add	r0, r5
 801c6e2:	441a      	add	r2, r3
 801c6e4:	8320      	strh	r0, [r4, #24]
 801c6e6:	fb05 6502 	mla	r5, r5, r2, r6
 801c6ea:	8365      	strh	r5, [r4, #26]
 801c6ec:	f7ff bbed 	b.w	801beca <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801c6f0:	9b04      	ldr	r3, [sp, #16]
 801c6f2:	9901      	ldr	r1, [sp, #4]
 801c6f4:	1a5b      	subs	r3, r3, r1
 801c6f6:	9300      	str	r3, [sp, #0]
 801c6f8:	f100 809c 	bmi.w	801c834 <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 801c6fc:	f1c2 0120 	rsb	r1, r2, #32
 801c700:	434d      	muls	r5, r1
 801c702:	2101      	movs	r1, #1
 801c704:	9102      	str	r1, [sp, #8]
 801c706:	2120      	movs	r1, #32
 801c708:	9b00      	ldr	r3, [sp, #0]
 801c70a:	9101      	str	r1, [sp, #4]
 801c70c:	9901      	ldr	r1, [sp, #4]
 801c70e:	fb95 f7f3 	sdiv	r7, r5, r3
 801c712:	fb03 5517 	mls	r5, r3, r7, r5
 801c716:	440a      	add	r2, r1
 801c718:	2d00      	cmp	r5, #0
 801c71a:	bfbc      	itt	lt
 801c71c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801c720:	18ed      	addlt	r5, r5, r3
 801c722:	fb07 6202 	mla	r2, r7, r2, r6
 801c726:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 801c72a:	4438      	add	r0, r7
 801c72c:	b211      	sxth	r1, r2
 801c72e:	9a02      	ldr	r2, [sp, #8]
 801c730:	b200      	sxth	r0, r0
 801c732:	4494      	add	ip, r2
 801c734:	fa0f f289 	sxth.w	r2, r9
 801c738:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801c73c:	0413      	lsls	r3, r2, #16
 801c73e:	8320      	strh	r0, [r4, #24]
 801c740:	fa0f f88c 	sxth.w	r8, ip
 801c744:	8361      	strh	r1, [r4, #26]
 801c746:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 801c74a:	9304      	str	r3, [sp, #16]
 801c74c:	eb08 0a03 	add.w	sl, r8, r3
 801c750:	45d1      	cmp	r9, sl
 801c752:	f43f ab3d 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801c756:	ea50 0301 	orrs.w	r3, r0, r1
 801c75a:	d00b      	beq.n	801c774 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801c75c:	2e00      	cmp	r6, #0
 801c75e:	db09      	blt.n	801c774 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801c760:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c762:	428e      	cmp	r6, r1
 801c764:	da06      	bge.n	801c774 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801c766:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801c76a:	4288      	cmp	r0, r1
 801c76c:	d36b      	bcc.n	801c846 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 801c76e:	2101      	movs	r1, #1
 801c770:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801c774:	2100      	movs	r1, #0
 801c776:	45e3      	cmp	fp, ip
 801c778:	f8a4 8014 	strh.w	r8, [r4, #20]
 801c77c:	44be      	add	lr, r7
 801c77e:	82e2      	strh	r2, [r4, #22]
 801c780:	8321      	strh	r1, [r4, #24]
 801c782:	8361      	strh	r1, [r4, #26]
 801c784:	d047      	beq.n	801c816 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 801c786:	9b03      	ldr	r3, [sp, #12]
 801c788:	f04f 0900 	mov.w	r9, #0
 801c78c:	eba3 060e 	sub.w	r6, r3, lr
 801c790:	9b00      	ldr	r3, [sp, #0]
 801c792:	443e      	add	r6, r7
 801c794:	0176      	lsls	r6, r6, #5
 801c796:	fb96 f7f3 	sdiv	r7, r6, r3
 801c79a:	fb03 6617 	mls	r6, r3, r7, r6
 801c79e:	428e      	cmp	r6, r1
 801c7a0:	bfbc      	itt	lt
 801c7a2:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801c7a6:	18f6      	addlt	r6, r6, r3
 801c7a8:	9b00      	ldr	r3, [sp, #0]
 801c7aa:	1aed      	subs	r5, r5, r3
 801c7ac:	1c7b      	adds	r3, r7, #1
 801c7ae:	9307      	str	r3, [sp, #28]
 801c7b0:	19ad      	adds	r5, r5, r6
 801c7b2:	bf57      	itett	pl
 801c7b4:	9b00      	ldrpl	r3, [sp, #0]
 801c7b6:	4638      	movmi	r0, r7
 801c7b8:	9807      	ldrpl	r0, [sp, #28]
 801c7ba:	1aed      	subpl	r5, r5, r3
 801c7bc:	9b02      	ldr	r3, [sp, #8]
 801c7be:	fa0f f880 	sxth.w	r8, r0
 801c7c2:	4486      	add	lr, r0
 801c7c4:	449c      	add	ip, r3
 801c7c6:	0141      	lsls	r1, r0, #5
 801c7c8:	9b04      	ldr	r3, [sp, #16]
 801c7ca:	fa0f fa8c 	sxth.w	sl, ip
 801c7ce:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801c7d2:	b209      	sxth	r1, r1
 801c7d4:	f8a4 8018 	strh.w	r8, [r4, #24]
 801c7d8:	4418      	add	r0, r3
 801c7da:	4453      	add	r3, sl
 801c7dc:	8361      	strh	r1, [r4, #26]
 801c7de:	4298      	cmp	r0, r3
 801c7e0:	f43f aaf6 	beq.w	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801c7e4:	ea58 0301 	orrs.w	r3, r8, r1
 801c7e8:	d00c      	beq.n	801c804 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801c7ea:	2a00      	cmp	r2, #0
 801c7ec:	db0a      	blt.n	801c804 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801c7ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c7f0:	428a      	cmp	r2, r1
 801c7f2:	da07      	bge.n	801c804 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801c7f4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801c7f8:	4288      	cmp	r0, r1
 801c7fa:	d334      	bcc.n	801c866 <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 801c7fc:	f04f 0301 	mov.w	r3, #1
 801c800:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801c804:	45e3      	cmp	fp, ip
 801c806:	f8a4 a014 	strh.w	sl, [r4, #20]
 801c80a:	82e2      	strh	r2, [r4, #22]
 801c80c:	f8a4 9018 	strh.w	r9, [r4, #24]
 801c810:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c814:	d1cc      	bne.n	801c7b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 801c816:	9b03      	ldr	r3, [sp, #12]
 801c818:	9e05      	ldr	r6, [sp, #20]
 801c81a:	eba3 0e0e 	sub.w	lr, r3, lr
 801c81e:	9b01      	ldr	r3, [sp, #4]
 801c820:	3620      	adds	r6, #32
 801c822:	f8a4 e018 	strh.w	lr, [r4, #24]
 801c826:	1af6      	subs	r6, r6, r3
 801c828:	fb0e fe06 	mul.w	lr, lr, r6
 801c82c:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801c830:	f7ff bb4b 	b.w	801beca <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801c834:	9b00      	ldr	r3, [sp, #0]
 801c836:	f04f 31ff 	mov.w	r1, #4294967295
 801c83a:	4355      	muls	r5, r2
 801c83c:	425b      	negs	r3, r3
 801c83e:	9102      	str	r1, [sp, #8]
 801c840:	2100      	movs	r1, #0
 801c842:	9300      	str	r3, [sp, #0]
 801c844:	e760      	b.n	801c708 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 801c846:	f104 0614 	add.w	r6, r4, #20
 801c84a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c84e:	ce03      	ldmia	r6!, {r0, r1}
 801c850:	f8c9 0000 	str.w	r0, [r9]
 801c854:	f8c9 1004 	str.w	r1, [r9, #4]
 801c858:	6921      	ldr	r1, [r4, #16]
 801c85a:	3108      	adds	r1, #8
 801c85c:	6121      	str	r1, [r4, #16]
 801c85e:	68a1      	ldr	r1, [r4, #8]
 801c860:	3101      	adds	r1, #1
 801c862:	60a1      	str	r1, [r4, #8]
 801c864:	e786      	b.n	801c774 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801c866:	f104 0814 	add.w	r8, r4, #20
 801c86a:	6923      	ldr	r3, [r4, #16]
 801c86c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801c870:	9306      	str	r3, [sp, #24]
 801c872:	6018      	str	r0, [r3, #0]
 801c874:	6059      	str	r1, [r3, #4]
 801c876:	6921      	ldr	r1, [r4, #16]
 801c878:	3108      	adds	r1, #8
 801c87a:	6121      	str	r1, [r4, #16]
 801c87c:	68a1      	ldr	r1, [r4, #8]
 801c87e:	3101      	adds	r1, #1
 801c880:	60a1      	str	r1, [r4, #8]
 801c882:	e7bf      	b.n	801c804 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

0801c884 <_ZN8touchgfx7Outline6lineToEii>:
 801c884:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c886:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801c888:	4604      	mov	r4, r0
 801c88a:	460d      	mov	r5, r1
 801c88c:	4616      	mov	r6, r2
 801c88e:	079b      	lsls	r3, r3, #30
 801c890:	d526      	bpl.n	801c8e0 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801c892:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801c896:	ea85 0001 	eor.w	r0, r5, r1
 801c89a:	ea86 0302 	eor.w	r3, r6, r2
 801c89e:	4303      	orrs	r3, r0
 801c8a0:	d01e      	beq.n	801c8e0 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801c8a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c8a4:	114b      	asrs	r3, r1, #5
 801c8a6:	9600      	str	r6, [sp, #0]
 801c8a8:	4283      	cmp	r3, r0
 801c8aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801c8ac:	bfb8      	it	lt
 801c8ae:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801c8b0:	3301      	adds	r3, #1
 801c8b2:	4283      	cmp	r3, r0
 801c8b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c8b6:	bfc8      	it	gt
 801c8b8:	6363      	strgt	r3, [r4, #52]	; 0x34
 801c8ba:	116b      	asrs	r3, r5, #5
 801c8bc:	4283      	cmp	r3, r0
 801c8be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801c8c0:	bfb8      	it	lt
 801c8c2:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801c8c4:	3301      	adds	r3, #1
 801c8c6:	4283      	cmp	r3, r0
 801c8c8:	4620      	mov	r0, r4
 801c8ca:	bfc8      	it	gt
 801c8cc:	6363      	strgt	r3, [r4, #52]	; 0x34
 801c8ce:	462b      	mov	r3, r5
 801c8d0:	f7ff f9c6 	bl	801bc60 <_ZN8touchgfx7Outline10renderLineEiiii>
 801c8d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c8d6:	f043 0301 	orr.w	r3, r3, #1
 801c8da:	e9c4 5607 	strd	r5, r6, [r4, #28]
 801c8de:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c8e0:	b002      	add	sp, #8
 801c8e2:	bd70      	pop	{r4, r5, r6, pc}

0801c8e4 <_ZN8touchgfx7Outline6moveToEii>:
 801c8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8e6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801c8e8:	4615      	mov	r5, r2
 801c8ea:	4604      	mov	r4, r0
 801c8ec:	460e      	mov	r6, r1
 801c8ee:	079a      	lsls	r2, r3, #30
 801c8f0:	d401      	bmi.n	801c8f6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801c8f2:	f7ff f96f 	bl	801bbd4 <_ZN8touchgfx7Outline5resetEv>
 801c8f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c8f8:	07db      	lsls	r3, r3, #31
 801c8fa:	d504      	bpl.n	801c906 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801c8fc:	4620      	mov	r0, r4
 801c8fe:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 801c902:	f7ff ffbf 	bl	801c884 <_ZN8touchgfx7Outline6lineToEii>
 801c906:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801c90a:	f346 1c4f 	sbfx	ip, r6, #5, #16
 801c90e:	f345 174f 	sbfx	r7, r5, #5, #16
 801c912:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801c916:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 801c91a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 801c91e:	428a      	cmp	r2, r1
 801c920:	d015      	beq.n	801c94e <_ZN8touchgfx7Outline6moveToEii+0x6a>
 801c922:	8b61      	ldrh	r1, [r4, #26]
 801c924:	8b22      	ldrh	r2, [r4, #24]
 801c926:	430a      	orrs	r2, r1
 801c928:	d00b      	beq.n	801c942 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	db09      	blt.n	801c942 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801c92e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801c930:	4293      	cmp	r3, r2
 801c932:	da06      	bge.n	801c942 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801c934:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 801c938:	429a      	cmp	r2, r3
 801c93a:	d30d      	bcc.n	801c958 <_ZN8touchgfx7Outline6moveToEii+0x74>
 801c93c:	2301      	movs	r3, #1
 801c93e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801c942:	2300      	movs	r3, #0
 801c944:	f8a4 c014 	strh.w	ip, [r4, #20]
 801c948:	82e7      	strh	r7, [r4, #22]
 801c94a:	8323      	strh	r3, [r4, #24]
 801c94c:	8363      	strh	r3, [r4, #26]
 801c94e:	61e6      	str	r6, [r4, #28]
 801c950:	62a5      	str	r5, [r4, #40]	; 0x28
 801c952:	e9c4 5608 	strd	r5, r6, [r4, #32]
 801c956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c958:	f104 0314 	add.w	r3, r4, #20
 801c95c:	6922      	ldr	r2, [r4, #16]
 801c95e:	cb03      	ldmia	r3!, {r0, r1}
 801c960:	6010      	str	r0, [r2, #0]
 801c962:	6051      	str	r1, [r2, #4]
 801c964:	6923      	ldr	r3, [r4, #16]
 801c966:	3308      	adds	r3, #8
 801c968:	6123      	str	r3, [r4, #16]
 801c96a:	68a3      	ldr	r3, [r4, #8]
 801c96c:	3301      	adds	r3, #1
 801c96e:	60a3      	str	r3, [r4, #8]
 801c970:	e7e7      	b.n	801c942 <_ZN8touchgfx7Outline6moveToEii+0x5e>

0801c972 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801c972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c976:	b0d1      	sub	sp, #324	; 0x144
 801c978:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801c97c:	466c      	mov	r4, sp
 801c97e:	1a0d      	subs	r5, r1, r0
 801c980:	f100 0208 	add.w	r2, r0, #8
 801c984:	2d48      	cmp	r5, #72	; 0x48
 801c986:	f340 80ba 	ble.w	801cafe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 801c98a:	112d      	asrs	r5, r5, #4
 801c98c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 801c990:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801c994:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 801c998:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c99c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801c9a0:	681e      	ldr	r6, [r3, #0]
 801c9a2:	6006      	str	r6, [r0, #0]
 801c9a4:	685e      	ldr	r6, [r3, #4]
 801c9a6:	6046      	str	r6, [r0, #4]
 801c9a8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 801c9ac:	f8a3 e002 	strh.w	lr, [r3, #2]
 801c9b0:	f8a3 c004 	strh.w	ip, [r3, #4]
 801c9b4:	80df      	strh	r7, [r3, #6]
 801c9b6:	f1a1 0308 	sub.w	r3, r1, #8
 801c9ba:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801c9be:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801c9c2:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801c9c6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801c9ca:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801c9ce:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801c9d2:	4565      	cmp	r5, ip
 801c9d4:	da0f      	bge.n	801c9f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 801c9d6:	681d      	ldr	r5, [r3, #0]
 801c9d8:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 801c9dc:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 801c9e0:	6015      	str	r5, [r2, #0]
 801c9e2:	685d      	ldr	r5, [r3, #4]
 801c9e4:	6055      	str	r5, [r2, #4]
 801c9e6:	f821 7c08 	strh.w	r7, [r1, #-8]
 801c9ea:	f821 6c06 	strh.w	r6, [r1, #-6]
 801c9ee:	f821 ec04 	strh.w	lr, [r1, #-4]
 801c9f2:	f821 cc02 	strh.w	ip, [r1, #-2]
 801c9f6:	f9b0 7000 	ldrsh.w	r7, [r0]
 801c9fa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801c9fe:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 801ca02:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801ca06:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801ca0a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801ca0e:	45ac      	cmp	ip, r5
 801ca10:	da0d      	bge.n	801ca2e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 801ca12:	6815      	ldr	r5, [r2, #0]
 801ca14:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801ca18:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801ca1c:	6005      	str	r5, [r0, #0]
 801ca1e:	6855      	ldr	r5, [r2, #4]
 801ca20:	8107      	strh	r7, [r0, #8]
 801ca22:	6045      	str	r5, [r0, #4]
 801ca24:	8146      	strh	r6, [r0, #10]
 801ca26:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801ca2a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801ca2e:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801ca32:	f9b0 7000 	ldrsh.w	r7, [r0]
 801ca36:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801ca3a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801ca3e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801ca42:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801ca46:	4565      	cmp	r5, ip
 801ca48:	da0f      	bge.n	801ca6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801ca4a:	681d      	ldr	r5, [r3, #0]
 801ca4c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801ca50:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801ca54:	6005      	str	r5, [r0, #0]
 801ca56:	685d      	ldr	r5, [r3, #4]
 801ca58:	6045      	str	r5, [r0, #4]
 801ca5a:	f821 7c08 	strh.w	r7, [r1, #-8]
 801ca5e:	f821 6c06 	strh.w	r6, [r1, #-6]
 801ca62:	f821 ec04 	strh.w	lr, [r1, #-4]
 801ca66:	f821 cc02 	strh.w	ip, [r1, #-2]
 801ca6a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 801ca6e:	f102 0508 	add.w	r5, r2, #8
 801ca72:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 801ca76:	f9b0 e000 	ldrsh.w	lr, [r0]
 801ca7a:	462f      	mov	r7, r5
 801ca7c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801ca80:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 801ca84:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 801ca88:	4556      	cmp	r6, sl
 801ca8a:	db18      	blt.n	801cabe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 801ca8c:	3b08      	subs	r3, #8
 801ca8e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 801ca92:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ca96:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 801ca9a:	45b2      	cmp	sl, r6
 801ca9c:	dbf6      	blt.n	801ca8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 801ca9e:	42ab      	cmp	r3, r5
 801caa0:	681e      	ldr	r6, [r3, #0]
 801caa2:	d30e      	bcc.n	801cac2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 801caa4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 801caa8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801caac:	602e      	str	r6, [r5, #0]
 801caae:	685e      	ldr	r6, [r3, #4]
 801cab0:	606e      	str	r6, [r5, #4]
 801cab2:	f8a3 9000 	strh.w	r9, [r3]
 801cab6:	f8a3 8002 	strh.w	r8, [r3, #2]
 801caba:	809f      	strh	r7, [r3, #4]
 801cabc:	80da      	strh	r2, [r3, #6]
 801cabe:	462a      	mov	r2, r5
 801cac0:	e7d3      	b.n	801ca6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801cac2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801cac6:	6006      	str	r6, [r0, #0]
 801cac8:	685e      	ldr	r6, [r3, #4]
 801caca:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801cace:	6046      	str	r6, [r0, #4]
 801cad0:	1a1e      	subs	r6, r3, r0
 801cad2:	80da      	strh	r2, [r3, #6]
 801cad4:	1b4a      	subs	r2, r1, r5
 801cad6:	f8a3 e000 	strh.w	lr, [r3]
 801cada:	10d2      	asrs	r2, r2, #3
 801cadc:	f8a3 c002 	strh.w	ip, [r3, #2]
 801cae0:	f8a3 8004 	strh.w	r8, [r3, #4]
 801cae4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 801cae8:	bfb5      	itete	lt
 801caea:	e9c4 0300 	strdlt	r0, r3, [r4]
 801caee:	4607      	movge	r7, r0
 801caf0:	460b      	movlt	r3, r1
 801caf2:	e9c4 5100 	strdge	r5, r1, [r4]
 801caf6:	4638      	mov	r0, r7
 801caf8:	3408      	adds	r4, #8
 801cafa:	4619      	mov	r1, r3
 801cafc:	e73f      	b.n	801c97e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801cafe:	4291      	cmp	r1, r2
 801cb00:	d925      	bls.n	801cb4e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 801cb02:	f1a2 0310 	sub.w	r3, r2, #16
 801cb06:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 801cb0a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 801cb0e:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 801cb12:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801cb16:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 801cb1a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801cb1e:	42ae      	cmp	r6, r5
 801cb20:	da13      	bge.n	801cb4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 801cb22:	461d      	mov	r5, r3
 801cb24:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 801cb28:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 801cb2c:	3b08      	subs	r3, #8
 801cb2e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801cb32:	619e      	str	r6, [r3, #24]
 801cb34:	42a8      	cmp	r0, r5
 801cb36:	686e      	ldr	r6, [r5, #4]
 801cb38:	f8a3 c010 	strh.w	ip, [r3, #16]
 801cb3c:	61de      	str	r6, [r3, #28]
 801cb3e:	825f      	strh	r7, [r3, #18]
 801cb40:	f8a3 8014 	strh.w	r8, [r3, #20]
 801cb44:	f8a3 e016 	strh.w	lr, [r3, #22]
 801cb48:	d1dd      	bne.n	801cb06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 801cb4a:	3208      	adds	r2, #8
 801cb4c:	e7d7      	b.n	801cafe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 801cb4e:	466b      	mov	r3, sp
 801cb50:	429c      	cmp	r4, r3
 801cb52:	d903      	bls.n	801cb5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 801cb54:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801cb58:	3c08      	subs	r4, #8
 801cb5a:	e710      	b.n	801c97e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801cb5c:	b051      	add	sp, #324	; 0x144
 801cb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb62 <_ZN8touchgfx7Outline9sortCellsEv>:
 801cb62:	6881      	ldr	r1, [r0, #8]
 801cb64:	b111      	cbz	r1, 801cb6c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 801cb66:	68c0      	ldr	r0, [r0, #12]
 801cb68:	f7ff bf03 	b.w	801c972 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801cb6c:	4770      	bx	lr

0801cb6e <_ZN8touchgfx7Outline8getCellsEv>:
 801cb6e:	b510      	push	{r4, lr}
 801cb70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801cb72:	4604      	mov	r4, r0
 801cb74:	07da      	lsls	r2, r3, #31
 801cb76:	d507      	bpl.n	801cb88 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 801cb78:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 801cb7c:	f7ff fe82 	bl	801c884 <_ZN8touchgfx7Outline6lineToEii>
 801cb80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cb82:	f023 0301 	bic.w	r3, r3, #1
 801cb86:	63e3      	str	r3, [r4, #60]	; 0x3c
 801cb88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cb8a:	079b      	lsls	r3, r3, #30
 801cb8c:	d51a      	bpl.n	801cbc4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 801cb8e:	8b62      	ldrh	r2, [r4, #26]
 801cb90:	8b23      	ldrh	r3, [r4, #24]
 801cb92:	4313      	orrs	r3, r2
 801cb94:	d00d      	beq.n	801cbb2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801cb96:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	db09      	blt.n	801cbb2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801cb9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cba0:	4293      	cmp	r3, r2
 801cba2:	da06      	bge.n	801cbb2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801cba4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801cba8:	429a      	cmp	r2, r3
 801cbaa:	d80d      	bhi.n	801cbc8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 801cbac:	2301      	movs	r3, #1
 801cbae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801cbb2:	68a0      	ldr	r0, [r4, #8]
 801cbb4:	b138      	cbz	r0, 801cbc6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 801cbb6:	4620      	mov	r0, r4
 801cbb8:	f7ff ffd3 	bl	801cb62 <_ZN8touchgfx7Outline9sortCellsEv>
 801cbbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cbbe:	f023 0302 	bic.w	r3, r3, #2
 801cbc2:	63e3      	str	r3, [r4, #60]	; 0x3c
 801cbc4:	68e0      	ldr	r0, [r4, #12]
 801cbc6:	bd10      	pop	{r4, pc}
 801cbc8:	f104 0314 	add.w	r3, r4, #20
 801cbcc:	6922      	ldr	r2, [r4, #16]
 801cbce:	cb03      	ldmia	r3!, {r0, r1}
 801cbd0:	6010      	str	r0, [r2, #0]
 801cbd2:	6051      	str	r1, [r2, #4]
 801cbd4:	6923      	ldr	r3, [r4, #16]
 801cbd6:	3308      	adds	r3, #8
 801cbd8:	6123      	str	r3, [r4, #16]
 801cbda:	68a3      	ldr	r3, [r4, #8]
 801cbdc:	3301      	adds	r3, #1
 801cbde:	60a3      	str	r3, [r4, #8]
 801cbe0:	e7e7      	b.n	801cbb2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

0801cbe2 <_ZN8touchgfx8ScanlineD1Ev>:
 801cbe2:	4770      	bx	lr

0801cbe4 <_ZN8touchgfx8ScanlineD0Ev>:
 801cbe4:	b510      	push	{r4, lr}
 801cbe6:	4604      	mov	r4, r0
 801cbe8:	2124      	movs	r1, #36	; 0x24
 801cbea:	f000 f888 	bl	801ccfe <_ZdlPvj>
 801cbee:	4620      	mov	r0, r4
 801cbf0:	bd10      	pop	{r4, pc}

0801cbf2 <_ZN8touchgfx8Scanline5resetEv>:
 801cbf2:	b510      	push	{r4, lr}
 801cbf4:	4604      	mov	r4, r0
 801cbf6:	f7f2 fb8d 	bl	800f314 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 801cbfa:	61a0      	str	r0, [r4, #24]
 801cbfc:	f7f2 fb90 	bl	800f320 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 801cc00:	61e0      	str	r0, [r4, #28]
 801cc02:	f7f2 fb93 	bl	800f32c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 801cc06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801cc0a:	6220      	str	r0, [r4, #32]
 801cc0c:	6160      	str	r0, [r4, #20]
 801cc0e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801cc12:	69e3      	ldr	r3, [r4, #28]
 801cc14:	6123      	str	r3, [r4, #16]
 801cc16:	2300      	movs	r3, #0
 801cc18:	60e3      	str	r3, [r4, #12]
 801cc1a:	bd10      	pop	{r4, pc}

0801cc1c <_ZN8touchgfx8ScanlineC1Ev>:
 801cc1c:	4b09      	ldr	r3, [pc, #36]	; (801cc44 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 801cc1e:	b510      	push	{r4, lr}
 801cc20:	6003      	str	r3, [r0, #0]
 801cc22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801cc26:	4604      	mov	r4, r0
 801cc28:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cc32:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801cc36:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801cc3a:	f7ff ffda 	bl	801cbf2 <_ZN8touchgfx8Scanline5resetEv>
 801cc3e:	4620      	mov	r0, r4
 801cc40:	bd10      	pop	{r4, pc}
 801cc42:	bf00      	nop
 801cc44:	08021d3c 	.word	0x08021d3c

0801cc48 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 801cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc4c:	1e0c      	subs	r4, r1, #0
 801cc4e:	4605      	mov	r5, r0
 801cc50:	4617      	mov	r7, r2
 801cc52:	461e      	mov	r6, r3
 801cc54:	da03      	bge.n	801cc5e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 801cc56:	4426      	add	r6, r4
 801cc58:	2e01      	cmp	r6, #1
 801cc5a:	d421      	bmi.n	801cca0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 801cc5c:	2400      	movs	r4, #0
 801cc5e:	f7f2 fb53 	bl	800f308 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801cc62:	42a0      	cmp	r0, r4
 801cc64:	dd1c      	ble.n	801cca0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 801cc66:	eb04 0806 	add.w	r8, r4, r6
 801cc6a:	f7f2 fb4d 	bl	800f308 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801cc6e:	4580      	cmp	r8, r0
 801cc70:	d902      	bls.n	801cc78 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 801cc72:	f7f2 fb49 	bl	800f308 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801cc76:	1b06      	subs	r6, r0, r4
 801cc78:	69a8      	ldr	r0, [r5, #24]
 801cc7a:	4632      	mov	r2, r6
 801cc7c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801cc80:	4420      	add	r0, r4
 801cc82:	f7f4 fcb5 	bl	80115f0 <_ZN8touchgfx6memsetEPvhm>
 801cc86:	686b      	ldr	r3, [r5, #4]
 801cc88:	b2b2      	uxth	r2, r6
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	42a3      	cmp	r3, r4
 801cc8e:	696b      	ldr	r3, [r5, #20]
 801cc90:	d108      	bne.n	801cca4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 801cc92:	8819      	ldrh	r1, [r3, #0]
 801cc94:	440a      	add	r2, r1
 801cc96:	801a      	strh	r2, [r3, #0]
 801cc98:	3c01      	subs	r4, #1
 801cc9a:	4434      	add	r4, r6
 801cc9c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 801cca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cca4:	1c99      	adds	r1, r3, #2
 801cca6:	6169      	str	r1, [r5, #20]
 801cca8:	805a      	strh	r2, [r3, #2]
 801ccaa:	692b      	ldr	r3, [r5, #16]
 801ccac:	1c9a      	adds	r2, r3, #2
 801ccae:	612a      	str	r2, [r5, #16]
 801ccb0:	805c      	strh	r4, [r3, #2]
 801ccb2:	68eb      	ldr	r3, [r5, #12]
 801ccb4:	3301      	adds	r3, #1
 801ccb6:	60eb      	str	r3, [r5, #12]
 801ccb8:	e7ee      	b.n	801cc98 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0801ccba <_ZN8touchgfx15RenderingBufferD1Ev>:
 801ccba:	4770      	bx	lr

0801ccbc <_ZN8touchgfx15RenderingBufferD0Ev>:
 801ccbc:	b510      	push	{r4, lr}
 801ccbe:	4604      	mov	r4, r0
 801ccc0:	2118      	movs	r1, #24
 801ccc2:	f000 f81c 	bl	801ccfe <_ZdlPvj>
 801ccc6:	4620      	mov	r0, r4
 801ccc8:	bd10      	pop	{r4, pc}
	...

0801cccc <_ZN8touchgfx15RenderingBufferC1Ev>:
 801cccc:	4a04      	ldr	r2, [pc, #16]	; (801cce0 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 801ccce:	6002      	str	r2, [r0, #0]
 801ccd0:	2200      	movs	r2, #0
 801ccd2:	6042      	str	r2, [r0, #4]
 801ccd4:	7202      	strb	r2, [r0, #8]
 801ccd6:	6142      	str	r2, [r0, #20]
 801ccd8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801ccdc:	4770      	bx	lr
 801ccde:	bf00      	nop
 801cce0:	08021d4c 	.word	0x08021d4c

0801cce4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 801cce4:	60c3      	str	r3, [r0, #12]
 801cce6:	9b00      	ldr	r3, [sp, #0]
 801cce8:	6041      	str	r1, [r0, #4]
 801ccea:	6103      	str	r3, [r0, #16]
 801ccec:	9b01      	ldr	r3, [sp, #4]
 801ccee:	7202      	strb	r2, [r0, #8]
 801ccf0:	6143      	str	r3, [r0, #20]
 801ccf2:	4770      	bx	lr

0801ccf4 <__aeabi_atexit>:
 801ccf4:	460b      	mov	r3, r1
 801ccf6:	4601      	mov	r1, r0
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f000 b853 	b.w	801cda4 <__cxa_atexit>

0801ccfe <_ZdlPvj>:
 801ccfe:	f000 b812 	b.w	801cd26 <_ZdlPv>

0801cd02 <__cxa_guard_acquire>:
 801cd02:	6803      	ldr	r3, [r0, #0]
 801cd04:	07db      	lsls	r3, r3, #31
 801cd06:	d406      	bmi.n	801cd16 <__cxa_guard_acquire+0x14>
 801cd08:	7843      	ldrb	r3, [r0, #1]
 801cd0a:	b103      	cbz	r3, 801cd0e <__cxa_guard_acquire+0xc>
 801cd0c:	deff      	udf	#255	; 0xff
 801cd0e:	2301      	movs	r3, #1
 801cd10:	7043      	strb	r3, [r0, #1]
 801cd12:	4618      	mov	r0, r3
 801cd14:	4770      	bx	lr
 801cd16:	2000      	movs	r0, #0
 801cd18:	4770      	bx	lr

0801cd1a <__cxa_guard_release>:
 801cd1a:	2301      	movs	r3, #1
 801cd1c:	6003      	str	r3, [r0, #0]
 801cd1e:	4770      	bx	lr

0801cd20 <__cxa_pure_virtual>:
 801cd20:	b508      	push	{r3, lr}
 801cd22:	f000 f80f 	bl	801cd44 <_ZSt9terminatev>

0801cd26 <_ZdlPv>:
 801cd26:	f000 b88f 	b.w	801ce48 <free>

0801cd2a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801cd2a:	b508      	push	{r3, lr}
 801cd2c:	4780      	blx	r0
 801cd2e:	f000 f80e 	bl	801cd4e <abort>
	...

0801cd34 <_ZSt13get_terminatev>:
 801cd34:	4b02      	ldr	r3, [pc, #8]	; (801cd40 <_ZSt13get_terminatev+0xc>)
 801cd36:	6818      	ldr	r0, [r3, #0]
 801cd38:	f3bf 8f5b 	dmb	ish
 801cd3c:	4770      	bx	lr
 801cd3e:	bf00      	nop
 801cd40:	24000074 	.word	0x24000074

0801cd44 <_ZSt9terminatev>:
 801cd44:	b508      	push	{r3, lr}
 801cd46:	f7ff fff5 	bl	801cd34 <_ZSt13get_terminatev>
 801cd4a:	f7ff ffee 	bl	801cd2a <_ZN10__cxxabiv111__terminateEPFvvE>

0801cd4e <abort>:
 801cd4e:	b508      	push	{r3, lr}
 801cd50:	2006      	movs	r0, #6
 801cd52:	f000 fc8f 	bl	801d674 <raise>
 801cd56:	2001      	movs	r0, #1
 801cd58:	f7e4 fc60 	bl	800161c <_exit>

0801cd5c <__assert_func>:
 801cd5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd5e:	4614      	mov	r4, r2
 801cd60:	461a      	mov	r2, r3
 801cd62:	4b09      	ldr	r3, [pc, #36]	; (801cd88 <__assert_func+0x2c>)
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	4605      	mov	r5, r0
 801cd68:	68d8      	ldr	r0, [r3, #12]
 801cd6a:	b14c      	cbz	r4, 801cd80 <__assert_func+0x24>
 801cd6c:	4b07      	ldr	r3, [pc, #28]	; (801cd8c <__assert_func+0x30>)
 801cd6e:	9100      	str	r1, [sp, #0]
 801cd70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cd74:	4906      	ldr	r1, [pc, #24]	; (801cd90 <__assert_func+0x34>)
 801cd76:	462b      	mov	r3, r5
 801cd78:	f000 f828 	bl	801cdcc <fiprintf>
 801cd7c:	f7ff ffe7 	bl	801cd4e <abort>
 801cd80:	4b04      	ldr	r3, [pc, #16]	; (801cd94 <__assert_func+0x38>)
 801cd82:	461c      	mov	r4, r3
 801cd84:	e7f3      	b.n	801cd6e <__assert_func+0x12>
 801cd86:	bf00      	nop
 801cd88:	24000078 	.word	0x24000078
 801cd8c:	08021d54 	.word	0x08021d54
 801cd90:	08021d61 	.word	0x08021d61
 801cd94:	08021d8f 	.word	0x08021d8f

0801cd98 <atexit>:
 801cd98:	2300      	movs	r3, #0
 801cd9a:	4601      	mov	r1, r0
 801cd9c:	461a      	mov	r2, r3
 801cd9e:	4618      	mov	r0, r3
 801cda0:	f000 bd44 	b.w	801d82c <__register_exitproc>

0801cda4 <__cxa_atexit>:
 801cda4:	b510      	push	{r4, lr}
 801cda6:	4c05      	ldr	r4, [pc, #20]	; (801cdbc <__cxa_atexit+0x18>)
 801cda8:	4613      	mov	r3, r2
 801cdaa:	b12c      	cbz	r4, 801cdb8 <__cxa_atexit+0x14>
 801cdac:	460a      	mov	r2, r1
 801cdae:	4601      	mov	r1, r0
 801cdb0:	2002      	movs	r0, #2
 801cdb2:	f000 fd3b 	bl	801d82c <__register_exitproc>
 801cdb6:	bd10      	pop	{r4, pc}
 801cdb8:	4620      	mov	r0, r4
 801cdba:	e7fc      	b.n	801cdb6 <__cxa_atexit+0x12>
 801cdbc:	0801d82d 	.word	0x0801d82d

0801cdc0 <__errno>:
 801cdc0:	4b01      	ldr	r3, [pc, #4]	; (801cdc8 <__errno+0x8>)
 801cdc2:	6818      	ldr	r0, [r3, #0]
 801cdc4:	4770      	bx	lr
 801cdc6:	bf00      	nop
 801cdc8:	24000078 	.word	0x24000078

0801cdcc <fiprintf>:
 801cdcc:	b40e      	push	{r1, r2, r3}
 801cdce:	b503      	push	{r0, r1, lr}
 801cdd0:	4601      	mov	r1, r0
 801cdd2:	ab03      	add	r3, sp, #12
 801cdd4:	4805      	ldr	r0, [pc, #20]	; (801cdec <fiprintf+0x20>)
 801cdd6:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdda:	6800      	ldr	r0, [r0, #0]
 801cddc:	9301      	str	r3, [sp, #4]
 801cdde:	f000 f94d 	bl	801d07c <_vfiprintf_r>
 801cde2:	b002      	add	sp, #8
 801cde4:	f85d eb04 	ldr.w	lr, [sp], #4
 801cde8:	b003      	add	sp, #12
 801cdea:	4770      	bx	lr
 801cdec:	24000078 	.word	0x24000078

0801cdf0 <__libc_init_array>:
 801cdf0:	b570      	push	{r4, r5, r6, lr}
 801cdf2:	4d0d      	ldr	r5, [pc, #52]	; (801ce28 <__libc_init_array+0x38>)
 801cdf4:	4c0d      	ldr	r4, [pc, #52]	; (801ce2c <__libc_init_array+0x3c>)
 801cdf6:	1b64      	subs	r4, r4, r5
 801cdf8:	10a4      	asrs	r4, r4, #2
 801cdfa:	2600      	movs	r6, #0
 801cdfc:	42a6      	cmp	r6, r4
 801cdfe:	d109      	bne.n	801ce14 <__libc_init_array+0x24>
 801ce00:	4d0b      	ldr	r5, [pc, #44]	; (801ce30 <__libc_init_array+0x40>)
 801ce02:	4c0c      	ldr	r4, [pc, #48]	; (801ce34 <__libc_init_array+0x44>)
 801ce04:	f001 f84c 	bl	801dea0 <_init>
 801ce08:	1b64      	subs	r4, r4, r5
 801ce0a:	10a4      	asrs	r4, r4, #2
 801ce0c:	2600      	movs	r6, #0
 801ce0e:	42a6      	cmp	r6, r4
 801ce10:	d105      	bne.n	801ce1e <__libc_init_array+0x2e>
 801ce12:	bd70      	pop	{r4, r5, r6, pc}
 801ce14:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce18:	4798      	blx	r3
 801ce1a:	3601      	adds	r6, #1
 801ce1c:	e7ee      	b.n	801cdfc <__libc_init_array+0xc>
 801ce1e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce22:	4798      	blx	r3
 801ce24:	3601      	adds	r6, #1
 801ce26:	e7f2      	b.n	801ce0e <__libc_init_array+0x1e>
 801ce28:	08021ff8 	.word	0x08021ff8
 801ce2c:	08021ff8 	.word	0x08021ff8
 801ce30:	08021ff8 	.word	0x08021ff8
 801ce34:	0802200c 	.word	0x0802200c

0801ce38 <malloc>:
 801ce38:	4b02      	ldr	r3, [pc, #8]	; (801ce44 <malloc+0xc>)
 801ce3a:	4601      	mov	r1, r0
 801ce3c:	6818      	ldr	r0, [r3, #0]
 801ce3e:	f000 b87f 	b.w	801cf40 <_malloc_r>
 801ce42:	bf00      	nop
 801ce44:	24000078 	.word	0x24000078

0801ce48 <free>:
 801ce48:	4b02      	ldr	r3, [pc, #8]	; (801ce54 <free+0xc>)
 801ce4a:	4601      	mov	r1, r0
 801ce4c:	6818      	ldr	r0, [r3, #0]
 801ce4e:	f000 b80b 	b.w	801ce68 <_free_r>
 801ce52:	bf00      	nop
 801ce54:	24000078 	.word	0x24000078

0801ce58 <memset>:
 801ce58:	4402      	add	r2, r0
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	4293      	cmp	r3, r2
 801ce5e:	d100      	bne.n	801ce62 <memset+0xa>
 801ce60:	4770      	bx	lr
 801ce62:	f803 1b01 	strb.w	r1, [r3], #1
 801ce66:	e7f9      	b.n	801ce5c <memset+0x4>

0801ce68 <_free_r>:
 801ce68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce6a:	2900      	cmp	r1, #0
 801ce6c:	d044      	beq.n	801cef8 <_free_r+0x90>
 801ce6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ce72:	9001      	str	r0, [sp, #4]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	f1a1 0404 	sub.w	r4, r1, #4
 801ce7a:	bfb8      	it	lt
 801ce7c:	18e4      	addlt	r4, r4, r3
 801ce7e:	f000 ff57 	bl	801dd30 <__malloc_lock>
 801ce82:	4a1e      	ldr	r2, [pc, #120]	; (801cefc <_free_r+0x94>)
 801ce84:	9801      	ldr	r0, [sp, #4]
 801ce86:	6813      	ldr	r3, [r2, #0]
 801ce88:	b933      	cbnz	r3, 801ce98 <_free_r+0x30>
 801ce8a:	6063      	str	r3, [r4, #4]
 801ce8c:	6014      	str	r4, [r2, #0]
 801ce8e:	b003      	add	sp, #12
 801ce90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ce94:	f000 bf52 	b.w	801dd3c <__malloc_unlock>
 801ce98:	42a3      	cmp	r3, r4
 801ce9a:	d908      	bls.n	801ceae <_free_r+0x46>
 801ce9c:	6825      	ldr	r5, [r4, #0]
 801ce9e:	1961      	adds	r1, r4, r5
 801cea0:	428b      	cmp	r3, r1
 801cea2:	bf01      	itttt	eq
 801cea4:	6819      	ldreq	r1, [r3, #0]
 801cea6:	685b      	ldreq	r3, [r3, #4]
 801cea8:	1949      	addeq	r1, r1, r5
 801ceaa:	6021      	streq	r1, [r4, #0]
 801ceac:	e7ed      	b.n	801ce8a <_free_r+0x22>
 801ceae:	461a      	mov	r2, r3
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	b10b      	cbz	r3, 801ceb8 <_free_r+0x50>
 801ceb4:	42a3      	cmp	r3, r4
 801ceb6:	d9fa      	bls.n	801ceae <_free_r+0x46>
 801ceb8:	6811      	ldr	r1, [r2, #0]
 801ceba:	1855      	adds	r5, r2, r1
 801cebc:	42a5      	cmp	r5, r4
 801cebe:	d10b      	bne.n	801ced8 <_free_r+0x70>
 801cec0:	6824      	ldr	r4, [r4, #0]
 801cec2:	4421      	add	r1, r4
 801cec4:	1854      	adds	r4, r2, r1
 801cec6:	42a3      	cmp	r3, r4
 801cec8:	6011      	str	r1, [r2, #0]
 801ceca:	d1e0      	bne.n	801ce8e <_free_r+0x26>
 801cecc:	681c      	ldr	r4, [r3, #0]
 801cece:	685b      	ldr	r3, [r3, #4]
 801ced0:	6053      	str	r3, [r2, #4]
 801ced2:	4421      	add	r1, r4
 801ced4:	6011      	str	r1, [r2, #0]
 801ced6:	e7da      	b.n	801ce8e <_free_r+0x26>
 801ced8:	d902      	bls.n	801cee0 <_free_r+0x78>
 801ceda:	230c      	movs	r3, #12
 801cedc:	6003      	str	r3, [r0, #0]
 801cede:	e7d6      	b.n	801ce8e <_free_r+0x26>
 801cee0:	6825      	ldr	r5, [r4, #0]
 801cee2:	1961      	adds	r1, r4, r5
 801cee4:	428b      	cmp	r3, r1
 801cee6:	bf04      	itt	eq
 801cee8:	6819      	ldreq	r1, [r3, #0]
 801ceea:	685b      	ldreq	r3, [r3, #4]
 801ceec:	6063      	str	r3, [r4, #4]
 801ceee:	bf04      	itt	eq
 801cef0:	1949      	addeq	r1, r1, r5
 801cef2:	6021      	streq	r1, [r4, #0]
 801cef4:	6054      	str	r4, [r2, #4]
 801cef6:	e7ca      	b.n	801ce8e <_free_r+0x26>
 801cef8:	b003      	add	sp, #12
 801cefa:	bd30      	pop	{r4, r5, pc}
 801cefc:	240c3e40 	.word	0x240c3e40

0801cf00 <sbrk_aligned>:
 801cf00:	b570      	push	{r4, r5, r6, lr}
 801cf02:	4e0e      	ldr	r6, [pc, #56]	; (801cf3c <sbrk_aligned+0x3c>)
 801cf04:	460c      	mov	r4, r1
 801cf06:	6831      	ldr	r1, [r6, #0]
 801cf08:	4605      	mov	r5, r0
 801cf0a:	b911      	cbnz	r1, 801cf12 <sbrk_aligned+0x12>
 801cf0c:	f000 fb7a 	bl	801d604 <_sbrk_r>
 801cf10:	6030      	str	r0, [r6, #0]
 801cf12:	4621      	mov	r1, r4
 801cf14:	4628      	mov	r0, r5
 801cf16:	f000 fb75 	bl	801d604 <_sbrk_r>
 801cf1a:	1c43      	adds	r3, r0, #1
 801cf1c:	d00a      	beq.n	801cf34 <sbrk_aligned+0x34>
 801cf1e:	1cc4      	adds	r4, r0, #3
 801cf20:	f024 0403 	bic.w	r4, r4, #3
 801cf24:	42a0      	cmp	r0, r4
 801cf26:	d007      	beq.n	801cf38 <sbrk_aligned+0x38>
 801cf28:	1a21      	subs	r1, r4, r0
 801cf2a:	4628      	mov	r0, r5
 801cf2c:	f000 fb6a 	bl	801d604 <_sbrk_r>
 801cf30:	3001      	adds	r0, #1
 801cf32:	d101      	bne.n	801cf38 <sbrk_aligned+0x38>
 801cf34:	f04f 34ff 	mov.w	r4, #4294967295
 801cf38:	4620      	mov	r0, r4
 801cf3a:	bd70      	pop	{r4, r5, r6, pc}
 801cf3c:	240c3e44 	.word	0x240c3e44

0801cf40 <_malloc_r>:
 801cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf44:	1ccd      	adds	r5, r1, #3
 801cf46:	f025 0503 	bic.w	r5, r5, #3
 801cf4a:	3508      	adds	r5, #8
 801cf4c:	2d0c      	cmp	r5, #12
 801cf4e:	bf38      	it	cc
 801cf50:	250c      	movcc	r5, #12
 801cf52:	2d00      	cmp	r5, #0
 801cf54:	4607      	mov	r7, r0
 801cf56:	db01      	blt.n	801cf5c <_malloc_r+0x1c>
 801cf58:	42a9      	cmp	r1, r5
 801cf5a:	d905      	bls.n	801cf68 <_malloc_r+0x28>
 801cf5c:	230c      	movs	r3, #12
 801cf5e:	603b      	str	r3, [r7, #0]
 801cf60:	2600      	movs	r6, #0
 801cf62:	4630      	mov	r0, r6
 801cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf68:	4e2e      	ldr	r6, [pc, #184]	; (801d024 <_malloc_r+0xe4>)
 801cf6a:	f000 fee1 	bl	801dd30 <__malloc_lock>
 801cf6e:	6833      	ldr	r3, [r6, #0]
 801cf70:	461c      	mov	r4, r3
 801cf72:	bb34      	cbnz	r4, 801cfc2 <_malloc_r+0x82>
 801cf74:	4629      	mov	r1, r5
 801cf76:	4638      	mov	r0, r7
 801cf78:	f7ff ffc2 	bl	801cf00 <sbrk_aligned>
 801cf7c:	1c43      	adds	r3, r0, #1
 801cf7e:	4604      	mov	r4, r0
 801cf80:	d14d      	bne.n	801d01e <_malloc_r+0xde>
 801cf82:	6834      	ldr	r4, [r6, #0]
 801cf84:	4626      	mov	r6, r4
 801cf86:	2e00      	cmp	r6, #0
 801cf88:	d140      	bne.n	801d00c <_malloc_r+0xcc>
 801cf8a:	6823      	ldr	r3, [r4, #0]
 801cf8c:	4631      	mov	r1, r6
 801cf8e:	4638      	mov	r0, r7
 801cf90:	eb04 0803 	add.w	r8, r4, r3
 801cf94:	f000 fb36 	bl	801d604 <_sbrk_r>
 801cf98:	4580      	cmp	r8, r0
 801cf9a:	d13a      	bne.n	801d012 <_malloc_r+0xd2>
 801cf9c:	6821      	ldr	r1, [r4, #0]
 801cf9e:	3503      	adds	r5, #3
 801cfa0:	1a6d      	subs	r5, r5, r1
 801cfa2:	f025 0503 	bic.w	r5, r5, #3
 801cfa6:	3508      	adds	r5, #8
 801cfa8:	2d0c      	cmp	r5, #12
 801cfaa:	bf38      	it	cc
 801cfac:	250c      	movcc	r5, #12
 801cfae:	4629      	mov	r1, r5
 801cfb0:	4638      	mov	r0, r7
 801cfb2:	f7ff ffa5 	bl	801cf00 <sbrk_aligned>
 801cfb6:	3001      	adds	r0, #1
 801cfb8:	d02b      	beq.n	801d012 <_malloc_r+0xd2>
 801cfba:	6823      	ldr	r3, [r4, #0]
 801cfbc:	442b      	add	r3, r5
 801cfbe:	6023      	str	r3, [r4, #0]
 801cfc0:	e00e      	b.n	801cfe0 <_malloc_r+0xa0>
 801cfc2:	6822      	ldr	r2, [r4, #0]
 801cfc4:	1b52      	subs	r2, r2, r5
 801cfc6:	d41e      	bmi.n	801d006 <_malloc_r+0xc6>
 801cfc8:	2a0b      	cmp	r2, #11
 801cfca:	d916      	bls.n	801cffa <_malloc_r+0xba>
 801cfcc:	1961      	adds	r1, r4, r5
 801cfce:	42a3      	cmp	r3, r4
 801cfd0:	6025      	str	r5, [r4, #0]
 801cfd2:	bf18      	it	ne
 801cfd4:	6059      	strne	r1, [r3, #4]
 801cfd6:	6863      	ldr	r3, [r4, #4]
 801cfd8:	bf08      	it	eq
 801cfda:	6031      	streq	r1, [r6, #0]
 801cfdc:	5162      	str	r2, [r4, r5]
 801cfde:	604b      	str	r3, [r1, #4]
 801cfe0:	4638      	mov	r0, r7
 801cfe2:	f104 060b 	add.w	r6, r4, #11
 801cfe6:	f000 fea9 	bl	801dd3c <__malloc_unlock>
 801cfea:	f026 0607 	bic.w	r6, r6, #7
 801cfee:	1d23      	adds	r3, r4, #4
 801cff0:	1af2      	subs	r2, r6, r3
 801cff2:	d0b6      	beq.n	801cf62 <_malloc_r+0x22>
 801cff4:	1b9b      	subs	r3, r3, r6
 801cff6:	50a3      	str	r3, [r4, r2]
 801cff8:	e7b3      	b.n	801cf62 <_malloc_r+0x22>
 801cffa:	6862      	ldr	r2, [r4, #4]
 801cffc:	42a3      	cmp	r3, r4
 801cffe:	bf0c      	ite	eq
 801d000:	6032      	streq	r2, [r6, #0]
 801d002:	605a      	strne	r2, [r3, #4]
 801d004:	e7ec      	b.n	801cfe0 <_malloc_r+0xa0>
 801d006:	4623      	mov	r3, r4
 801d008:	6864      	ldr	r4, [r4, #4]
 801d00a:	e7b2      	b.n	801cf72 <_malloc_r+0x32>
 801d00c:	4634      	mov	r4, r6
 801d00e:	6876      	ldr	r6, [r6, #4]
 801d010:	e7b9      	b.n	801cf86 <_malloc_r+0x46>
 801d012:	230c      	movs	r3, #12
 801d014:	603b      	str	r3, [r7, #0]
 801d016:	4638      	mov	r0, r7
 801d018:	f000 fe90 	bl	801dd3c <__malloc_unlock>
 801d01c:	e7a1      	b.n	801cf62 <_malloc_r+0x22>
 801d01e:	6025      	str	r5, [r4, #0]
 801d020:	e7de      	b.n	801cfe0 <_malloc_r+0xa0>
 801d022:	bf00      	nop
 801d024:	240c3e40 	.word	0x240c3e40

0801d028 <__sfputc_r>:
 801d028:	6893      	ldr	r3, [r2, #8]
 801d02a:	3b01      	subs	r3, #1
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	b410      	push	{r4}
 801d030:	6093      	str	r3, [r2, #8]
 801d032:	da08      	bge.n	801d046 <__sfputc_r+0x1e>
 801d034:	6994      	ldr	r4, [r2, #24]
 801d036:	42a3      	cmp	r3, r4
 801d038:	db01      	blt.n	801d03e <__sfputc_r+0x16>
 801d03a:	290a      	cmp	r1, #10
 801d03c:	d103      	bne.n	801d046 <__sfputc_r+0x1e>
 801d03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d042:	f000 bb33 	b.w	801d6ac <__swbuf_r>
 801d046:	6813      	ldr	r3, [r2, #0]
 801d048:	1c58      	adds	r0, r3, #1
 801d04a:	6010      	str	r0, [r2, #0]
 801d04c:	7019      	strb	r1, [r3, #0]
 801d04e:	4608      	mov	r0, r1
 801d050:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d054:	4770      	bx	lr

0801d056 <__sfputs_r>:
 801d056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d058:	4606      	mov	r6, r0
 801d05a:	460f      	mov	r7, r1
 801d05c:	4614      	mov	r4, r2
 801d05e:	18d5      	adds	r5, r2, r3
 801d060:	42ac      	cmp	r4, r5
 801d062:	d101      	bne.n	801d068 <__sfputs_r+0x12>
 801d064:	2000      	movs	r0, #0
 801d066:	e007      	b.n	801d078 <__sfputs_r+0x22>
 801d068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d06c:	463a      	mov	r2, r7
 801d06e:	4630      	mov	r0, r6
 801d070:	f7ff ffda 	bl	801d028 <__sfputc_r>
 801d074:	1c43      	adds	r3, r0, #1
 801d076:	d1f3      	bne.n	801d060 <__sfputs_r+0xa>
 801d078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d07c <_vfiprintf_r>:
 801d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d080:	460d      	mov	r5, r1
 801d082:	b09d      	sub	sp, #116	; 0x74
 801d084:	4614      	mov	r4, r2
 801d086:	4698      	mov	r8, r3
 801d088:	4606      	mov	r6, r0
 801d08a:	b118      	cbz	r0, 801d094 <_vfiprintf_r+0x18>
 801d08c:	6983      	ldr	r3, [r0, #24]
 801d08e:	b90b      	cbnz	r3, 801d094 <_vfiprintf_r+0x18>
 801d090:	f000 fd48 	bl	801db24 <__sinit>
 801d094:	4b89      	ldr	r3, [pc, #548]	; (801d2bc <_vfiprintf_r+0x240>)
 801d096:	429d      	cmp	r5, r3
 801d098:	d11b      	bne.n	801d0d2 <_vfiprintf_r+0x56>
 801d09a:	6875      	ldr	r5, [r6, #4]
 801d09c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d09e:	07d9      	lsls	r1, r3, #31
 801d0a0:	d405      	bmi.n	801d0ae <_vfiprintf_r+0x32>
 801d0a2:	89ab      	ldrh	r3, [r5, #12]
 801d0a4:	059a      	lsls	r2, r3, #22
 801d0a6:	d402      	bmi.n	801d0ae <_vfiprintf_r+0x32>
 801d0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0aa:	f000 fdd9 	bl	801dc60 <__retarget_lock_acquire_recursive>
 801d0ae:	89ab      	ldrh	r3, [r5, #12]
 801d0b0:	071b      	lsls	r3, r3, #28
 801d0b2:	d501      	bpl.n	801d0b8 <_vfiprintf_r+0x3c>
 801d0b4:	692b      	ldr	r3, [r5, #16]
 801d0b6:	b9eb      	cbnz	r3, 801d0f4 <_vfiprintf_r+0x78>
 801d0b8:	4629      	mov	r1, r5
 801d0ba:	4630      	mov	r0, r6
 801d0bc:	f000 fb48 	bl	801d750 <__swsetup_r>
 801d0c0:	b1c0      	cbz	r0, 801d0f4 <_vfiprintf_r+0x78>
 801d0c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0c4:	07dc      	lsls	r4, r3, #31
 801d0c6:	d50e      	bpl.n	801d0e6 <_vfiprintf_r+0x6a>
 801d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 801d0cc:	b01d      	add	sp, #116	; 0x74
 801d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0d2:	4b7b      	ldr	r3, [pc, #492]	; (801d2c0 <_vfiprintf_r+0x244>)
 801d0d4:	429d      	cmp	r5, r3
 801d0d6:	d101      	bne.n	801d0dc <_vfiprintf_r+0x60>
 801d0d8:	68b5      	ldr	r5, [r6, #8]
 801d0da:	e7df      	b.n	801d09c <_vfiprintf_r+0x20>
 801d0dc:	4b79      	ldr	r3, [pc, #484]	; (801d2c4 <_vfiprintf_r+0x248>)
 801d0de:	429d      	cmp	r5, r3
 801d0e0:	bf08      	it	eq
 801d0e2:	68f5      	ldreq	r5, [r6, #12]
 801d0e4:	e7da      	b.n	801d09c <_vfiprintf_r+0x20>
 801d0e6:	89ab      	ldrh	r3, [r5, #12]
 801d0e8:	0598      	lsls	r0, r3, #22
 801d0ea:	d4ed      	bmi.n	801d0c8 <_vfiprintf_r+0x4c>
 801d0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0ee:	f000 fdb9 	bl	801dc64 <__retarget_lock_release_recursive>
 801d0f2:	e7e9      	b.n	801d0c8 <_vfiprintf_r+0x4c>
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	9309      	str	r3, [sp, #36]	; 0x24
 801d0f8:	2320      	movs	r3, #32
 801d0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801d102:	2330      	movs	r3, #48	; 0x30
 801d104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d2c8 <_vfiprintf_r+0x24c>
 801d108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d10c:	f04f 0901 	mov.w	r9, #1
 801d110:	4623      	mov	r3, r4
 801d112:	469a      	mov	sl, r3
 801d114:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d118:	b10a      	cbz	r2, 801d11e <_vfiprintf_r+0xa2>
 801d11a:	2a25      	cmp	r2, #37	; 0x25
 801d11c:	d1f9      	bne.n	801d112 <_vfiprintf_r+0x96>
 801d11e:	ebba 0b04 	subs.w	fp, sl, r4
 801d122:	d00b      	beq.n	801d13c <_vfiprintf_r+0xc0>
 801d124:	465b      	mov	r3, fp
 801d126:	4622      	mov	r2, r4
 801d128:	4629      	mov	r1, r5
 801d12a:	4630      	mov	r0, r6
 801d12c:	f7ff ff93 	bl	801d056 <__sfputs_r>
 801d130:	3001      	adds	r0, #1
 801d132:	f000 80aa 	beq.w	801d28a <_vfiprintf_r+0x20e>
 801d136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d138:	445a      	add	r2, fp
 801d13a:	9209      	str	r2, [sp, #36]	; 0x24
 801d13c:	f89a 3000 	ldrb.w	r3, [sl]
 801d140:	2b00      	cmp	r3, #0
 801d142:	f000 80a2 	beq.w	801d28a <_vfiprintf_r+0x20e>
 801d146:	2300      	movs	r3, #0
 801d148:	f04f 32ff 	mov.w	r2, #4294967295
 801d14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d150:	f10a 0a01 	add.w	sl, sl, #1
 801d154:	9304      	str	r3, [sp, #16]
 801d156:	9307      	str	r3, [sp, #28]
 801d158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d15c:	931a      	str	r3, [sp, #104]	; 0x68
 801d15e:	4654      	mov	r4, sl
 801d160:	2205      	movs	r2, #5
 801d162:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d166:	4858      	ldr	r0, [pc, #352]	; (801d2c8 <_vfiprintf_r+0x24c>)
 801d168:	f7e3 f9e2 	bl	8000530 <memchr>
 801d16c:	9a04      	ldr	r2, [sp, #16]
 801d16e:	b9d8      	cbnz	r0, 801d1a8 <_vfiprintf_r+0x12c>
 801d170:	06d1      	lsls	r1, r2, #27
 801d172:	bf44      	itt	mi
 801d174:	2320      	movmi	r3, #32
 801d176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d17a:	0713      	lsls	r3, r2, #28
 801d17c:	bf44      	itt	mi
 801d17e:	232b      	movmi	r3, #43	; 0x2b
 801d180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d184:	f89a 3000 	ldrb.w	r3, [sl]
 801d188:	2b2a      	cmp	r3, #42	; 0x2a
 801d18a:	d015      	beq.n	801d1b8 <_vfiprintf_r+0x13c>
 801d18c:	9a07      	ldr	r2, [sp, #28]
 801d18e:	4654      	mov	r4, sl
 801d190:	2000      	movs	r0, #0
 801d192:	f04f 0c0a 	mov.w	ip, #10
 801d196:	4621      	mov	r1, r4
 801d198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d19c:	3b30      	subs	r3, #48	; 0x30
 801d19e:	2b09      	cmp	r3, #9
 801d1a0:	d94e      	bls.n	801d240 <_vfiprintf_r+0x1c4>
 801d1a2:	b1b0      	cbz	r0, 801d1d2 <_vfiprintf_r+0x156>
 801d1a4:	9207      	str	r2, [sp, #28]
 801d1a6:	e014      	b.n	801d1d2 <_vfiprintf_r+0x156>
 801d1a8:	eba0 0308 	sub.w	r3, r0, r8
 801d1ac:	fa09 f303 	lsl.w	r3, r9, r3
 801d1b0:	4313      	orrs	r3, r2
 801d1b2:	9304      	str	r3, [sp, #16]
 801d1b4:	46a2      	mov	sl, r4
 801d1b6:	e7d2      	b.n	801d15e <_vfiprintf_r+0xe2>
 801d1b8:	9b03      	ldr	r3, [sp, #12]
 801d1ba:	1d19      	adds	r1, r3, #4
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	9103      	str	r1, [sp, #12]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	bfbb      	ittet	lt
 801d1c4:	425b      	neglt	r3, r3
 801d1c6:	f042 0202 	orrlt.w	r2, r2, #2
 801d1ca:	9307      	strge	r3, [sp, #28]
 801d1cc:	9307      	strlt	r3, [sp, #28]
 801d1ce:	bfb8      	it	lt
 801d1d0:	9204      	strlt	r2, [sp, #16]
 801d1d2:	7823      	ldrb	r3, [r4, #0]
 801d1d4:	2b2e      	cmp	r3, #46	; 0x2e
 801d1d6:	d10c      	bne.n	801d1f2 <_vfiprintf_r+0x176>
 801d1d8:	7863      	ldrb	r3, [r4, #1]
 801d1da:	2b2a      	cmp	r3, #42	; 0x2a
 801d1dc:	d135      	bne.n	801d24a <_vfiprintf_r+0x1ce>
 801d1de:	9b03      	ldr	r3, [sp, #12]
 801d1e0:	1d1a      	adds	r2, r3, #4
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	9203      	str	r2, [sp, #12]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	bfb8      	it	lt
 801d1ea:	f04f 33ff 	movlt.w	r3, #4294967295
 801d1ee:	3402      	adds	r4, #2
 801d1f0:	9305      	str	r3, [sp, #20]
 801d1f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d2d8 <_vfiprintf_r+0x25c>
 801d1f6:	7821      	ldrb	r1, [r4, #0]
 801d1f8:	2203      	movs	r2, #3
 801d1fa:	4650      	mov	r0, sl
 801d1fc:	f7e3 f998 	bl	8000530 <memchr>
 801d200:	b140      	cbz	r0, 801d214 <_vfiprintf_r+0x198>
 801d202:	2340      	movs	r3, #64	; 0x40
 801d204:	eba0 000a 	sub.w	r0, r0, sl
 801d208:	fa03 f000 	lsl.w	r0, r3, r0
 801d20c:	9b04      	ldr	r3, [sp, #16]
 801d20e:	4303      	orrs	r3, r0
 801d210:	3401      	adds	r4, #1
 801d212:	9304      	str	r3, [sp, #16]
 801d214:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d218:	482c      	ldr	r0, [pc, #176]	; (801d2cc <_vfiprintf_r+0x250>)
 801d21a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d21e:	2206      	movs	r2, #6
 801d220:	f7e3 f986 	bl	8000530 <memchr>
 801d224:	2800      	cmp	r0, #0
 801d226:	d03f      	beq.n	801d2a8 <_vfiprintf_r+0x22c>
 801d228:	4b29      	ldr	r3, [pc, #164]	; (801d2d0 <_vfiprintf_r+0x254>)
 801d22a:	bb1b      	cbnz	r3, 801d274 <_vfiprintf_r+0x1f8>
 801d22c:	9b03      	ldr	r3, [sp, #12]
 801d22e:	3307      	adds	r3, #7
 801d230:	f023 0307 	bic.w	r3, r3, #7
 801d234:	3308      	adds	r3, #8
 801d236:	9303      	str	r3, [sp, #12]
 801d238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d23a:	443b      	add	r3, r7
 801d23c:	9309      	str	r3, [sp, #36]	; 0x24
 801d23e:	e767      	b.n	801d110 <_vfiprintf_r+0x94>
 801d240:	fb0c 3202 	mla	r2, ip, r2, r3
 801d244:	460c      	mov	r4, r1
 801d246:	2001      	movs	r0, #1
 801d248:	e7a5      	b.n	801d196 <_vfiprintf_r+0x11a>
 801d24a:	2300      	movs	r3, #0
 801d24c:	3401      	adds	r4, #1
 801d24e:	9305      	str	r3, [sp, #20]
 801d250:	4619      	mov	r1, r3
 801d252:	f04f 0c0a 	mov.w	ip, #10
 801d256:	4620      	mov	r0, r4
 801d258:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d25c:	3a30      	subs	r2, #48	; 0x30
 801d25e:	2a09      	cmp	r2, #9
 801d260:	d903      	bls.n	801d26a <_vfiprintf_r+0x1ee>
 801d262:	2b00      	cmp	r3, #0
 801d264:	d0c5      	beq.n	801d1f2 <_vfiprintf_r+0x176>
 801d266:	9105      	str	r1, [sp, #20]
 801d268:	e7c3      	b.n	801d1f2 <_vfiprintf_r+0x176>
 801d26a:	fb0c 2101 	mla	r1, ip, r1, r2
 801d26e:	4604      	mov	r4, r0
 801d270:	2301      	movs	r3, #1
 801d272:	e7f0      	b.n	801d256 <_vfiprintf_r+0x1da>
 801d274:	ab03      	add	r3, sp, #12
 801d276:	9300      	str	r3, [sp, #0]
 801d278:	462a      	mov	r2, r5
 801d27a:	4b16      	ldr	r3, [pc, #88]	; (801d2d4 <_vfiprintf_r+0x258>)
 801d27c:	a904      	add	r1, sp, #16
 801d27e:	4630      	mov	r0, r6
 801d280:	f3af 8000 	nop.w
 801d284:	4607      	mov	r7, r0
 801d286:	1c78      	adds	r0, r7, #1
 801d288:	d1d6      	bne.n	801d238 <_vfiprintf_r+0x1bc>
 801d28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d28c:	07d9      	lsls	r1, r3, #31
 801d28e:	d405      	bmi.n	801d29c <_vfiprintf_r+0x220>
 801d290:	89ab      	ldrh	r3, [r5, #12]
 801d292:	059a      	lsls	r2, r3, #22
 801d294:	d402      	bmi.n	801d29c <_vfiprintf_r+0x220>
 801d296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d298:	f000 fce4 	bl	801dc64 <__retarget_lock_release_recursive>
 801d29c:	89ab      	ldrh	r3, [r5, #12]
 801d29e:	065b      	lsls	r3, r3, #25
 801d2a0:	f53f af12 	bmi.w	801d0c8 <_vfiprintf_r+0x4c>
 801d2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d2a6:	e711      	b.n	801d0cc <_vfiprintf_r+0x50>
 801d2a8:	ab03      	add	r3, sp, #12
 801d2aa:	9300      	str	r3, [sp, #0]
 801d2ac:	462a      	mov	r2, r5
 801d2ae:	4b09      	ldr	r3, [pc, #36]	; (801d2d4 <_vfiprintf_r+0x258>)
 801d2b0:	a904      	add	r1, sp, #16
 801d2b2:	4630      	mov	r0, r6
 801d2b4:	f000 f880 	bl	801d3b8 <_printf_i>
 801d2b8:	e7e4      	b.n	801d284 <_vfiprintf_r+0x208>
 801d2ba:	bf00      	nop
 801d2bc:	08021dec 	.word	0x08021dec
 801d2c0:	08021e0c 	.word	0x08021e0c
 801d2c4:	08021dcc 	.word	0x08021dcc
 801d2c8:	08021d94 	.word	0x08021d94
 801d2cc:	08021d9e 	.word	0x08021d9e
 801d2d0:	00000000 	.word	0x00000000
 801d2d4:	0801d057 	.word	0x0801d057
 801d2d8:	08021d9a 	.word	0x08021d9a

0801d2dc <_printf_common>:
 801d2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2e0:	4616      	mov	r6, r2
 801d2e2:	4699      	mov	r9, r3
 801d2e4:	688a      	ldr	r2, [r1, #8]
 801d2e6:	690b      	ldr	r3, [r1, #16]
 801d2e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d2ec:	4293      	cmp	r3, r2
 801d2ee:	bfb8      	it	lt
 801d2f0:	4613      	movlt	r3, r2
 801d2f2:	6033      	str	r3, [r6, #0]
 801d2f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d2f8:	4607      	mov	r7, r0
 801d2fa:	460c      	mov	r4, r1
 801d2fc:	b10a      	cbz	r2, 801d302 <_printf_common+0x26>
 801d2fe:	3301      	adds	r3, #1
 801d300:	6033      	str	r3, [r6, #0]
 801d302:	6823      	ldr	r3, [r4, #0]
 801d304:	0699      	lsls	r1, r3, #26
 801d306:	bf42      	ittt	mi
 801d308:	6833      	ldrmi	r3, [r6, #0]
 801d30a:	3302      	addmi	r3, #2
 801d30c:	6033      	strmi	r3, [r6, #0]
 801d30e:	6825      	ldr	r5, [r4, #0]
 801d310:	f015 0506 	ands.w	r5, r5, #6
 801d314:	d106      	bne.n	801d324 <_printf_common+0x48>
 801d316:	f104 0a19 	add.w	sl, r4, #25
 801d31a:	68e3      	ldr	r3, [r4, #12]
 801d31c:	6832      	ldr	r2, [r6, #0]
 801d31e:	1a9b      	subs	r3, r3, r2
 801d320:	42ab      	cmp	r3, r5
 801d322:	dc26      	bgt.n	801d372 <_printf_common+0x96>
 801d324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d328:	1e13      	subs	r3, r2, #0
 801d32a:	6822      	ldr	r2, [r4, #0]
 801d32c:	bf18      	it	ne
 801d32e:	2301      	movne	r3, #1
 801d330:	0692      	lsls	r2, r2, #26
 801d332:	d42b      	bmi.n	801d38c <_printf_common+0xb0>
 801d334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d338:	4649      	mov	r1, r9
 801d33a:	4638      	mov	r0, r7
 801d33c:	47c0      	blx	r8
 801d33e:	3001      	adds	r0, #1
 801d340:	d01e      	beq.n	801d380 <_printf_common+0xa4>
 801d342:	6823      	ldr	r3, [r4, #0]
 801d344:	68e5      	ldr	r5, [r4, #12]
 801d346:	6832      	ldr	r2, [r6, #0]
 801d348:	f003 0306 	and.w	r3, r3, #6
 801d34c:	2b04      	cmp	r3, #4
 801d34e:	bf08      	it	eq
 801d350:	1aad      	subeq	r5, r5, r2
 801d352:	68a3      	ldr	r3, [r4, #8]
 801d354:	6922      	ldr	r2, [r4, #16]
 801d356:	bf0c      	ite	eq
 801d358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d35c:	2500      	movne	r5, #0
 801d35e:	4293      	cmp	r3, r2
 801d360:	bfc4      	itt	gt
 801d362:	1a9b      	subgt	r3, r3, r2
 801d364:	18ed      	addgt	r5, r5, r3
 801d366:	2600      	movs	r6, #0
 801d368:	341a      	adds	r4, #26
 801d36a:	42b5      	cmp	r5, r6
 801d36c:	d11a      	bne.n	801d3a4 <_printf_common+0xc8>
 801d36e:	2000      	movs	r0, #0
 801d370:	e008      	b.n	801d384 <_printf_common+0xa8>
 801d372:	2301      	movs	r3, #1
 801d374:	4652      	mov	r2, sl
 801d376:	4649      	mov	r1, r9
 801d378:	4638      	mov	r0, r7
 801d37a:	47c0      	blx	r8
 801d37c:	3001      	adds	r0, #1
 801d37e:	d103      	bne.n	801d388 <_printf_common+0xac>
 801d380:	f04f 30ff 	mov.w	r0, #4294967295
 801d384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d388:	3501      	adds	r5, #1
 801d38a:	e7c6      	b.n	801d31a <_printf_common+0x3e>
 801d38c:	18e1      	adds	r1, r4, r3
 801d38e:	1c5a      	adds	r2, r3, #1
 801d390:	2030      	movs	r0, #48	; 0x30
 801d392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d396:	4422      	add	r2, r4
 801d398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d39c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d3a0:	3302      	adds	r3, #2
 801d3a2:	e7c7      	b.n	801d334 <_printf_common+0x58>
 801d3a4:	2301      	movs	r3, #1
 801d3a6:	4622      	mov	r2, r4
 801d3a8:	4649      	mov	r1, r9
 801d3aa:	4638      	mov	r0, r7
 801d3ac:	47c0      	blx	r8
 801d3ae:	3001      	adds	r0, #1
 801d3b0:	d0e6      	beq.n	801d380 <_printf_common+0xa4>
 801d3b2:	3601      	adds	r6, #1
 801d3b4:	e7d9      	b.n	801d36a <_printf_common+0x8e>
	...

0801d3b8 <_printf_i>:
 801d3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3bc:	7e0f      	ldrb	r7, [r1, #24]
 801d3be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d3c0:	2f78      	cmp	r7, #120	; 0x78
 801d3c2:	4691      	mov	r9, r2
 801d3c4:	4680      	mov	r8, r0
 801d3c6:	460c      	mov	r4, r1
 801d3c8:	469a      	mov	sl, r3
 801d3ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d3ce:	d807      	bhi.n	801d3e0 <_printf_i+0x28>
 801d3d0:	2f62      	cmp	r7, #98	; 0x62
 801d3d2:	d80a      	bhi.n	801d3ea <_printf_i+0x32>
 801d3d4:	2f00      	cmp	r7, #0
 801d3d6:	f000 80d8 	beq.w	801d58a <_printf_i+0x1d2>
 801d3da:	2f58      	cmp	r7, #88	; 0x58
 801d3dc:	f000 80a3 	beq.w	801d526 <_printf_i+0x16e>
 801d3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d3e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d3e8:	e03a      	b.n	801d460 <_printf_i+0xa8>
 801d3ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d3ee:	2b15      	cmp	r3, #21
 801d3f0:	d8f6      	bhi.n	801d3e0 <_printf_i+0x28>
 801d3f2:	a101      	add	r1, pc, #4	; (adr r1, 801d3f8 <_printf_i+0x40>)
 801d3f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d3f8:	0801d451 	.word	0x0801d451
 801d3fc:	0801d465 	.word	0x0801d465
 801d400:	0801d3e1 	.word	0x0801d3e1
 801d404:	0801d3e1 	.word	0x0801d3e1
 801d408:	0801d3e1 	.word	0x0801d3e1
 801d40c:	0801d3e1 	.word	0x0801d3e1
 801d410:	0801d465 	.word	0x0801d465
 801d414:	0801d3e1 	.word	0x0801d3e1
 801d418:	0801d3e1 	.word	0x0801d3e1
 801d41c:	0801d3e1 	.word	0x0801d3e1
 801d420:	0801d3e1 	.word	0x0801d3e1
 801d424:	0801d571 	.word	0x0801d571
 801d428:	0801d495 	.word	0x0801d495
 801d42c:	0801d553 	.word	0x0801d553
 801d430:	0801d3e1 	.word	0x0801d3e1
 801d434:	0801d3e1 	.word	0x0801d3e1
 801d438:	0801d593 	.word	0x0801d593
 801d43c:	0801d3e1 	.word	0x0801d3e1
 801d440:	0801d495 	.word	0x0801d495
 801d444:	0801d3e1 	.word	0x0801d3e1
 801d448:	0801d3e1 	.word	0x0801d3e1
 801d44c:	0801d55b 	.word	0x0801d55b
 801d450:	682b      	ldr	r3, [r5, #0]
 801d452:	1d1a      	adds	r2, r3, #4
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	602a      	str	r2, [r5, #0]
 801d458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d45c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d460:	2301      	movs	r3, #1
 801d462:	e0a3      	b.n	801d5ac <_printf_i+0x1f4>
 801d464:	6820      	ldr	r0, [r4, #0]
 801d466:	6829      	ldr	r1, [r5, #0]
 801d468:	0606      	lsls	r6, r0, #24
 801d46a:	f101 0304 	add.w	r3, r1, #4
 801d46e:	d50a      	bpl.n	801d486 <_printf_i+0xce>
 801d470:	680e      	ldr	r6, [r1, #0]
 801d472:	602b      	str	r3, [r5, #0]
 801d474:	2e00      	cmp	r6, #0
 801d476:	da03      	bge.n	801d480 <_printf_i+0xc8>
 801d478:	232d      	movs	r3, #45	; 0x2d
 801d47a:	4276      	negs	r6, r6
 801d47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d480:	485e      	ldr	r0, [pc, #376]	; (801d5fc <_printf_i+0x244>)
 801d482:	230a      	movs	r3, #10
 801d484:	e019      	b.n	801d4ba <_printf_i+0x102>
 801d486:	680e      	ldr	r6, [r1, #0]
 801d488:	602b      	str	r3, [r5, #0]
 801d48a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d48e:	bf18      	it	ne
 801d490:	b236      	sxthne	r6, r6
 801d492:	e7ef      	b.n	801d474 <_printf_i+0xbc>
 801d494:	682b      	ldr	r3, [r5, #0]
 801d496:	6820      	ldr	r0, [r4, #0]
 801d498:	1d19      	adds	r1, r3, #4
 801d49a:	6029      	str	r1, [r5, #0]
 801d49c:	0601      	lsls	r1, r0, #24
 801d49e:	d501      	bpl.n	801d4a4 <_printf_i+0xec>
 801d4a0:	681e      	ldr	r6, [r3, #0]
 801d4a2:	e002      	b.n	801d4aa <_printf_i+0xf2>
 801d4a4:	0646      	lsls	r6, r0, #25
 801d4a6:	d5fb      	bpl.n	801d4a0 <_printf_i+0xe8>
 801d4a8:	881e      	ldrh	r6, [r3, #0]
 801d4aa:	4854      	ldr	r0, [pc, #336]	; (801d5fc <_printf_i+0x244>)
 801d4ac:	2f6f      	cmp	r7, #111	; 0x6f
 801d4ae:	bf0c      	ite	eq
 801d4b0:	2308      	moveq	r3, #8
 801d4b2:	230a      	movne	r3, #10
 801d4b4:	2100      	movs	r1, #0
 801d4b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d4ba:	6865      	ldr	r5, [r4, #4]
 801d4bc:	60a5      	str	r5, [r4, #8]
 801d4be:	2d00      	cmp	r5, #0
 801d4c0:	bfa2      	ittt	ge
 801d4c2:	6821      	ldrge	r1, [r4, #0]
 801d4c4:	f021 0104 	bicge.w	r1, r1, #4
 801d4c8:	6021      	strge	r1, [r4, #0]
 801d4ca:	b90e      	cbnz	r6, 801d4d0 <_printf_i+0x118>
 801d4cc:	2d00      	cmp	r5, #0
 801d4ce:	d04d      	beq.n	801d56c <_printf_i+0x1b4>
 801d4d0:	4615      	mov	r5, r2
 801d4d2:	fbb6 f1f3 	udiv	r1, r6, r3
 801d4d6:	fb03 6711 	mls	r7, r3, r1, r6
 801d4da:	5dc7      	ldrb	r7, [r0, r7]
 801d4dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d4e0:	4637      	mov	r7, r6
 801d4e2:	42bb      	cmp	r3, r7
 801d4e4:	460e      	mov	r6, r1
 801d4e6:	d9f4      	bls.n	801d4d2 <_printf_i+0x11a>
 801d4e8:	2b08      	cmp	r3, #8
 801d4ea:	d10b      	bne.n	801d504 <_printf_i+0x14c>
 801d4ec:	6823      	ldr	r3, [r4, #0]
 801d4ee:	07de      	lsls	r6, r3, #31
 801d4f0:	d508      	bpl.n	801d504 <_printf_i+0x14c>
 801d4f2:	6923      	ldr	r3, [r4, #16]
 801d4f4:	6861      	ldr	r1, [r4, #4]
 801d4f6:	4299      	cmp	r1, r3
 801d4f8:	bfde      	ittt	le
 801d4fa:	2330      	movle	r3, #48	; 0x30
 801d4fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d500:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d504:	1b52      	subs	r2, r2, r5
 801d506:	6122      	str	r2, [r4, #16]
 801d508:	f8cd a000 	str.w	sl, [sp]
 801d50c:	464b      	mov	r3, r9
 801d50e:	aa03      	add	r2, sp, #12
 801d510:	4621      	mov	r1, r4
 801d512:	4640      	mov	r0, r8
 801d514:	f7ff fee2 	bl	801d2dc <_printf_common>
 801d518:	3001      	adds	r0, #1
 801d51a:	d14c      	bne.n	801d5b6 <_printf_i+0x1fe>
 801d51c:	f04f 30ff 	mov.w	r0, #4294967295
 801d520:	b004      	add	sp, #16
 801d522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d526:	4835      	ldr	r0, [pc, #212]	; (801d5fc <_printf_i+0x244>)
 801d528:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d52c:	6829      	ldr	r1, [r5, #0]
 801d52e:	6823      	ldr	r3, [r4, #0]
 801d530:	f851 6b04 	ldr.w	r6, [r1], #4
 801d534:	6029      	str	r1, [r5, #0]
 801d536:	061d      	lsls	r5, r3, #24
 801d538:	d514      	bpl.n	801d564 <_printf_i+0x1ac>
 801d53a:	07df      	lsls	r7, r3, #31
 801d53c:	bf44      	itt	mi
 801d53e:	f043 0320 	orrmi.w	r3, r3, #32
 801d542:	6023      	strmi	r3, [r4, #0]
 801d544:	b91e      	cbnz	r6, 801d54e <_printf_i+0x196>
 801d546:	6823      	ldr	r3, [r4, #0]
 801d548:	f023 0320 	bic.w	r3, r3, #32
 801d54c:	6023      	str	r3, [r4, #0]
 801d54e:	2310      	movs	r3, #16
 801d550:	e7b0      	b.n	801d4b4 <_printf_i+0xfc>
 801d552:	6823      	ldr	r3, [r4, #0]
 801d554:	f043 0320 	orr.w	r3, r3, #32
 801d558:	6023      	str	r3, [r4, #0]
 801d55a:	2378      	movs	r3, #120	; 0x78
 801d55c:	4828      	ldr	r0, [pc, #160]	; (801d600 <_printf_i+0x248>)
 801d55e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d562:	e7e3      	b.n	801d52c <_printf_i+0x174>
 801d564:	0659      	lsls	r1, r3, #25
 801d566:	bf48      	it	mi
 801d568:	b2b6      	uxthmi	r6, r6
 801d56a:	e7e6      	b.n	801d53a <_printf_i+0x182>
 801d56c:	4615      	mov	r5, r2
 801d56e:	e7bb      	b.n	801d4e8 <_printf_i+0x130>
 801d570:	682b      	ldr	r3, [r5, #0]
 801d572:	6826      	ldr	r6, [r4, #0]
 801d574:	6961      	ldr	r1, [r4, #20]
 801d576:	1d18      	adds	r0, r3, #4
 801d578:	6028      	str	r0, [r5, #0]
 801d57a:	0635      	lsls	r5, r6, #24
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	d501      	bpl.n	801d584 <_printf_i+0x1cc>
 801d580:	6019      	str	r1, [r3, #0]
 801d582:	e002      	b.n	801d58a <_printf_i+0x1d2>
 801d584:	0670      	lsls	r0, r6, #25
 801d586:	d5fb      	bpl.n	801d580 <_printf_i+0x1c8>
 801d588:	8019      	strh	r1, [r3, #0]
 801d58a:	2300      	movs	r3, #0
 801d58c:	6123      	str	r3, [r4, #16]
 801d58e:	4615      	mov	r5, r2
 801d590:	e7ba      	b.n	801d508 <_printf_i+0x150>
 801d592:	682b      	ldr	r3, [r5, #0]
 801d594:	1d1a      	adds	r2, r3, #4
 801d596:	602a      	str	r2, [r5, #0]
 801d598:	681d      	ldr	r5, [r3, #0]
 801d59a:	6862      	ldr	r2, [r4, #4]
 801d59c:	2100      	movs	r1, #0
 801d59e:	4628      	mov	r0, r5
 801d5a0:	f7e2 ffc6 	bl	8000530 <memchr>
 801d5a4:	b108      	cbz	r0, 801d5aa <_printf_i+0x1f2>
 801d5a6:	1b40      	subs	r0, r0, r5
 801d5a8:	6060      	str	r0, [r4, #4]
 801d5aa:	6863      	ldr	r3, [r4, #4]
 801d5ac:	6123      	str	r3, [r4, #16]
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d5b4:	e7a8      	b.n	801d508 <_printf_i+0x150>
 801d5b6:	6923      	ldr	r3, [r4, #16]
 801d5b8:	462a      	mov	r2, r5
 801d5ba:	4649      	mov	r1, r9
 801d5bc:	4640      	mov	r0, r8
 801d5be:	47d0      	blx	sl
 801d5c0:	3001      	adds	r0, #1
 801d5c2:	d0ab      	beq.n	801d51c <_printf_i+0x164>
 801d5c4:	6823      	ldr	r3, [r4, #0]
 801d5c6:	079b      	lsls	r3, r3, #30
 801d5c8:	d413      	bmi.n	801d5f2 <_printf_i+0x23a>
 801d5ca:	68e0      	ldr	r0, [r4, #12]
 801d5cc:	9b03      	ldr	r3, [sp, #12]
 801d5ce:	4298      	cmp	r0, r3
 801d5d0:	bfb8      	it	lt
 801d5d2:	4618      	movlt	r0, r3
 801d5d4:	e7a4      	b.n	801d520 <_printf_i+0x168>
 801d5d6:	2301      	movs	r3, #1
 801d5d8:	4632      	mov	r2, r6
 801d5da:	4649      	mov	r1, r9
 801d5dc:	4640      	mov	r0, r8
 801d5de:	47d0      	blx	sl
 801d5e0:	3001      	adds	r0, #1
 801d5e2:	d09b      	beq.n	801d51c <_printf_i+0x164>
 801d5e4:	3501      	adds	r5, #1
 801d5e6:	68e3      	ldr	r3, [r4, #12]
 801d5e8:	9903      	ldr	r1, [sp, #12]
 801d5ea:	1a5b      	subs	r3, r3, r1
 801d5ec:	42ab      	cmp	r3, r5
 801d5ee:	dcf2      	bgt.n	801d5d6 <_printf_i+0x21e>
 801d5f0:	e7eb      	b.n	801d5ca <_printf_i+0x212>
 801d5f2:	2500      	movs	r5, #0
 801d5f4:	f104 0619 	add.w	r6, r4, #25
 801d5f8:	e7f5      	b.n	801d5e6 <_printf_i+0x22e>
 801d5fa:	bf00      	nop
 801d5fc:	08021da5 	.word	0x08021da5
 801d600:	08021db6 	.word	0x08021db6

0801d604 <_sbrk_r>:
 801d604:	b538      	push	{r3, r4, r5, lr}
 801d606:	4d06      	ldr	r5, [pc, #24]	; (801d620 <_sbrk_r+0x1c>)
 801d608:	2300      	movs	r3, #0
 801d60a:	4604      	mov	r4, r0
 801d60c:	4608      	mov	r0, r1
 801d60e:	602b      	str	r3, [r5, #0]
 801d610:	f7e4 f87c 	bl	800170c <_sbrk>
 801d614:	1c43      	adds	r3, r0, #1
 801d616:	d102      	bne.n	801d61e <_sbrk_r+0x1a>
 801d618:	682b      	ldr	r3, [r5, #0]
 801d61a:	b103      	cbz	r3, 801d61e <_sbrk_r+0x1a>
 801d61c:	6023      	str	r3, [r4, #0]
 801d61e:	bd38      	pop	{r3, r4, r5, pc}
 801d620:	240c3fe4 	.word	0x240c3fe4

0801d624 <_raise_r>:
 801d624:	291f      	cmp	r1, #31
 801d626:	b538      	push	{r3, r4, r5, lr}
 801d628:	4604      	mov	r4, r0
 801d62a:	460d      	mov	r5, r1
 801d62c:	d904      	bls.n	801d638 <_raise_r+0x14>
 801d62e:	2316      	movs	r3, #22
 801d630:	6003      	str	r3, [r0, #0]
 801d632:	f04f 30ff 	mov.w	r0, #4294967295
 801d636:	bd38      	pop	{r3, r4, r5, pc}
 801d638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d63a:	b112      	cbz	r2, 801d642 <_raise_r+0x1e>
 801d63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d640:	b94b      	cbnz	r3, 801d656 <_raise_r+0x32>
 801d642:	4620      	mov	r0, r4
 801d644:	f000 f830 	bl	801d6a8 <_getpid_r>
 801d648:	462a      	mov	r2, r5
 801d64a:	4601      	mov	r1, r0
 801d64c:	4620      	mov	r0, r4
 801d64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d652:	f000 b817 	b.w	801d684 <_kill_r>
 801d656:	2b01      	cmp	r3, #1
 801d658:	d00a      	beq.n	801d670 <_raise_r+0x4c>
 801d65a:	1c59      	adds	r1, r3, #1
 801d65c:	d103      	bne.n	801d666 <_raise_r+0x42>
 801d65e:	2316      	movs	r3, #22
 801d660:	6003      	str	r3, [r0, #0]
 801d662:	2001      	movs	r0, #1
 801d664:	e7e7      	b.n	801d636 <_raise_r+0x12>
 801d666:	2400      	movs	r4, #0
 801d668:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d66c:	4628      	mov	r0, r5
 801d66e:	4798      	blx	r3
 801d670:	2000      	movs	r0, #0
 801d672:	e7e0      	b.n	801d636 <_raise_r+0x12>

0801d674 <raise>:
 801d674:	4b02      	ldr	r3, [pc, #8]	; (801d680 <raise+0xc>)
 801d676:	4601      	mov	r1, r0
 801d678:	6818      	ldr	r0, [r3, #0]
 801d67a:	f7ff bfd3 	b.w	801d624 <_raise_r>
 801d67e:	bf00      	nop
 801d680:	24000078 	.word	0x24000078

0801d684 <_kill_r>:
 801d684:	b538      	push	{r3, r4, r5, lr}
 801d686:	4d07      	ldr	r5, [pc, #28]	; (801d6a4 <_kill_r+0x20>)
 801d688:	2300      	movs	r3, #0
 801d68a:	4604      	mov	r4, r0
 801d68c:	4608      	mov	r0, r1
 801d68e:	4611      	mov	r1, r2
 801d690:	602b      	str	r3, [r5, #0]
 801d692:	f7e3 ffb3 	bl	80015fc <_kill>
 801d696:	1c43      	adds	r3, r0, #1
 801d698:	d102      	bne.n	801d6a0 <_kill_r+0x1c>
 801d69a:	682b      	ldr	r3, [r5, #0]
 801d69c:	b103      	cbz	r3, 801d6a0 <_kill_r+0x1c>
 801d69e:	6023      	str	r3, [r4, #0]
 801d6a0:	bd38      	pop	{r3, r4, r5, pc}
 801d6a2:	bf00      	nop
 801d6a4:	240c3fe4 	.word	0x240c3fe4

0801d6a8 <_getpid_r>:
 801d6a8:	f7e3 bfa0 	b.w	80015ec <_getpid>

0801d6ac <__swbuf_r>:
 801d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6ae:	460e      	mov	r6, r1
 801d6b0:	4614      	mov	r4, r2
 801d6b2:	4605      	mov	r5, r0
 801d6b4:	b118      	cbz	r0, 801d6be <__swbuf_r+0x12>
 801d6b6:	6983      	ldr	r3, [r0, #24]
 801d6b8:	b90b      	cbnz	r3, 801d6be <__swbuf_r+0x12>
 801d6ba:	f000 fa33 	bl	801db24 <__sinit>
 801d6be:	4b21      	ldr	r3, [pc, #132]	; (801d744 <__swbuf_r+0x98>)
 801d6c0:	429c      	cmp	r4, r3
 801d6c2:	d12b      	bne.n	801d71c <__swbuf_r+0x70>
 801d6c4:	686c      	ldr	r4, [r5, #4]
 801d6c6:	69a3      	ldr	r3, [r4, #24]
 801d6c8:	60a3      	str	r3, [r4, #8]
 801d6ca:	89a3      	ldrh	r3, [r4, #12]
 801d6cc:	071a      	lsls	r2, r3, #28
 801d6ce:	d52f      	bpl.n	801d730 <__swbuf_r+0x84>
 801d6d0:	6923      	ldr	r3, [r4, #16]
 801d6d2:	b36b      	cbz	r3, 801d730 <__swbuf_r+0x84>
 801d6d4:	6923      	ldr	r3, [r4, #16]
 801d6d6:	6820      	ldr	r0, [r4, #0]
 801d6d8:	1ac0      	subs	r0, r0, r3
 801d6da:	6963      	ldr	r3, [r4, #20]
 801d6dc:	b2f6      	uxtb	r6, r6
 801d6de:	4283      	cmp	r3, r0
 801d6e0:	4637      	mov	r7, r6
 801d6e2:	dc04      	bgt.n	801d6ee <__swbuf_r+0x42>
 801d6e4:	4621      	mov	r1, r4
 801d6e6:	4628      	mov	r0, r5
 801d6e8:	f000 f988 	bl	801d9fc <_fflush_r>
 801d6ec:	bb30      	cbnz	r0, 801d73c <__swbuf_r+0x90>
 801d6ee:	68a3      	ldr	r3, [r4, #8]
 801d6f0:	3b01      	subs	r3, #1
 801d6f2:	60a3      	str	r3, [r4, #8]
 801d6f4:	6823      	ldr	r3, [r4, #0]
 801d6f6:	1c5a      	adds	r2, r3, #1
 801d6f8:	6022      	str	r2, [r4, #0]
 801d6fa:	701e      	strb	r6, [r3, #0]
 801d6fc:	6963      	ldr	r3, [r4, #20]
 801d6fe:	3001      	adds	r0, #1
 801d700:	4283      	cmp	r3, r0
 801d702:	d004      	beq.n	801d70e <__swbuf_r+0x62>
 801d704:	89a3      	ldrh	r3, [r4, #12]
 801d706:	07db      	lsls	r3, r3, #31
 801d708:	d506      	bpl.n	801d718 <__swbuf_r+0x6c>
 801d70a:	2e0a      	cmp	r6, #10
 801d70c:	d104      	bne.n	801d718 <__swbuf_r+0x6c>
 801d70e:	4621      	mov	r1, r4
 801d710:	4628      	mov	r0, r5
 801d712:	f000 f973 	bl	801d9fc <_fflush_r>
 801d716:	b988      	cbnz	r0, 801d73c <__swbuf_r+0x90>
 801d718:	4638      	mov	r0, r7
 801d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d71c:	4b0a      	ldr	r3, [pc, #40]	; (801d748 <__swbuf_r+0x9c>)
 801d71e:	429c      	cmp	r4, r3
 801d720:	d101      	bne.n	801d726 <__swbuf_r+0x7a>
 801d722:	68ac      	ldr	r4, [r5, #8]
 801d724:	e7cf      	b.n	801d6c6 <__swbuf_r+0x1a>
 801d726:	4b09      	ldr	r3, [pc, #36]	; (801d74c <__swbuf_r+0xa0>)
 801d728:	429c      	cmp	r4, r3
 801d72a:	bf08      	it	eq
 801d72c:	68ec      	ldreq	r4, [r5, #12]
 801d72e:	e7ca      	b.n	801d6c6 <__swbuf_r+0x1a>
 801d730:	4621      	mov	r1, r4
 801d732:	4628      	mov	r0, r5
 801d734:	f000 f80c 	bl	801d750 <__swsetup_r>
 801d738:	2800      	cmp	r0, #0
 801d73a:	d0cb      	beq.n	801d6d4 <__swbuf_r+0x28>
 801d73c:	f04f 37ff 	mov.w	r7, #4294967295
 801d740:	e7ea      	b.n	801d718 <__swbuf_r+0x6c>
 801d742:	bf00      	nop
 801d744:	08021dec 	.word	0x08021dec
 801d748:	08021e0c 	.word	0x08021e0c
 801d74c:	08021dcc 	.word	0x08021dcc

0801d750 <__swsetup_r>:
 801d750:	4b32      	ldr	r3, [pc, #200]	; (801d81c <__swsetup_r+0xcc>)
 801d752:	b570      	push	{r4, r5, r6, lr}
 801d754:	681d      	ldr	r5, [r3, #0]
 801d756:	4606      	mov	r6, r0
 801d758:	460c      	mov	r4, r1
 801d75a:	b125      	cbz	r5, 801d766 <__swsetup_r+0x16>
 801d75c:	69ab      	ldr	r3, [r5, #24]
 801d75e:	b913      	cbnz	r3, 801d766 <__swsetup_r+0x16>
 801d760:	4628      	mov	r0, r5
 801d762:	f000 f9df 	bl	801db24 <__sinit>
 801d766:	4b2e      	ldr	r3, [pc, #184]	; (801d820 <__swsetup_r+0xd0>)
 801d768:	429c      	cmp	r4, r3
 801d76a:	d10f      	bne.n	801d78c <__swsetup_r+0x3c>
 801d76c:	686c      	ldr	r4, [r5, #4]
 801d76e:	89a3      	ldrh	r3, [r4, #12]
 801d770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d774:	0719      	lsls	r1, r3, #28
 801d776:	d42c      	bmi.n	801d7d2 <__swsetup_r+0x82>
 801d778:	06dd      	lsls	r5, r3, #27
 801d77a:	d411      	bmi.n	801d7a0 <__swsetup_r+0x50>
 801d77c:	2309      	movs	r3, #9
 801d77e:	6033      	str	r3, [r6, #0]
 801d780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d784:	81a3      	strh	r3, [r4, #12]
 801d786:	f04f 30ff 	mov.w	r0, #4294967295
 801d78a:	e03e      	b.n	801d80a <__swsetup_r+0xba>
 801d78c:	4b25      	ldr	r3, [pc, #148]	; (801d824 <__swsetup_r+0xd4>)
 801d78e:	429c      	cmp	r4, r3
 801d790:	d101      	bne.n	801d796 <__swsetup_r+0x46>
 801d792:	68ac      	ldr	r4, [r5, #8]
 801d794:	e7eb      	b.n	801d76e <__swsetup_r+0x1e>
 801d796:	4b24      	ldr	r3, [pc, #144]	; (801d828 <__swsetup_r+0xd8>)
 801d798:	429c      	cmp	r4, r3
 801d79a:	bf08      	it	eq
 801d79c:	68ec      	ldreq	r4, [r5, #12]
 801d79e:	e7e6      	b.n	801d76e <__swsetup_r+0x1e>
 801d7a0:	0758      	lsls	r0, r3, #29
 801d7a2:	d512      	bpl.n	801d7ca <__swsetup_r+0x7a>
 801d7a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d7a6:	b141      	cbz	r1, 801d7ba <__swsetup_r+0x6a>
 801d7a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7ac:	4299      	cmp	r1, r3
 801d7ae:	d002      	beq.n	801d7b6 <__swsetup_r+0x66>
 801d7b0:	4630      	mov	r0, r6
 801d7b2:	f7ff fb59 	bl	801ce68 <_free_r>
 801d7b6:	2300      	movs	r3, #0
 801d7b8:	6363      	str	r3, [r4, #52]	; 0x34
 801d7ba:	89a3      	ldrh	r3, [r4, #12]
 801d7bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d7c0:	81a3      	strh	r3, [r4, #12]
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	6063      	str	r3, [r4, #4]
 801d7c6:	6923      	ldr	r3, [r4, #16]
 801d7c8:	6023      	str	r3, [r4, #0]
 801d7ca:	89a3      	ldrh	r3, [r4, #12]
 801d7cc:	f043 0308 	orr.w	r3, r3, #8
 801d7d0:	81a3      	strh	r3, [r4, #12]
 801d7d2:	6923      	ldr	r3, [r4, #16]
 801d7d4:	b94b      	cbnz	r3, 801d7ea <__swsetup_r+0x9a>
 801d7d6:	89a3      	ldrh	r3, [r4, #12]
 801d7d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d7e0:	d003      	beq.n	801d7ea <__swsetup_r+0x9a>
 801d7e2:	4621      	mov	r1, r4
 801d7e4:	4630      	mov	r0, r6
 801d7e6:	f000 fa63 	bl	801dcb0 <__smakebuf_r>
 801d7ea:	89a0      	ldrh	r0, [r4, #12]
 801d7ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7f0:	f010 0301 	ands.w	r3, r0, #1
 801d7f4:	d00a      	beq.n	801d80c <__swsetup_r+0xbc>
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	60a3      	str	r3, [r4, #8]
 801d7fa:	6963      	ldr	r3, [r4, #20]
 801d7fc:	425b      	negs	r3, r3
 801d7fe:	61a3      	str	r3, [r4, #24]
 801d800:	6923      	ldr	r3, [r4, #16]
 801d802:	b943      	cbnz	r3, 801d816 <__swsetup_r+0xc6>
 801d804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d808:	d1ba      	bne.n	801d780 <__swsetup_r+0x30>
 801d80a:	bd70      	pop	{r4, r5, r6, pc}
 801d80c:	0781      	lsls	r1, r0, #30
 801d80e:	bf58      	it	pl
 801d810:	6963      	ldrpl	r3, [r4, #20]
 801d812:	60a3      	str	r3, [r4, #8]
 801d814:	e7f4      	b.n	801d800 <__swsetup_r+0xb0>
 801d816:	2000      	movs	r0, #0
 801d818:	e7f7      	b.n	801d80a <__swsetup_r+0xba>
 801d81a:	bf00      	nop
 801d81c:	24000078 	.word	0x24000078
 801d820:	08021dec 	.word	0x08021dec
 801d824:	08021e0c 	.word	0x08021e0c
 801d828:	08021dcc 	.word	0x08021dcc

0801d82c <__register_exitproc>:
 801d82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d830:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801d8ec <__register_exitproc+0xc0>
 801d834:	4606      	mov	r6, r0
 801d836:	f8d8 0000 	ldr.w	r0, [r8]
 801d83a:	461f      	mov	r7, r3
 801d83c:	460d      	mov	r5, r1
 801d83e:	4691      	mov	r9, r2
 801d840:	f000 fa0e 	bl	801dc60 <__retarget_lock_acquire_recursive>
 801d844:	4b25      	ldr	r3, [pc, #148]	; (801d8dc <__register_exitproc+0xb0>)
 801d846:	681c      	ldr	r4, [r3, #0]
 801d848:	b934      	cbnz	r4, 801d858 <__register_exitproc+0x2c>
 801d84a:	4c25      	ldr	r4, [pc, #148]	; (801d8e0 <__register_exitproc+0xb4>)
 801d84c:	601c      	str	r4, [r3, #0]
 801d84e:	4b25      	ldr	r3, [pc, #148]	; (801d8e4 <__register_exitproc+0xb8>)
 801d850:	b113      	cbz	r3, 801d858 <__register_exitproc+0x2c>
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801d858:	6863      	ldr	r3, [r4, #4]
 801d85a:	2b1f      	cmp	r3, #31
 801d85c:	dd07      	ble.n	801d86e <__register_exitproc+0x42>
 801d85e:	f8d8 0000 	ldr.w	r0, [r8]
 801d862:	f000 f9ff 	bl	801dc64 <__retarget_lock_release_recursive>
 801d866:	f04f 30ff 	mov.w	r0, #4294967295
 801d86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d86e:	b34e      	cbz	r6, 801d8c4 <__register_exitproc+0x98>
 801d870:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801d874:	b988      	cbnz	r0, 801d89a <__register_exitproc+0x6e>
 801d876:	4b1c      	ldr	r3, [pc, #112]	; (801d8e8 <__register_exitproc+0xbc>)
 801d878:	b923      	cbnz	r3, 801d884 <__register_exitproc+0x58>
 801d87a:	f8d8 0000 	ldr.w	r0, [r8]
 801d87e:	f000 f9f0 	bl	801dc62 <__retarget_lock_release>
 801d882:	e7f0      	b.n	801d866 <__register_exitproc+0x3a>
 801d884:	f44f 7084 	mov.w	r0, #264	; 0x108
 801d888:	f7ff fad6 	bl	801ce38 <malloc>
 801d88c:	2800      	cmp	r0, #0
 801d88e:	d0f4      	beq.n	801d87a <__register_exitproc+0x4e>
 801d890:	2300      	movs	r3, #0
 801d892:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801d896:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801d89a:	6863      	ldr	r3, [r4, #4]
 801d89c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801d8a0:	2201      	movs	r2, #1
 801d8a2:	409a      	lsls	r2, r3
 801d8a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801d8a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801d8ac:	4313      	orrs	r3, r2
 801d8ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801d8b2:	2e02      	cmp	r6, #2
 801d8b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801d8b8:	bf02      	ittt	eq
 801d8ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801d8be:	4313      	orreq	r3, r2
 801d8c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801d8c4:	6863      	ldr	r3, [r4, #4]
 801d8c6:	f8d8 0000 	ldr.w	r0, [r8]
 801d8ca:	1c5a      	adds	r2, r3, #1
 801d8cc:	3302      	adds	r3, #2
 801d8ce:	6062      	str	r2, [r4, #4]
 801d8d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801d8d4:	f000 f9c6 	bl	801dc64 <__retarget_lock_release_recursive>
 801d8d8:	2000      	movs	r0, #0
 801d8da:	e7c6      	b.n	801d86a <__register_exitproc+0x3e>
 801d8dc:	240c3fdc 	.word	0x240c3fdc
 801d8e0:	240c3f50 	.word	0x240c3f50
 801d8e4:	08021dc8 	.word	0x08021dc8
 801d8e8:	0801ce39 	.word	0x0801ce39
 801d8ec:	240000dc 	.word	0x240000dc

0801d8f0 <__sflush_r>:
 801d8f0:	898a      	ldrh	r2, [r1, #12]
 801d8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8f6:	4605      	mov	r5, r0
 801d8f8:	0710      	lsls	r0, r2, #28
 801d8fa:	460c      	mov	r4, r1
 801d8fc:	d458      	bmi.n	801d9b0 <__sflush_r+0xc0>
 801d8fe:	684b      	ldr	r3, [r1, #4]
 801d900:	2b00      	cmp	r3, #0
 801d902:	dc05      	bgt.n	801d910 <__sflush_r+0x20>
 801d904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d906:	2b00      	cmp	r3, #0
 801d908:	dc02      	bgt.n	801d910 <__sflush_r+0x20>
 801d90a:	2000      	movs	r0, #0
 801d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d912:	2e00      	cmp	r6, #0
 801d914:	d0f9      	beq.n	801d90a <__sflush_r+0x1a>
 801d916:	2300      	movs	r3, #0
 801d918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d91c:	682f      	ldr	r7, [r5, #0]
 801d91e:	602b      	str	r3, [r5, #0]
 801d920:	d032      	beq.n	801d988 <__sflush_r+0x98>
 801d922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d924:	89a3      	ldrh	r3, [r4, #12]
 801d926:	075a      	lsls	r2, r3, #29
 801d928:	d505      	bpl.n	801d936 <__sflush_r+0x46>
 801d92a:	6863      	ldr	r3, [r4, #4]
 801d92c:	1ac0      	subs	r0, r0, r3
 801d92e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d930:	b10b      	cbz	r3, 801d936 <__sflush_r+0x46>
 801d932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d934:	1ac0      	subs	r0, r0, r3
 801d936:	2300      	movs	r3, #0
 801d938:	4602      	mov	r2, r0
 801d93a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d93c:	6a21      	ldr	r1, [r4, #32]
 801d93e:	4628      	mov	r0, r5
 801d940:	47b0      	blx	r6
 801d942:	1c43      	adds	r3, r0, #1
 801d944:	89a3      	ldrh	r3, [r4, #12]
 801d946:	d106      	bne.n	801d956 <__sflush_r+0x66>
 801d948:	6829      	ldr	r1, [r5, #0]
 801d94a:	291d      	cmp	r1, #29
 801d94c:	d82c      	bhi.n	801d9a8 <__sflush_r+0xb8>
 801d94e:	4a2a      	ldr	r2, [pc, #168]	; (801d9f8 <__sflush_r+0x108>)
 801d950:	40ca      	lsrs	r2, r1
 801d952:	07d6      	lsls	r6, r2, #31
 801d954:	d528      	bpl.n	801d9a8 <__sflush_r+0xb8>
 801d956:	2200      	movs	r2, #0
 801d958:	6062      	str	r2, [r4, #4]
 801d95a:	04d9      	lsls	r1, r3, #19
 801d95c:	6922      	ldr	r2, [r4, #16]
 801d95e:	6022      	str	r2, [r4, #0]
 801d960:	d504      	bpl.n	801d96c <__sflush_r+0x7c>
 801d962:	1c42      	adds	r2, r0, #1
 801d964:	d101      	bne.n	801d96a <__sflush_r+0x7a>
 801d966:	682b      	ldr	r3, [r5, #0]
 801d968:	b903      	cbnz	r3, 801d96c <__sflush_r+0x7c>
 801d96a:	6560      	str	r0, [r4, #84]	; 0x54
 801d96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d96e:	602f      	str	r7, [r5, #0]
 801d970:	2900      	cmp	r1, #0
 801d972:	d0ca      	beq.n	801d90a <__sflush_r+0x1a>
 801d974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d978:	4299      	cmp	r1, r3
 801d97a:	d002      	beq.n	801d982 <__sflush_r+0x92>
 801d97c:	4628      	mov	r0, r5
 801d97e:	f7ff fa73 	bl	801ce68 <_free_r>
 801d982:	2000      	movs	r0, #0
 801d984:	6360      	str	r0, [r4, #52]	; 0x34
 801d986:	e7c1      	b.n	801d90c <__sflush_r+0x1c>
 801d988:	6a21      	ldr	r1, [r4, #32]
 801d98a:	2301      	movs	r3, #1
 801d98c:	4628      	mov	r0, r5
 801d98e:	47b0      	blx	r6
 801d990:	1c41      	adds	r1, r0, #1
 801d992:	d1c7      	bne.n	801d924 <__sflush_r+0x34>
 801d994:	682b      	ldr	r3, [r5, #0]
 801d996:	2b00      	cmp	r3, #0
 801d998:	d0c4      	beq.n	801d924 <__sflush_r+0x34>
 801d99a:	2b1d      	cmp	r3, #29
 801d99c:	d001      	beq.n	801d9a2 <__sflush_r+0xb2>
 801d99e:	2b16      	cmp	r3, #22
 801d9a0:	d101      	bne.n	801d9a6 <__sflush_r+0xb6>
 801d9a2:	602f      	str	r7, [r5, #0]
 801d9a4:	e7b1      	b.n	801d90a <__sflush_r+0x1a>
 801d9a6:	89a3      	ldrh	r3, [r4, #12]
 801d9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d9ac:	81a3      	strh	r3, [r4, #12]
 801d9ae:	e7ad      	b.n	801d90c <__sflush_r+0x1c>
 801d9b0:	690f      	ldr	r7, [r1, #16]
 801d9b2:	2f00      	cmp	r7, #0
 801d9b4:	d0a9      	beq.n	801d90a <__sflush_r+0x1a>
 801d9b6:	0793      	lsls	r3, r2, #30
 801d9b8:	680e      	ldr	r6, [r1, #0]
 801d9ba:	bf08      	it	eq
 801d9bc:	694b      	ldreq	r3, [r1, #20]
 801d9be:	600f      	str	r7, [r1, #0]
 801d9c0:	bf18      	it	ne
 801d9c2:	2300      	movne	r3, #0
 801d9c4:	eba6 0807 	sub.w	r8, r6, r7
 801d9c8:	608b      	str	r3, [r1, #8]
 801d9ca:	f1b8 0f00 	cmp.w	r8, #0
 801d9ce:	dd9c      	ble.n	801d90a <__sflush_r+0x1a>
 801d9d0:	6a21      	ldr	r1, [r4, #32]
 801d9d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d9d4:	4643      	mov	r3, r8
 801d9d6:	463a      	mov	r2, r7
 801d9d8:	4628      	mov	r0, r5
 801d9da:	47b0      	blx	r6
 801d9dc:	2800      	cmp	r0, #0
 801d9de:	dc06      	bgt.n	801d9ee <__sflush_r+0xfe>
 801d9e0:	89a3      	ldrh	r3, [r4, #12]
 801d9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d9e6:	81a3      	strh	r3, [r4, #12]
 801d9e8:	f04f 30ff 	mov.w	r0, #4294967295
 801d9ec:	e78e      	b.n	801d90c <__sflush_r+0x1c>
 801d9ee:	4407      	add	r7, r0
 801d9f0:	eba8 0800 	sub.w	r8, r8, r0
 801d9f4:	e7e9      	b.n	801d9ca <__sflush_r+0xda>
 801d9f6:	bf00      	nop
 801d9f8:	20400001 	.word	0x20400001

0801d9fc <_fflush_r>:
 801d9fc:	b538      	push	{r3, r4, r5, lr}
 801d9fe:	690b      	ldr	r3, [r1, #16]
 801da00:	4605      	mov	r5, r0
 801da02:	460c      	mov	r4, r1
 801da04:	b913      	cbnz	r3, 801da0c <_fflush_r+0x10>
 801da06:	2500      	movs	r5, #0
 801da08:	4628      	mov	r0, r5
 801da0a:	bd38      	pop	{r3, r4, r5, pc}
 801da0c:	b118      	cbz	r0, 801da16 <_fflush_r+0x1a>
 801da0e:	6983      	ldr	r3, [r0, #24]
 801da10:	b90b      	cbnz	r3, 801da16 <_fflush_r+0x1a>
 801da12:	f000 f887 	bl	801db24 <__sinit>
 801da16:	4b14      	ldr	r3, [pc, #80]	; (801da68 <_fflush_r+0x6c>)
 801da18:	429c      	cmp	r4, r3
 801da1a:	d11b      	bne.n	801da54 <_fflush_r+0x58>
 801da1c:	686c      	ldr	r4, [r5, #4]
 801da1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da22:	2b00      	cmp	r3, #0
 801da24:	d0ef      	beq.n	801da06 <_fflush_r+0xa>
 801da26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801da28:	07d0      	lsls	r0, r2, #31
 801da2a:	d404      	bmi.n	801da36 <_fflush_r+0x3a>
 801da2c:	0599      	lsls	r1, r3, #22
 801da2e:	d402      	bmi.n	801da36 <_fflush_r+0x3a>
 801da30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801da32:	f000 f915 	bl	801dc60 <__retarget_lock_acquire_recursive>
 801da36:	4628      	mov	r0, r5
 801da38:	4621      	mov	r1, r4
 801da3a:	f7ff ff59 	bl	801d8f0 <__sflush_r>
 801da3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801da40:	07da      	lsls	r2, r3, #31
 801da42:	4605      	mov	r5, r0
 801da44:	d4e0      	bmi.n	801da08 <_fflush_r+0xc>
 801da46:	89a3      	ldrh	r3, [r4, #12]
 801da48:	059b      	lsls	r3, r3, #22
 801da4a:	d4dd      	bmi.n	801da08 <_fflush_r+0xc>
 801da4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801da4e:	f000 f909 	bl	801dc64 <__retarget_lock_release_recursive>
 801da52:	e7d9      	b.n	801da08 <_fflush_r+0xc>
 801da54:	4b05      	ldr	r3, [pc, #20]	; (801da6c <_fflush_r+0x70>)
 801da56:	429c      	cmp	r4, r3
 801da58:	d101      	bne.n	801da5e <_fflush_r+0x62>
 801da5a:	68ac      	ldr	r4, [r5, #8]
 801da5c:	e7df      	b.n	801da1e <_fflush_r+0x22>
 801da5e:	4b04      	ldr	r3, [pc, #16]	; (801da70 <_fflush_r+0x74>)
 801da60:	429c      	cmp	r4, r3
 801da62:	bf08      	it	eq
 801da64:	68ec      	ldreq	r4, [r5, #12]
 801da66:	e7da      	b.n	801da1e <_fflush_r+0x22>
 801da68:	08021dec 	.word	0x08021dec
 801da6c:	08021e0c 	.word	0x08021e0c
 801da70:	08021dcc 	.word	0x08021dcc

0801da74 <std>:
 801da74:	2300      	movs	r3, #0
 801da76:	b510      	push	{r4, lr}
 801da78:	4604      	mov	r4, r0
 801da7a:	e9c0 3300 	strd	r3, r3, [r0]
 801da7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801da82:	6083      	str	r3, [r0, #8]
 801da84:	8181      	strh	r1, [r0, #12]
 801da86:	6643      	str	r3, [r0, #100]	; 0x64
 801da88:	81c2      	strh	r2, [r0, #14]
 801da8a:	6183      	str	r3, [r0, #24]
 801da8c:	4619      	mov	r1, r3
 801da8e:	2208      	movs	r2, #8
 801da90:	305c      	adds	r0, #92	; 0x5c
 801da92:	f7ff f9e1 	bl	801ce58 <memset>
 801da96:	4b05      	ldr	r3, [pc, #20]	; (801daac <std+0x38>)
 801da98:	6263      	str	r3, [r4, #36]	; 0x24
 801da9a:	4b05      	ldr	r3, [pc, #20]	; (801dab0 <std+0x3c>)
 801da9c:	62a3      	str	r3, [r4, #40]	; 0x28
 801da9e:	4b05      	ldr	r3, [pc, #20]	; (801dab4 <std+0x40>)
 801daa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801daa2:	4b05      	ldr	r3, [pc, #20]	; (801dab8 <std+0x44>)
 801daa4:	6224      	str	r4, [r4, #32]
 801daa6:	6323      	str	r3, [r4, #48]	; 0x30
 801daa8:	bd10      	pop	{r4, pc}
 801daaa:	bf00      	nop
 801daac:	0801dd49 	.word	0x0801dd49
 801dab0:	0801dd6b 	.word	0x0801dd6b
 801dab4:	0801dda3 	.word	0x0801dda3
 801dab8:	0801ddc7 	.word	0x0801ddc7

0801dabc <_cleanup_r>:
 801dabc:	4901      	ldr	r1, [pc, #4]	; (801dac4 <_cleanup_r+0x8>)
 801dabe:	f000 b8af 	b.w	801dc20 <_fwalk_reent>
 801dac2:	bf00      	nop
 801dac4:	0801d9fd 	.word	0x0801d9fd

0801dac8 <__sfmoreglue>:
 801dac8:	b570      	push	{r4, r5, r6, lr}
 801daca:	2268      	movs	r2, #104	; 0x68
 801dacc:	1e4d      	subs	r5, r1, #1
 801dace:	4355      	muls	r5, r2
 801dad0:	460e      	mov	r6, r1
 801dad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dad6:	f7ff fa33 	bl	801cf40 <_malloc_r>
 801dada:	4604      	mov	r4, r0
 801dadc:	b140      	cbz	r0, 801daf0 <__sfmoreglue+0x28>
 801dade:	2100      	movs	r1, #0
 801dae0:	e9c0 1600 	strd	r1, r6, [r0]
 801dae4:	300c      	adds	r0, #12
 801dae6:	60a0      	str	r0, [r4, #8]
 801dae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801daec:	f7ff f9b4 	bl	801ce58 <memset>
 801daf0:	4620      	mov	r0, r4
 801daf2:	bd70      	pop	{r4, r5, r6, pc}

0801daf4 <__sfp_lock_acquire>:
 801daf4:	4801      	ldr	r0, [pc, #4]	; (801dafc <__sfp_lock_acquire+0x8>)
 801daf6:	f000 b8b3 	b.w	801dc60 <__retarget_lock_acquire_recursive>
 801dafa:	bf00      	nop
 801dafc:	240c3fe2 	.word	0x240c3fe2

0801db00 <__sfp_lock_release>:
 801db00:	4801      	ldr	r0, [pc, #4]	; (801db08 <__sfp_lock_release+0x8>)
 801db02:	f000 b8af 	b.w	801dc64 <__retarget_lock_release_recursive>
 801db06:	bf00      	nop
 801db08:	240c3fe2 	.word	0x240c3fe2

0801db0c <__sinit_lock_acquire>:
 801db0c:	4801      	ldr	r0, [pc, #4]	; (801db14 <__sinit_lock_acquire+0x8>)
 801db0e:	f000 b8a7 	b.w	801dc60 <__retarget_lock_acquire_recursive>
 801db12:	bf00      	nop
 801db14:	240c3fe3 	.word	0x240c3fe3

0801db18 <__sinit_lock_release>:
 801db18:	4801      	ldr	r0, [pc, #4]	; (801db20 <__sinit_lock_release+0x8>)
 801db1a:	f000 b8a3 	b.w	801dc64 <__retarget_lock_release_recursive>
 801db1e:	bf00      	nop
 801db20:	240c3fe3 	.word	0x240c3fe3

0801db24 <__sinit>:
 801db24:	b510      	push	{r4, lr}
 801db26:	4604      	mov	r4, r0
 801db28:	f7ff fff0 	bl	801db0c <__sinit_lock_acquire>
 801db2c:	69a3      	ldr	r3, [r4, #24]
 801db2e:	b11b      	cbz	r3, 801db38 <__sinit+0x14>
 801db30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db34:	f7ff bff0 	b.w	801db18 <__sinit_lock_release>
 801db38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801db3c:	6523      	str	r3, [r4, #80]	; 0x50
 801db3e:	4b13      	ldr	r3, [pc, #76]	; (801db8c <__sinit+0x68>)
 801db40:	4a13      	ldr	r2, [pc, #76]	; (801db90 <__sinit+0x6c>)
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	62a2      	str	r2, [r4, #40]	; 0x28
 801db46:	42a3      	cmp	r3, r4
 801db48:	bf04      	itt	eq
 801db4a:	2301      	moveq	r3, #1
 801db4c:	61a3      	streq	r3, [r4, #24]
 801db4e:	4620      	mov	r0, r4
 801db50:	f000 f820 	bl	801db94 <__sfp>
 801db54:	6060      	str	r0, [r4, #4]
 801db56:	4620      	mov	r0, r4
 801db58:	f000 f81c 	bl	801db94 <__sfp>
 801db5c:	60a0      	str	r0, [r4, #8]
 801db5e:	4620      	mov	r0, r4
 801db60:	f000 f818 	bl	801db94 <__sfp>
 801db64:	2200      	movs	r2, #0
 801db66:	60e0      	str	r0, [r4, #12]
 801db68:	2104      	movs	r1, #4
 801db6a:	6860      	ldr	r0, [r4, #4]
 801db6c:	f7ff ff82 	bl	801da74 <std>
 801db70:	68a0      	ldr	r0, [r4, #8]
 801db72:	2201      	movs	r2, #1
 801db74:	2109      	movs	r1, #9
 801db76:	f7ff ff7d 	bl	801da74 <std>
 801db7a:	68e0      	ldr	r0, [r4, #12]
 801db7c:	2202      	movs	r2, #2
 801db7e:	2112      	movs	r1, #18
 801db80:	f7ff ff78 	bl	801da74 <std>
 801db84:	2301      	movs	r3, #1
 801db86:	61a3      	str	r3, [r4, #24]
 801db88:	e7d2      	b.n	801db30 <__sinit+0xc>
 801db8a:	bf00      	nop
 801db8c:	08021d90 	.word	0x08021d90
 801db90:	0801dabd 	.word	0x0801dabd

0801db94 <__sfp>:
 801db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db96:	4607      	mov	r7, r0
 801db98:	f7ff ffac 	bl	801daf4 <__sfp_lock_acquire>
 801db9c:	4b1e      	ldr	r3, [pc, #120]	; (801dc18 <__sfp+0x84>)
 801db9e:	681e      	ldr	r6, [r3, #0]
 801dba0:	69b3      	ldr	r3, [r6, #24]
 801dba2:	b913      	cbnz	r3, 801dbaa <__sfp+0x16>
 801dba4:	4630      	mov	r0, r6
 801dba6:	f7ff ffbd 	bl	801db24 <__sinit>
 801dbaa:	3648      	adds	r6, #72	; 0x48
 801dbac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dbb0:	3b01      	subs	r3, #1
 801dbb2:	d503      	bpl.n	801dbbc <__sfp+0x28>
 801dbb4:	6833      	ldr	r3, [r6, #0]
 801dbb6:	b30b      	cbz	r3, 801dbfc <__sfp+0x68>
 801dbb8:	6836      	ldr	r6, [r6, #0]
 801dbba:	e7f7      	b.n	801dbac <__sfp+0x18>
 801dbbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dbc0:	b9d5      	cbnz	r5, 801dbf8 <__sfp+0x64>
 801dbc2:	4b16      	ldr	r3, [pc, #88]	; (801dc1c <__sfp+0x88>)
 801dbc4:	60e3      	str	r3, [r4, #12]
 801dbc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dbca:	6665      	str	r5, [r4, #100]	; 0x64
 801dbcc:	f000 f847 	bl	801dc5e <__retarget_lock_init_recursive>
 801dbd0:	f7ff ff96 	bl	801db00 <__sfp_lock_release>
 801dbd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dbd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dbdc:	6025      	str	r5, [r4, #0]
 801dbde:	61a5      	str	r5, [r4, #24]
 801dbe0:	2208      	movs	r2, #8
 801dbe2:	4629      	mov	r1, r5
 801dbe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dbe8:	f7ff f936 	bl	801ce58 <memset>
 801dbec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dbf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbf8:	3468      	adds	r4, #104	; 0x68
 801dbfa:	e7d9      	b.n	801dbb0 <__sfp+0x1c>
 801dbfc:	2104      	movs	r1, #4
 801dbfe:	4638      	mov	r0, r7
 801dc00:	f7ff ff62 	bl	801dac8 <__sfmoreglue>
 801dc04:	4604      	mov	r4, r0
 801dc06:	6030      	str	r0, [r6, #0]
 801dc08:	2800      	cmp	r0, #0
 801dc0a:	d1d5      	bne.n	801dbb8 <__sfp+0x24>
 801dc0c:	f7ff ff78 	bl	801db00 <__sfp_lock_release>
 801dc10:	230c      	movs	r3, #12
 801dc12:	603b      	str	r3, [r7, #0]
 801dc14:	e7ee      	b.n	801dbf4 <__sfp+0x60>
 801dc16:	bf00      	nop
 801dc18:	08021d90 	.word	0x08021d90
 801dc1c:	ffff0001 	.word	0xffff0001

0801dc20 <_fwalk_reent>:
 801dc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc24:	4606      	mov	r6, r0
 801dc26:	4688      	mov	r8, r1
 801dc28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dc2c:	2700      	movs	r7, #0
 801dc2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dc32:	f1b9 0901 	subs.w	r9, r9, #1
 801dc36:	d505      	bpl.n	801dc44 <_fwalk_reent+0x24>
 801dc38:	6824      	ldr	r4, [r4, #0]
 801dc3a:	2c00      	cmp	r4, #0
 801dc3c:	d1f7      	bne.n	801dc2e <_fwalk_reent+0xe>
 801dc3e:	4638      	mov	r0, r7
 801dc40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc44:	89ab      	ldrh	r3, [r5, #12]
 801dc46:	2b01      	cmp	r3, #1
 801dc48:	d907      	bls.n	801dc5a <_fwalk_reent+0x3a>
 801dc4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dc4e:	3301      	adds	r3, #1
 801dc50:	d003      	beq.n	801dc5a <_fwalk_reent+0x3a>
 801dc52:	4629      	mov	r1, r5
 801dc54:	4630      	mov	r0, r6
 801dc56:	47c0      	blx	r8
 801dc58:	4307      	orrs	r7, r0
 801dc5a:	3568      	adds	r5, #104	; 0x68
 801dc5c:	e7e9      	b.n	801dc32 <_fwalk_reent+0x12>

0801dc5e <__retarget_lock_init_recursive>:
 801dc5e:	4770      	bx	lr

0801dc60 <__retarget_lock_acquire_recursive>:
 801dc60:	4770      	bx	lr

0801dc62 <__retarget_lock_release>:
 801dc62:	4770      	bx	lr

0801dc64 <__retarget_lock_release_recursive>:
 801dc64:	4770      	bx	lr

0801dc66 <__swhatbuf_r>:
 801dc66:	b570      	push	{r4, r5, r6, lr}
 801dc68:	460e      	mov	r6, r1
 801dc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc6e:	2900      	cmp	r1, #0
 801dc70:	b096      	sub	sp, #88	; 0x58
 801dc72:	4614      	mov	r4, r2
 801dc74:	461d      	mov	r5, r3
 801dc76:	da08      	bge.n	801dc8a <__swhatbuf_r+0x24>
 801dc78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	602a      	str	r2, [r5, #0]
 801dc80:	061a      	lsls	r2, r3, #24
 801dc82:	d410      	bmi.n	801dca6 <__swhatbuf_r+0x40>
 801dc84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dc88:	e00e      	b.n	801dca8 <__swhatbuf_r+0x42>
 801dc8a:	466a      	mov	r2, sp
 801dc8c:	f000 f8c2 	bl	801de14 <_fstat_r>
 801dc90:	2800      	cmp	r0, #0
 801dc92:	dbf1      	blt.n	801dc78 <__swhatbuf_r+0x12>
 801dc94:	9a01      	ldr	r2, [sp, #4]
 801dc96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dc9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dc9e:	425a      	negs	r2, r3
 801dca0:	415a      	adcs	r2, r3
 801dca2:	602a      	str	r2, [r5, #0]
 801dca4:	e7ee      	b.n	801dc84 <__swhatbuf_r+0x1e>
 801dca6:	2340      	movs	r3, #64	; 0x40
 801dca8:	2000      	movs	r0, #0
 801dcaa:	6023      	str	r3, [r4, #0]
 801dcac:	b016      	add	sp, #88	; 0x58
 801dcae:	bd70      	pop	{r4, r5, r6, pc}

0801dcb0 <__smakebuf_r>:
 801dcb0:	898b      	ldrh	r3, [r1, #12]
 801dcb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dcb4:	079d      	lsls	r5, r3, #30
 801dcb6:	4606      	mov	r6, r0
 801dcb8:	460c      	mov	r4, r1
 801dcba:	d507      	bpl.n	801dccc <__smakebuf_r+0x1c>
 801dcbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dcc0:	6023      	str	r3, [r4, #0]
 801dcc2:	6123      	str	r3, [r4, #16]
 801dcc4:	2301      	movs	r3, #1
 801dcc6:	6163      	str	r3, [r4, #20]
 801dcc8:	b002      	add	sp, #8
 801dcca:	bd70      	pop	{r4, r5, r6, pc}
 801dccc:	ab01      	add	r3, sp, #4
 801dcce:	466a      	mov	r2, sp
 801dcd0:	f7ff ffc9 	bl	801dc66 <__swhatbuf_r>
 801dcd4:	9900      	ldr	r1, [sp, #0]
 801dcd6:	4605      	mov	r5, r0
 801dcd8:	4630      	mov	r0, r6
 801dcda:	f7ff f931 	bl	801cf40 <_malloc_r>
 801dcde:	b948      	cbnz	r0, 801dcf4 <__smakebuf_r+0x44>
 801dce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dce4:	059a      	lsls	r2, r3, #22
 801dce6:	d4ef      	bmi.n	801dcc8 <__smakebuf_r+0x18>
 801dce8:	f023 0303 	bic.w	r3, r3, #3
 801dcec:	f043 0302 	orr.w	r3, r3, #2
 801dcf0:	81a3      	strh	r3, [r4, #12]
 801dcf2:	e7e3      	b.n	801dcbc <__smakebuf_r+0xc>
 801dcf4:	4b0d      	ldr	r3, [pc, #52]	; (801dd2c <__smakebuf_r+0x7c>)
 801dcf6:	62b3      	str	r3, [r6, #40]	; 0x28
 801dcf8:	89a3      	ldrh	r3, [r4, #12]
 801dcfa:	6020      	str	r0, [r4, #0]
 801dcfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd00:	81a3      	strh	r3, [r4, #12]
 801dd02:	9b00      	ldr	r3, [sp, #0]
 801dd04:	6163      	str	r3, [r4, #20]
 801dd06:	9b01      	ldr	r3, [sp, #4]
 801dd08:	6120      	str	r0, [r4, #16]
 801dd0a:	b15b      	cbz	r3, 801dd24 <__smakebuf_r+0x74>
 801dd0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd10:	4630      	mov	r0, r6
 801dd12:	f000 f891 	bl	801de38 <_isatty_r>
 801dd16:	b128      	cbz	r0, 801dd24 <__smakebuf_r+0x74>
 801dd18:	89a3      	ldrh	r3, [r4, #12]
 801dd1a:	f023 0303 	bic.w	r3, r3, #3
 801dd1e:	f043 0301 	orr.w	r3, r3, #1
 801dd22:	81a3      	strh	r3, [r4, #12]
 801dd24:	89a0      	ldrh	r0, [r4, #12]
 801dd26:	4305      	orrs	r5, r0
 801dd28:	81a5      	strh	r5, [r4, #12]
 801dd2a:	e7cd      	b.n	801dcc8 <__smakebuf_r+0x18>
 801dd2c:	0801dabd 	.word	0x0801dabd

0801dd30 <__malloc_lock>:
 801dd30:	4801      	ldr	r0, [pc, #4]	; (801dd38 <__malloc_lock+0x8>)
 801dd32:	f7ff bf95 	b.w	801dc60 <__retarget_lock_acquire_recursive>
 801dd36:	bf00      	nop
 801dd38:	240c3fe1 	.word	0x240c3fe1

0801dd3c <__malloc_unlock>:
 801dd3c:	4801      	ldr	r0, [pc, #4]	; (801dd44 <__malloc_unlock+0x8>)
 801dd3e:	f7ff bf91 	b.w	801dc64 <__retarget_lock_release_recursive>
 801dd42:	bf00      	nop
 801dd44:	240c3fe1 	.word	0x240c3fe1

0801dd48 <__sread>:
 801dd48:	b510      	push	{r4, lr}
 801dd4a:	460c      	mov	r4, r1
 801dd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd50:	f000 f894 	bl	801de7c <_read_r>
 801dd54:	2800      	cmp	r0, #0
 801dd56:	bfab      	itete	ge
 801dd58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dd5a:	89a3      	ldrhlt	r3, [r4, #12]
 801dd5c:	181b      	addge	r3, r3, r0
 801dd5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dd62:	bfac      	ite	ge
 801dd64:	6563      	strge	r3, [r4, #84]	; 0x54
 801dd66:	81a3      	strhlt	r3, [r4, #12]
 801dd68:	bd10      	pop	{r4, pc}

0801dd6a <__swrite>:
 801dd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd6e:	461f      	mov	r7, r3
 801dd70:	898b      	ldrh	r3, [r1, #12]
 801dd72:	05db      	lsls	r3, r3, #23
 801dd74:	4605      	mov	r5, r0
 801dd76:	460c      	mov	r4, r1
 801dd78:	4616      	mov	r6, r2
 801dd7a:	d505      	bpl.n	801dd88 <__swrite+0x1e>
 801dd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd80:	2302      	movs	r3, #2
 801dd82:	2200      	movs	r2, #0
 801dd84:	f000 f868 	bl	801de58 <_lseek_r>
 801dd88:	89a3      	ldrh	r3, [r4, #12]
 801dd8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dd92:	81a3      	strh	r3, [r4, #12]
 801dd94:	4632      	mov	r2, r6
 801dd96:	463b      	mov	r3, r7
 801dd98:	4628      	mov	r0, r5
 801dd9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dd9e:	f000 b817 	b.w	801ddd0 <_write_r>

0801dda2 <__sseek>:
 801dda2:	b510      	push	{r4, lr}
 801dda4:	460c      	mov	r4, r1
 801dda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddaa:	f000 f855 	bl	801de58 <_lseek_r>
 801ddae:	1c43      	adds	r3, r0, #1
 801ddb0:	89a3      	ldrh	r3, [r4, #12]
 801ddb2:	bf15      	itete	ne
 801ddb4:	6560      	strne	r0, [r4, #84]	; 0x54
 801ddb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ddba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ddbe:	81a3      	strheq	r3, [r4, #12]
 801ddc0:	bf18      	it	ne
 801ddc2:	81a3      	strhne	r3, [r4, #12]
 801ddc4:	bd10      	pop	{r4, pc}

0801ddc6 <__sclose>:
 801ddc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddca:	f000 b813 	b.w	801ddf4 <_close_r>
	...

0801ddd0 <_write_r>:
 801ddd0:	b538      	push	{r3, r4, r5, lr}
 801ddd2:	4d07      	ldr	r5, [pc, #28]	; (801ddf0 <_write_r+0x20>)
 801ddd4:	4604      	mov	r4, r0
 801ddd6:	4608      	mov	r0, r1
 801ddd8:	4611      	mov	r1, r2
 801ddda:	2200      	movs	r2, #0
 801dddc:	602a      	str	r2, [r5, #0]
 801ddde:	461a      	mov	r2, r3
 801dde0:	f7e3 fc43 	bl	800166a <_write>
 801dde4:	1c43      	adds	r3, r0, #1
 801dde6:	d102      	bne.n	801ddee <_write_r+0x1e>
 801dde8:	682b      	ldr	r3, [r5, #0]
 801ddea:	b103      	cbz	r3, 801ddee <_write_r+0x1e>
 801ddec:	6023      	str	r3, [r4, #0]
 801ddee:	bd38      	pop	{r3, r4, r5, pc}
 801ddf0:	240c3fe4 	.word	0x240c3fe4

0801ddf4 <_close_r>:
 801ddf4:	b538      	push	{r3, r4, r5, lr}
 801ddf6:	4d06      	ldr	r5, [pc, #24]	; (801de10 <_close_r+0x1c>)
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	4604      	mov	r4, r0
 801ddfc:	4608      	mov	r0, r1
 801ddfe:	602b      	str	r3, [r5, #0]
 801de00:	f7e3 fc4f 	bl	80016a2 <_close>
 801de04:	1c43      	adds	r3, r0, #1
 801de06:	d102      	bne.n	801de0e <_close_r+0x1a>
 801de08:	682b      	ldr	r3, [r5, #0]
 801de0a:	b103      	cbz	r3, 801de0e <_close_r+0x1a>
 801de0c:	6023      	str	r3, [r4, #0]
 801de0e:	bd38      	pop	{r3, r4, r5, pc}
 801de10:	240c3fe4 	.word	0x240c3fe4

0801de14 <_fstat_r>:
 801de14:	b538      	push	{r3, r4, r5, lr}
 801de16:	4d07      	ldr	r5, [pc, #28]	; (801de34 <_fstat_r+0x20>)
 801de18:	2300      	movs	r3, #0
 801de1a:	4604      	mov	r4, r0
 801de1c:	4608      	mov	r0, r1
 801de1e:	4611      	mov	r1, r2
 801de20:	602b      	str	r3, [r5, #0]
 801de22:	f7e3 fc4a 	bl	80016ba <_fstat>
 801de26:	1c43      	adds	r3, r0, #1
 801de28:	d102      	bne.n	801de30 <_fstat_r+0x1c>
 801de2a:	682b      	ldr	r3, [r5, #0]
 801de2c:	b103      	cbz	r3, 801de30 <_fstat_r+0x1c>
 801de2e:	6023      	str	r3, [r4, #0]
 801de30:	bd38      	pop	{r3, r4, r5, pc}
 801de32:	bf00      	nop
 801de34:	240c3fe4 	.word	0x240c3fe4

0801de38 <_isatty_r>:
 801de38:	b538      	push	{r3, r4, r5, lr}
 801de3a:	4d06      	ldr	r5, [pc, #24]	; (801de54 <_isatty_r+0x1c>)
 801de3c:	2300      	movs	r3, #0
 801de3e:	4604      	mov	r4, r0
 801de40:	4608      	mov	r0, r1
 801de42:	602b      	str	r3, [r5, #0]
 801de44:	f7e3 fc49 	bl	80016da <_isatty>
 801de48:	1c43      	adds	r3, r0, #1
 801de4a:	d102      	bne.n	801de52 <_isatty_r+0x1a>
 801de4c:	682b      	ldr	r3, [r5, #0]
 801de4e:	b103      	cbz	r3, 801de52 <_isatty_r+0x1a>
 801de50:	6023      	str	r3, [r4, #0]
 801de52:	bd38      	pop	{r3, r4, r5, pc}
 801de54:	240c3fe4 	.word	0x240c3fe4

0801de58 <_lseek_r>:
 801de58:	b538      	push	{r3, r4, r5, lr}
 801de5a:	4d07      	ldr	r5, [pc, #28]	; (801de78 <_lseek_r+0x20>)
 801de5c:	4604      	mov	r4, r0
 801de5e:	4608      	mov	r0, r1
 801de60:	4611      	mov	r1, r2
 801de62:	2200      	movs	r2, #0
 801de64:	602a      	str	r2, [r5, #0]
 801de66:	461a      	mov	r2, r3
 801de68:	f7e3 fc42 	bl	80016f0 <_lseek>
 801de6c:	1c43      	adds	r3, r0, #1
 801de6e:	d102      	bne.n	801de76 <_lseek_r+0x1e>
 801de70:	682b      	ldr	r3, [r5, #0]
 801de72:	b103      	cbz	r3, 801de76 <_lseek_r+0x1e>
 801de74:	6023      	str	r3, [r4, #0]
 801de76:	bd38      	pop	{r3, r4, r5, pc}
 801de78:	240c3fe4 	.word	0x240c3fe4

0801de7c <_read_r>:
 801de7c:	b538      	push	{r3, r4, r5, lr}
 801de7e:	4d07      	ldr	r5, [pc, #28]	; (801de9c <_read_r+0x20>)
 801de80:	4604      	mov	r4, r0
 801de82:	4608      	mov	r0, r1
 801de84:	4611      	mov	r1, r2
 801de86:	2200      	movs	r2, #0
 801de88:	602a      	str	r2, [r5, #0]
 801de8a:	461a      	mov	r2, r3
 801de8c:	f7e3 fbd0 	bl	8001630 <_read>
 801de90:	1c43      	adds	r3, r0, #1
 801de92:	d102      	bne.n	801de9a <_read_r+0x1e>
 801de94:	682b      	ldr	r3, [r5, #0]
 801de96:	b103      	cbz	r3, 801de9a <_read_r+0x1e>
 801de98:	6023      	str	r3, [r4, #0]
 801de9a:	bd38      	pop	{r3, r4, r5, pc}
 801de9c:	240c3fe4 	.word	0x240c3fe4

0801dea0 <_init>:
 801dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dea2:	bf00      	nop
 801dea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dea6:	bc08      	pop	{r3}
 801dea8:	469e      	mov	lr, r3
 801deaa:	4770      	bx	lr

0801deac <_fini>:
 801deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deae:	bf00      	nop
 801deb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801deb2:	bc08      	pop	{r3}
 801deb4:	469e      	mov	lr, r3
 801deb6:	4770      	bx	lr
